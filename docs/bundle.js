(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var i=e.g.document;if(!t&&i&&(i.currentScript&&"SCRIPT"===i.currentScript.tagName.toUpperCase()&&(t=i.currentScript.src),!t)){var o=i.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&(!t||!/^http(s?):/.test(t));)t=o[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();class t{constructor(){this.keys={up:!1,down:!1,left:!1,right:!1}}setKey(e,t){this.keys.hasOwnProperty(e)&&(this.keys[e]=t)}getInputDirection(){let e=0,t=0;return this.keys.up&&(t-=1),this.keys.down&&(t+=1),this.keys.left&&(e-=1),this.keys.right&&(e+=1),{x:e,y:t}}}const i={LOADING:"LOADING",MENU:"MENU",PLAYING:"PLAYING",ASKING_QUESTION:"ASKING_QUESTION",SELECTING_FLOOR:"SELECTING_FLOOR",TRANSITIONING:"TRANSITIONING",GAME_OVER:"GAME_OVER"},o=[{question:"Który język programowania jest znany ze swojej wszechstronności i używany zarówno w backendzie (Node.js), jak i frontendzie?",options:["Python","Java","JavaScript","C#"],correctAnswer:2},{question:"Co oznacza skrót HTML?",options:["HyperText Markup Language","High Transfer Machine Language","Hyperlink and Text Management Language","Home Tool Markup Language"],correctAnswer:0},{question:"Która struktura danych działa na zasadzie LIFO (Last-In, First-Out)?",options:["Kolejka (Queue)","Stos (Stack)","Lista (List)","Drzewo (Tree)"],correctAnswer:1},{question:"Jak nazywa się proces znajdowania i naprawiania błędów w kodzie?",options:["Kompilacja","Testowanie","Debugowanie","Refaktoryzacja"],correctAnswer:2},{question:"Który paradygmat programowania opiera się na koncepcji 'obiektów', które mogą zawierać dane i kod?",options:["Programowanie funkcyjne","Programowanie proceduralne","Programowanie obiektowe","Programowanie logiczne"],correctAnswer:2},{question:"Co oznacza CSS?",options:["Cascading Style Sheets","Computer Style Syntax","Creative Styling System","Colorful Style Scripts"],correctAnswer:0},{question:"Który operator w JavaScript służy do ścisłego porównania (wartość i typ)?",options:["==","=","===","!="],correctAnswer:2},{question:"Jak nazywa się popularny system kontroli wersji używany przez programistów?",options:["Subversion (SVN)","Git","Mercurial","CVS"],correctAnswer:1},{question:"Który typ pętli w większości języków programowania jest najbardziej odpowiedni do iteracji po elementach tablicy, gdy nie znamy ich liczby?",options:["for","while","do...while","foreach (lub for...of)"],correctAnswer:3},{question:"Co to jest API?",options:["Advanced Programming Interface","Application Programming Interface","Automated Program Interaction","Algorithmic Processing Input"],correctAnswer:1},{question:"Co to jest PLC i do czego najczęściej służy w automatyce?",options:["Programowalny Logic Controller, do sterowania procesami przemysłowymi","Personal Learning Computer, do nauki programowania","Power Line Communication, do przesyłu danych przez sieć elektryczną","Project Lifecycle Cost, do zarządzania kosztami projektu"],correctAnswer:0},{question:"Za co odpowiada przysłona (apertura) w aparacie fotograficznym?",options:["Kontrolę czasu naświetlania","Regulację głębi ostrości i ilości wpadającego światła","Ustawienie balansu bieli","Stabilizację obrazu"],correctAnswer:1},{question:"Który element komputera jest odpowiedzialny za tymczasowe przechowywanie danych używanych przez procesor?",options:["Dysk twardy (HDD/SSD)","Karta graficzna (GPU)","Pamięć RAM","Płyta główna"],correctAnswer:2},{question:"W jakim języku programowania najczęściej pisane są skrypty po stronie serwera (backend)?",options:["HTML","CSS","SQL","PHP, Python lub Node.js (JavaScript)"],correctAnswer:3},{question:"Jaki typ sygnału charakteryzuje się płynną zmianą wartości w czasie, w przeciwieństwie do sygnału cyfrowego?",options:["Binarny","Analogowy","Zero-jedynkowy","Impulsowy"],correctAnswer:1},{question:"Który parametr ustawia czułość matrycy aparatu na światło i wpływa na poziom szumów na zdjęciu?",options:["Czas naświetlania","Przysłona","ISO","Ogniskowa"],correctAnswer:2},{question:"Co to jest adres IP w sieci komputerowej?",options:["Unikalny identyfikator urządzenia w sieci","Nazwa użytkownika do logowania","Adres strony internetowej","Typ kabla sieciowego"],correctAnswer:0},{question:"Czym różni się instrukcja warunkowa `if` od pętli `while` w programowaniu?",options:["`if` powtarza blok kodu, `while` sprawdza warunek jednokrotnie","`if` sprawdza warunek jednokrotnie, `while` powtarza blok kodu dopóki warunek jest prawdziwy","Nie ma między nimi różnicy","`if` służy tylko do deklarowania zmiennych, `while` do operacji matematycznych"],correctAnswer:1},{question:"Do czego najczęściej służy czujnik ciśnienia w systemie automatyki?",options:["Pomiaru temperatury","Pomiaru odległości","Pomiaru siły","Pomiaru ciśnienia"],correctAnswer:3},{question:"Co oznacza zasada trójpodziału w kompozycji fotograficznej?",options:["Dzielenie obrazu na 3 równe części pionowo i poziomo i umieszczanie kluczowych elementów na liniach lub ich przecięciach","Używanie tylko 3 głównych kolorów w kadrze","Robienie zawsze 3 zdjęć tej samej sceny","Balansowanie 3 głównych obiektów w kadrze"],correctAnswer:0},{question:"Jaka jest podstawowa rola systemu operacyjnego?",options:["Tworzenie grafiki komputerowej","Zarządzanie zasobami sprzętowymi i programowymi komputera","Pisanie kodu programów","Przeglądanie Internetu"],correctAnswer:1},{question:"Jakiego typu danych najczęściej użyjesz do przechowywania wieku osoby (liczba całkowita)?",options:["String (ciąg znaków)","Boolean (wartość logiczna)","Float (liczba zmiennoprzecinkowa)","Integer (liczba całkowita)"],correctAnswer:3},{question:"Element wykonawczy (aktuator) w systemie automatyki to urządzenie, które...",options:["Odczytuje dane z czujników","Wykonuje komendy ze sterownika, aby wykonać fizyczne działanie (np. ruch)","Przechowuje dane historyczne","Służy do komunikacji z operatorem"],correctAnswer:1},{question:"Który format pliku graficznego jest bezstratny i często używany w profesjonalnej edycji, zachowując maksymalną jakość kosztem rozmiaru?",options:["JPEG","GIF","PNG","RAW"],correctAnswer:3},{question:"Co chroni sieć komputerową przed nieautoryzowanym dostępem z zewnątrz?",options:["Router","Switch","Modem","Firewall (zapora sieciowa)"],correctAnswer:3},{question:"Co to jest IDE (Integrated Development Environment) w kontekście programowania?",options:["System operacyjny","Narzędzie do zarządzania bazą danych","Zintegrowane środowisko programistyczne (edytor kodu, kompilator, debugger w jednym)","Protokół sieciowy"],correctAnswer:2},{question:"Przykładem czujnika zbliżeniowego, wykrywającego obecność obiektu bez fizycznego kontaktu, może być:",options:["Termometr","Fotokomórka","Manometr (czujnik ciśnienia)","Akcelerometr"],correctAnswer:1},{question:"Do czego służy balans bieli (white balance) w aparacie fotograficznym?",options:["Do regulacji ostrości","Do korekcji kolorów, aby biały wyglądał na biały niezależnie od źródła światła","Do ustawiania czasu naświetlania","Do dodawania efektów specjalnych"],correctAnswer:1},{question:"Który protokół jest używany do bezpiecznego (szyfrowanego) przesyłania stron internetowych?",options:["HTTP","FTP","SMTP","HTTPS"],correctAnswer:3},{question:"Co to jest zmienna w programowaniu?",options:["Funkcja wykonująca określone zadanie","Typ pętli","Nazwane miejsce w pamięci komputera służące do przechowywania danych","Polecenie wyświetlające tekst na ekranie"],correctAnswer:2}];class a{static scoreElement=null;static targetElement=null;static controlsContainer=null;static questionOverlay=null;static questionTextElement=null;static answerButtonsContainer=null;static floorSelectionPanel=null;static floorButtonsContainer=null;static flashMessageContainer=null;static loadingOverlayElement=null;static gameOverScreenElement=null;static gameOverTitleElement=null;static creatorNamesListElement=null;static classInfoElement=null;static returnToMenuButtonElement=null;static gameplayManagerInstance=null;static flashMessageTimeouts={};static timerElement=null;static leaderboardElement=null;static gameStartTime=0;static leaderboardData=[];static setGameplayManager(e){e?(this.gameplayManagerInstance=e,console.log("[UIManager] GameplayManager instance registered successfully with UIManager.")):console.error("[UIManager] Attempted to set GameplayManager instance to null or undefined!")}static initializeUI(e){console.log("[UIManager] Initializing base UI elements (controls, panels)..."),e||console.error("[UIManager] InputManager is required for initializeUI to create controls."),this.createControls(e),this.createQuestionUI(),this.createFloorSelectionUI(),this.ensureFlashMessageContainer(),this.createGameOverScreen(),this.initializeTimer(),this.updateLeaderboard(),this.gameplayManagerInstance||console.warn("[UIManager] WARNING: GameplayManager instance is NOT SET at the end of initializeUI. Ensure Game.js calls UIManager.setGameplayManager() *before* UIManager.initializeUI()."),console.log("[UIManager] Base UI element initialization complete.")}static createControls(e){this.controlsContainer=document.getElementById("controls-container"),this.controlsContainer||(this.controlsContainer=document.createElement("div"),this.controlsContainer.id="controls-container",this.controlsContainer.classList.add("controls-container"),document.body.appendChild(this.controlsContainer)),this.controlsContainer.innerHTML="",[{direction:"up",icon:"↑",gridArea:"up"},{direction:"left",icon:"←",gridArea:"left"},{direction:"right",icon:"→",gridArea:"right"},{direction:"down",icon:"↓",gridArea:"down"}].forEach((({direction:t,icon:i,gridArea:o})=>{const a=document.createElement("button");if(a.className=`control-btn ${t}`,a.textContent=i,a.style.gridArea=o,a.dataset.direction=t,e){const i=i=>{e.setKey(t,!0),a.classList.add("active"),i.preventDefault()},o=i=>{e.keys[t]&&e.setKey(t,!1),a.classList.remove("active"),i.preventDefault()};a.addEventListener("touchstart",i,{passive:!1}),a.addEventListener("touchend",o,{passive:!1}),a.addEventListener("touchcancel",o,{passive:!1}),a.addEventListener("mousedown",i),a.addEventListener("mouseup",o),a.addEventListener("mouseleave",o)}this.controlsContainer.appendChild(a)}));const t=document.getElementById("score-display");if(t)this.scoreElement=t.querySelector("#score-value"),this.targetElement=t.querySelector("#score-target"),this.scoreElement&&(this.scoreElement.textContent="0"),this.targetElement&&(this.targetElement.textContent="?");else{const e=document.createElement("div");e.id="score-display",e.classList.add("score-display"),e.innerHTML='Books: <span id="score-value">0</span> / <span id="score-target">?</span>',document.body.appendChild(e),this.scoreElement=e.querySelector("#score-value"),this.targetElement=e.querySelector("#score-target")}}static createQuestionUI(){this.questionOverlay=document.getElementById("question-overlay"),this.questionOverlay||(this.questionOverlay=document.createElement("div"),this.questionOverlay.id="question-overlay",this.questionOverlay.classList.add("ui-panel"),this.questionOverlay.innerHTML='\n        <div id="blackboard-content">\n          <h2>Question</h2>\n          <div id="question-box">\n            <p id="question-text"></p>\n            <div id="answer-buttons"></div>\n          </div>\n        </div>',document.body.appendChild(this.questionOverlay)),this.questionTextElement=this.questionOverlay.querySelector("#question-text"),this.answerButtonsContainer=this.questionOverlay.querySelector("#answer-buttons"),this.questionTextElement&&this.answerButtonsContainer||console.error("[UIManager] Failed to find/create child elements of question UI!")}static createFloorSelectionUI(){this.floorSelectionPanel=document.getElementById("floor-selection-ui"),this.floorSelectionPanel||(this.floorSelectionPanel=document.createElement("div"),this.floorSelectionPanel.id="floor-selection-ui",this.floorSelectionPanel.classList.add("ui-panel"),this.floorSelectionPanel.innerHTML='\n        <h2>Select Floor</h2>\n        <div id="floor-buttons-container"></div>',document.body.appendChild(this.floorSelectionPanel)),this.floorButtonsContainer=this.floorSelectionPanel.querySelector("#floor-buttons-container"),this.floorButtonsContainer||console.error("[UIManager] Failed to find/create floor buttons container!")}static ensureFlashMessageContainer(){return this.flashMessageContainer=document.getElementById("flash-message-container"),this.flashMessageContainer||(this.flashMessageContainer=document.createElement("div"),this.flashMessageContainer.id="flash-message-container",document.body.appendChild(this.flashMessageContainer)),this.flashMessageContainer}static flashMessage(e,t="info",i=3e3){const o=this.ensureFlashMessageContainer();if(!o)return void console.error("[UIManager] Flash message container not found or creatable.");const a=document.createElement("div");a.textContent=e,a.className="flash-message",a.classList.add(`flash-${t}`);const s=`flash-${Date.now()}-${Math.random().toString(36).substr(2,5)}`;a.id=s,o.appendChild(a),requestAnimationFrame((()=>{a.classList.add("visible")})),clearTimeout(this.flashMessageTimeouts[s]),this.flashMessageTimeouts[s]=setTimeout((()=>{a.classList.remove("visible");const e=e=>{"opacity"!==e.propertyName&&"transform"!==e.propertyName||(a.parentNode&&a.parentNode.removeChild(a),delete this.flashMessageTimeouts[s])};a.addEventListener("transitionend",e,{once:!0}),setTimeout((()=>{a.parentNode&&(a.removeEventListener("transitionend",e),a.parentNode.removeChild(a)),delete this.flashMessageTimeouts[s]}),500)}),i)}static getLoadingOverlay(){if(!this.loadingOverlayElement&&(this.loadingOverlayElement=document.getElementById("loading-overlay"),!this.loadingOverlayElement)){this.loadingOverlayElement=document.createElement("div"),this.loadingOverlayElement.id="loading-overlay",this.loadingOverlayElement.className="loading-overlay";const e=document.createElement("p");e.textContent="Loading...",this.loadingOverlayElement.appendChild(e),document.body.appendChild(this.loadingOverlayElement),console.log("[UIManager] Loading overlay created and appended to body.")}return this.loadingOverlayElement}static createGameOverScreen(){this.gameOverScreenElement=document.getElementById("game-over-screen"),this.gameOverScreenElement?(this.gameOverTitleElement=this.gameOverScreenElement.querySelector("#game-over-title"),this.creatorNamesListElement=this.gameOverScreenElement.querySelector("#creator-names"),this.classInfoElement=this.gameOverScreenElement.querySelector("#class-info"),this.returnToMenuButtonElement=this.gameOverScreenElement.querySelector("#return-to-menu-button"),this.gameOverTitleElement&&this.creatorNamesListElement&&this.classInfoElement&&this.returnToMenuButtonElement?(this.returnToMenuButtonElement.addEventListener("click",(()=>{window.location.reload()})),console.log("[UIManager] Game Over screen elements initialized.")):console.error("[UIManager] Failed to find one or more child elements of the game over screen!")):console.error("[UIManager] CRITICAL: #game-over-screen element not found in HTML!")}static showGameOverScreen(e,t=[],i=""){(this.gameOverScreenElement||(console.error("[UIManager] Game Over Screen not initialized"),this.createGameOverScreen(),this.gameOverScreenElement))&&(e?(this.gameOverTitleElement.textContent="Congratulations! You Escaped!",this.gameOverTitleElement.className="win-title"):(this.gameOverTitleElement.textContent="Game Over",this.gameOverTitleElement.className="lose-title"),this.creatorNamesListElement.innerHTML="",t.forEach((e=>{const t=document.createElement("li");t.textContent=e,this.creatorNamesListElement.appendChild(t)})),this.classInfoElement.textContent=i,this.updateLeaderboard(),this.gameOverScreenElement.classList.add("visible"),this.hideGameUI(),this.hideQuestion(),this.hideFloorSelectionUI())}static hideGameOverScreen(){this.gameOverScreenElement&&this.gameOverScreenElement.classList.remove("visible")}static showQuestion(e){if(this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer||(console.error("[UIManager] Question UI not ready."),this.createQuestionUI(),this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer))if(e){if(!this.gameplayManagerInstance||"function"!=typeof this.gameplayManagerInstance.handleAnswer)return console.error("[UIManager] CRITICAL: GameplayManager or its handleAnswer method is not set or invalid!"),this.flashMessage("Error: Game interaction system failed (Q).","error",5e3),void this.hideQuestion();this.questionTextElement.textContent=e.question,this.answerButtonsContainer.innerHTML="",e.options.forEach(((e,t)=>{const i=document.createElement("button");i.textContent=e,i.dataset.index=t,i.classList.add("answer-button"),i.addEventListener("click",(e=>{const t=parseInt(e.target.dataset.index,10);this.gameplayManagerInstance.handleAnswer(t)})),this.answerButtonsContainer.appendChild(i)})),this.questionOverlay.classList.add("visible")}else console.error("[UIManager] Cannot show question - no questionData provided.")}static hideQuestion(){this.questionOverlay&&(this.questionOverlay.classList.remove("visible"),this.questionTextElement&&(this.questionTextElement.textContent=""),this.answerButtonsContainer&&(this.answerButtonsContainer.innerHTML=""))}static showFloorSelectionUI(e,t,i){if(this.floorSelectionPanel&&this.floorButtonsContainer||(console.error("[UIManager] Floor selection UI not ready."),this.createFloorSelectionUI(),this.floorSelectionPanel&&this.floorButtonsContainer)){if(!this.gameplayManagerInstance||"function"!=typeof this.gameplayManagerInstance.handleFloorSelection)return console.error("[UIManager] CRITICAL: GameplayManager or its handleFloorSelection method is not set or invalid!"),this.flashMessage("Error: Game interaction system failed (F).","error",5e3),void this.hideFloorSelectionUI();this.floorButtonsContainer.innerHTML="";for(let o=e;o<=t;o++){const e=document.createElement("button");e.textContent=`Floor ${o}`,e.classList.add("floor-button"),e.dataset.floor=o,o===i?(e.disabled=!0,e.classList.add("current")):e.addEventListener("click",(()=>{this.gameplayManagerInstance.handleFloorSelection(o)})),this.floorButtonsContainer.appendChild(e)}this.floorSelectionPanel.classList.add("visible")}}static hideFloorSelectionUI(){this.floorSelectionPanel&&this.floorSelectionPanel.classList.remove("visible")}static updateScore(e,t){this.scoreElement||(this.scoreElement=document.getElementById("score-value")),this.targetElement||(this.targetElement=document.getElementById("score-target")),this.scoreElement&&(this.scoreElement.textContent=e),this.targetElement&&(this.targetElement.textContent=t)}static showGameUI(){const e=document.getElementById("game-canvas")||document.getElementById("gameCanvas"),t=document.getElementById("menu-container"),i=document.getElementById("score-display");e?e.style.display="block":console.warn("[UIManager] Canvas element not found to show."),t&&!t.classList.contains("hidden")&&"none"!==t.style.display&&(console.warn("[UIManager] Menu container was not hidden. Hiding it now via style.display."),t.style.display="none"),this.controlsContainer?this.controlsContainer.classList.add("visible"):console.warn("[UIManager] Controls container not found to show."),i?i.classList.add("visible"):console.warn("[UIManager] Score display not found to show."),this.timerElement&&(this.timerElement.style.display="block"),this.hideQuestion(),this.hideFloorSelectionUI(),this.hideGameOverScreen()}static hideGameUI(){const e=document.getElementById("game-canvas")||document.getElementById("gameCanvas"),t=document.getElementById("score-display");e&&(e.style.display="none"),this.controlsContainer&&this.controlsContainer.classList.remove("visible"),t&&t.classList.remove("visible"),this.timerElement&&(this.timerElement.style.display="none")}static initializeTimer(){this.timerElement||(this.timerElement=document.createElement("div"),this.timerElement.id="game-timer",this.timerElement.classList.add("game-timer"),document.body.appendChild(this.timerElement));const e=localStorage.getItem("gameLeaderboard");this.leaderboardData=e?JSON.parse(e):[],this.updateLeaderboard()}static startTimer(){this.gameStartTime=Date.now(),this.updateTimer()}static updateTimer(){if(!this.timerElement||!this.gameStartTime)return;const e=Math.floor((Date.now()-this.gameStartTime)/1e3),t=Math.floor(e/60),i=e%60;this.timerElement.textContent=`Time: ${t}:${i.toString().padStart(2,"0")}`,this.gameStartTime&&requestAnimationFrame((()=>this.updateTimer()))}static stopTimer(e){if(!this.gameStartTime)return;const t=(Date.now()-this.gameStartTime)/1e3;if(e){const e=this.leaderboardData.length+1;this.leaderboardData.push({name:`Run ${e}`,time:t,date:(new Date).toLocaleDateString()}),this.leaderboardData.sort(((e,t)=>e.time-t.time)),localStorage.setItem("gameLeaderboard",JSON.stringify(this.leaderboardData))}this.gameStartTime=0,this.updateLeaderboard()}static updateLeaderboard(){const e=document.getElementById("leaderboard-body");e&&(e.innerHTML="",this.leaderboardData.slice(0,10).forEach((t=>{const i=Math.floor(t.time/60),o=Math.floor(t.time%60),a=document.createElement("tr");a.innerHTML=`\n        <td>${t.name}</td>\n        <td>${i}:${o.toString().padStart(2,"0")}</td>\n        <td>${t.date}</td>\n      `,e.appendChild(a)})))}}class s{static Direction={DOWN:0,RIGHT:1,UP:2,LEFT:3};constructor(e,t,i={}){this.ctx=e,this.sprite=new Image,this.frameSize=i.frameSize||32,this.frameCount=i.frameCount||4,this.scale=i.scale||2,this.renderSize=this.frameSize*this.scale,this.speed=i.speed||3,this.animationSpeed=i.animationSpeed||150,this.collisionBoxWidthRatio=i.collisionBoxWidthRatio||.4,this.collisionBoxHeightRatio=i.collisionBoxHeightRatio||.2,this.collisionBoxFeetOffsetRatio=i.collisionBoxFeetOffsetRatio||.4,this.x=0,this.y=0,this.currentDirection=s.Direction.DOWN,this.currentFrame=0,this.isMoving=!1,this.lastFrameTime=0,this.sprite.onload=()=>{console.log(`[Character] Sprite loaded successfully: ${t}`)},this.sprite.onerror=()=>{console.error(`[Character] Failed to load sprite: ${t}`)},this.sprite.src=t}updateAnimation(e){if(!this.isMoving)return this.currentFrame=0,void(this.lastFrameTime=e);this.lastFrameTime||(this.lastFrameTime=e),e-this.lastFrameTime>this.animationSpeed&&(this.currentFrame=(this.currentFrame+1)%this.frameCount,this.lastFrameTime=e)}getCollisionBox(e,t){const i=this.renderSize*this.collisionBoxWidthRatio,o=this.renderSize*this.collisionBoxHeightRatio,a=i/2,s=this.renderSize*this.collisionBoxFeetOffsetRatio;return{top:t+s-o/2,bottom:t+s+o/2,left:e-a,right:e+a,width:i,height:o}}draw(e,t){if(!this.sprite.complete||0===this.sprite.naturalHeight)return;const i=this.currentFrame*this.frameSize,o=this.currentDirection*this.frameSize,a=Math.floor(this.x-this.renderSize/2+e),s=Math.floor(this.y-this.renderSize/2+t);try{this.ctx.drawImage(this.sprite,i,o,this.frameSize,this.frameSize,a,s,this.renderSize,this.renderSize)}catch(e){console.error("[Character] Error drawing sprite:",e)}}}class n{constructor(e,t,i,o){this.x=e,this.y=t,this.id=i,this.tileSize=o,this.size=.6*o,this.collected=!1,this.isCollected=!1}draw(e,t,i,o){const a=Math.floor(this.x+t-this.size/2),s=Math.floor(this.y+i-this.size/2);o?e.drawImage(o,a,s,this.size,this.size):(e.fillStyle="#8d6e63",e.fillRect(a,s,this.size,this.size),e.strokeStyle="#5d4037",e.strokeRect(a,s,this.size,this.size),e.fillStyle="#eee",e.font=.6*this.size+"px Arial",e.textAlign="center",e.textBaseline="middle",e.fillText("?",a+this.size/2,s+this.size/2+2))}}function r(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e}function l(e){let t=3735928559^e;return t=Math.imul(t^t>>>16,2246822507),t=Math.imul(t^t>>>13,3266489909),(t^=t>>>16)>>>0}function c(e,t){if(!e||"string"!=typeof e||e.length<7)return e;let i=parseInt(e.slice(1,3),16),o=parseInt(e.slice(3,5),16),a=parseInt(e.slice(5,7),16);return i=Math.min(255,Math.max(0,Math.round(i*t))),o=Math.min(255,Math.max(0,Math.round(o*t))),a=Math.min(255,Math.max(0,Math.round(a*t))),`#${i.toString(16).padStart(2,"0")}${o.toString(16).padStart(2,"0")}${a.toString(16).padStart(2,"0")}`}class h{constructor(e){this.tileSize=e,this.tileColors={},this.baseWallColor="#1c1e22",this.baseCorridorColor="#a0a0a0",this.baseRoomFloorColor="#c0c0c0",this.liftColor="#707080",this.errorColor="#ff00ff"}resetColorCache(){this.tileColors={}}getTileColor(e,t,i,o){const a=`${e},${t}`;if(this.tileColors[a])return this.tileColors[a];let s;switch(i){case 0:s=this.baseWallColor;break;case 1:s=this.baseCorridorColor;break;case 2:s=this.baseRoomFloorColor;break;case 3:s=this.liftColor;break;default:s=this.errorColor}return this.tileColors[a]=s,s}draw(e,t,i=null){const{map:o,rooms:a,books:s,liftPosition:n,offsetX:r,offsetY:l,cols:c,rows:h}=t,d=Math.floor(r),u=Math.floor(l),m=Math.max(0,Math.floor(-d/this.tileSize)-1),g=Math.min(c,Math.ceil((-d+e.canvas.width)/this.tileSize)+1),f=Math.max(0,Math.floor(-u/this.tileSize)-1),p=Math.min(h,Math.ceil((-u+e.canvas.height)/this.tileSize)+1);e.save(),this.drawBaseTiles(e,o,a,d,u,c,h,f,p,m,g),this.drawRoomDetails(e,o,a,n,d,u,c,h,f,p,m,g),this.drawLiftDetails(e,n,d,u),this.drawBooks(e,s,d,u,i),e.restore()}drawBaseTiles(e,t,i,o,a,s,n,r,l,c,h){e.save(),e.shadowColor="transparent";const d="#383838",u="#606060",m="#757575";for(let g=r;g<l;g++)for(let r=c;r<h;r++){const l=t[g]?.[r];if(void 0===l)continue;const c=Math.floor(r*this.tileSize+o),h=Math.floor(g*this.tileSize+a),f=this.getTileColor(g,r,l,i);if(e.fillStyle=f,e.fillRect(c,h,this.tileSize,this.tileSize),0===l){e.fillStyle="rgba(0,0,0,0.06)";for(let t=0;t<5;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1);const i=2;g>0&&0!==t[g-1]?.[r]&&(e.fillStyle=m,e.fillRect(c,h,this.tileSize,i)),g<n-1&&0!==t[g+1]?.[r]&&(e.fillStyle=d,e.fillRect(c,h+this.tileSize-i,this.tileSize,i)),r>0&&0!==t[g]?.[r-1]&&(e.fillStyle=u,e.fillRect(c,h+i,i,this.tileSize-i)),r<s-1&&0!==t[g]?.[r+1]&&(e.fillStyle=d,e.fillRect(c+this.tileSize-i,h+i,i,this.tileSize-i)),g>0&&r>0&&0!==t[g-1]?.[r]&&0!==t[g]?.[r-1]&&0!==t[g-1]?.[r-1]&&(e.fillStyle=u,e.fillRect(c,h,i,i)),g>0&&r<s-1&&0!==t[g-1]?.[r]&&0!==t[g]?.[r+1]&&0!==t[g-1]?.[r+1]&&(e.fillStyle=m,e.fillRect(c+this.tileSize-i,h,i,i))}else if(1===l){e.fillStyle="rgba(255,255,255,0.03)";for(let t=0;t<3;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1)}}e.restore()}drawRoomDetails(e,t,i,o,a,s,n,r,h,d,u,m){e.save(),e.shadowColor="transparent";for(const o of i){if(o.col+o.width<u||o.col>m||o.row+o.height<h||o.row>d)continue;const i=Math.floor(o.col*this.tileSize+a),n=Math.floor(o.row*this.tileSize+s),r=o.width*this.tileSize,g=o.height*this.tileSize;let f=this.baseRoomFloorColor;const p="number"==typeof this.floorNumber?this.floorNumber:0;let y=l(o.id)+100*p;switch(o.type){case"classroom":f=c("#a0c8e0",.9+l(y)%11/100);break;case"office":f=c("#f0e8c0",.9+l(y+1)%11/100);break;case"library":f=c("#d8c0a8",.9+l(y+2)%11/100);break;case"gym":f=c("#b0d0b0",.9+l(y+3)%11/100);break;case"lab":f=c("#e0e0ff",.9+l(y+4)%11/100);break;case"storage":f=c("#b0a090",.9+l(y+5)%11/100);break;case"utility":f=c("#b0b0b0",.9+l(y+6)%11/100)}for(let i=Math.max(o.row,h);i<Math.min(o.row+o.height,d);i++)for(let n=Math.max(o.col,u);n<Math.min(o.col+o.width,m);n++){const r=t[i]?.[n];if(2===r){const t=Math.floor(n*this.tileSize+a),r=Math.floor(i*this.tileSize+s),h=.98+(l(5e3*i+3*n+y)%11-5)/100;e.fillStyle=c(f,h),e.fillRect(t,r,this.tileSize,this.tileSize),"lab"===o.type&&(e.strokeStyle="rgba(0,0,0,0.08)",e.lineWidth=1,e.strokeRect(t+.5,r+.5,this.tileSize-1,this.tileSize-1))}}this.drawRoomDecorations(e,o,i,n,r,g)}e.restore()}drawLiftDetails(e,t,i,o){if(!t)return;const a=Math.floor(t.tileX*this.tileSize+i),s=Math.floor(t.tileY*this.tileSize+o);if(a+this.tileSize<0||a>e.canvas.width||s+this.tileSize<0||s>e.canvas.height)return;e.save(),e.shadowColor="transparent",e.strokeStyle="#d0d0d0",e.lineWidth=1,e.strokeRect(a+.5,s+.5,this.tileSize-1,this.tileSize-1),e.strokeStyle="#404040",e.strokeRect(a+1.5,s+1.5,this.tileSize-3,this.tileSize-3);const n=.15*this.tileSize,r=a+.8*this.tileSize,l=s+.5*this.tileSize;e.fillStyle="#444",e.beginPath(),e.arc(r,l,n,0,2*Math.PI),e.fill(),e.fillStyle="#ff4444",e.beginPath(),e.arc(r,l,.8*n,0,2*Math.PI),e.fill(),e.fillStyle="rgba(255, 255, 255, 0.5)",e.beginPath(),e.arc(r-.2*n,l-.2*n,.3*n,0,2*Math.PI),e.fill(),e.restore()}drawRoomDecorations(e,t,i,o,a,s){const n=this.tileSize,r=.2*n,l=.1*n;e.lineWidth=1,e.strokeStyle="#444";const c=(t,a,s,n,r,l=!0)=>{e.fillStyle=r;const c=Math.floor(i+t),h=Math.floor(o+a),d=Math.floor(s),u=Math.floor(n);e.fillRect(c,h,d,u),l&&e.strokeRect(c+.5,h+.5,d-1,u-1)},h=(t,a,s,n,r=!0)=>{e.fillStyle=n;const l=Math.floor(i+t),c=Math.floor(o+a);e.beginPath(),e.arc(l,c,Math.floor(s),0,2*Math.PI),e.fill(),r&&e.stroke()};switch(t.type){case"classroom":e.strokeStyle="#5d4037";const t=.6*n,d=.4*n,u=.25*n,m=1*n,g=.9*n;c(.25*a,r,.5*a,.2*n,"#333",!0),c(.25*a+2,r+2,.5*a-4,.2*n-4,"#4CAF50",!1);for(let e=0;;e++){const i=r+.5*n+e*g;if(i+d+u>s-r)break;for(let e=0;;e++){const o=r+e*m;if(o+t>a-r)break;c(o,i,t,d,"#8B4513"),c(o+.1*t,i+d+l,.8*t,u,"#6a4a3a")}}break;case"office":e.strokeStyle="#5d4037";const f=Math.min(.6*a,2.5*n),p=Math.min(.4*s,1.2*n);c(r,r,f,p,"#a0522d"),c(r+f+l,r+.1*p,.6*n,.6*n,"#444");const y=.8*n;c(a-r-y,r,y,s-2*r,"#6B4F41"),c(r+l,r+l,.5*n,.4*n,"#333"),c(r+l+.1*n,r+l+.4*n+2,.3*n,.1*n,"#555");break;case"library":e.strokeStyle="#402a10";const w=.6*n,M=1.5*n;for(let t=r;t<a-r-w;t+=M){c(t,r,w,s-2*r,"#654321"),e.strokeStyle="rgba(0,0,0,0.3)";for(let a=r+.5*n;a<s-r;a+=.7*n)e.beginPath(),e.moveTo(i+t,o+a),e.lineTo(i+t+w,o+a),e.stroke();e.strokeStyle="#402a10"}if(a>1.5*M){const e=w+r+(a-2*w-2*r-1.5*n)/2;e>w+r&&(c(e,.3*s,1.5*n,.4*s,"#966F33"),c(e+.2*n,.3*s-.3*n,.5*n,.25*n,"#6a4a3a"),c(e+.2*n,.3*s+.4*s+l,.5*n,.25*n,"#6a4a3a"))}break;case"gym":e.strokeStyle="#555",c(r,r,.4*a,.3*s,"#778899"),c(a-r-.3*a,s-r-.4*s,.3*a,.4*s,"#778899"),c(.6*a,r,.8*n,1.8*n,"#333"),c(.6*a+.1*n,r+.1*n,.6*n,1.6*n,"#555",!1),c(r,.5*s,1.5*n,.4*n,"#8B4513"),c(a-r-.5*n,r,.5*n,1.5*n,"#444"),h(a-r-.25*n,r+.3*n,.15*n,"#666"),h(a-r-.25*n,r+.7*n,.15*n,"#666"),h(a-r-.25*n,r+1.1*n,.15*n,"#666");break;case"lab":e.strokeStyle="#668";const S=.8*n;c(r,r,a-2*r,S,"#d0d0d8"),c(r,s-r-S,a-2*r,S,"#d0d0d8"),c(r+.2*n,r+.1*n,.5*n,.5*n,"#4a90e2"),c(r+1*n,r+.1*n,.3*n,.6*n,"#f5a623"),h(a-2*r-.4*n,r+.5*S,.2*n,"#e04040",!0),c(.4*a,r+S+l,n,s-2*r-2*S-2*l,"#a0a0b0");break;case"storage":e.strokeStyle="#4d4030";const v=a-2*r,b=.5*n;c(r,r,v,b,"#9e9e9e"),c(r,s-r-b,v,b,"#9e9e9e");const C=.6*n;c(r+.2*n,r+b+l,C,C,"#bf8f6f"),c(r+1*n,r+b+l,C,C,"#bf8f6f"),c(a-r-1.5*C,r+b+3*l,1.2*C,.8*C,"#bf8f6f"),c(a-r-n,s-r-n,.8*n,.8*n,"#6a4a3a");break;default:e.strokeStyle="#5d4037",c(.1*a,.15*s,.3*a,.25*s,"#A0522D"),c(.6*a,.5*s,.3*a,.4*s,"#A0522D"),c(a-r-.5*n,r,.5*n,s-2*r,"#777"),e.strokeStyle="#555",e.lineWidth=3,e.beginPath(),e.moveTo(i+r,o+.8*s),e.lineTo(i+a-r,o+.8*s),e.stroke(),e.beginPath(),e.moveTo(i+.7*a,o+r),e.lineTo(i+.7*a,o+s-r),e.stroke(),e.lineWidth=1}}drawBooks(e,t,i,o,a){if(!t||0===t.length)return;const s=.6*this.tileSize;for(const n of t)if(!n.isCollected&&!n.collected){const t=n.size||s,r=Math.floor(n.x+i-t/2),l=Math.floor(n.y+o-t/2);r+t>0&&r<e.canvas.width&&l+t>0&&l<e.canvas.height&&("function"==typeof n.draw?n.draw(e,i,o,a):a?e.drawImage(a,r,l,t,t):(e.fillStyle="#8d6e63",e.fillRect(r,l,t,t),e.strokeStyle="#5d4037",e.lineWidth=1,e.strokeRect(r+.5,l+.5,t-1,t-1)))}}}let d=null;const u={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,roomTypeWeights:{classroom:50,office:25,library:15,gym:0,utility:10}};function m(e,t,i,o,a){const{centerTileX:s,centerTileY:n}=t,{centerTileX:r,centerTileY:l}=i;Math.random()<.5?(g(e,n,s,r,o,a),f(e,r,n,l,o,a)):(f(e,s,n,l,o,a),g(e,l,s,r,o,a))}function g(e,t,i,o,a,s){if(t<0||t>=s)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(a-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[t]?.[i]&&(e[t][i]=1)}function f(e,t,i,o,a,s){if(t<0||t>=a)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(s-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[i]?.[t]&&(e[i][t]=1)}function p(e,t,i,o,a){const s=(e,t,i,o,a)=>{if(e<0||e>=o||t<0||t>=a)return!1;const s=i[t]?.[e];return 1===s||2===s||3===s};let n=0;const r=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];let l=[!1,!1,!1,!1];for(let c=0;c<r.length;c++)s(e+r[c].dx,t+r[c].dy,i,o,a)&&(n++,l[c]=!0);let c=!1;if(2===n){const[e,t,i,o]=l;(e&&t&&!i&&!o||i&&o&&!e&&!t)&&(c=!0)}return{openSides:n,isChokepoint:c}}function y(e,t,i,o,a){console.log(`  [MapGen Connect] Trying to connect wall at tile(${t}, ${i}) to walkable area...`);const s=[[0,-1],[0,1],[-1,0],[1,0]];let n=!1,r=null;for(const[o,a]of s){const s=t+o,l=i+a,c=e[l]?.[s];if(1===c||2===c||3===c){n=!0,r={x:s,y:l};break}}if(n)return console.log(`  [MapGen Connect] Target(${t}, ${i}) is adjacent to walkable at (${r.x}, ${r.y}). Setting target to Corridor.`),e[i][t]=1,!0;console.log("  [MapGen Connect] Target not adjacent. Searching nearest walkable (Corridor/Floor) via BFS...");const l=[[t,i,0]],c=new Set([`${t},${i}`]),h=[0,1,2,3],d=[1,2];let u=null,m=1/0;for(;l.length>0;){const[t,i,n]=l.shift();if(!(n>=m))for(const[r,g]of s){const s=t+r,f=i+g,p=`${s},${f}`;if(s>=0&&s<o&&f>=0&&f<a&&!c.has(p)){const t=e[f]?.[s];c.add(p),d.includes(t)?n+1<m&&(m=n+1,u={x:s,y:f,dist:m},console.log(`    [BFS] Found potential target at (${s}, ${f}), dist ${m}`)):h.includes(t)&&n+1<m&&l.push([s,f,n+1])}}}return u?(console.log(`  [MapGen Connect] Found closest walkable at tile(${u.x}, ${u.y}) distance ${u.dist}. Carving path...`),g(e,i,t,u.x,o,a),f(e,u.x,i,u.y,o,a),console.log("  [MapGen Connect] Carved path attempt finished."),1===e[i][t]||2===e[i][t]?(console.log(`    [Verify] Target tile (${t},${i}) is now walkable (Type: ${e[i][t]})`),!0):(console.warn(`  [MapGen Connect] Carving done, but target tile(${t}, ${i}) is still WALL (Value: ${e[i][t]}). Setting manually.`),e[i][t]=1,!0)):(console.error(`  [MapGen Connect] FAILED to find ANY nearby walkable (Corridor/Floor) via BFS from wall at tile(${t}, ${i}). Cannot connect.`),!1)}function w(e,t,i,o){if(!t)return!1;const{tileX:a,tileY:s}=t;if(s<0||s>=o||a<0||a>=i||3!==e[s]?.[a])return console.error(`[MapValidation Reachability] Invalid lift position provided: (${a}, ${s})`),!1;const{reachable:n}=function(e,t,i,o,a,s){const n=[[t,i]],r=new Set([`${t},${i}`]),l=[[0,-1],[0,1],[-1,0],[1,0]];let c=!1;for(e[i];n.length>0;){const[t,i]=n.shift();for(const[h,d]of l){const l=t+h,u=i+d,m=`${l},${u}`;if(l>=0&&l<o&&u>=0&&u<a&&!r.has(m)){const t=e[u]?.[l];r.add(m),s.includes(t)&&(n.push([l,u]),1!==t&&2!==t||(c=!0))}}}return{reachable:c}}(e,a,s,i,o,[1,2,3]);return n||console.error(`[MapValidation Reachability] FAILED. Lift at tile(${a}, ${s}) is isolated from corridors/rooms.`),n}class M{constructor(e,t,i,o,a){this.tileSize=32,this.cols=40,this.rows=30,this.width=this.cols*this.tileSize,this.height=this.rows*this.tileSize,this.offsetX=0,this.offsetY=0,this.floorNumber=i,this.minFloor=o,this.maxFloor=a,this.map=null,this.rooms=[],this.books=[],this.liftPosition=null,this.renderer=new h(this.tileSize);const s={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,booksPerMap:5,roomTypeWeights:{classroom:50,office:25,library:15,lab:10,storage:5,utility:10}};try{const e={cols:this.cols,rows:this.rows,floorNumber:this.floorNumber,minFloor:this.minFloor,maxFloor:this.maxFloor,tileSize:this.tileSize,generationParams:s},{map:t,rooms:i,liftPosition:o}=function(e){const{cols:t,rows:i,floorNumber:o,minFloor:a,tileSize:s,generationParams:n}=e,l={...u,...n};l.roomTypeWeights.gym=o===a?60:0,o===a&&(d=null,console.log(`[MapGen Floor ${o}] Reset consistent lift coords for the first floor.`)),console.log(`[MapGen Floor ${o}] Starting map generation (${t}x${i})...`);const c=Array.from({length:i},(()=>Array(t).fill(0))),h=[];let g=null;!function(e,t,i,o,a){const{minRoomSize:s,maxRoomSize:n,numRooms:l,maxRoomAttempts:c,roomTypeWeights:h}=a;let d=0;const u=[];let m=0;for(const e in h){const t=h[e];if(t>0){m+=t;for(let i=0;i<t;i++)u.push(e)}}for(0===u.length&&(u.push("utility"),console.warn("[MapGen Rooms] No room type weights provided or all are zero. Defaulting to 'utility'."));t.length<l&&d<c;){d++;const a=r(s,n),l=r(s,n),c=r(1,i-a-1),h=r(1,o-l-1),m={col:c,row:h,width:a,height:l,type:u[r(0,u.length-1)],id:`room_${t.length+1}`,centerTileX:Math.floor(c+a/2),centerTileY:Math.floor(h+l/2),connected:!1};let g=!1;const f=2;for(const e of t)if(m.col<e.col+e.width+f&&m.col+m.width+f>e.col&&m.row<e.row+e.height+f&&m.row+m.height+f>e.row){g=!0;break}if(!g){t.push(m);for(let t=m.row;t<m.row+m.height;t++)for(let a=m.col;a<m.col+m.width;a++)t>=0&&t<o&&a>=0&&a<i&&(e[t][a]=2)}}t.length<l?console.warn(`[MapGen Rooms] Placed only ${t.length}/${l} rooms after ${d} attempts.`):console.log(`[MapGen Rooms] Placed ${t.length} rooms after ${d} attempts.`)}(c,h,t,i,l),h.length<2&&o!==a?console.warn(`[MapGen Floor ${o}] Placed only ${h.length} rooms. Expect limited connectivity.`):h.length>=2&&function(e,t,i,o){if(t.length<2)return;console.log(`[MapGen Connect] Connecting ${t.length} rooms (improved)...`);const a=new Set([t[0].id]);let s=t.slice(1);for(;s.length>0;){let n=1/0,r=null,l=null,c=-1;for(let e=0;e<s.length;e++){const i=s[e];for(const o of t)if(a.has(o.id)){const t=i.centerTileX-o.centerTileX,a=i.centerTileY-o.centerTileY,s=t*t+a*a;s<n&&(n=s,r=i,l=o.id,c=e)}}if(!r||null===l){console.error("[MapGen Connect] Could not find next pair of rooms to connect. Breaking loop. Remaining unconnected:",s.map((e=>e.id)));break}{const n=t.find((e=>e.id===l));if(!n){console.error(`[MapGen Connect] Error: Could not find connected room with ID ${l}. Skipping connection.`),s.splice(c,1);continue}m(e,n,r,i,o),a.add(r.id),s.splice(c,1)}}console.log(`[MapGen Connect] Finished connecting rooms. Connected count: ${a.size}`)}(c,h,t,i);try{const e=function(e,t,i,o,a,s,n,r){let l=n,c=null;if(o!==a||l){if(!l&&o>a)throw new Error(`[MapGen Lift] Missing consistent coordinates for floor ${o}.`)}else console.log(`[MapGen Floor ${o}] Finding initial lift placement location...`),l=function(e,t,i,o){const a=Math.floor(t/2),s=Math.floor(i/2);let n=null;if(console.log("  [MapGen FindLift V3] Searching for optimal lift spot INSIDE a room..."),!o||0===o.length)return console.warn("  [MapGen FindLift V3] No rooms available to place a lift in. Fallback will be used by caller."),null;for(const r of o){const o=r.col+1,l=r.col+r.width-2,c=r.row+1,h=r.row+r.height-2;if(!(o>l||c>h))for(let d=c;d<=h;d++)for(let c=o;c<=l;c++){let o=0;o-=((c-a)*(c-a)+(d-s)*(d-s))/30;const l=p(c,d,e,t,i);if(l.openSides<1)continue;l.isChokepoint&&(o-=700),o+=120*l.openSides;let h=0,u=0;const m=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];for(const o of m){const a=c+o.dx,s=d+o.dy;if(s>=0&&s<i&&a>=0&&a<t){const o=e[s]?.[a];if(1===o||2===o){u++;const o=p(a,s,e,t,i);1===o.openSides&&(h=Math.max(h,3e4)),o.isChokepoint&&(h=Math.max(h,500))}}}0===u&&l.openSides<2||(o-=h,(null===n||o>n.score)&&(n={tileX:c,tileY:d,score:o,debug_room:r.id}))}}return n?(console.log(`  [MapGen FindLift V3] Selected best spot IN ROOM (${n.debug_room}) at tile(${n.tileX}, ${n.tileY}). Score: ${n.score.toFixed(0)}.`),{tileX:n.tileX,tileY:n.tileY}):(console.warn("[MapGen FindLift V3] No suitable IN-ROOM location found with internal tiles. Fallback will be used by caller."),null)}(e,t,i,r),l||(console.warn(`[MapGen Floor ${o}] No ideal IN-ROOM lift location found. Forcing placement near center.`),l={tileX:Math.floor(t/2),tileY:Math.floor(i/2)}),console.log(`[MapGen Floor ${o}] Established consistent lift coords at tile(${l.tileX}, ${l.tileY})`),c=l;const{tileX:h,tileY:d}=l;if(d<0||d>=i||h<0||h>=t){const e=Math.max(1,Math.min(t-2,h)),a=Math.max(1,Math.min(i-2,d));throw console.error(`[MapGen Lift] Coords (${h}, ${d}) are outside map bounds on floor ${o}. Adjusted to (${e},${a})`),l={tileX:e,tileY:a},new Error(`[MapGen Lift] Coords (${l.tileX}, ${l.tileY}) are outside map bounds on floor ${o}.`)}0===e[d][h]?(console.warn(`[MapGen Floor ${o}] Lift location tile(${h}, ${d}) is a wall (likely fallback). Forcing connection...`),y(e,h,d,t,i)?(console.log("  [MapGen Lift Connect] Connection attempt finished for wall at lift location."),0===e[d][h]&&(console.warn(`  [MapGen Lift Connect] Force connection completed, but target tile (${h},${d}) remained WALL. Setting to CORRIDOR.`),e[d][h]=1)):console.error(`[MapGen Lift Connect] FAILED to connect wall at lift location tile(${h}, ${d}). Lift might be isolated.`)):console.log(`  [MapGen Lift] Lift location tile(${h}, ${d}) is already walkable (Type: ${e[d][h]}).`),e[d][h]=3;const u={x:(h+.5)*s,y:(d+.5)*s,tileX:h,tileY:d};return console.log(`[MapGen Floor ${o}] Placed/Confirmed lift at tile(${h}, ${d}). World: (${u.x.toFixed(1)}, ${u.y.toFixed(1)})`),{position:u,coords:c||l}}(c,t,i,o,a,s,d,h);g=e.position,e.coords&&(d=e.coords)}catch(e){throw console.error(`[MapGen Floor ${o}] CRITICAL: Lift placement failed:`,e),new Error(`Lift placement failed on floor ${o}: ${e.message}`)}if(function(e,t,i){console.log("  [MapGen] Ensuring map borders are walls.");for(let o=0;o<t;o++)void 0!==e[0]?.[o]&&(e[0][o]=0),void 0!==e[i-1]?.[o]&&(e[i-1][o]=0);for(let o=0;o<i;o++)void 0!==e[o]?.[0]&&(e[o][0]=0),void 0!==e[o]?.[t-1]&&(e[o][t-1]=0)}(c,t,i),g&&!w(c,g,t,i)){if(console.warn(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) initially unreachable. Attempting final force connection.`),!y(c,g.tileX,g.tileY,t,i)||!w(c,g,t,i)){const e=`CRITICAL: Placed lift at tile(${g.tileX}, ${g.tileY}) is UNREACHABLE even after force connect! Generation failed.`;throw console.error(`[MapGen Floor ${o}] ${e}`),new Error(`Lift is unreachable on floor ${o}. Cannot proceed.`)}console.log(`[MapValidation Floor ${o}] Lift connection successful after second attempt.`)}else{if(!g)throw new Error(`Map generated without a valid lift position on floor ${o}.`);console.log(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) is reachable.`)}return console.log(`[MapGen Floor ${o}] Map generation completed successfully.`),{map:c,rooms:h,liftPosition:g}}(e);this.map=t,this.rooms=i,this.liftPosition=o,this.renderer.resetColorCache(),this.placeBooksReliably(s.booksPerMap),3===this.floorNumber&&console.log(`[ProcMap F${this.floorNumber}] Init complete. Lift at tile (${o?.tileX}, ${o?.tileY}).`)}catch(e){throw console.error(`[ProcMap F${this.floorNumber}] CRITICAL ERROR during map generation or setup:`,e),e}}placeBooksReliably(e){this.books=[];const t=[],i=new Set;for(let e=0;e<this.rows;e++)for(let i=0;i<this.cols;i++){const o=this.map[e]?.[i],a=this.liftPosition&&e===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||t.push({r:e,c:i})}let o=0;for(;o<e&&t.length>0;){const e=Math.floor(Math.random()*t.length),{r:a,c:s}=t.splice(e,1)[0],r=`${s},${a}`;if((1===this.map[a]?.[s]||2===this.map[a]?.[s])&&!i.has(r)){const e=(s+.5)*this.tileSize,t=(a+.5)*this.tileSize,l=`book_f${this.floorNumber}_${o+1}`;this.books.push(new n(e,t,l,this.tileSize)),i.add(r),o++}}}isWalkable(e,t){if(!this.map)return!1;const i=Math.floor(e/this.tileSize),o=Math.floor(t/this.tileSize);if(i<0||i>=this.cols||o<0||o>=this.rows)return!1;const a=this.map[o]?.[i];return 1===a||2===a||3===a}findRandomInitialSpawnPosition(){if(!this.map)return;const e=[];for(let t=1;t<this.rows-1;t++)for(let i=1;i<this.cols-1;i++){const o=this.map[t]?.[i],a=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||this.isTileOpenEnough(i,t,3,!0)&&e.push({r:t,c:i})}if(0===e.length)for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++){const o=this.map[t]?.[i],a=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||this.isTileOpenEnough(i,t,2,!0)&&e.push({r:t,c:i})}if(0===e.length)for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++){const o=this.map[t]?.[i],a=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||e.push({r:t,c:i})}if(0===e.length)return void console.error(`[ProcMap F${this.floorNumber} RandomSpawn] CRITICAL: No suitable spawn tiles found!`);const{r:t,c:i}=e[Math.floor(Math.random()*e.length)];return{x:(i+.5)*this.tileSize,y:(t+.5)*this.tileSize}}isTileOpenEnough(e,t,i=2,o=!1){if(this.floorNumber,!this.map)return!1;let a=0;const s=[[0,-1,"N"],[0,1,"S"],[-1,0,"W"],[1,0,"E"]],n=[!1,!1,!1,!1];for(let i=0;i<s.length;i++){const[o,r,l]=s[i],c=e+o,h=t+r;let d=0;c>=0&&c<this.cols&&h>=0&&h<this.rows&&(d=this.map[h]?.[c],1!==d&&2!==d&&3!==d||(a++,n[i]=!0))}if(a<i)return!1;if(o&&2===a){if(n[0]&&n[1]&&!n[2]&&!n[3])return!1;if(n[2]&&n[3]&&!n[0]&&!n[1])return!1}return!0}findNearestWalkableTile(e,t,i=8,o=!1,a=!1){if(this.floorNumber,!this.map)return null;const s=Math.floor(e/this.tileSize),n=Math.floor(t/this.tileSize),r=[1,2];if(s>=0&&s<this.cols&&n>=0&&n<this.rows){const e=this.map[n][s];if(r.includes(e)&&(!o||3!==e)){const e=2;if(this.isTileOpenEnough(s,n,e,a))return{x:(s+.5)*this.tileSize,y:(n+.5)*this.tileSize}}}for(let e=1;e<=i;e++){const t=2;for(let i=-e;i<=e;i++)for(let l=-e;l<=e;l++){if(Math.abs(l)<e&&Math.abs(i)<e)continue;const c=s+l,h=n+i;if(c<0||c>=this.cols||h<0||h>=this.rows)continue;const d=this.map[h]?.[c];if(r.includes(d)&&(!o||3!==d)&&this.isTileOpenEnough(c,h,t,a))return{x:(c+.5)*this.tileSize,y:(h+.5)*this.tileSize}}}const l=[[s,n]],c=new Set([`${s},${n}`]),h=[[0,-1],[0,1],[-1,0],[1,0]],d=[1,2,3];for(;l.length>0;){const[e,t]=l.shift();for(const[i,s]of h){const n=e+i,h=t+s,u=`${n},${h}`;if(n>=0&&n<this.cols&&h>=0&&h<this.rows&&!c.has(u)){const e=this.map[h]?.[n];if(c.add(u),r.includes(e)&&(!o||3!==e)&&this.isTileOpenEnough(n,h,2,a))return{x:(n+.5)*this.tileSize,y:(h+.5)*this.tileSize};d.includes(e)&&l.push([n,h])}}}return null}getSpawnPointInRoomOfLift(e,t,i=2){this.floorNumber;let o=null,a=null,s=null;const n=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];for(const i of n){const n=e+i.dx,r=t+i.dy;if(n>=0&&n<this.cols&&r>=0&&r<this.rows&&2===this.map[r]?.[n])for(const e of this.rooms)if(n>=e.x&&n<e.x+e.width&&r>=e.y&&r<e.y+e.height){o=e,a={x:n,y:r},s={dx:i.dx,dy:i.dy};break}if(o)break}if(!o)for(const i of n){const r=e+i.dx,l=t+i.dy;if(!(r<0||r>=this.cols||l<0||l>=this.rows||1!==this.map[l]?.[r])){for(const e of n){if(e.dx===-i.dx&&e.dy===-i.dy)continue;const t=r+e.dx,n=l+e.dy;if(t>=0&&t<this.cols&&n>=0&&n<this.rows&&2===this.map[n]?.[t])for(const i of this.rooms)if(t>=i.x&&t<i.x+i.width&&n>=i.y&&n<i.y+i.height){o=i,a={x:t,y:n},s={dx:e.dx,dy:e.dy};break}if(o)break}if(o)break}}if(!o||!a||!s)return null;const r=s.dx,l=s.dy;for(let e=i-1;e>=0;e--){const t=a.x+r*e,i=a.y+l*e;if(t>=o.x&&t<o.x+o.width&&i>=o.y&&i<o.y+o.height&&2===this.map[i]?.[t]){const e=t+r,a=i+l,s=e>=o.x&&e<o.x+o.width&&a>=o.y&&a<o.y+o.height&&2===this.map[a]?.[e];if(this.isTileOpenEnough(t,i,2,!0)&&s)return{x:(t+.5)*this.tileSize,y:(i+.5)*this.tileSize}}}return this.isTileOpenEnough(a.x,a.y,2,!0)?{x:(a.x+.5)*this.tileSize,y:(a.y+.5)*this.tileSize}:null}findNearbyUnansweredBook(e,t,i=.8*this.tileSize){if(!this.books||0===this.books.length)return null;let o=null,a=i*i;for(const i of this.books)if(!i.isCollected){const s=i.x-e,n=i.y-t,r=s*s+n*n;r<a&&(a=r,o=i)}return o}markBookAsCollected(e){if(!e||!this.books)return!1;const t=this.books.find((t=>t.id===e.id));return!(!t||t.isCollected||(t.isCollected=!0,0))}findNearbyLift(e,t,i=.7*this.tileSize){if(!this.liftPosition)return null;const o=e-this.liftPosition.x,a=t-this.liftPosition.y;return o*o+a*a<i*i?this.liftPosition:null}getLiftPosition(){return this.liftPosition}draw(e,t=null){if(!this.map||!this.renderer)return;const i={map:this.map,rooms:this.rooms,books:this.books,liftPosition:this.liftPosition,offsetX:this.offsetX,offsetY:this.offsetY,cols:this.cols,rows:this.rows,tileSize:this.tileSize};this.renderer.draw(e,i,t)}logMapGrid(){if(!this.map)return void console.log(`[ProcMap F${this.floorNumber}] Map grid not available.`);console.log(`--- Map Grid Floor ${this.floorNumber} (${this.cols}x${this.rows}) ---`);let e="   ";for(let t=0;t<this.cols;t++)e+=t%10==0?Math.floor(t/10):" ";console.log(e),e="   ";for(let t=0;t<this.cols;t++)e+=t%10;console.log(e);for(let e=0;e<this.rows;e++){const t=e.toString().padStart(2," "),i=this.map[e].map((e=>{switch(e){case 0:return"#";case 1:return".";case 2:return" ";case 3:return"L";default:return"?"}})).join("");console.log(`${t} ${i}`)}this.liftPosition?(console.log(`Lift actual tile type in map[${this.liftPosition.tileY}][${this.liftPosition.tileX}]: ${this.map[this.liftPosition.tileY]?.[this.liftPosition.tileX]}`),console.log(`Lift reported at tile: (${this.liftPosition.tileX}, ${this.liftPosition.tileY})`)):console.log("Lift position not set."),console.log(`--- End Map Grid Floor ${this.floorNumber} ---`)}}class S{constructor(e=1,t=3){e>=t?(console.warn(`Level constructor: minFloor (${e}) must be less than maxFloor (${t}). Using defaults 1 and 3.`),this.minFloor=1,this.maxFloor=3):(this.minFloor=e,this.maxFloor=t),this.currentFloor=this.minFloor,this.currentMap=null,this.tileSize=32}async loadFloor(e,t,i){if(e<this.minFloor||e>this.maxFloor){const t=`Attempted to load invalid floor: ${e}. Allowed range: [${this.minFloor}-${this.maxFloor}]`;throw console.error(`[Level] ${t}`),new Error(t)}console.log(`[Level] Loading floor ${e}...`),this.currentFloor=e;try{if(this.currentMap=new M(t,i,this.currentFloor,this.minFloor,this.maxFloor),!(this.currentMap.tileSize&&this.currentMap.map&&this.currentMap.books&&this.currentMap.getLiftPosition()))throw new Error("[Level] ProceduralMap instance is missing essential properties after creation (tileSize, map, books, or liftPosition).");this.tileSize=this.currentMap.tileSize;const o=this.currentMap.getLiftPosition();console.log(`  [Level] Map generated for floor ${this.currentFloor}. TileSize: ${this.tileSize}. Lift at tile(${o.tileX}, ${o.tileY}).`),console.log(`[Level] Floor ${e} loaded successfully. Map size: ${this.currentMap.cols}x${this.currentMap.rows}. ${this.currentMap.books.length} books placed.`)}catch(t){throw console.error(`[Level] CRITICAL FAILURE loading floor ${e}: Failed to create or validate ProceduralMap:`,t),this.currentMap=null,new Error(`Map generation/validation failed for floor ${e}. ${t.message||t}`)}return Promise.resolve()}getCurrentBooks(){return this.currentMap?this.currentMap.books:[]}}class v{constructor(e){this.game=e,this.canvas=null,this.ctx=null}initializeCanvas(){if(this.canvas=document.getElementById("game-canvas"),!this.canvas)throw new Error("[Renderer] Canvas 'game-canvas' not found!");if(this.ctx=this.canvas.getContext("2d"),!this.ctx)throw new Error("[Renderer] Failed to get 2D context.");return this.ctx.imageSmoothingEnabled=!1,this.resizeCanvas(),console.log("[Renderer] Canvas initialized."),{canvas:this.canvas,ctx:this.ctx}}resizeCanvas(){this.canvas&&(this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.game.character&&this.game.level?.currentMap&&this.centerCameraOnCharacter(),console.log(`[Renderer] Canvas resized to ${this.canvas.width}x${this.canvas.height}`))}centerCameraOnCharacter(){const{character:e,level:t,canvas:i}=this.game;e&&t?.currentMap&&i&&(t.currentMap.offsetX=Math.floor(i.width/2-e.x),t.currentMap.offsetY=Math.floor(i.height/2-e.y))}drawFrame(){if(!this.ctx||!this.canvas)return;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const e=this.game.level?.currentMap,t=this.game.character;e&&e.draw(this.ctx,this.game.bookImage),t&&e&&t.draw(e.offsetX,e.offsetY)}drawWinScreen(){this.ctx&&this.canvas&&(this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle="lime",this.ctx.font='clamp(32px, 8vw, 48px) "Press Start 2P", cursive, Arial, sans-serif',this.ctx.fillText("ZWYCIĘSTWO!",this.canvas.width/2,this.canvas.height/2-80),this.ctx.fillStyle="white",this.ctx.font="clamp(24px, 5vw, 32px) Arial, sans-serif",this.ctx.fillText(`Zebrano wszystkie ${this.game.targetBooksToWin} książki!`,this.canvas.width/2,this.canvas.height/2),this.ctx.font="clamp(18px, 4vw, 24px) Arial, sans-serif",this.ctx.fillText("Uniwersytet uratowany!",this.canvas.width/2,this.canvas.height/2+60),this.ctx.font="clamp(14px, 3vw, 18px) Arial, sans-serif",this.ctx.fillStyle="#ccc",this.ctx.fillText("(Odśwież stronę, aby zagrać ponownie)",this.canvas.width/2,this.canvas.height-50))}}class b{constructor(e){this.game=e,this.handleAnswer=this.handleAnswer.bind(this),this.handleFloorSelection=this.handleFloorSelection.bind(this)}update(e){this.game.gameState===i.PLAYING&&this.updatePlayingState(e)}updatePlayingState(e){const t=this.game.character;if(!this.game.level?.currentMap||!t||!this.game.inputManager)return;const{moved:o}=this.handleMovement();t&&"function"==typeof t.updateAnimation&&t.updateAnimation(e),o||this.game.gameState!==i.PLAYING||this.handleInteractions()}handleMovement(){const e=this.game.character,t=this.game.level.currentMap,i=this.game.inputManager;if(!e||!t||!i)return{moved:!1};const o=i.getInputDirection();let a=o.x*e.speed,n=o.y*e.speed,r=0,l=0,c=!1;if(0!==a||0!==n){const t=0!==a&&!this.checkCollision(e.x+a,e.y),i=0!==n&&!this.checkCollision(e.x,e.y+n);t&&(r=a),i&&(l=n),0!==a&&0!==n&&this.checkCollision(e.x+a,e.y+n)&&(t&&!i?l=0:i&&!t?r=0:t||i||(r=0,l=0)),0===r&&0===l||(e.x+=r,e.y+=l,c=!0,Math.abs(r)>=Math.abs(l)?0!==r&&(e.currentDirection=r>0?s.Direction.RIGHT:s.Direction.LEFT):0!==l&&(e.currentDirection=l>0?s.Direction.DOWN:s.Direction.UP))}return e.isMoving=c,{moved:c}}checkCollision(e,t){const i=this.game.level?.currentMap,o=this.game.character;if(!i||!o)return!0;const a=o.getCollisionBox(e,t),s=[{x:a.left,y:a.top},{x:a.right,y:a.top},{x:a.left,y:a.bottom},{x:a.right,y:a.bottom},{x:e,y:a.top},{x:e,y:a.bottom},{x:a.left,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio},{x:a.right,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio}];for(const e of s)if(!i.isWalkable(e.x,e.y))return!0;return!1}handleInteractions(){const e=this.game.level?.currentMap,t=this.game.character;if(!e||!t||this.game.gameState!==i.PLAYING)return;const o=e.findNearbyUnansweredBook(t.x,t.y);o?this.initiateQuestion(o):this.game.liftCooldownActive||e.findNearbyLift(t.x,t.y)&&this.initiateFloorSelection()}initiateQuestion(e){if(this.game.gameState!==i.PLAYING)return;if(this.game.setGameState(i.ASKING_QUESTION),this.game.character&&(this.game.character.isMoving=!1),this.game.currentBookTarget=e,0===this.game.availableQuestions.length&&(this.game.availableQuestions=[...o],0===this.game.availableQuestions.length))return a.flashMessage("Błąd: Brak dostępnych pytań!","error"),this.game.setGameState(i.PLAYING),void(this.game.currentBookTarget=null);const t=Math.floor(Math.random()*this.game.availableQuestions.length);this.game.currentQuestionData=this.game.availableQuestions.splice(t,1)[0],a.showQuestion(this.game.currentQuestionData)}handleAnswer(e){const{gameState:t,currentQuestionData:o,currentBookTarget:s,level:n}=this.game;if(t!==i.ASKING_QUESTION||!o||!s)return a.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,void(this.game.gameState!==i.GAME_OVER&&this.game.setGameState(i.PLAYING));if(e===o.correctAnswer){a.flashMessage("Prawidłowo!","success",1500);const e=n?.currentMap?.markBookAsCollected(s);if(e){if(this.game.totalBooksCollectedGlobally++,a.updateScore(this.game.totalBooksCollectedGlobally,this.game.targetBooksToWin),this.game.totalBooksCollectedGlobally>=this.game.targetBooksToWin)return a.hideQuestion(),void this.game._setGameOver(!0)}else a.flashMessage("Błąd zbierania książki!","error")}else a.flashMessage("Nieprawidłowa odpowiedź!","error"),this.game.availableQuestions.push(o);a.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,this.game.gameState!==i.GAME_OVER&&this.game.setGameState(i.PLAYING)}initiateFloorSelection(){this.game.gameState!==i.PLAYING||this.game.liftCooldownActive||(this.game.setGameState(i.SELECTING_FLOOR),this.game.character&&(this.game.character.isMoving=!1),a.showFloorSelectionUI(this.game.level.minFloor,this.game.level.maxFloor,this.game.level.currentFloor))}handleFloorSelection(e){this.game.gameState===i.SELECTING_FLOOR?(a.hideFloorSelectionUI(),e===this.game.level.currentFloor||e<this.game.level.minFloor||e>this.game.level.maxFloor?this.game.setGameState(i.PLAYING):this.handleLiftTransition(e).catch((e=>{this.game._handleFatalError(`Błąd przejścia na piętro: ${e.message}`)}))):a.hideFloorSelectionUI()}async handleLiftTransition(e){const t=this.game,o=3===t.level?.currentFloor||3===e;if(o&&console.log(`[GameplayManager F${e} handleLiftTransition] Starting transition. Cooldown: ${t.liftCooldownActive}`),t.gameState===i.SELECTING_FLOOR&&!t.liftCooldownActive){t.setGameState(i.TRANSITIONING),t.character&&(t.character.isMoving=!1),a.hideQuestion(),a.hideFloorSelectionUI(),t.liftCooldownActive=!0,a.flashMessage(`Przejście na piętro ${e}...`,"info",1800);try{await t.level.loadFloor(e,t.canvas.width,t.canvas.height);const i=t.level.currentMap;if(!i)throw new Error(`Map object is null for floor ${e}.`);const a=i.getLiftPosition();if(!a)throw new Error(`No lift position data on loaded floor ${e}!`);o&&console.log(`  [GM F${e} LiftTransition] Lift tile: (${a.tileX},${a.tileY}), World:(${a.x.toFixed(1)},${a.y.toFixed(1)})`);let n=null;if(n=i.getSpawnPointInRoomOfLift(a.tileX,a.tileY,2),o&&console.log(`  [GM F${e} LiftTransition] From getSpawnPointInRoomOfLift:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null),n||(o&&console.warn(`  [GM F${e} LiftTransition] getSpawnPointInRoomOfLift failed. Using findNearestWalkableTile...`),n=i.findNearestWalkableTile(a.x,a.y,5,!0,!0),o&&console.log(`  [GM F${e} LiftTransition] From findNearestWalkableTile:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null)),!n){o&&console.error(`  [GM F${e} LiftTransition] All spawn methods failed. Using random spawn...`);const t=i.findRandomInitialSpawnPosition();if(!t)throw new Error(`EMERGENCY SPAWN FAILED on floor ${e}!`);n=t,o&&console.log(`  [GM F${e} LiftTransition] From emergencySpawn:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null)}t.character.x=n.x,t.character.y=n.y,o&&console.log(`  [GM F${e} LiftTransition] Final landing: (${t.character.x.toFixed(1)}, ${t.character.y.toFixed(1)})`),t.character.currentDirection=s.Direction.DOWN,t.character.isMoving=!1,t.renderer?.centerCameraOnCharacter(),this.ensureCharacterIsOnWalkableTile(!1),t.startLiftCooldownTimer()}catch(o){console.error(`[GM F${e} LiftTransition] Error during transition:`,o),t.liftCooldownActive=!1,t.gameState!==i.GAME_OVER&&t.setGameState(i.PLAYING),t._handleFatalError(`Transition error to floor ${e}: ${o.message||o}`)}}}ensureCharacterIsOnWalkableTile(e=!1){const t=this.game.character,i=this.game.level?.currentMap;if(!t||!i)return;const o=Math.floor(t.x/i.tileSize),a=Math.floor(t.y/i.tileSize),s=o>=0&&o<i.cols&&a>=0&&a<i.rows?i.map[a]?.[o]:0,n=i.isWalkable(t.x,t.y)&&(!(3===s)||e),r=this.checkCollision(t.x,t.y);if(r||!n){const e=3===this.game.level?.currentFloor;e&&console.warn(`[GameplayManager F${this.game.level.currentFloor} AntiStuck] Char at (${t.x.toFixed(1)},${t.y.toFixed(1)}) -> tile (${o},${a}) needs nudge. Colliding:${r}, SafeStand:${n}`);const s=i.findNearestWalkableTile(t.x,t.y,8,!0,!0);if(s)e&&console.log(`  [AntiStuck] Nudging to safe spot: (${s.x.toFixed(1)},${s.y.toFixed(1)})`),t.x=s.x,t.y=s.y,this.game.renderer?.centerCameraOnCharacter();else{e&&console.error("  [AntiStuck] CRITICAL: Could not find any safe spot to nudge. Trying random.");const o=i.findRandomInitialSpawnPosition();o?(e&&console.warn(`  [AntiStuck] Emergency nudge to random: (${o.x.toFixed(1)},${o.y.toFixed(1)})`),t.x=o.x,t.y=o.y,this.game.renderer?.centerCameraOnCharacter()):(e&&console.error("  [AntiStuck] EVEN RANDOM SPAWN FAILED! Game might be broken."),this.game._handleFatalError("Anti-Stuck system failed critically."))}}}}const C={track1:e.p+"assets/audio/back126c4c9e8849503fadb12.mp3",track2:e.p+"assets/audio/back2ddba92be3cd8ac98633a.mp3",track3:e.p+"assets/audio/back381530afe1194de9f2bb1.mp3"},k=["track1","track2","track3"];class z{constructor(){this.musicVolume=.5,this.currentMusicElement=null,this.currentTrackKey=null,this.isMusicPlaying=!1;const e=localStorage.getItem("musicVolume");null!==e&&(this.musicVolume=parseFloat(e)),this.audioElements={},this._preloadTracks()}_preloadTracks(){console.log("[AudioManager] Preloading tracks from imported sources...");for(const e in C)if(C.hasOwnProperty(e)){const t=C[e],i=new Audio(t);i.preload="auto",this.audioElements[e]=i,console.log(`  Preloaded ${e} from ${t}`)}}setMusicVolume(e){this.musicVolume=Math.max(0,Math.min(1,e)),this.currentMusicElement&&(this.currentMusicElement.volume=this.musicVolume),localStorage.setItem("musicVolume",this.musicVolume.toString()),console.log(`[AudioManager] Music volume set to: ${this.musicVolume}`)}getMusicVolume(){return this.musicVolume}playMusic(e,t=!0){if(!this.audioElements[e]){if(console.warn(`[AudioManager] Track "${e}" not found or not preloaded.`),!C[e])return void console.error(`[AudioManager] Source for track "${e}" not defined in MUSIC_SOURCES.`);this.audioElements[e]=new Audio(C[e])}this.isMusicPlaying&&this.currentTrackKey===e||(this.stopMusic(),this.currentMusicElement=this.audioElements[e],this.currentMusicElement.volume=this.musicVolume,this.currentMusicElement.loop=t,this.currentTrackKey=e,this.currentMusicElement.play().then((()=>{this.isMusicPlaying=!0,console.log(`[AudioManager] Playing music: ${e} (Volume: ${this.currentMusicElement.volume})`)})).catch((t=>{console.error(`[AudioManager] Error playing "${e}":`,t),console.error(`  Playback failure details: userInteracted (check Menu.js), document.hasFocus(): ${document.hasFocus()}`),this.isMusicPlaying=!1,this.currentMusicElement=null,this.currentTrackKey=null})))}stopMusic(){this.currentMusicElement&&(this.currentMusicElement.pause(),this.currentMusicElement.currentTime=0,this.isMusicPlaying=!1,console.log(`[AudioManager] Stopped music: ${this.currentTrackKey}`))}changeTrackForFloor(e){const t=Math.max(0,e-1)%k.length,i=k[t];i?(console.log(`[AudioManager] Floor ${e} -> Music track: ${i}`),this.playMusic(i)):console.warn(`[AudioManager] No track found for floor index ${t}.`)}startInitialMusic(e=1){console.log("[AudioManager] Attempting to start initial music..."),this.changeTrackForFloor(e)}}const E=e.p+"assets/images/character_red9229918d5325fcdf2e6e.png",I=e.p+"assets/images/character_blue7b9b140f7eb486e8a968.png",x=e.p+"assets/images/character_yellowff53afbc44f903d97313.png",L=e.p+"assets/images/character_green007c77c97eef8cbb1e94.png",T=e.p+"assets/images/booka54431ef16a38389c12e.png";class ${static CREATOR_NAMES=["Rafał","Dima","Venia","Kacper"];static CLASS_ATTENDING_INFO="Klasa 2P2T / Projektowanie stron internetowych";constructor(e){console.log(`[Game] Initializing with character: ${e}`),this.characterColor=e,this._gameState=i.LOADING,this.isRunning=!1,this.totalBooksCollectedGlobally=0,this.targetBooksToWin=15,this.availableQuestions=[],this.currentBookTarget=null,this.currentQuestionData=null,this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.canvas=null,this.ctx=null,this.character=null,this.level=null,this.inputManager=null,this.renderer=null,this.gameplayManager=null,this.audioManager=null,this.sprites={red:E,blue:I,yellow:x,green:L},this.bookImage=null,this.gameLoop=this.gameLoop.bind(this),this._handleFatalError=this._handleFatalError.bind(this),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null;try{this._initializeCoreComponents(),this.audioManager=new z,console.log("[Game] AudioManager created."),this.gameplayManager=new b(this),console.log("[Game] GameplayManager created."),this.renderer=new v(this);const{canvas:e,ctx:t}=this.renderer.initializeCanvas();this.canvas=e,this.ctx=t,console.log("[Game] Renderer and Canvas initialized."),this._initializeUIManager(),console.log("[Game] UIManager setup initiated."),this._addEventListeners(),this._loadAssetsAndThenStartLogic().then((()=>{console.log("[Game] Async loading and game logic start sequence completed.")})).catch((e=>{console.error("[Game] Unhandled error from _loadAssetsAndThenStartLogic in constructor:",e);const t=a.getLoadingOverlay();t&&t.classList.remove("visible")})),a.initializeTimer()}catch(e){console.error("[Game] Synchronous core initialization failed:",e),alert(`Critical initialization error: ${e.message}. Game cannot start.`),this._handleFatalError(`Initialization error: ${e.message}`,!1)}}get gameState(){return this._gameState}setGameState(e){this._gameState!==e&&(console.log(`[Game State] ${this._gameState} -> ${e}`),this._gameState=e)}_initializeCoreComponents(){this.inputManager=new t,this.level=new S(1,3)}_initializeUIManager(){if(!this.gameplayManager)throw new Error("[Game] GameplayManager is NOT defined when _initializeUIManager is called!");if(!this.inputManager)throw new Error("[Game] InputManager is NOT defined when _initializeUIManager is called!");a.setGameplayManager(this.gameplayManager),a.initializeUI(this.inputManager)}_addEventListeners(){window.addEventListener("resize",(()=>this.renderer?.resizeCanvas()))}async _loadAssetsAndThenStartLogic(){const e=a.getLoadingOverlay();try{this.setGameState(i.LOADING),await this._loadAssets(),await this._startGameLogic(),e&&e.classList.remove("visible")}catch(t){throw console.error("[Game] Asset loading or game logic start failed:",t),e&&e.classList.remove("visible"),this._handleFatalError(`Asset/Start Logic Error: ${t.message}`),t}}async _loadAssets(){console.log("[Game] Loading assets...");const e=[],t=this.sprites[this.characterColor]||this.sprites.red;if(!this.ctx)throw new Error("Canvas context not available for Character creation.");this.character=new s(this.ctx,t,{speed:3,frameSize:32,scale:2,animationSpeed:150,frameCount:4}),e.push(new Promise(((e,i)=>{this.character.sprite.onload=()=>{console.log(`  [Assets] Character sprite loaded: ${t}`),e()},this.character.sprite.onerror=e=>i(new Error(`Failed to load character sprite: ${t}. Details: ${e}`))}))),T?(this.bookImage=new Image,this.bookImage.src=T,e.push(new Promise((e=>{this.bookImage.onload=()=>{console.log(`  [Assets] Book image loaded: ${T}`),e()},this.bookImage.onerror=()=>{console.warn(` [Assets] Failed to load book image: ${T}. Using fallback rendering.`),this.bookImage=null,e()}})))):(console.warn("[Assets] No book sprite path provided. Book will use fallback rendering."),this.bookImage=null),await Promise.all(e),console.log("[Game] All assets loaded successfully.")}async _startGameLogic(){if(console.log("[Game] Starting core game logic..."),a.startTimer(),!(this.level&&this.character&&this.canvas&&this.renderer&&this.gameplayManager&&this.audioManager))throw new Error("Cannot start game - essential components are missing.");this.setGameState(i.LOADING_LEVEL);try{await this.level.loadFloor(this.level.minFloor,this.canvas.width,this.canvas.height);const e=this.level.currentMap;if(!e)throw new Error("Failed to load initial map. Map object is null.");const t=e.findRandomInitialSpawnPosition();if(!t)throw new Error("Failed to find a valid starting position on the map!");this.character.x=t.x,this.character.y=t.y,this.character.currentDirection=s.Direction.DOWN,this.character.isMoving=!1,this.gameplayManager.ensureCharacterIsOnWalkableTile(!1),this.totalBooksCollectedGlobally=0,this.availableQuestions=[...o],this.liftCooldownActive=!1,clearTimeout(this.liftCooldownTimer),this.liftCooldownTimer=null,this.currentBookTarget=null,this.currentQuestionData=null,this.renderer.centerCameraOnCharacter(),a.updateScore(this.totalBooksCollectedGlobally,this.targetBooksToWin),a.showGameUI(),this._boundKeyDownHandler=this.handleKeyDown.bind(this),this._boundKeyUpHandler=this.handleKeyUp.bind(this),window.addEventListener("keydown",this._boundKeyDownHandler),window.addEventListener("keyup",this._boundKeyUpHandler),this.audioManager.startInitialMusic(this.level.currentFloor),console.log(`[Game] Initial music started for floor ${this.level.currentFloor}`),a.startTimer(),this.setGameState(i.PLAYING),this.isRunning||(this.isRunning=!0,requestAnimationFrame(this.gameLoop),console.log("[Game] Game logic started. Loop is running."))}catch(e){throw console.error("[Game] Error during _startGameLogic:",e),this._handleFatalError(`Level start process error: ${e.message}`),e}}_setGameOver(e=!0){this.gameState!==i.GAME_OVER&&(this.setGameState(i.GAME_OVER),this.isRunning=!1,this.character&&(this.character.isMoving=!1),clearTimeout(this.liftCooldownTimer),this.audioManager&&this.audioManager.stopMusic(),this._boundKeyDownHandler&&window.removeEventListener("keydown",this._boundKeyDownHandler),this._boundKeyUpHandler&&window.removeEventListener("keyup",this._boundKeyUpHandler),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null,a.stopTimer(e),a.showGameOverScreen(e,$.CREATOR_NAMES,$.CLASS_ATTENDING_INFO),a.stopTimer(e),console.log(`[Game] Game Over. Win: ${e}`))}stopGame(){console.log("[Game] Explicit stopGame requested."),this._setGameOver(!1),console.log("[Game] Game stopped.")}_handleFatalError(e,t=!0){console.error("[Game] FATAL ERROR:",e),t&&this.gameState!==i.GAME_OVER&&(a.flashMessageContainer&&a.flashMessage?a.flashMessage(`FATAL ERROR: ${e}`,"error",15e3):alert(`FATAL ERROR: ${e}`)),this.gameState!==i.GAME_OVER&&this._setGameOver(!1)}handleKeyDown(e){if(this.gameState!==i.PLAYING||!this.inputManager)return;let t=!1;const o=e.key.toLowerCase();["arrowup","w"].includes(o)?(this.inputManager.setKey("up",!0),t=!0):["arrowdown","s"].includes(o)?(this.inputManager.setKey("down",!0),t=!0):["arrowleft","a"].includes(o)?(this.inputManager.setKey("left",!0),t=!0):["arrowright","d"].includes(o)&&(this.inputManager.setKey("right",!0),t=!0),t&&e.preventDefault()}handleKeyUp(e){if(!this.inputManager)return;const t=e.key.toLowerCase();["arrowup","w"].includes(t)?this.inputManager.setKey("up",!1):["arrowdown","s"].includes(t)?this.inputManager.setKey("down",!1):["arrowleft","a"].includes(t)?this.inputManager.setKey("left",!1):["arrowright","d"].includes(t)&&this.inputManager.setKey("right",!1)}gameLoop(e){this.isRunning&&this.gameState!==i.GAME_OVER&&(this.gameplayManager?.update(e),this.renderer?.centerCameraOnCharacter(),this.renderer?.drawFrame(),requestAnimationFrame(this.gameLoop))}startLiftCooldownTimer(){clearTimeout(this.liftCooldownTimer),console.log("[Game] Starting lift cooldown timer: 2000ms."),this.liftCooldownTimer=setTimeout((()=>{this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.gameState===i.TRANSITIONING?(this.setGameState(i.PLAYING),a.flashMessage(`Arrived at floor ${this.level?.currentFloor}`,"success",1500)):console.warn(`[GameTimer] Lift cooldown ended, but game state is ${this.gameState}. No state change applied.`)}),2e3)}}let F=null;class A{constructor(e){this.characterImageSources=e,this.selectedCharacter=null,this.userInteracted=!1,this.overlay=null,this.audioManagerInstance=null,console.log("[Menu] Constructor called. Initializing elements..."),this.initializeElements(),this.characterPanel?this.setupCharacterImages():console.error("[Menu Constructor] CRITICAL: this.characterPanel is null AFTER initializeElements. Cannot setup images."),console.log("[Menu] Adding event listeners..."),this.addEventListeners(),console.log("[Menu] Instance created.")}setAudioManager(e){this.audioManagerInstance=e,console.log("[Menu] AudioManager instance received."),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume())}initializeElements(){this.menuContainer=document.querySelector(".menu-container"),this.menuContainer||console.error("[Menu Init] CRITICAL: .menu-container not found!"),this.settingsButton=document.querySelector(".settings-button"),this.playButton=document.querySelector(".play-button"),this.characterButton=document.querySelector(".character-button"),this.playButton?this.playButton.disabled=!0:console.warn("[Menu Init] .play-button not found."),this.characterButton||console.warn("[Menu Init] .character-button not found."),this.settingsPanel=document.querySelector(".settings-panel"),this.settingsPanel?(this.settingsPanel.parentNode!==document.body&&document.body.appendChild(this.settingsPanel),this.musicVolume=this.settingsPanel.querySelector("#music-volume"),this.sfxVolume=this.settingsPanel.querySelector("#sfx-volume"),this.closeSettingsButton=this.settingsPanel.querySelector(".panel-close-button"),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume())):console.warn("[Menu Init] .settings-panel not found."),this.characterPanel=document.querySelector(".character-panel"),this.characterPanel?(this.characterPanel.parentNode!==document.body&&document.body.appendChild(this.characterPanel),this.characterGrid=this.characterPanel.querySelector(".character-grid"),this.closeCharacterPanelButton=this.characterPanel.querySelector(".panel-close-button")):console.error("[Menu Init] CRITICAL: .character-panel not found during initialization!"),this.selectedCharacterDisplay=document.createElement("div"),this.selectedCharacterDisplay.className="selected-character-display";const e=this.menuContainer?this.menuContainer.querySelector(".main-menu-buttons"):null;this.playButton&&this.playButton.parentNode?this.playButton.parentNode.insertBefore(this.selectedCharacterDisplay,this.playButton):e?e.insertBefore(this.selectedCharacterDisplay,e.children[1]||null):this.menuContainer?this.menuContainer.appendChild(this.selectedCharacterDisplay):console.error("[Menu Init] Cannot append selectedCharacterDisplay: no suitable parent found."),this.updateSelectedCharacterDisplay()}setupCharacterImages(){if(!this.characterPanel)return;if(!this.characterImageSources)return;const e=this.characterPanel.querySelectorAll(".character-card");0!==e.length&&e.forEach((e=>{const t=e.dataset.character,i=e.querySelector(".character-preview img");i&&this.characterImageSources[t]&&(i.src=this.characterImageSources[t])}))}handleFirstInteraction(){this.userInteracted||(this.userInteracted=!0,console.log("[Menu] First user interaction detected."))}addEventListeners(){const e=(e,t,i)=>{e&&e.addEventListener(t,(e=>{this.handleFirstInteraction(),i.call(this,e)}))};e(this.settingsButton,"click",this.toggleSettings),e(this.playButton,"click",this.startGame),e(this.characterButton,"click",this.openCharacterModal),this.closeSettingsButton&&this.closeSettingsButton.addEventListener("click",(()=>this.closeSettings())),this.closeCharacterPanelButton&&this.closeCharacterPanelButton.addEventListener("click",(()=>this.closeCharacterModal())),this.musicVolume&&this.musicVolume.addEventListener("input",(e=>{if(this.audioManagerInstance){const t=parseFloat(e.target.value)/100;this.audioManagerInstance.setMusicVolume(t),console.log(`[Menu] Music volume changed via slider to: ${t}`)}else console.warn("[Menu] Music volume slider changed, but AudioManager not available.")})),this.sfxVolume,this.characterGrid&&this.characterGrid.addEventListener("click",(e=>{const t=e.target.closest(".character-card");t&&this.characterPanel&&this.characterPanel.classList.contains("visible")&&(this.handleFirstInteraction(),this.selectCharacter(t))}))}openCharacterModal(){this.characterPanel&&this.characterGrid&&(this.characterPanel.classList.add("visible"),this.settingsPanel?.classList.contains("visible")&&this.closeSettings(),this.overlay||(this.overlay=document.createElement("div"),this.overlay.className="character-modal-overlay",this.overlay.addEventListener("click",(e=>{e.target===this.overlay&&this.closeCharacterModal()})),document.body.appendChild(this.overlay)),this.overlay.classList.add("visible"))}closeCharacterModal(){this.characterPanel&&this.characterPanel.classList.remove("visible"),this.overlay&&this.overlay.classList.remove("visible")}selectCharacter(e){if(!this.characterGrid||!e?.dataset?.character)return;const t=e.dataset.character;this.characterGrid.querySelectorAll(".character-card").forEach((e=>e.classList.remove("selected"))),e.classList.add("selected"),this.selectedCharacter=t,this.playButton&&(this.playButton.disabled=!1),this.updateSelectedCharacterDisplay(),this.closeCharacterModal()}updateSelectedCharacterDisplay(){if(this.selectedCharacterDisplay)if(this.selectedCharacter&&this.characterImageSources&&this.characterImageSources[this.selectedCharacter]){const e=this.selectedCharacter,t=this.characterImageSources[e];let i=e.charAt(0).toUpperCase()+e.slice(1)+" Student";if(this.characterGrid){const t=this.characterGrid.querySelector(`.character-card[data-character="${e}"] h3`);t&&(i=t.textContent)}this.selectedCharacterDisplay.innerHTML=`<img src="${t}" alt="${i}" style="width:32px;height:32px;vertical-align:middle;margin-right:8px; border-radius:50%; object-fit:cover; background-color: #444;"> <span style="font-weight:bold;">${i}</span>`}else this.selectedCharacterDisplay.innerHTML='<span style="color:#aaa;">No character selected</span>'}toggleSettings(){this.settingsPanel&&(this.settingsPanel.classList.contains("visible")?this.closeSettings():this.openSettings())}openSettings(){this.settingsPanel&&(this.settingsPanel.classList.add("visible"),this.characterPanel?.classList.contains("visible")&&this.closeCharacterModal(),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume()))}closeSettings(){this.settingsPanel&&this.settingsPanel.classList.contains("visible")&&this.settingsPanel.classList.remove("visible")}async startGame(){if(!this.selectedCharacter)return void a.flashMessage("Please select a character first!","warning",2500);const e=a.getLoadingOverlay();if(e&&e.classList.add("visible"),!this.menuContainer)return void(e&&e.classList.remove("visible"));this.menuContainer.style.display="none";const t=document.getElementById("game-canvas");if(!t)return console.error("[Menu] CRITICAL: #game-canvas not found!"),this.menuContainer&&(this.menuContainer.style.display="flex"),void(e&&e.classList.remove("visible"));t.style.display="block";try{F&&"function"==typeof F.stopGame&&F.stopGame(),F=new $(this.selectedCharacter),F&&F.audioManager?this.setAudioManager(F.audioManager):console.warn("[Menu startGame] Failed to get AudioManager from new Game instance to set it in Menu.")}catch(i){console.error("[Menu] Critical error during game initialization:",i),a.flashMessage(`Game Start Failed: ${i.message}`,"error",1e4),this.menuContainer&&(this.menuContainer.style.display="flex"),t&&(t.style.display="none"),e&&e.classList.remove("visible"),F=null}}}const G=e.p+"assets/images/redc0823efecc8ece1a10c4.png",P=e.p+"assets/images/bluea60b5a2890283d3db0d0.png",O=e.p+"assets/images/yellowe7fd8d3003d4e49a0ad5.png",R=e.p+"assets/images/green1ba3e373f73ba58a2658.png";document.addEventListener("DOMContentLoaded",(()=>{console.log("[main.js] DOMContentLoaded. Initializing Menu..."),new A({red:G,blue:P,yellow:O,green:R})}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUtzdkIsZ0JBQWdCWCxFQUFvQmpDLGNBRXpDdnBCLFFBQVFZLEtBQ04sd0ZBR04sQ0FBRSxNQUFPVixHQUNQRixRQUFRRSxNQUFNLG9EQUFxREEsR0FDbkVQLEVBQVVxRCxhQUFhLHNCQUFzQjlDLEVBQU0rQyxVQUFXLFFBQVMsS0FDbkVwRyxLQUFLa0ssZ0JBQWVsSyxLQUFLa0ssY0FBY2xGLE1BQU1vRixRQUFVLFFBQ3ZENG5CLElBQVlBLEVBQVdodEIsTUFBTW9GLFFBQVUsUUFDdkNtakIsR0FBZ0JBLEVBQWVucEIsVUFBVWlCLE9BQU8sV0FDcERzcEIsRUFBc0IsSUFDeEIsQ0FDRixFLG9OQzVVRnB1QixTQUFTK0UsaUJBQWlCLG9CQUFvQixLQUM1Q25DLFFBQVFDLElBQUksb0RBU1osSUFBSXdyQixFQVAwQixDQUM1QmhDLElBQUssRUFDTEMsS0FBTSxFQUNOQyxPQUFRLEVBQ1JDLE1BQU8sR0FHc0IsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtZ2FtZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvQ29yZS9JbnB1dE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3N0dWRlbnQtZ2FtZS8uL2pzL1VJL1VJTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9Db3JlL0NoYXJhY3Rlci5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9tYXAvQm9vay5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy91dGlscy9tYXAuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvbWFwL01hcFJlbmRlcmVyLmpzIiwid2VicGFjazovL3N0dWRlbnQtZ2FtZS8uL2pzL21hcC9NYXBHZW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvbWFwL1Byb2NlZHVyYWxNYXAuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvQ29yZS9MZXZlbC5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9Db3JlL0dhbWVSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9Db3JlL0dhbWVwbGF5TWFuYWdlci5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9hdWRpby9BdWRpb01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvQ29yZS9HYW1lLmpzIiwid2VicGFjazovL3N0dWRlbnQtZ2FtZS8uL2pzL1VJL01lbnUuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdTQ1JJUFQnKVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAoIXNjcmlwdFVybCB8fCAhL15odHRwKHM/KTovLnRlc3Qoc2NyaXB0VXJsKSkpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoL15ibG9iOi8sIFwiXCIpLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBzcmMvY29yZS9JbnB1dE1hbmFnZXIuanNcclxuZXhwb3J0IGNsYXNzIElucHV0TWFuYWdlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmtleXMgPSB7XHJcbiAgICAgIHVwOiBmYWxzZSxcclxuICAgICAgZG93bjogZmFsc2UsXHJcbiAgICAgIGxlZnQ6IGZhbHNlLFxyXG4gICAgICByaWdodDogZmFsc2UsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0S2V5KGtleSwgaXNQcmVzc2VkKSB7XHJcbiAgICBpZiAodGhpcy5rZXlzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgdGhpcy5rZXlzW2tleV0gPSBpc1ByZXNzZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRJbnB1dERpcmVjdGlvbigpIHtcclxuICAgIGxldCB4ID0gMDtcclxuICAgIGxldCB5ID0gMDtcclxuICAgIGlmICh0aGlzLmtleXMudXApIHkgLT0gMTtcclxuICAgIGlmICh0aGlzLmtleXMuZG93bikgeSArPSAxO1xyXG4gICAgaWYgKHRoaXMua2V5cy5sZWZ0KSB4IC09IDE7XHJcbiAgICBpZiAodGhpcy5rZXlzLnJpZ2h0KSB4ICs9IDE7XHJcbiAgICByZXR1cm4geyB4LCB5IH07XHJcbiAgfVxyXG59XHJcbiIsIi8vIHNyYy91dGlscy9jb25zdGFudHMuanNcclxuXHJcbi8vIERlZmluaWNqZSB0eXDDs3cga2FmZWxrw7N3IG1hcHlcclxuZXhwb3J0IGNvbnN0IFRJTEVfV0FMTCA9IDA7IC8vIMWaY2lhbmFcclxuZXhwb3J0IGNvbnN0IFRJTEVfQ09SUklET1IgPSAxOyAvLyBLb3J5dGFyelxyXG5leHBvcnQgY29uc3QgVElMRV9ST09NX0ZMT09SID0gMjsgLy8gUG9kxYJvZ2EgcG9rb2p1XHJcbmV4cG9ydCBjb25zdCBUSUxFX0xJRlQgPSAzOyAvLyBXaW5kYVxyXG4vLyBNb8W8bmEgZG9kYcSHIHdpxJljZWogdHlww7N3LCBucC4gVElMRV9ET09SLCBUSUxFX1dJTkRPVyBpdHAuXHJcblxyXG4vLyBTdGFueSBncnlcclxuZXhwb3J0IGNvbnN0IEdhbWVTdGF0ZSA9IHtcclxuICBMT0FESU5HOiAnTE9BRElORycsIC8vIMWBYWRvd2FuaWUgemFzb2LDs3csIGdlbmVyb3dhbmllIHBvemlvbXVcclxuICBNRU5VOiAnTUVOVScsIC8vIE1lbnUgZ8WCw7N3bmUgKHd5YsOzciBwb3N0YWNpKVxyXG4gIFBMQVlJTkc6ICdQTEFZSU5HJywgLy8gR8WCw7N3bmEgcm96Z3J5d2thXHJcbiAgQVNLSU5HX1FVRVNUSU9OOiAnQVNLSU5HX1FVRVNUSU9OJywgLy8gV3nFm3dpZXRsYW5pZSBweXRhbmlhXHJcbiAgU0VMRUNUSU5HX0ZMT09SOiAnU0VMRUNUSU5HX0ZMT09SJywgLy8gV3nFm3dpZXRsYW5pZSBVSSB3eWJvcnUgcGnEmXRyYVxyXG4gIFRSQU5TSVRJT05JTkc6ICdUUkFOU0lUSU9OSU5HJywgLy8gQW5pbWFjamEvb2N6ZWtpd2FuaWUgbmEgcHJ6ZWrFm2NpZSB3aW5keVxyXG4gIEdBTUVfT1ZFUjogJ0dBTUVfT1ZFUicsIC8vIEtvbmllYyBncnkgKHd5Z3JhbmEgbHViIHByemVncmFuYSlcclxufTtcclxuXHJcbi8vIFBhcmFtZXRyeSByb3pncnl3a2lcclxuZXhwb3J0IGNvbnN0IFRBUkdFVF9CT09LU19UT19XSU4gPSAxNTsgLy8gTGljemJhIGtzacSFxbxlayBkbyB6ZWJyYW5pYSwgYWJ5IHd5Z3JhxIcgKGdsb2JhbG5pZSlcclxuZXhwb3J0IGNvbnN0IExJRlRfQ09PTERPV05fTVMgPSAyMDAwOyAvLyBDemFzIG9kbm93aWVuaWEgd2luZHkgdyBtaWxpc2VrdW5kYWNoICgyIHNla3VuZHkpXHJcbmV4cG9ydCBjb25zdCBMSUZUX0lOVEVSQUNUSU9OX1JBRElVU19NVUxUSVBMSUVSID0gMC43OyAvLyBNbm/FvG5payBwcm9taWVuaWEgaW50ZXJha2NqaSB6IHdpbmTEhSAod3pnbMSZZGVtIHRpbGVTaXplKVxyXG5cclxuLy8gU3phbnNhIG5hIHBvamF3aWVuaWUgc2nEmSBzacWCb3duaSBuYSBwaWVyd3N6eW0gcGnEmXRyemUgKDAuMCBkbyAxLjApXHJcbmV4cG9ydCBjb25zdCBHWU1fQ0hBTkNFX09OX0ZJUlNUX0ZMT09SID0gMC42OyAvLyA2MCUgc3phbnN5XHJcblxyXG4vLyBQeXRhbmlhIGkgb2Rwb3dpZWR6aVxyXG5leHBvcnQgY29uc3QgcXVlc3Rpb25zID0gW1xyXG4gIHtcclxuICAgIHF1ZXN0aW9uOlxyXG4gICAgICAnS3TDs3J5IGrEmXp5ayBwcm9ncmFtb3dhbmlhIGplc3Qgem5hbnkgemUgc3dvamVqIHdzemVjaHN0cm9ubm/Fm2NpIGkgdcW8eXdhbnkgemFyw7N3bm8gdyBiYWNrZW5kemllIChOb2RlLmpzKSwgamFrIGkgZnJvbnRlbmR6aWU/JyxcclxuICAgIG9wdGlvbnM6IFsnUHl0aG9uJywgJ0phdmEnLCAnSmF2YVNjcmlwdCcsICdDIyddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMiwgLy8gSW5kZWtzIHBvcHJhd25laiBvZHBvd2llZHppIChKYXZhU2NyaXB0KVxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDbyBvem5hY3phIHNrcsOzdCBIVE1MPycsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdIeXBlclRleHQgTWFya3VwIExhbmd1YWdlJyxcclxuICAgICAgJ0hpZ2ggVHJhbnNmZXIgTWFjaGluZSBMYW5ndWFnZScsXHJcbiAgICAgICdIeXBlcmxpbmsgYW5kIFRleHQgTWFuYWdlbWVudCBMYW5ndWFnZScsXHJcbiAgICAgICdIb21lIFRvb2wgTWFya3VwIExhbmd1YWdlJyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAwLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdLdMOzcmEgc3RydWt0dXJhIGRhbnljaCBkemlhxYJhIG5hIHphc2FkemllIExJRk8gKExhc3QtSW4sIEZpcnN0LU91dCk/JyxcclxuICAgIG9wdGlvbnM6IFsnS29sZWprYSAoUXVldWUpJywgJ1N0b3MgKFN0YWNrKScsICdMaXN0YSAoTGlzdCknLCAnRHJ6ZXdvIChUcmVlKSddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMSxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOiAnSmFrIG5henl3YSBzacSZIHByb2NlcyB6bmFqZG93YW5pYSBpIG5hcHJhd2lhbmlhIGLFgsSZZMOzdyB3IGtvZHppZT8nLFxyXG4gICAgb3B0aW9uczogWydLb21waWxhY2phJywgJ1Rlc3Rvd2FuaWUnLCAnRGVidWdvd2FuaWUnLCAnUmVmYWt0b3J5emFjamEnXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjpcclxuICAgICAgXCJLdMOzcnkgcGFyYWR5Z21hdCBwcm9ncmFtb3dhbmlhIG9waWVyYSBzacSZIG5hIGtvbmNlcGNqaSAnb2JpZWt0w7N3Jywga3TDs3JlIG1vZ8SFIHphd2llcmHEhyBkYW5lIGkga29kP1wiLFxyXG4gICAgb3B0aW9uczogW1xyXG4gICAgICAnUHJvZ3JhbW93YW5pZSBmdW5rY3lqbmUnLFxyXG4gICAgICAnUHJvZ3JhbW93YW5pZSBwcm9jZWR1cmFsbmUnLFxyXG4gICAgICAnUHJvZ3JhbW93YW5pZSBvYmlla3Rvd2UnLFxyXG4gICAgICAnUHJvZ3JhbW93YW5pZSBsb2dpY3puZScsXHJcbiAgICBdLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMixcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOiAnQ28gb3puYWN6YSBDU1M/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0Nhc2NhZGluZyBTdHlsZSBTaGVldHMnLFxyXG4gICAgICAnQ29tcHV0ZXIgU3R5bGUgU3ludGF4JyxcclxuICAgICAgJ0NyZWF0aXZlIFN0eWxpbmcgU3lzdGVtJyxcclxuICAgICAgJ0NvbG9yZnVsIFN0eWxlIFNjcmlwdHMnLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDAsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0t0w7NyeSBvcGVyYXRvciB3IEphdmFTY3JpcHQgc8WCdcW8eSBkbyDFm2Npc8WCZWdvIHBvcsOzd25hbmlhICh3YXJ0b8WbxIcgaSB0eXApPycsXHJcbiAgICBvcHRpb25zOiBbJz09JywgJz0nLCAnPT09JywgJyE9J10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAyLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdKYWsgbmF6eXdhIHNpxJkgcG9wdWxhcm55IHN5c3RlbSBrb250cm9saSB3ZXJzamkgdcW8eXdhbnkgcHJ6ZXogcHJvZ3JhbWlzdMOzdz8nLFxyXG4gICAgb3B0aW9uczogWydTdWJ2ZXJzaW9uIChTVk4pJywgJ0dpdCcsICdNZXJjdXJpYWwnLCAnQ1ZTJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAxLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246XHJcbiAgICAgICdLdMOzcnkgdHlwIHDEmXRsaSB3IHdpxJlrc3pvxZtjaSBqxJl6eWvDs3cgcHJvZ3JhbW93YW5pYSBqZXN0IG5hamJhcmR6aWVqIG9kcG93aWVkbmkgZG8gaXRlcmFjamkgcG8gZWxlbWVudGFjaCB0YWJsaWN5LCBnZHkgbmllIHpuYW15IGljaCBsaWN6Ynk/JyxcclxuICAgIG9wdGlvbnM6IFsnZm9yJywgJ3doaWxlJywgJ2RvLi4ud2hpbGUnLCAnZm9yZWFjaCAobHViIGZvci4uLm9mKSddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMyxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOiAnQ28gdG8gamVzdCBBUEk/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0FkdmFuY2VkIFByb2dyYW1taW5nIEludGVyZmFjZScsXHJcbiAgICAgICdBcHBsaWNhdGlvbiBQcm9ncmFtbWluZyBJbnRlcmZhY2UnLFxyXG4gICAgICAnQXV0b21hdGVkIFByb2dyYW0gSW50ZXJhY3Rpb24nLFxyXG4gICAgICAnQWxnb3JpdGhtaWMgUHJvY2Vzc2luZyBJbnB1dCcsXHJcbiAgICBdLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMSxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOiAnQ28gdG8gamVzdCBQTEMgaSBkbyBjemVnbyBuYWpjesSZxZtjaWVqIHPFgnXFvHkgdyBhdXRvbWF0eWNlPycsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdQcm9ncmFtb3dhbG55IExvZ2ljIENvbnRyb2xsZXIsIGRvIHN0ZXJvd2FuaWEgcHJvY2VzYW1pIHByemVteXPFgm93eW1pJyxcclxuICAgICAgJ1BlcnNvbmFsIExlYXJuaW5nIENvbXB1dGVyLCBkbyBuYXVraSBwcm9ncmFtb3dhbmlhJyxcclxuICAgICAgJ1Bvd2VyIExpbmUgQ29tbXVuaWNhdGlvbiwgZG8gcHJ6ZXN5xYJ1IGRhbnljaCBwcnpleiBzaWXEhyBlbGVrdHJ5Y3puxIUnLFxyXG4gICAgICAnUHJvamVjdCBMaWZlY3ljbGUgQ29zdCwgZG8gemFyesSFZHphbmlhIGtvc3p0YW1pIHByb2pla3R1JyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAwLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdaYSBjbyBvZHBvd2lhZGEgcHJ6eXPFgm9uYSAoYXBlcnR1cmEpIHcgYXBhcmFjaWUgZm90b2dyYWZpY3pueW0/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0tvbnRyb2zEmSBjemFzdSBuYcWbd2lldGxhbmlhJyxcclxuICAgICAgJ1JlZ3VsYWNqxJkgZ8WCxJliaSBvc3Ryb8WbY2kgaSBpbG/Fm2NpIHdwYWRhasSFY2VnbyDFm3dpYXTFgmEnLFxyXG4gICAgICAnVXN0YXdpZW5pZSBiYWxhbnN1IGJpZWxpJyxcclxuICAgICAgJ1N0YWJpbGl6YWNqxJkgb2JyYXp1JyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAxLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246XHJcbiAgICAgICdLdMOzcnkgZWxlbWVudCBrb21wdXRlcmEgamVzdCBvZHBvd2llZHppYWxueSB6YSB0eW1jemFzb3dlIHByemVjaG93eXdhbmllIGRhbnljaCB1xbx5d2FueWNoIHByemV6IHByb2Nlc29yPycsXHJcbiAgICBvcHRpb25zOiBbJ0R5c2sgdHdhcmR5IChIREQvU1NEKScsICdLYXJ0YSBncmFmaWN6bmEgKEdQVSknLCAnUGFtacSZxIcgUkFNJywgJ1DFgnl0YSBnxYLDs3duYSddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMixcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOlxyXG4gICAgICAnVyBqYWtpbSBqxJl6eWt1IHByb2dyYW1vd2FuaWEgbmFqY3rEmcWbY2llaiBwaXNhbmUgc8SFIHNrcnlwdHkgcG8gc3Ryb25pZSBzZXJ3ZXJhIChiYWNrZW5kKT8nLFxyXG4gICAgb3B0aW9uczogWydIVE1MJywgJ0NTUycsICdTUUwnLCAnUEhQLCBQeXRob24gbHViIE5vZGUuanMgKEphdmFTY3JpcHQpJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246XHJcbiAgICAgICdKYWtpIHR5cCBzeWduYcWCdSBjaGFyYWt0ZXJ5enVqZSBzacSZIHDFgnlubsSFIHptaWFuxIUgd2FydG/Fm2NpIHcgY3phc2llLCB3IHByemVjaXdpZcWEc3R3aWUgZG8gc3lnbmHFgnUgY3lmcm93ZWdvPycsXHJcbiAgICBvcHRpb25zOiBbJ0JpbmFybnknLCAnQW5hbG9nb3d5JywgJ1plcm8tamVkeW5rb3d5JywgJ0ltcHVsc293eSddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMSxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOlxyXG4gICAgICAnS3TDs3J5IHBhcmFtZXRyIHVzdGF3aWEgY3p1xYJvxZvEhyBtYXRyeWN5IGFwYXJhdHUgbmEgxZt3aWF0xYJvIGkgd3DFgnl3YSBuYSBwb3ppb20gc3p1bcOzdyBuYSB6ZGrEmWNpdT8nLFxyXG4gICAgb3B0aW9uczogWydDemFzIG5hxZt3aWV0bGFuaWEnLCAnUHJ6eXPFgm9uYScsICdJU08nLCAnT2duaXNrb3dhJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAyLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDbyB0byBqZXN0IGFkcmVzIElQIHcgc2llY2kga29tcHV0ZXJvd2VqPycsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdVbmlrYWxueSBpZGVudHlmaWthdG9yIHVyesSFZHplbmlhIHcgc2llY2knLFxyXG4gICAgICAnTmF6d2EgdcW8eXRrb3duaWthIGRvIGxvZ293YW5pYScsXHJcbiAgICAgICdBZHJlcyBzdHJvbnkgaW50ZXJuZXRvd2VqJyxcclxuICAgICAgJ1R5cCBrYWJsYSBzaWVjaW93ZWdvJyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAwLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDenltIHLDs8W8bmkgc2nEmSBpbnN0cnVrY2phIHdhcnVua293YSBgaWZgIG9kIHDEmXRsaSBgd2hpbGVgIHcgcHJvZ3JhbW93YW5pdT8nLFxyXG4gICAgb3B0aW9uczogW1xyXG4gICAgICAnYGlmYCBwb3d0YXJ6YSBibG9rIGtvZHUsIGB3aGlsZWAgc3ByYXdkemEgd2FydW5layBqZWRub2tyb3RuaWUnLFxyXG4gICAgICAnYGlmYCBzcHJhd2R6YSB3YXJ1bmVrIGplZG5va3JvdG5pZSwgYHdoaWxlYCBwb3d0YXJ6YSBibG9rIGtvZHUgZG9ww7NraSB3YXJ1bmVrIGplc3QgcHJhd2R6aXd5JyxcclxuICAgICAgJ05pZSBtYSBtacSZZHp5IG5pbWkgcsOzxbxuaWN5JyxcclxuICAgICAgJ2BpZmAgc8WCdcW8eSB0eWxrbyBkbyBkZWtsYXJvd2FuaWEgem1pZW5ueWNoLCBgd2hpbGVgIGRvIG9wZXJhY2ppIG1hdGVtYXR5Y3pueWNoJyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAxLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdEbyBjemVnbyBuYWpjesSZxZtjaWVqIHPFgnXFvHkgY3p1am5payBjacWbbmllbmlhIHcgc3lzdGVtaWUgYXV0b21hdHlraT8nLFxyXG4gICAgb3B0aW9uczogWydQb21pYXJ1IHRlbXBlcmF0dXJ5JywgJ1BvbWlhcnUgb2RsZWfFgm/Fm2NpJywgJ1BvbWlhcnUgc2nFgnknLCAnUG9taWFydSBjacWbbmllbmlhJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDbyBvem5hY3phIHphc2FkYSB0csOzanBvZHppYcWCdSB3IGtvbXBvenljamkgZm90b2dyYWZpY3puZWo/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0R6aWVsZW5pZSBvYnJhenUgbmEgMyByw7N3bmUgY3rEmcWbY2kgcGlvbm93byBpIHBvemlvbW8gaSB1bWllc3pjemFuaWUga2x1Y3pvd3ljaCBlbGVtZW50w7N3IG5hIGxpbmlhY2ggbHViIGljaCBwcnplY2nEmWNpYWNoJyxcclxuICAgICAgJ1XFvHl3YW5pZSB0eWxrbyAzIGfFgsOzd255Y2gga29sb3LDs3cgdyBrYWRyemUnLFxyXG4gICAgICAnUm9iaWVuaWUgemF3c3plIDMgemRqxJnEhyB0ZWogc2FtZWogc2NlbnknLFxyXG4gICAgICAnQmFsYW5zb3dhbmllIDMgZ8WCw7N3bnljaCBvYmlla3TDs3cgdyBrYWRyemUnLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDAsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0pha2EgamVzdCBwb2RzdGF3b3dhIHJvbGEgc3lzdGVtdSBvcGVyYWN5am5lZ28/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ1R3b3J6ZW5pZSBncmFmaWtpIGtvbXB1dGVyb3dlaicsXHJcbiAgICAgICdaYXJ6xIVkemFuaWUgemFzb2JhbWkgc3ByesSZdG93eW1pIGkgcHJvZ3JhbW93eW1pIGtvbXB1dGVyYScsXHJcbiAgICAgICdQaXNhbmllIGtvZHUgcHJvZ3JhbcOzdycsXHJcbiAgICAgICdQcnplZ2zEhWRhbmllIEludGVybmV0dScsXHJcbiAgICBdLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMSxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOlxyXG4gICAgICAnSmFraWVnbyB0eXB1IGRhbnljaCBuYWpjesSZxZtjaWVqIHXFvHlqZXN6IGRvIHByemVjaG93eXdhbmlhIHdpZWt1IG9zb2J5IChsaWN6YmEgY2HFgmtvd2l0YSk/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ1N0cmluZyAoY2nEhWcgem5ha8OzdyknLFxyXG4gICAgICAnQm9vbGVhbiAod2FydG/Fm8SHIGxvZ2ljem5hKScsXHJcbiAgICAgICdGbG9hdCAobGljemJhIHptaWVubm9wcnplY2lua293YSknLFxyXG4gICAgICAnSW50ZWdlciAobGljemJhIGNhxYJrb3dpdGEpJyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdFbGVtZW50IHd5a29uYXdjenkgKGFrdHVhdG9yKSB3IHN5c3RlbWllIGF1dG9tYXR5a2kgdG8gdXJ6xIVkemVuaWUsIGt0w7NyZS4uLicsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdPZGN6eXR1amUgZGFuZSB6IGN6dWpuaWvDs3cnLFxyXG4gICAgICAnV3lrb251amUga29tZW5keSB6ZSBzdGVyb3duaWthLCBhYnkgd3lrb25hxIcgZml6eWN6bmUgZHppYcWCYW5pZSAobnAuIHJ1Y2gpJyxcclxuICAgICAgJ1ByemVjaG93dWplIGRhbmUgaGlzdG9yeWN6bmUnLFxyXG4gICAgICAnU8WCdcW8eSBkbyBrb211bmlrYWNqaSB6IG9wZXJhdG9yZW0nLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDEsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjpcclxuICAgICAgJ0t0w7NyeSBmb3JtYXQgcGxpa3UgZ3JhZmljem5lZ28gamVzdCBiZXpzdHJhdG55IGkgY3rEmXN0byB1xbx5d2FueSB3IHByb2Zlc2pvbmFsbmVqIGVkeWNqaSwgemFjaG93dWrEhWMgbWFrc3ltYWxuxIUgamFrb8WbxIcga29zenRlbSByb3ptaWFydT8nLFxyXG4gICAgb3B0aW9uczogWydKUEVHJywgJ0dJRicsICdQTkcnLCAnUkFXJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDbyBjaHJvbmkgc2llxIcga29tcHV0ZXJvd8SFIHByemVkIG5pZWF1dG9yeXpvd2FueW0gZG9zdMSZcGVtIHogemV3bsSFdHJ6PycsXHJcbiAgICBvcHRpb25zOiBbJ1JvdXRlcicsICdTd2l0Y2gnLCAnTW9kZW0nLCAnRmlyZXdhbGwgKHphcG9yYSBzaWVjaW93YSknXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDMsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0NvIHRvIGplc3QgSURFIChJbnRlZ3JhdGVkIERldmVsb3BtZW50IEVudmlyb25tZW50KSB3IGtvbnRla8WbY2llIHByb2dyYW1vd2FuaWE/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ1N5c3RlbSBvcGVyYWN5am55JyxcclxuICAgICAgJ05hcnrEmWR6aWUgZG8gemFyesSFZHphbmlhIGJhesSFIGRhbnljaCcsXHJcbiAgICAgICdaaW50ZWdyb3dhbmUgxZtyb2Rvd2lza28gcHJvZ3JhbWlzdHljem5lIChlZHl0b3Iga29kdSwga29tcGlsYXRvciwgZGVidWdnZXIgdyBqZWRueW0pJyxcclxuICAgICAgJ1Byb3Rva8OzxYIgc2llY2lvd3knLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjpcclxuICAgICAgJ1ByenlrxYJhZGVtIGN6dWpuaWthIHpibGnFvGVuaW93ZWdvLCB3eWtyeXdhasSFY2VnbyBvYmVjbm/Fm8SHIG9iaWVrdHUgYmV6IGZpenljem5lZ28ga29udGFrdHUsIG1vxbxlIGJ5xIc6JyxcclxuICAgIG9wdGlvbnM6IFsnVGVybW9tZXRyJywgJ0ZvdG9rb23Ds3JrYScsICdNYW5vbWV0ciAoY3p1am5payBjacWbbmllbmlhKScsICdBa2NlbGVyb21ldHInXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDEsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0RvIGN6ZWdvIHPFgnXFvHkgYmFsYW5zIGJpZWxpICh3aGl0ZSBiYWxhbmNlKSB3IGFwYXJhY2llIGZvdG9ncmFmaWN6bnltPycsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdEbyByZWd1bGFjamkgb3N0cm/Fm2NpJyxcclxuICAgICAgJ0RvIGtvcmVrY2ppIGtvbG9yw7N3LCBhYnkgYmlhxYJ5IHd5Z2zEhWRhxYIgbmEgYmlhxYJ5IG5pZXphbGXFvG5pZSBvZCDFunLDs2TFgmEgxZt3aWF0xYJhJyxcclxuICAgICAgJ0RvIHVzdGF3aWFuaWEgY3phc3UgbmHFm3dpZXRsYW5pYScsXHJcbiAgICAgICdEbyBkb2Rhd2FuaWEgZWZla3TDs3cgc3BlY2phbG55Y2gnLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDEsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjpcclxuICAgICAgJ0t0w7NyeSBwcm90b2vDs8WCIGplc3QgdcW8eXdhbnkgZG8gYmV6cGllY3puZWdvIChzenlmcm93YW5lZ28pIHByemVzecWCYW5pYSBzdHJvbiBpbnRlcm5ldG93eWNoPycsXHJcbiAgICBvcHRpb25zOiBbJ0hUVFAnLCAnRlRQJywgJ1NNVFAnLCAnSFRUUFMnXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDMsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0NvIHRvIGplc3Qgem1pZW5uYSB3IHByb2dyYW1vd2FuaXU/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0Z1bmtjamEgd3lrb251asSFY2Egb2tyZcWbbG9uZSB6YWRhbmllJyxcclxuICAgICAgJ1R5cCBwxJl0bGknLFxyXG4gICAgICAnTmF6d2FuZSBtaWVqc2NlIHcgcGFtacSZY2kga29tcHV0ZXJhIHPFgnXFvMSFY2UgZG8gcHJ6ZWNob3d5d2FuaWEgZGFueWNoJyxcclxuICAgICAgJ1BvbGVjZW5pZSB3ecWbd2lldGxhasSFY2UgdGVrc3QgbmEgZWtyYW5pZScsXHJcbiAgICBdLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMixcclxuICB9LFxyXG4gIC8vIERvZGFqIHdpxJljZWogcHl0YcWEIHR1dGFqXHJcbl07XHJcbiIsIi8vIHNyYy9VSS9VSU1hbmFnZXIuanNcclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJzsgLy8g0KDQsNGB0LrQvtC80LzQtdC90YLQuNGA0YPQudGC0LUsINC10YHQu9C4INC90YPQttC90L4g0LTQu9GPINC70L7Qs9C40LrQuCDQstC90YPRgtGA0LggVUlNYW5hZ2VyXHJcblxyXG5leHBvcnQgY2xhc3MgVUlNYW5hZ2VyIHtcclxuICBzdGF0aWMgc2NvcmVFbGVtZW50ID0gbnVsbDtcclxuICBzdGF0aWMgdGFyZ2V0RWxlbWVudCA9IG51bGw7XHJcbiAgc3RhdGljIGNvbnRyb2xzQ29udGFpbmVyID0gbnVsbDtcclxuICBzdGF0aWMgcXVlc3Rpb25PdmVybGF5ID0gbnVsbDtcclxuICBzdGF0aWMgcXVlc3Rpb25UZXh0RWxlbWVudCA9IG51bGw7XHJcbiAgc3RhdGljIGFuc3dlckJ1dHRvbnNDb250YWluZXIgPSBudWxsO1xyXG4gIHN0YXRpYyBmbG9vclNlbGVjdGlvblBhbmVsID0gbnVsbDtcclxuICBzdGF0aWMgZmxvb3JCdXR0b25zQ29udGFpbmVyID0gbnVsbDtcclxuICBzdGF0aWMgZmxhc2hNZXNzYWdlQ29udGFpbmVyID0gbnVsbDtcclxuICBzdGF0aWMgbG9hZGluZ092ZXJsYXlFbGVtZW50ID0gbnVsbDsgLy8g0JTQu9GPINC60Y3RiNC40YDQvtCy0LDQvdC40Y8g0Y3Qu9C10LzQtdC90YLQsFxyXG5cclxuICAvLyDQrdC70LXQvNC10L3RgtGLINC00LvRjyDRjdC60YDQsNC90LAgR2FtZSBPdmVyXHJcbiAgc3RhdGljIGdhbWVPdmVyU2NyZWVuRWxlbWVudCA9IG51bGw7XHJcbiAgc3RhdGljIGdhbWVPdmVyVGl0bGVFbGVtZW50ID0gbnVsbDtcclxuICBzdGF0aWMgY3JlYXRvck5hbWVzTGlzdEVsZW1lbnQgPSBudWxsO1xyXG4gIHN0YXRpYyBjbGFzc0luZm9FbGVtZW50ID0gbnVsbDtcclxuICBzdGF0aWMgcmV0dXJuVG9NZW51QnV0dG9uRWxlbWVudCA9IG51bGw7XHJcblxyXG4gIHN0YXRpYyBnYW1lcGxheU1hbmFnZXJJbnN0YW5jZSA9IG51bGw7IC8vINCh0YHRi9C70LrQsCDQvdCwIEdhbWVwbGF5TWFuYWdlclxyXG4gIHN0YXRpYyBmbGFzaE1lc3NhZ2VUaW1lb3V0cyA9IHt9O1xyXG5cclxuICAvLyBOZXcgc3RhdGljIGZpZWxkc1xyXG4gIHN0YXRpYyB0aW1lckVsZW1lbnQgPSBudWxsO1xyXG4gIHN0YXRpYyBsZWFkZXJib2FyZEVsZW1lbnQgPSBudWxsO1xyXG4gIHN0YXRpYyBnYW1lU3RhcnRUaW1lID0gMDtcclxuICBzdGF0aWMgbGVhZGVyYm9hcmREYXRhID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqINCS0YvQt9GL0LLQsNC10YLRgdGPINC40LcgR2FtZS5qcyDQtNC70Y8g0YDQtdCz0LjRgdGC0YDQsNGG0LjQuCDRjdC60LfQtdC80L/Qu9GP0YDQsCBHYW1lcGxheU1hbmFnZXIuXHJcbiAgICovXHJcbiAgc3RhdGljIHNldEdhbWVwbGF5TWFuYWdlcihtYW5hZ2VyKSB7XHJcbiAgICBpZiAoIW1hbmFnZXIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gQXR0ZW1wdGVkIHRvIHNldCBHYW1lcGxheU1hbmFnZXIgaW5zdGFuY2UgdG8gbnVsbCBvciB1bmRlZmluZWQhJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuZ2FtZXBsYXlNYW5hZ2VySW5zdGFuY2UgPSBtYW5hZ2VyO1xyXG4gICAgY29uc29sZS5sb2coJ1tVSU1hbmFnZXJdIEdhbWVwbGF5TWFuYWdlciBpbnN0YW5jZSByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseSB3aXRoIFVJTWFuYWdlci4nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqINCY0L3QuNGG0LjQsNC70LjQt9C40YDRg9C10YIg0LHQsNC30L7QstGL0LUg0Y3Qu9C10LzQtdC90YLRiyBVSS5cclxuICAgKiBHYW1lLmpzINC00L7Qu9C20LXQvSDQstGL0LfQstCw0YLRjCBzZXRHYW1lcGxheU1hbmFnZXIg0J/QldCg0JXQlCDRjdGC0LjQvCDQvNC10YLQvtC00L7QvC5cclxuICAgKi9cclxuICBzdGF0aWMgaW5pdGlhbGl6ZVVJKGlucHV0TWFuYWdlcikge1xyXG4gICAgY29uc29sZS5sb2coJ1tVSU1hbmFnZXJdIEluaXRpYWxpemluZyBiYXNlIFVJIGVsZW1lbnRzIChjb250cm9scywgcGFuZWxzKS4uLicpO1xyXG4gICAgaWYgKCFpbnB1dE1hbmFnZXIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gSW5wdXRNYW5hZ2VyIGlzIHJlcXVpcmVkIGZvciBpbml0aWFsaXplVUkgdG8gY3JlYXRlIGNvbnRyb2xzLicpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jcmVhdGVDb250cm9scyhpbnB1dE1hbmFnZXIpO1xyXG4gICAgdGhpcy5jcmVhdGVRdWVzdGlvblVJKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUZsb29yU2VsZWN0aW9uVUkoKTtcclxuICAgIHRoaXMuZW5zdXJlRmxhc2hNZXNzYWdlQ29udGFpbmVyKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUdhbWVPdmVyU2NyZWVuKCk7IC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGN0LrRgNCw0L3QsCBHYW1lIE92ZXJcclxuICAgIHRoaXMuaW5pdGlhbGl6ZVRpbWVyKCk7IC8vIEluaXRpYWxpemUgdGltZXJcclxuICAgIHRoaXMudXBkYXRlTGVhZGVyYm9hcmQoKTsgLy8gQWRkIHRoaXMgbGluZVxyXG5cclxuICAgIGlmICghdGhpcy5nYW1lcGxheU1hbmFnZXJJbnN0YW5jZSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ1tVSU1hbmFnZXJdIFdBUk5JTkc6IEdhbWVwbGF5TWFuYWdlciBpbnN0YW5jZSBpcyBOT1QgU0VUIGF0IHRoZSBlbmQgb2YgaW5pdGlhbGl6ZVVJLiAnICtcclxuICAgICAgICAgICdFbnN1cmUgR2FtZS5qcyBjYWxscyBVSU1hbmFnZXIuc2V0R2FtZXBsYXlNYW5hZ2VyKCkgKmJlZm9yZSogVUlNYW5hZ2VyLmluaXRpYWxpemVVSSgpLidcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKCdbVUlNYW5hZ2VyXSBCYXNlIFVJIGVsZW1lbnQgaW5pdGlhbGl6YXRpb24gY29tcGxldGUuJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY3JlYXRlQ29udHJvbHMoaW5wdXRNYW5hZ2VyKSB7XHJcbiAgICB0aGlzLmNvbnRyb2xzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRyb2xzLWNvbnRhaW5lcicpO1xyXG4gICAgaWYgKCF0aGlzLmNvbnRyb2xzQ29udGFpbmVyKSB7XHJcbiAgICAgIHRoaXMuY29udHJvbHNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5jb250cm9sc0NvbnRhaW5lci5pZCA9ICdjb250cm9scy1jb250YWluZXInO1xyXG4gICAgICB0aGlzLmNvbnRyb2xzQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2NvbnRyb2xzLWNvbnRhaW5lcicpO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuY29udHJvbHNDb250YWluZXIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb250cm9sc0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICBjb25zdCBhcnJvd3MgPSBbXHJcbiAgICAgIHsgZGlyZWN0aW9uOiAndXAnLCBpY29uOiAn4oaRJywgZ3JpZEFyZWE6ICd1cCcgfSxcclxuICAgICAgeyBkaXJlY3Rpb246ICdsZWZ0JywgaWNvbjogJ+KGkCcsIGdyaWRBcmVhOiAnbGVmdCcgfSxcclxuICAgICAgeyBkaXJlY3Rpb246ICdyaWdodCcsIGljb246ICfihpInLCBncmlkQXJlYTogJ3JpZ2h0JyB9LFxyXG4gICAgICB7IGRpcmVjdGlvbjogJ2Rvd24nLCBpY29uOiAn4oaTJywgZ3JpZEFyZWE6ICdkb3duJyB9LFxyXG4gICAgXTtcclxuXHJcbiAgICBhcnJvd3MuZm9yRWFjaCgoeyBkaXJlY3Rpb24sIGljb24sIGdyaWRBcmVhIH0pID0+IHtcclxuICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgIGJ0bi5jbGFzc05hbWUgPSBgY29udHJvbC1idG4gJHtkaXJlY3Rpb259YDtcclxuICAgICAgYnRuLnRleHRDb250ZW50ID0gaWNvbjtcclxuICAgICAgYnRuLnN0eWxlLmdyaWRBcmVhID0gZ3JpZEFyZWE7XHJcbiAgICAgIGJ0bi5kYXRhc2V0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcclxuXHJcbiAgICAgIGlmIChpbnB1dE1hbmFnZXIpIHtcclxuICAgICAgICBjb25zdCBzdGFydFByZXNzID0gKGUpID0+IHtcclxuICAgICAgICAgIGlucHV0TWFuYWdlci5zZXRLZXkoZGlyZWN0aW9uLCB0cnVlKTtcclxuICAgICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGVuZFByZXNzID0gKGUpID0+IHtcclxuICAgICAgICAgIGlmIChpbnB1dE1hbmFnZXIua2V5c1tkaXJlY3Rpb25dKSB7XHJcbiAgICAgICAgICAgIGlucHV0TWFuYWdlci5zZXRLZXkoZGlyZWN0aW9uLCBmYWxzZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHN0YXJ0UHJlc3MsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgZW5kUHJlc3MsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgZW5kUHJlc3MsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN0YXJ0UHJlc3MpO1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZW5kUHJlc3MpO1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZW5kUHJlc3MpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuY29udHJvbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoYnRuKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHNjb3JlRGlzcGxheUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY29yZS1kaXNwbGF5Jyk7XHJcbiAgICBpZiAoIXNjb3JlRGlzcGxheUNvbnRhaW5lcikge1xyXG4gICAgICBjb25zdCBzY29yZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBzY29yZURpdi5pZCA9ICdzY29yZS1kaXNwbGF5JztcclxuICAgICAgc2NvcmVEaXYuY2xhc3NMaXN0LmFkZCgnc2NvcmUtZGlzcGxheScpO1xyXG4gICAgICBzY29yZURpdi5pbm5lckhUTUwgPSBgQm9va3M6IDxzcGFuIGlkPVwic2NvcmUtdmFsdWVcIj4wPC9zcGFuPiAvIDxzcGFuIGlkPVwic2NvcmUtdGFyZ2V0XCI+Pzwvc3Bhbj5gO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjb3JlRGl2KTtcclxuICAgICAgdGhpcy5zY29yZUVsZW1lbnQgPSBzY29yZURpdi5xdWVyeVNlbGVjdG9yKCcjc2NvcmUtdmFsdWUnKTtcclxuICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gc2NvcmVEaXYucXVlcnlTZWxlY3RvcignI3Njb3JlLXRhcmdldCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zY29yZUVsZW1lbnQgPSBzY29yZURpc3BsYXlDb250YWluZXIucXVlcnlTZWxlY3RvcignI3Njb3JlLXZhbHVlJyk7XHJcbiAgICAgIHRoaXMudGFyZ2V0RWxlbWVudCA9IHNjb3JlRGlzcGxheUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc2NvcmUtdGFyZ2V0Jyk7XHJcbiAgICAgIGlmICh0aGlzLnNjb3JlRWxlbWVudCkgdGhpcy5zY29yZUVsZW1lbnQudGV4dENvbnRlbnQgPSAnMCc7XHJcbiAgICAgIGlmICh0aGlzLnRhcmdldEVsZW1lbnQpIHRoaXMudGFyZ2V0RWxlbWVudC50ZXh0Q29udGVudCA9ICc/JztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVRdWVzdGlvblVJKCkge1xyXG4gICAgdGhpcy5xdWVzdGlvbk92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVlc3Rpb24tb3ZlcmxheScpO1xyXG4gICAgaWYgKCF0aGlzLnF1ZXN0aW9uT3ZlcmxheSkge1xyXG4gICAgICB0aGlzLnF1ZXN0aW9uT3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLnF1ZXN0aW9uT3ZlcmxheS5pZCA9ICdxdWVzdGlvbi1vdmVybGF5JztcclxuICAgICAgdGhpcy5xdWVzdGlvbk92ZXJsYXkuY2xhc3NMaXN0LmFkZCgndWktcGFuZWwnKTtcclxuICAgICAgdGhpcy5xdWVzdGlvbk92ZXJsYXkuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxkaXYgaWQ9XCJibGFja2JvYXJkLWNvbnRlbnRcIj5cclxuICAgICAgICAgIDxoMj5RdWVzdGlvbjwvaDI+XHJcbiAgICAgICAgICA8ZGl2IGlkPVwicXVlc3Rpb24tYm94XCI+XHJcbiAgICAgICAgICAgIDxwIGlkPVwicXVlc3Rpb24tdGV4dFwiPjwvcD5cclxuICAgICAgICAgICAgPGRpdiBpZD1cImFuc3dlci1idXR0b25zXCI+PC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucXVlc3Rpb25PdmVybGF5KTtcclxuICAgIH1cclxuICAgIHRoaXMucXVlc3Rpb25UZXh0RWxlbWVudCA9IHRoaXMucXVlc3Rpb25PdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJyNxdWVzdGlvbi10ZXh0Jyk7XHJcbiAgICB0aGlzLmFuc3dlckJ1dHRvbnNDb250YWluZXIgPSB0aGlzLnF1ZXN0aW9uT3ZlcmxheS5xdWVyeVNlbGVjdG9yKCcjYW5zd2VyLWJ1dHRvbnMnKTtcclxuICAgIGlmICghdGhpcy5xdWVzdGlvblRleHRFbGVtZW50IHx8ICF0aGlzLmFuc3dlckJ1dHRvbnNDb250YWluZXIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gRmFpbGVkIHRvIGZpbmQvY3JlYXRlIGNoaWxkIGVsZW1lbnRzIG9mIHF1ZXN0aW9uIFVJIScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZUZsb29yU2VsZWN0aW9uVUkoKSB7XHJcbiAgICB0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmxvb3Itc2VsZWN0aW9uLXVpJyk7XHJcbiAgICBpZiAoIXRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbCkge1xyXG4gICAgICB0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5mbG9vclNlbGVjdGlvblBhbmVsLmlkID0gJ2Zsb29yLXNlbGVjdGlvbi11aSc7XHJcbiAgICAgIHRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbC5jbGFzc0xpc3QuYWRkKCd1aS1wYW5lbCcpO1xyXG4gICAgICB0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxoMj5TZWxlY3QgRmxvb3I8L2gyPlxyXG4gICAgICAgIDxkaXYgaWQ9XCJmbG9vci1idXR0b25zLWNvbnRhaW5lclwiPjwvZGl2PmA7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5mbG9vclNlbGVjdGlvblBhbmVsKTtcclxuICAgIH1cclxuICAgIHRoaXMuZmxvb3JCdXR0b25zQ29udGFpbmVyID0gdGhpcy5mbG9vclNlbGVjdGlvblBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNmbG9vci1idXR0b25zLWNvbnRhaW5lcicpO1xyXG4gICAgaWYgKCF0aGlzLmZsb29yQnV0dG9uc0NvbnRhaW5lcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbVUlNYW5hZ2VyXSBGYWlsZWQgdG8gZmluZC9jcmVhdGUgZmxvb3IgYnV0dG9ucyBjb250YWluZXIhJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZW5zdXJlRmxhc2hNZXNzYWdlQ29udGFpbmVyKCkge1xyXG4gICAgdGhpcy5mbGFzaE1lc3NhZ2VDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmxhc2gtbWVzc2FnZS1jb250YWluZXInKTtcclxuICAgIGlmICghdGhpcy5mbGFzaE1lc3NhZ2VDb250YWluZXIpIHtcclxuICAgICAgdGhpcy5mbGFzaE1lc3NhZ2VDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5mbGFzaE1lc3NhZ2VDb250YWluZXIuaWQgPSAnZmxhc2gtbWVzc2FnZS1jb250YWluZXInO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZmxhc2hNZXNzYWdlQ29udGFpbmVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmZsYXNoTWVzc2FnZUNvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmbGFzaE1lc3NhZ2UobWVzc2FnZSwgdHlwZSA9ICdpbmZvJywgZHVyYXRpb24gPSAzMDAwKSB7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmVuc3VyZUZsYXNoTWVzc2FnZUNvbnRhaW5lcigpO1xyXG4gICAgaWYgKCFjb250YWluZXIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gRmxhc2ggbWVzc2FnZSBjb250YWluZXIgbm90IGZvdW5kIG9yIGNyZWF0YWJsZS4nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWVzc2FnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIG1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gbWVzc2FnZTtcclxuICAgIG1lc3NhZ2VFbGVtZW50LmNsYXNzTmFtZSA9ICdmbGFzaC1tZXNzYWdlJztcclxuICAgIG1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoYGZsYXNoLSR7dHlwZX1gKTtcclxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IGBmbGFzaC0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDUpfWA7XHJcbiAgICBtZXNzYWdlRWxlbWVudC5pZCA9IG1lc3NhZ2VJZDtcclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChtZXNzYWdlRWxlbWVudCk7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICBtZXNzYWdlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICB9KTtcclxuICAgIGNsZWFyVGltZW91dCh0aGlzLmZsYXNoTWVzc2FnZVRpbWVvdXRzW21lc3NhZ2VJZF0pO1xyXG4gICAgY29uc3QgcmVtb3ZlRWxlbWVudCA9ICgpID0+IHtcclxuICAgICAgbWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgICBjb25zdCBoYW5kbGVUcmFuc2l0aW9uRW5kID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnByb3BlcnR5TmFtZSA9PT0gJ29wYWNpdHknIHx8IGV2ZW50LnByb3BlcnR5TmFtZSA9PT0gJ3RyYW5zZm9ybScpIHtcclxuICAgICAgICAgIGlmIChtZXNzYWdlRWxlbWVudC5wYXJlbnROb2RlKSBtZXNzYWdlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG1lc3NhZ2VFbGVtZW50KTtcclxuICAgICAgICAgIGRlbGV0ZSB0aGlzLmZsYXNoTWVzc2FnZVRpbWVvdXRzW21lc3NhZ2VJZF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICBtZXNzYWdlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgaGFuZGxlVHJhbnNpdGlvbkVuZCwgeyBvbmNlOiB0cnVlIH0pO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAobWVzc2FnZUVsZW1lbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgbWVzc2FnZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGhhbmRsZVRyYW5zaXRpb25FbmQpO1xyXG4gICAgICAgICAgbWVzc2FnZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtZXNzYWdlRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmZsYXNoTWVzc2FnZVRpbWVvdXRzW21lc3NhZ2VJZF07XHJcbiAgICAgIH0sIDUwMCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5mbGFzaE1lc3NhZ2VUaW1lb3V0c1ttZXNzYWdlSWRdID0gc2V0VGltZW91dChyZW1vdmVFbGVtZW50LCBkdXJhdGlvbik7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0TG9hZGluZ092ZXJsYXkoKSB7XHJcbiAgICBpZiAoIXRoaXMubG9hZGluZ092ZXJsYXlFbGVtZW50KSB7XHJcbiAgICAgIHRoaXMubG9hZGluZ092ZXJsYXlFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmctb3ZlcmxheScpO1xyXG4gICAgICBpZiAoIXRoaXMubG9hZGluZ092ZXJsYXlFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nT3ZlcmxheUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLmxvYWRpbmdPdmVybGF5RWxlbWVudC5pZCA9ICdsb2FkaW5nLW92ZXJsYXknO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ092ZXJsYXlFbGVtZW50LmNsYXNzTmFtZSA9ICdsb2FkaW5nLW92ZXJsYXknO1xyXG4gICAgICAgIGNvbnN0IGxvYWRpbmdUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgICAgIGxvYWRpbmdUZXh0LnRleHRDb250ZW50ID0gJ0xvYWRpbmcuLi4nO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ092ZXJsYXlFbGVtZW50LmFwcGVuZENoaWxkKGxvYWRpbmdUZXh0KTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMubG9hZGluZ092ZXJsYXlFbGVtZW50KTtcclxuICAgICAgICBjb25zb2xlLmxvZygnW1VJTWFuYWdlcl0gTG9hZGluZyBvdmVybGF5IGNyZWF0ZWQgYW5kIGFwcGVuZGVkIHRvIGJvZHkuJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmxvYWRpbmdPdmVybGF5RWxlbWVudDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVHYW1lT3ZlclNjcmVlbigpIHtcclxuICAgIHRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUtb3Zlci1zY3JlZW4nKTtcclxuICAgIGlmICghdGhpcy5nYW1lT3ZlclNjcmVlbkVsZW1lbnQpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gQ1JJVElDQUw6ICNnYW1lLW92ZXItc2NyZWVuIGVsZW1lbnQgbm90IGZvdW5kIGluIEhUTUwhJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuZ2FtZU92ZXJUaXRsZUVsZW1lbnQgPSB0aGlzLmdhbWVPdmVyU2NyZWVuRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjZ2FtZS1vdmVyLXRpdGxlJyk7XHJcbiAgICB0aGlzLmNyZWF0b3JOYW1lc0xpc3RFbGVtZW50ID0gdGhpcy5nYW1lT3ZlclNjcmVlbkVsZW1lbnQucXVlcnlTZWxlY3RvcignI2NyZWF0b3ItbmFtZXMnKTtcclxuICAgIHRoaXMuY2xhc3NJbmZvRWxlbWVudCA9IHRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbGFzcy1pbmZvJyk7XHJcbiAgICB0aGlzLnJldHVyblRvTWVudUJ1dHRvbkVsZW1lbnQgPVxyXG4gICAgICB0aGlzLmdhbWVPdmVyU2NyZWVuRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjcmV0dXJuLXRvLW1lbnUtYnV0dG9uJyk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAhdGhpcy5nYW1lT3ZlclRpdGxlRWxlbWVudCB8fFxyXG4gICAgICAhdGhpcy5jcmVhdG9yTmFtZXNMaXN0RWxlbWVudCB8fFxyXG4gICAgICAhdGhpcy5jbGFzc0luZm9FbGVtZW50IHx8XHJcbiAgICAgICF0aGlzLnJldHVyblRvTWVudUJ1dHRvbkVsZW1lbnRcclxuICAgICkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdbVUlNYW5hZ2VyXSBGYWlsZWQgdG8gZmluZCBvbmUgb3IgbW9yZSBjaGlsZCBlbGVtZW50cyBvZiB0aGUgZ2FtZSBvdmVyIHNjcmVlbiEnXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJldHVyblRvTWVudUJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coJ1tVSU1hbmFnZXJdIEdhbWUgT3ZlciBzY3JlZW4gZWxlbWVudHMgaW5pdGlhbGl6ZWQuJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2hvd0dhbWVPdmVyU2NyZWVuKGlzV2luLCBjcmVhdG9ycyA9IFtdLCBjbGFzc0luZm9UZXh0ID0gJycpIHtcclxuICAgIGlmICghdGhpcy5nYW1lT3ZlclNjcmVlbkVsZW1lbnQpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gR2FtZSBPdmVyIFNjcmVlbiBub3QgaW5pdGlhbGl6ZWQnKTtcclxuICAgICAgdGhpcy5jcmVhdGVHYW1lT3ZlclNjcmVlbigpO1xyXG4gICAgICBpZiAoIXRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50KSByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzV2luKSB7XHJcbiAgICAgIHRoaXMuZ2FtZU92ZXJUaXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSAnQ29uZ3JhdHVsYXRpb25zISBZb3UgRXNjYXBlZCEnO1xyXG4gICAgICB0aGlzLmdhbWVPdmVyVGl0bGVFbGVtZW50LmNsYXNzTmFtZSA9ICd3aW4tdGl0bGUnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5nYW1lT3ZlclRpdGxlRWxlbWVudC50ZXh0Q29udGVudCA9ICdHYW1lIE92ZXInO1xyXG4gICAgICB0aGlzLmdhbWVPdmVyVGl0bGVFbGVtZW50LmNsYXNzTmFtZSA9ICdsb3NlLXRpdGxlJztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNyZWF0b3JOYW1lc0xpc3RFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgY3JlYXRvcnMuZm9yRWFjaCgobmFtZSkgPT4ge1xyXG4gICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgIGxpLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgICAgdGhpcy5jcmVhdG9yTmFtZXNMaXN0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmNsYXNzSW5mb0VsZW1lbnQudGV4dENvbnRlbnQgPSBjbGFzc0luZm9UZXh0O1xyXG5cclxuICAgIC8vIFVwZGF0ZSBhbmQgc2hvdyBsZWFkZXJib2FyZFxyXG4gICAgdGhpcy51cGRhdGVMZWFkZXJib2FyZCgpO1xyXG4gICAgXHJcbiAgICB0aGlzLmdhbWVPdmVyU2NyZWVuRWxlbWVudC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICB0aGlzLmhpZGVHYW1lVUkoKTtcclxuICAgIHRoaXMuaGlkZVF1ZXN0aW9uKCk7XHJcbiAgICB0aGlzLmhpZGVGbG9vclNlbGVjdGlvblVJKCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGlkZUdhbWVPdmVyU2NyZWVuKCkge1xyXG4gICAgaWYgKHRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50KSB7XHJcbiAgICAgIHRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBzaG93UXVlc3Rpb24ocXVlc3Rpb25EYXRhKSB7XHJcbiAgICBpZiAoIXRoaXMucXVlc3Rpb25PdmVybGF5IHx8ICF0aGlzLnF1ZXN0aW9uVGV4dEVsZW1lbnQgfHwgIXRoaXMuYW5zd2VyQnV0dG9uc0NvbnRhaW5lcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbVUlNYW5hZ2VyXSBRdWVzdGlvbiBVSSBub3QgcmVhZHkuJyk7XHJcbiAgICAgIHRoaXMuY3JlYXRlUXVlc3Rpb25VSSgpO1xyXG4gICAgICBpZiAoIXRoaXMucXVlc3Rpb25PdmVybGF5IHx8ICF0aGlzLnF1ZXN0aW9uVGV4dEVsZW1lbnQgfHwgIXRoaXMuYW5zd2VyQnV0dG9uc0NvbnRhaW5lcilcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIXF1ZXN0aW9uRGF0YSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbVUlNYW5hZ2VyXSBDYW5ub3Qgc2hvdyBxdWVzdGlvbiAtIG5vIHF1ZXN0aW9uRGF0YSBwcm92aWRlZC4nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICAhdGhpcy5nYW1lcGxheU1hbmFnZXJJbnN0YW5jZSB8fFxyXG4gICAgICB0eXBlb2YgdGhpcy5nYW1lcGxheU1hbmFnZXJJbnN0YW5jZS5oYW5kbGVBbnN3ZXIgIT09ICdmdW5jdGlvbidcclxuICAgICkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdbVUlNYW5hZ2VyXSBDUklUSUNBTDogR2FtZXBsYXlNYW5hZ2VyIG9yIGl0cyBoYW5kbGVBbnN3ZXIgbWV0aG9kIGlzIG5vdCBzZXQgb3IgaW52YWxpZCEnXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuZmxhc2hNZXNzYWdlKCdFcnJvcjogR2FtZSBpbnRlcmFjdGlvbiBzeXN0ZW0gZmFpbGVkIChRKS4nLCAnZXJyb3InLCA1MDAwKTtcclxuICAgICAgdGhpcy5oaWRlUXVlc3Rpb24oKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucXVlc3Rpb25UZXh0RWxlbWVudC50ZXh0Q29udGVudCA9IHF1ZXN0aW9uRGF0YS5xdWVzdGlvbjtcclxuICAgIHRoaXMuYW5zd2VyQnV0dG9uc0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICBxdWVzdGlvbkRhdGEub3B0aW9ucy5mb3JFYWNoKChvcHRpb25UZXh0LCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gb3B0aW9uVGV4dDtcclxuICAgICAgYnV0dG9uLmRhdGFzZXQuaW5kZXggPSBpbmRleDtcclxuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Fuc3dlci1idXR0b24nKTtcclxuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC5pbmRleCwgMTApO1xyXG4gICAgICAgIHRoaXMuZ2FtZXBsYXlNYW5hZ2VySW5zdGFuY2UuaGFuZGxlQW5zd2VyKHNlbGVjdGVkSW5kZXgpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5hbnN3ZXJCdXR0b25zQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICB9KTtcclxuICAgIHRoaXMucXVlc3Rpb25PdmVybGF5LmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBoaWRlUXVlc3Rpb24oKSB7XHJcbiAgICBpZiAodGhpcy5xdWVzdGlvbk92ZXJsYXkpIHtcclxuICAgICAgdGhpcy5xdWVzdGlvbk92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgICBpZiAodGhpcy5xdWVzdGlvblRleHRFbGVtZW50KSB0aGlzLnF1ZXN0aW9uVGV4dEVsZW1lbnQudGV4dENvbnRlbnQgPSAnJztcclxuICAgICAgaWYgKHRoaXMuYW5zd2VyQnV0dG9uc0NvbnRhaW5lcikgdGhpcy5hbnN3ZXJCdXR0b25zQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNob3dGbG9vclNlbGVjdGlvblVJKG1pbkZsb29yLCBtYXhGbG9vciwgY3VycmVudEZsb29yKSB7XHJcbiAgICBpZiAoIXRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbCB8fCAhdGhpcy5mbG9vckJ1dHRvbnNDb250YWluZXIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gRmxvb3Igc2VsZWN0aW9uIFVJIG5vdCByZWFkeS4nKTtcclxuICAgICAgdGhpcy5jcmVhdGVGbG9vclNlbGVjdGlvblVJKCk7XHJcbiAgICAgIGlmICghdGhpcy5mbG9vclNlbGVjdGlvblBhbmVsIHx8ICF0aGlzLmZsb29yQnV0dG9uc0NvbnRhaW5lcikgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICAhdGhpcy5nYW1lcGxheU1hbmFnZXJJbnN0YW5jZSB8fFxyXG4gICAgICB0eXBlb2YgdGhpcy5nYW1lcGxheU1hbmFnZXJJbnN0YW5jZS5oYW5kbGVGbG9vclNlbGVjdGlvbiAhPT0gJ2Z1bmN0aW9uJ1xyXG4gICAgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgJ1tVSU1hbmFnZXJdIENSSVRJQ0FMOiBHYW1lcGxheU1hbmFnZXIgb3IgaXRzIGhhbmRsZUZsb29yU2VsZWN0aW9uIG1ldGhvZCBpcyBub3Qgc2V0IG9yIGludmFsaWQhJ1xyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmZsYXNoTWVzc2FnZSgnRXJyb3I6IEdhbWUgaW50ZXJhY3Rpb24gc3lzdGVtIGZhaWxlZCAoRikuJywgJ2Vycm9yJywgNTAwMCk7XHJcbiAgICAgIHRoaXMuaGlkZUZsb29yU2VsZWN0aW9uVUkoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZmxvb3JCdXR0b25zQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgZm9yIChsZXQgZmxvb3IgPSBtaW5GbG9vcjsgZmxvb3IgPD0gbWF4Rmxvb3I7IGZsb29yKyspIHtcclxuICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IGBGbG9vciAke2Zsb29yfWA7XHJcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdmbG9vci1idXR0b24nKTtcclxuICAgICAgYnV0dG9uLmRhdGFzZXQuZmxvb3IgPSBmbG9vcjtcclxuICAgICAgaWYgKGZsb29yID09PSBjdXJyZW50Rmxvb3IpIHtcclxuICAgICAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdjdXJyZW50Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5nYW1lcGxheU1hbmFnZXJJbnN0YW5jZS5oYW5kbGVGbG9vclNlbGVjdGlvbihmbG9vcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5mbG9vckJ1dHRvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICAgIH1cclxuICAgIHRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGlkZUZsb29yU2VsZWN0aW9uVUkoKSB7XHJcbiAgICBpZiAodGhpcy5mbG9vclNlbGVjdGlvblBhbmVsKSB7XHJcbiAgICAgIHRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdXBkYXRlU2NvcmUoc2NvcmUsIHRhcmdldCkge1xyXG4gICAgaWYgKCF0aGlzLnNjb3JlRWxlbWVudCkgdGhpcy5zY29yZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NvcmUtdmFsdWUnKTtcclxuICAgIGlmICghdGhpcy50YXJnZXRFbGVtZW50KSB0aGlzLnRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NvcmUtdGFyZ2V0Jyk7XHJcbiAgICBpZiAodGhpcy5zY29yZUVsZW1lbnQpIHRoaXMuc2NvcmVFbGVtZW50LnRleHRDb250ZW50ID0gc2NvcmU7XHJcbiAgICBpZiAodGhpcy50YXJnZXRFbGVtZW50KSB0aGlzLnRhcmdldEVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXJnZXQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2hvd0dhbWVVSSgpIHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWNhbnZhcycpIHx8IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lQ2FudmFzJyk7XHJcbiAgICBjb25zdCBtZW51Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lbnUtY29udGFpbmVyJyk7XHJcbiAgICBjb25zdCBzY29yZURpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NvcmUtZGlzcGxheScpO1xyXG5cclxuICAgIGlmIChjYW52YXMpIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIGVsc2UgY29uc29sZS53YXJuKCdbVUlNYW5hZ2VyXSBDYW52YXMgZWxlbWVudCBub3QgZm91bmQgdG8gc2hvdy4nKTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIG1lbnVDb250YWluZXIgJiZcclxuICAgICAgIW1lbnVDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKSAmJlxyXG4gICAgICBtZW51Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJ1xyXG4gICAgKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignW1VJTWFuYWdlcl0gTWVudSBjb250YWluZXIgd2FzIG5vdCBoaWRkZW4uIEhpZGluZyBpdCBub3cgdmlhIHN0eWxlLmRpc3BsYXkuJyk7XHJcbiAgICAgIG1lbnVDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8g0JHQvtC70LXQtSDQvdCw0LTQtdC20L3Ri9C5INGB0L/QvtGB0L7QsSDRgdC60YDRi9GC0YxcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5jb250cm9sc0NvbnRhaW5lcikgdGhpcy5jb250cm9sc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICBlbHNlIGNvbnNvbGUud2FybignW1VJTWFuYWdlcl0gQ29udHJvbHMgY29udGFpbmVyIG5vdCBmb3VuZCB0byBzaG93LicpO1xyXG5cclxuICAgIGlmIChzY29yZURpc3BsYXkpIHNjb3JlRGlzcGxheS5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICBlbHNlIGNvbnNvbGUud2FybignW1VJTWFuYWdlcl0gU2NvcmUgZGlzcGxheSBub3QgZm91bmQgdG8gc2hvdy4nKTtcclxuXHJcbiAgICBpZiAodGhpcy50aW1lckVsZW1lbnQpIHtcclxuICAgICAgdGhpcy50aW1lckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5oaWRlUXVlc3Rpb24oKTtcclxuICAgIHRoaXMuaGlkZUZsb29yU2VsZWN0aW9uVUkoKTtcclxuICAgIHRoaXMuaGlkZUdhbWVPdmVyU2NyZWVuKCk7IC8vINCj0LHQtdC00LjQvNGB0Y8sINGH0YLQviDRjdC60YDQsNC9IEdhbWUgT3ZlciDRgdC60YDRi9GCXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGlkZUdhbWVVSSgpIHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWNhbnZhcycpIHx8IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lQ2FudmFzJyk7XHJcbiAgICBjb25zdCBzY29yZURpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NvcmUtZGlzcGxheScpO1xyXG5cclxuICAgIGlmIChjYW52YXMpIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgaWYgKHRoaXMuY29udHJvbHNDb250YWluZXIpIHRoaXMuY29udHJvbHNDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgaWYgKHNjb3JlRGlzcGxheSkgc2NvcmVEaXNwbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuXHJcbiAgICBpZiAodGhpcy50aW1lckVsZW1lbnQpIHtcclxuICAgICAgdGhpcy50aW1lckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH1cclxuXHJcbiAgICAvLyDQndC1INGB0LrRgNGL0LLQsNC10Lwg0L7QstC10YDQu9C10Lgg0LLQvtC/0YDQvtGB0L7Qsi/RjdGC0LDQttC10LkvR2FtZSBPdmVyINC+0YLRgdGO0LTQsCxcclxuICAgIC8vINGCLtC6LiDQvtC90Lgg0LzQvtCz0YPRgiDQsdGL0YLRjCDQv9C+0LrQsNC30LDQvdGLICrQv9C+0YHQu9C1KiDRgdC60YDRi9GC0LjRjyDQvtGB0L3QvtCy0L3QvtCz0L4g0LjQs9GA0L7QstC+0LPQviBVSS5cclxuICAgIC8vINCY0YUg0YHQutGA0YvRgtC40LUg0LTQvtC70LbQvdC+INGD0L/RgNCw0LLQu9GP0YLRjNGB0Y8g0LrQvtC90LrRgNC10YLQvdGL0LzQuCDRgdC+0YHRgtC+0Y/QvdC40Y/QvNC4INC40LPRgNGLLlxyXG4gIH1cclxuXHJcbiAgLy8gTmV3IG1ldGhvZHNcclxuICBzdGF0aWMgaW5pdGlhbGl6ZVRpbWVyKCkge1xyXG4gICAgaWYgKCF0aGlzLnRpbWVyRWxlbWVudCkge1xyXG4gICAgICB0aGlzLnRpbWVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLnRpbWVyRWxlbWVudC5pZCA9ICdnYW1lLXRpbWVyJztcclxuICAgICAgdGhpcy50aW1lckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZ2FtZS10aW1lcicpO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMudGltZXJFbGVtZW50KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gTG9hZCBsZWFkZXJib2FyZCBkYXRhIGZyb20gbG9jYWxTdG9yYWdlXHJcbiAgICBjb25zdCBzYXZlZERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ2FtZUxlYWRlcmJvYXJkJyk7XHJcbiAgICB0aGlzLmxlYWRlcmJvYXJkRGF0YSA9IHNhdmVkRGF0YSA/IEpTT04ucGFyc2Uoc2F2ZWREYXRhKSA6IFtdO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgbGVhZGVyYm9hcmQgZWxlbWVudCBpZiBuZWVkZWRcclxuICAgIHRoaXMudXBkYXRlTGVhZGVyYm9hcmQoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdGFydFRpbWVyKCkge1xyXG4gICAgdGhpcy5nYW1lU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIHRoaXMudXBkYXRlVGltZXIoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB1cGRhdGVUaW1lcigpIHtcclxuICAgIGlmICghdGhpcy50aW1lckVsZW1lbnQgfHwgIXRoaXMuZ2FtZVN0YXJ0VGltZSkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICBjb25zdCBlbGFwc2VkID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIHRoaXMuZ2FtZVN0YXJ0VGltZSkgLyAxMDAwKTtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKGVsYXBzZWQgLyA2MCk7XHJcbiAgICBjb25zdCBzZWNvbmRzID0gZWxhcHNlZCAlIDYwO1xyXG4gICAgXHJcbiAgICB0aGlzLnRpbWVyRWxlbWVudC50ZXh0Q29udGVudCA9IGBUaW1lOiAke21pbnV0ZXN9OiR7c2Vjb25kcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9YDtcclxuICAgIFxyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXJ0VGltZSkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy51cGRhdGVUaW1lcigpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdG9wVGltZXIod2FzV2luKSB7XHJcbiAgICBpZiAoIXRoaXMuZ2FtZVN0YXJ0VGltZSkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IHRvdGFsVGltZSA9IChlbmRUaW1lIC0gdGhpcy5nYW1lU3RhcnRUaW1lKSAvIDEwMDA7XHJcbiAgICBcclxuICAgIGlmICh3YXNXaW4pIHtcclxuICAgICAgY29uc3QgcnVuTnVtYmVyID0gdGhpcy5sZWFkZXJib2FyZERhdGEubGVuZ3RoICsgMTtcclxuICAgICAgdGhpcy5sZWFkZXJib2FyZERhdGEucHVzaCh7XHJcbiAgICAgICAgbmFtZTogYFJ1biAke3J1bk51bWJlcn1gLFxyXG4gICAgICAgIHRpbWU6IHRvdGFsVGltZSxcclxuICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLnRvTG9jYWxlRGF0ZVN0cmluZygpXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gU29ydCBieSB0aW1lIGFzY2VuZGluZ1xyXG4gICAgICB0aGlzLmxlYWRlcmJvYXJkRGF0YS5zb3J0KChhLCBiKSA9PiBhLnRpbWUgLSBiLnRpbWUpO1xyXG4gICAgICBcclxuICAgICAgLy8gU2F2ZSB0byBsb2NhbFN0b3JhZ2VcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2dhbWVMZWFkZXJib2FyZCcsIEpTT04uc3RyaW5naWZ5KHRoaXMubGVhZGVyYm9hcmREYXRhKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRoaXMuZ2FtZVN0YXJ0VGltZSA9IDA7XHJcbiAgICB0aGlzLnVwZGF0ZUxlYWRlcmJvYXJkKCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdXBkYXRlTGVhZGVyYm9hcmQoKSB7XHJcbiAgICBjb25zdCBsZWFkZXJib2FyZEJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGVhZGVyYm9hcmQtYm9keScpO1xyXG4gICAgaWYgKCFsZWFkZXJib2FyZEJvZHkpIHJldHVybjtcclxuXHJcbiAgICAvLyBDbGVhciBleGlzdGluZyBlbnRyaWVzXHJcbiAgICBsZWFkZXJib2FyZEJvZHkuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBcclxuICAgIC8vIEFkZCB0b3AgMTAgdGltZXNcclxuICAgIHRoaXMubGVhZGVyYm9hcmREYXRhLnNsaWNlKDAsIDEwKS5mb3JFYWNoKHJ1biA9PiB7XHJcbiAgICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHJ1bi50aW1lIC8gNjApO1xyXG4gICAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcihydW4udGltZSAlIDYwKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgIHJvdy5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPHRkPiR7cnVuLm5hbWV9PC90ZD5cclxuICAgICAgICA8dGQ+JHttaW51dGVzfToke3NlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfTwvdGQ+XHJcbiAgICAgICAgPHRkPiR7cnVuLmRhdGV9PC90ZD5cclxuICAgICAgYDtcclxuICAgICAgbGVhZGVyYm9hcmRCb2R5LmFwcGVuZENoaWxkKHJvdyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiLy8gc3JjL2NvcmUvQ2hhcmFjdGVyLmpzXHJcblxyXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyIHtcclxuICAvKiogU3RhdGljIG9iamVjdCBmb3IgZGlyZWN0aW9uIGNvbnN0YW50cyAqL1xyXG4gIHN0YXRpYyBEaXJlY3Rpb24gPSB7XHJcbiAgICBET1dOOiAwLFxyXG4gICAgUklHSFQ6IDEsXHJcbiAgICBVUDogMixcclxuICAgIExFRlQ6IDMsXHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBDaGFyYWN0ZXIgaW5zdGFuY2UuXHJcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCAtIFRoZSByZW5kZXJpbmcgY29udGV4dC5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3ByaXRlVXJsIC0gVVJMIG9mIHRoZSBjaGFyYWN0ZXIncyBzcHJpdGUgc2hlZXQuXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIG9wdGlvbnMuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmZyYW1lU2l6ZT0zMl0gLSBTaXplIG9mIG9uZSBmcmFtZSBpbiB0aGUgc3ByaXRlIHNoZWV0IChwaXhlbHMpLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5mcmFtZUNvdW50PTRdIC0gTnVtYmVyIG9mIGZyYW1lcyBwZXIgYW5pbWF0aW9uIGN5Y2xlIChwZXIgZGlyZWN0aW9uKS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2NhbGU9Ml0gLSBTY2FsaW5nIGZhY3RvciBmb3IgcmVuZGVyaW5nLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zcGVlZD0zXSAtIE1vdmVtZW50IHNwZWVkIGluIHBpeGVscyBwZXIgdXBkYXRlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5hbmltYXRpb25TcGVlZD0xNTBdIC0gTWlsbGlzZWNvbmRzIHBlciBhbmltYXRpb24gZnJhbWUuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNvbGxpc2lvbkJveFdpZHRoUmF0aW89MC40XSAtIFdpZHRoIG9mIGNvbGxpc2lvbiBib3ggcmVsYXRpdmUgdG8gcmVuZGVyU2l6ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY29sbGlzaW9uQm94SGVpZ2h0UmF0aW89MC4yXSAtIEhlaWdodCBvZiBjb2xsaXNpb24gYm94IHJlbGF0aXZlIHRvIHJlbmRlclNpemUuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNvbGxpc2lvbkJveEZlZXRPZmZzZXRSYXRpbz0wLjRdIC0gVmVydGljYWwgb2Zmc2V0IG9mIGNvbGxpc2lvbiBib3ggY2VudGVyIGZyb20gY2hhcmFjdGVyIGNlbnRlciAodG93YXJkcyBmZWV0KSwgcmVsYXRpdmUgdG8gcmVuZGVyU2l6ZS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihjdHgsIHNwcml0ZVVybCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgIHRoaXMuc3ByaXRlID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgLy8gQ29uZmlndXJhdGlvbiB3aXRoIGRlZmF1bHRzXHJcbiAgICB0aGlzLmZyYW1lU2l6ZSA9IG9wdGlvbnMuZnJhbWVTaXplIHx8IDMyO1xyXG4gICAgdGhpcy5mcmFtZUNvdW50ID0gb3B0aW9ucy5mcmFtZUNvdW50IHx8IDQ7IC8vIE51bWJlciBvZiBmcmFtZXMgcGVyIGRpcmVjdGlvblxyXG4gICAgdGhpcy5zY2FsZSA9IG9wdGlvbnMuc2NhbGUgfHwgMjtcclxuICAgIHRoaXMucmVuZGVyU2l6ZSA9IHRoaXMuZnJhbWVTaXplICogdGhpcy5zY2FsZTtcclxuICAgIHRoaXMuc3BlZWQgPSBvcHRpb25zLnNwZWVkIHx8IDM7XHJcbiAgICB0aGlzLmFuaW1hdGlvblNwZWVkID0gb3B0aW9ucy5hbmltYXRpb25TcGVlZCB8fCAxNTA7IC8vIG1zIHBlciBmcmFtZVxyXG5cclxuICAgIC8vIENvbGxpc2lvbiBCb3ggQ29uZmlndXJhdGlvblxyXG4gICAgdGhpcy5jb2xsaXNpb25Cb3hXaWR0aFJhdGlvID0gb3B0aW9ucy5jb2xsaXNpb25Cb3hXaWR0aFJhdGlvIHx8IDAuNDtcclxuICAgIHRoaXMuY29sbGlzaW9uQm94SGVpZ2h0UmF0aW8gPSBvcHRpb25zLmNvbGxpc2lvbkJveEhlaWdodFJhdGlvIHx8IDAuMjtcclxuICAgIHRoaXMuY29sbGlzaW9uQm94RmVldE9mZnNldFJhdGlvID0gb3B0aW9ucy5jb2xsaXNpb25Cb3hGZWV0T2Zmc2V0UmF0aW8gfHwgMC40O1xyXG5cclxuICAgIC8vIFN0YXRlXHJcbiAgICB0aGlzLnggPSAwOyAvLyBXb3JsZCBYIGNvb3JkaW5hdGVcclxuICAgIHRoaXMueSA9IDA7IC8vIFdvcmxkIFkgY29vcmRpbmF0ZVxyXG4gICAgdGhpcy5jdXJyZW50RGlyZWN0aW9uID0gQ2hhcmFjdGVyLkRpcmVjdGlvbi5ET1dOOyAvLyBTdGFydCBmYWNpbmcgZG93blxyXG4gICAgdGhpcy5jdXJyZW50RnJhbWUgPSAwOyAvLyBDdXJyZW50IGFuaW1hdGlvbiBmcmFtZSBpbmRleFxyXG4gICAgdGhpcy5pc01vdmluZyA9IGZhbHNlOyAvLyBJcyB0aGUgY2hhcmFjdGVyIGN1cnJlbnRseSBtb3Zpbmc/XHJcbiAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSAwOyAvLyBUaW1lc3RhbXAgb2YgdGhlIGxhc3QgZnJhbWUgdXBkYXRlXHJcblxyXG4gICAgLy8gTG9hZCBzcHJpdGUgYW5kIGFkZCBoYW5kbGVyc1xyXG4gICAgdGhpcy5zcHJpdGUub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhgW0NoYXJhY3Rlcl0gU3ByaXRlIGxvYWRlZCBzdWNjZXNzZnVsbHk6ICR7c3ByaXRlVXJsfWApO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc3ByaXRlLm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtDaGFyYWN0ZXJdIEZhaWxlZCB0byBsb2FkIHNwcml0ZTogJHtzcHJpdGVVcmx9YCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zcHJpdGUuc3JjID0gc3ByaXRlVXJsOyAvLyBTdGFydCBsb2FkaW5nXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIHRoZSBjaGFyYWN0ZXIncyBhbmltYXRpb24gZnJhbWUgYmFzZWQgb24gbW92ZW1lbnQgc3RhdGUgYW5kIHRpbWUuXHJcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpbiB0aGUgZ2FtZSdzIHVwZGF0ZSBsb29wLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXAgLSBUaGUgY3VycmVudCBoaWdoLXJlc29sdXRpb24gdGltZXN0YW1wIChlLmcuLCBmcm9tIHJlcXVlc3RBbmltYXRpb25GcmFtZSkuXHJcbiAgICovXHJcbiAgdXBkYXRlQW5pbWF0aW9uKHRpbWVzdGFtcCkge1xyXG4gICAgaWYgKCF0aGlzLmlzTW92aW5nKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDtcclxuICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gdGltZXN0YW1wO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMubGFzdEZyYW1lVGltZSkge1xyXG4gICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSB0aW1lc3RhbXA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBlbGFwc2VkID0gdGltZXN0YW1wIC0gdGhpcy5sYXN0RnJhbWVUaW1lO1xyXG4gICAgaWYgKGVsYXBzZWQgPiB0aGlzLmFuaW1hdGlvblNwZWVkKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gKHRoaXMuY3VycmVudEZyYW1lICsgMSkgJSB0aGlzLmZyYW1lQ291bnQ7XHJcbiAgICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IHRpbWVzdGFtcDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGN1bGF0ZXMgdGhlIGNvbGxpc2lvbiBib3VuZGluZyBib3ggYmFzZWQgb24gYSBwb3RlbnRpYWwgcG9zaXRpb24uXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBvc1ggLSBUaGUgcG90ZW50aWFsIFggY29vcmRpbmF0ZSBmb3IgdGhlIGNvbGxpc2lvbiBjaGVjay5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9zWSAtIFRoZSBwb3RlbnRpYWwgWSBjb29yZGluYXRlIGZvciB0aGUgY29sbGlzaW9uIGNoZWNrLlxyXG4gICAqIEByZXR1cm5zIHt7dG9wOiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfX0gVGhlIGNvbGxpc2lvbiBib3ggcHJvcGVydGllcy5cclxuICAgKi9cclxuICBnZXRDb2xsaXNpb25Cb3gocG9zWCwgcG9zWSkge1xyXG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLnJlbmRlclNpemUgKiB0aGlzLmNvbGxpc2lvbkJveFdpZHRoUmF0aW87XHJcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnJlbmRlclNpemUgKiB0aGlzLmNvbGxpc2lvbkJveEhlaWdodFJhdGlvO1xyXG4gICAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggLyAyO1xyXG4gICAgY29uc3QgZmVldE9mZnNldFkgPSB0aGlzLnJlbmRlclNpemUgKiB0aGlzLmNvbGxpc2lvbkJveEZlZXRPZmZzZXRSYXRpbztcclxuICAgIGNvbnN0IHRvcCA9IHBvc1kgKyBmZWV0T2Zmc2V0WSAtIGhlaWdodCAvIDI7XHJcbiAgICBjb25zdCBib3R0b20gPSBwb3NZICsgZmVldE9mZnNldFkgKyBoZWlnaHQgLyAyO1xyXG4gICAgY29uc3QgbGVmdCA9IHBvc1ggLSBoYWxmV2lkdGg7XHJcbiAgICBjb25zdCByaWdodCA9IHBvc1ggKyBoYWxmV2lkdGg7XHJcbiAgICByZXR1cm4geyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQsIHdpZHRoLCBoZWlnaHQgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdzIHRoZSBjaGFyYWN0ZXIgb250byB0aGUgY2FudmFzIGF0IGl0cyBjdXJyZW50IHBvc2l0aW9uLFxyXG4gICAqIGNvbnNpZGVyaW5nIHRoZSBjYW1lcmEgb2Zmc2V0LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRYIC0gVGhlIGNhbWVyYSdzIFggb2Zmc2V0LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRZIC0gVGhlIGNhbWVyYSdzIFkgb2Zmc2V0LlxyXG4gICAqL1xyXG4gIGRyYXcob2Zmc2V0WCwgb2Zmc2V0WSkge1xyXG4gICAgaWYgKCF0aGlzLnNwcml0ZS5jb21wbGV0ZSB8fCB0aGlzLnNwcml0ZS5uYXR1cmFsSGVpZ2h0ID09PSAwKSB7XHJcbiAgICAgIHJldHVybjsgLy8gRG9uJ3QgZHJhdyBpZiBzcHJpdGUgaXNuJ3QgcmVhZHlcclxuICAgIH1cclxuICAgIGNvbnN0IGZyYW1lWCA9IHRoaXMuY3VycmVudEZyYW1lICogdGhpcy5mcmFtZVNpemU7XHJcbiAgICBjb25zdCBmcmFtZVkgPSB0aGlzLmN1cnJlbnREaXJlY3Rpb24gKiB0aGlzLmZyYW1lU2l6ZTtcclxuICAgIGNvbnN0IHNjcmVlblggPSBNYXRoLmZsb29yKHRoaXMueCAtIHRoaXMucmVuZGVyU2l6ZSAvIDIgKyBvZmZzZXRYKTtcclxuICAgIGNvbnN0IHNjcmVlblkgPSBNYXRoLmZsb29yKHRoaXMueSAtIHRoaXMucmVuZGVyU2l6ZSAvIDIgKyBvZmZzZXRZKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoXHJcbiAgICAgICAgdGhpcy5zcHJpdGUsXHJcbiAgICAgICAgZnJhbWVYLFxyXG4gICAgICAgIGZyYW1lWSxcclxuICAgICAgICB0aGlzLmZyYW1lU2l6ZSxcclxuICAgICAgICB0aGlzLmZyYW1lU2l6ZSwgLy8gU291cmNlIHJlY3RcclxuICAgICAgICBzY3JlZW5YLFxyXG4gICAgICAgIHNjcmVlblksXHJcbiAgICAgICAgdGhpcy5yZW5kZXJTaXplLFxyXG4gICAgICAgIHRoaXMucmVuZGVyU2l6ZSAvLyBEZXN0IHJlY3RcclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW0NoYXJhY3Rlcl0gRXJyb3IgZHJhd2luZyBzcHJpdGU6JywgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8vIHNyYy9tYXAvQm9vay5qc1xyXG5leHBvcnQgY2xhc3MgQm9vayB7XHJcbiAgY29uc3RydWN0b3IoeCwgeSwgaWQsIHRpbGVTaXplKSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMudGlsZVNpemUgPSB0aWxlU2l6ZTtcclxuICAgIHRoaXMuc2l6ZSA9IHRpbGVTaXplICogMC42O1xyXG4gICAgdGhpcy5jb2xsZWN0ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNDb2xsZWN0ZWQgPSBmYWxzZTtcclxuICB9XHJcbiAgZHJhdyhjdHgsIG9mZnNldFgsIG9mZnNldFksIGJvb2tJbWFnZSkge1xyXG4gICAgY29uc3Qgc2NyZWVuWCA9IE1hdGguZmxvb3IodGhpcy54ICsgb2Zmc2V0WCAtIHRoaXMuc2l6ZSAvIDIpO1xyXG4gICAgY29uc3Qgc2NyZWVuWSA9IE1hdGguZmxvb3IodGhpcy55ICsgb2Zmc2V0WSAtIHRoaXMuc2l6ZSAvIDIpO1xyXG4gICAgaWYgKGJvb2tJbWFnZSkge1xyXG4gICAgICBjdHguZHJhd0ltYWdlKGJvb2tJbWFnZSwgc2NyZWVuWCwgc2NyZWVuWSwgdGhpcy5zaXplLCB0aGlzLnNpemUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjOGQ2ZTYzJztcclxuICAgICAgY3R4LmZpbGxSZWN0KHNjcmVlblgsIHNjcmVlblksIHRoaXMuc2l6ZSwgdGhpcy5zaXplKTtcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM1ZDQwMzcnO1xyXG4gICAgICBjdHguc3Ryb2tlUmVjdChzY3JlZW5YLCBzY3JlZW5ZLCB0aGlzLnNpemUsIHRoaXMuc2l6ZSk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnI2VlZSc7XHJcbiAgICAgIGN0eC5mb250ID0gYCR7dGhpcy5zaXplICogMC42fXB4IEFyaWFsYDtcclxuICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnPycsIHNjcmVlblggKyB0aGlzLnNpemUgLyAyLCBzY3JlZW5ZICsgdGhpcy5zaXplIC8gMiArIDIpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLyBzcmMvdXRpbHMvbWFwLmpzXHJcbmltcG9ydCB7IFRJTEVfQ09SUklET1IsIFRJTEVfUk9PTV9GTE9PUiwgVElMRV9MSUZUIH0gZnJvbSAnLi9jb25zdGFudHMuanMnOyAvLyBQb3RyemVibmUgZG8gQkZTXHJcblxyXG4vKipcclxuICogR2VuZXJ1amUgbG9zb3fEhSBsaWN6YsSZIGNhxYJrb3dpdMSFIHogcHJ6ZWR6aWHFgnUgW21pbiwgbWF4XSAod8WCxIVjem5pZSkuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gRG9sbmEgZ3JhbmljYS5cclxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBHw7NybmEgZ3JhbmljYS5cclxuICogQHJldHVybnMge251bWJlcn0gTG9zb3dhIGxpY3piYSBjYcWCa293aXRhLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUludChtaW4sIG1heCkge1xyXG4gIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFByb3N0YSAobmlla3J5cHRvZ3JhZmljem5hKSBmdW5rY2phIGhhc2h1asSFY2EuXHJcbiAqIFXFvHl3YW5hIGRvIHV6eXNrYW5pYSBwc2V1ZG9sb3Nvd2VqLCBhbGUgZGV0ZXJtaW5pc3R5Y3puZWogd2FydG/Fm2NpIHogbGljemJ5IChrb29yZHluYXTDs3cpLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2VlZCBaaWFybm8gKG5wLiBza29tYmlub3dhbmUga29vcmR5bmF0eSkuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJlenpuYWtvd2EgMzItYml0b3dhIGxpY3piYSBjYcWCa293aXRhLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNpbXBsZUhhc2goc2VlZCkge1xyXG4gIGxldCBoID0gc2VlZCBeIDB4ZGVhZGJlZWY7IC8vIFhPUiB6IHdhcnRvxZtjacSFIHBvY3rEhXRrb3fEhVxyXG4gIGggPSBNYXRoLmltdWwoaCBeIChoID4+PiAxNiksIDIyNDY4MjI1MDcpO1xyXG4gIGggPSBNYXRoLmltdWwoaCBeIChoID4+PiAxMyksIDMyNjY0ODk5MDkpO1xyXG4gIHJldHVybiAoaCBePSBoID4+PiAxNikgPj4+IDA7IC8vIEtvbndlcnNqYSBkbyBsaWN6YnkgYmV6IHpuYWt1IDMyLWJpdG93ZWpcclxufVxyXG5cclxuLy8gLS0tIEZ1bmtjamUga29sb3LDs3cgLS0tXHJcblxyXG4vKipcclxuICogR2VuZXJ1amUgbG9zb3d5IG9kY2llxYQgc3phcm/Fm2NpIHcgemFkYW55bSB6YWtyZXNpZSBqYXNub8WbY2kgKDAtMjU1KS5cclxuICogQHBhcmFtIHtudW1iZXJ9IG1pbkJyaWdodG5lc3MgTWluaW1hbG5hIGphc25vxZvEhy5cclxuICogQHBhcmFtIHtudW1iZXJ9IG1heEJyaWdodG5lc3MgTWFrc3ltYWxuYSBqYXNub8WbxIcuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEtvbG9yIHcgZm9ybWFjaWUgcmdiKCkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tR3JheShtaW5CcmlnaHRuZXNzLCBtYXhCcmlnaHRuZXNzKSB7XHJcbiAgY29uc3QgYnJpZ2h0bmVzcyA9IHJhbmRvbUludChtaW5CcmlnaHRuZXNzLCBtYXhCcmlnaHRuZXNzKTtcclxuICByZXR1cm4gYHJnYigke2JyaWdodG5lc3N9LCR7YnJpZ2h0bmVzc30sJHticmlnaHRuZXNzfSlgO1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJ1amUgbG9zb3d5IG9kY2llxYQgc3phcm/Fm2NpIGRsYSBrb3J5dGFyenkuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5CcmlnaHRuZXNzIE1pbmltYWxuYSBqYXNub8WbxIcuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhCcmlnaHRuZXNzIE1ha3N5bWFsbmEgamFzbm/Fm8SHLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBLb2xvciB3IGZvcm1hY2llIHJnYigpLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUNvcnJpZG9yR3JheShtaW5CcmlnaHRuZXNzLCBtYXhCcmlnaHRuZXNzKSB7XHJcbiAgLy8gTW/FvG5hIHXFvHnEhyB0ZWogc2FtZWogbG9naWtpIGNvIHJhbmRvbUdyYXkgbHViIHVjenluacSHIGplIG5pZWNvIGNpZXBsZWpzenltaS9jaMWCb2RuaWVqc3p5bWlcclxuICBjb25zdCBicmlnaHRuZXNzID0gcmFuZG9tSW50KG1pbkJyaWdodG5lc3MsIG1heEJyaWdodG5lc3MpO1xyXG4gIHJldHVybiBgcmdiKCR7YnJpZ2h0bmVzc30sJHticmlnaHRuZXNzfSwke2JyaWdodG5lc3N9KWA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEb3N0b3Nvd3VqZSBqYXNub8WbxIcga29sb3J1IEhFWCAobnAuICcjUlJHR0JCJykuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBoZXhDb2xvciBLb2xvciB3IGZvcm1hY2llIEhFWC5cclxuICogQHBhcmFtIHtudW1iZXJ9IGZhY3RvciBXc3DDs8WCY3p5bm5payBqYXNub8WbY2kgKDEuMCA9IGJleiB6bWlhbiwgPDEgY2llbW5pZWosID4xIGphxZtuaWVqKS5cclxuICogQHJldHVybnMge3N0cmluZ30gTm93eSBrb2xvciB3IGZvcm1hY2llIEhFWC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGp1c3RDb2xvckJyaWdodG5lc3MoaGV4Q29sb3IsIGZhY3Rvcikge1xyXG4gIGlmICghaGV4Q29sb3IgfHwgdHlwZW9mIGhleENvbG9yICE9PSAnc3RyaW5nJyB8fCBoZXhDb2xvci5sZW5ndGggPCA3KSByZXR1cm4gaGV4Q29sb3I7IC8vIFp3csOzxIcsIGplxZtsaSBrb2xvciBqZXN0IG5pZXByYXdpZMWCb3d5XHJcblxyXG4gIGxldCByID0gcGFyc2VJbnQoaGV4Q29sb3Iuc2xpY2UoMSwgMyksIDE2KTtcclxuICBsZXQgZyA9IHBhcnNlSW50KGhleENvbG9yLnNsaWNlKDMsIDUpLCAxNik7XHJcbiAgbGV0IGIgPSBwYXJzZUludChoZXhDb2xvci5zbGljZSg1LCA3KSwgMTYpO1xyXG5cclxuICByID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKHIgKiBmYWN0b3IpKSk7XHJcbiAgZyA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgTWF0aC5yb3VuZChnICogZmFjdG9yKSkpO1xyXG4gIGIgPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIE1hdGgucm91bmQoYiAqIGZhY3RvcikpKTtcclxuXHJcbiAgY29uc3QgckhleCA9IHIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgY29uc3QgZ0hleCA9IGcudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgY29uc3QgYkhleCA9IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyk7XHJcblxyXG4gIHJldHVybiBgIyR7ckhleH0ke2dIZXh9JHtiSGV4fWA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXeWtvbnVqZSBhbGdvcnl0bSBwcnplc3p1a2l3YW5pYSB3c3plcnogKEJGUykgbmEgc2lhdGNlIG1hcHkuXHJcbiAqIE1vxbxlIGJ5xIcgdcW8eXdhbnkgZG8gem5hamRvd2FuaWEgxZtjaWXFvGtpIGx1YiBzcHJhd2R6YW5pYSBvc2nEhWdhbG5vxZtjaS5cclxuICogQHBhcmFtIHtudW1iZXJbXVtdfSBtYXBHcmlkIFNpYXRrYSBtYXB5ICgyRCBhcnJheSB6IHdhcnRvxZtjaWFtaSBrYWZlbGvDs3cpLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRYIFBvY3rEhXRrb3dhIHdzcMOzxYJyesSZZG5hIFgga2FmZWxrYS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0WSBQb2N6xIV0a293YSB3c3DDs8WCcnrEmWRuYSBZIGthZmVsa2EuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2xzIExpY3piYSBrb2x1bW4gdyBtYXBHcmlkLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gcm93cyBMaWN6YmEgcnrEmWTDs3cgdyBtYXBHcmlkLlxyXG4gKiBAcGFyYW0ge251bWJlcltdfSB3YWxrYWJsZVRpbGVWYWx1ZXMgVGFibGljYSB3YXJ0b8WbY2kga2FmZWxrw7N3IHV3YcW8YW55Y2ggemEgcHJ6ZWNob2RuaWUgZGxhIHRlZ28gQkZTLlxyXG4gKiBAcmV0dXJucyB7e3JlYWNoYWJsZTogYm9vbGVhbn19IE9iaWVrdCB3c2thenVqxIVjeSwgY3p5IEJGUyBvc2nEhWduxIXFgiBva3JlxZtsb255IGNlbCAodyB0eW0gcHJ6eXBhZGt1LCBjenkgeiBwdW5rdHUgc3RhcnRvd2VnbyBtb8W8bmEgZG9qxZvEhyBkbyBrb3J5dGFyemEvcG9rb2p1KS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwZXJmb3JtQkZTKG1hcEdyaWQsIHN0YXJ0WCwgc3RhcnRZLCBjb2xzLCByb3dzLCB3YWxrYWJsZVRpbGVWYWx1ZXMpIHtcclxuICBjb25zdCBxdWV1ZSA9IFtbc3RhcnRYLCBzdGFydFldXTtcclxuICBjb25zdCB2aXNpdGVkID0gbmV3IFNldChbYCR7c3RhcnRYfSwke3N0YXJ0WX1gXSk7XHJcbiAgY29uc3QgZGlyZWN0aW9ucyA9IFtcclxuICAgIFswLCAtMV0sIC8vIEfDs3JhXHJcbiAgICBbMCwgMV0sIC8vIETDs8WCXHJcbiAgICBbLTEsIDBdLCAvLyBMZXdvXHJcbiAgICBbMSwgMF0sIC8vIFByYXdvXHJcbiAgXTtcclxuICBsZXQgcmVhY2hhYmxlID0gZmFsc2U7IC8vIEZsYWdhLCBjenkgQkZTIGRvdGFyxYIgZG8ga2FmZWxrw7N3IGtvcnl0YXJ6YS9wb2tvanUgKGplxZtsaSBzenVrYW5vIG9kIHdpbmR5KVxyXG5cclxuICAvLyBTcHJhd2R6ZW5pZSBwdW5rdHUgc3RhcnRvd2VnbyAoamXFm2xpIHN6dWthbXkgb3NpxIVnYWxub8WbY2kgeiB3aW5keSlcclxuICBjb25zdCBzdGFydFRpbGVWYWx1ZSA9IG1hcEdyaWRbc3RhcnRZXT8uW3N0YXJ0WF07XHJcbiAgLy8gQ3p5IHB1bmt0IHN0YXJ0b3d5IChucC4gd2luZGEpIGplc3QganXFvCBuYSBiZXpwaWVjem55bSB0ZXJlbmllIChkbGEgY2VsdSBzcHJhd2R6ZW5pYSBvc2nEhWdhbG5vxZtjaSk/XHJcbiAgLy8gVyB0eW0ga29ua3JldG55bSB1xbx5Y2l1IChzcHJhd2R6ZW5pZSB3aW5keSkgaW50ZXJlc3VqZSBuYXMsIGN6eSB6IHdpbmR5IG1vxbxuYSBkb3RyemXEhyBkbyBLT1JZVEFSWkEvUE9LT0pVLlxyXG4gIC8vIFNhbW8gc3RhbmllIG5hIHdpbmR6aWUgbmllIG96bmFjemEgb3NpxIVnYWxub8WbY2kgYmV6cGllY3puZWogc3RyZWZ5LlxyXG4gIC8vIFNwcmF3ZHppbXkgc8SFc2lhZMOzdyB3aW5keS5cclxuXHJcbiAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgIGNvbnN0IFtjdXJyWCwgY3VyclldID0gcXVldWUuc2hpZnQoKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtkeCwgZHldIG9mIGRpcmVjdGlvbnMpIHtcclxuICAgICAgY29uc3QgbmV4dFggPSBjdXJyWCArIGR4O1xyXG4gICAgICBjb25zdCBuZXh0WSA9IGN1cnJZICsgZHk7XHJcbiAgICAgIGNvbnN0IGtleSA9IGAke25leHRYfSwke25leHRZfWA7XHJcblxyXG4gICAgICAvLyBTcHJhd2R6ZW5pZSBncmFuaWMgaSBjenkganXFvCBvZHdpZWR6b25lXHJcbiAgICAgIGlmIChuZXh0WCA+PSAwICYmIG5leHRYIDwgY29scyAmJiBuZXh0WSA+PSAwICYmIG5leHRZIDwgcm93cyAmJiAhdmlzaXRlZC5oYXMoa2V5KSkge1xyXG4gICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IG1hcEdyaWRbbmV4dFldPy5bbmV4dFhdO1xyXG4gICAgICAgIHZpc2l0ZWQuYWRkKGtleSk7IC8vIE9kd2llZHphbXkgbmllemFsZcW8bmllIG9kIHR5cHVcclxuXHJcbiAgICAgICAgLy8gQ3p5IHRlbiBrYWZlbGVrIGplc3QgcHJ6ZWNob2RuaSBETEEgVEVHTyBCRlM/XHJcbiAgICAgICAgaWYgKHdhbGthYmxlVGlsZVZhbHVlcy5pbmNsdWRlcyh0aWxlVmFsdWUpKSB7XHJcbiAgICAgICAgICBxdWV1ZS5wdXNoKFtuZXh0WCwgbmV4dFldKTtcclxuXHJcbiAgICAgICAgICAvLyBDenkgdGVuIGthZmVsZWsgamVzdCBLT1JZVEFSWkVNIGx1YiBQT0TFgU9HxIQgUE9LT0pVP1xyXG4gICAgICAgICAgLy8gSmXFm2xpIHRhaywgdG8gem5hbGXFumxpxZtteSBiZXpwaWVjem7EhSBzdHJlZsSZIG9zacSFZ2FsbsSFIHogcHVua3R1IHN0YXJ0b3dlZ28uXHJcbiAgICAgICAgICBpZiAodGlsZVZhbHVlID09PSBUSUxFX0NPUlJJRE9SIHx8IHRpbGVWYWx1ZSA9PT0gVElMRV9ST09NX0ZMT09SKSB7XHJcbiAgICAgICAgICAgIHJlYWNoYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIE1vxbxuYSBieSB0dSB6YWtvxYRjennEhyBwxJl0bMSZLCBqZcWbbGkgaW50ZXJlc3VqZSBuYXMgdHlsa28gQ1pZIGplc3Qgb3NpxIVnYWxuZVxyXG4gICAgICAgICAgICAvLyByZXR1cm4geyByZWFjaGFibGU6IHRydWUgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLy8gWndyw7PEhyB3eW5payBCRlMgLSB3IHR5bSBwcnp5cGFka3UsIGZsYWfEmSBvc2nEhWdhbG5vxZtjaSBiZXpwaWVjem5laiBzdHJlZnlcclxuICByZXR1cm4geyByZWFjaGFibGUgfTtcclxufVxyXG5cclxuLy8gLi4uIChpbm5lIG5hcnrEmWR6aWEgbWFweSwgamXFm2xpIGlzdG5pZWrEhSlcclxuIiwiLy8gc3JjL21hcC9tYXBSZW5kZXJlci5qc1xyXG5cclxuaW1wb3J0IHsgVElMRV9XQUxMLCBUSUxFX0NPUlJJRE9SLCBUSUxFX1JPT01fRkxPT1IsIFRJTEVfTElGVCB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XHJcbi8vIFJlbW92ZWQgdW51c2VkIHJhbmRvbUdyYXksIHJhbmRvbUNvcnJpZG9yR3JheSBpbXBvcnRzXHJcbmltcG9ydCB7IGFkanVzdENvbG9yQnJpZ2h0bmVzcywgc2ltcGxlSGFzaCB9IGZyb20gJy4uL3V0aWxzL21hcC5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFwUmVuZGVyZXIge1xyXG4gIGNvbnN0cnVjdG9yKHRpbGVTaXplKSB7XHJcbiAgICB0aGlzLnRpbGVTaXplID0gdGlsZVNpemU7XHJcbiAgICAvLyBDYWNoZSBpcyBsZXNzIGNyaXRpY2FsIG5vdyBmb3IgYmFzZSB0aWxlcyBidXQgc3RpbGwgdXNlZnVsIGZvciByb29tIGZsb29ycy9vdGhlciBlbGVtZW50c1xyXG4gICAgdGhpcy50aWxlQ29sb3JzID0ge307XHJcbiAgICB0aGlzLmJhc2VXYWxsQ29sb3IgPSAnIzFjMWUyMic7IC8vIFNpbmdsZSwgY29uc2lzdGVudCB3YWxsIGNvbG9yXHJcbiAgICB0aGlzLmJhc2VDb3JyaWRvckNvbG9yID0gJyNhMGEwYTAnOyAvLyBTaW5nbGUsIGNvbnNpc3RlbnQgY29ycmlkb3IgY29sb3JcclxuICAgIHRoaXMuYmFzZVJvb21GbG9vckNvbG9yID0gJyNjMGMwYzAnOyAvLyBEZWZhdWx0IHJvb20gZmxvb3IgKG92ZXJ3cml0dGVuIGJ5IGRyYXdSb29tRGV0YWlscylcclxuICAgIHRoaXMubGlmdENvbG9yID0gJyM3MDcwODAnOyAvLyBDb25zaXN0ZW50IGxpZnQgY29sb3JcclxuICAgIHRoaXMuZXJyb3JDb2xvciA9ICcjZmYwMGZmJzsgLy8gRXJyb3IgY29sb3JcclxuICB9XHJcblxyXG4gIC8vIFJlc2V0IGNvbG9yIGNhY2hlIHdoZW4gYSBuZXcgbWFwIGlzIGRyYXduIChjYWxsZWQgYnkgUHJvY2VkdXJhbE1hcClcclxuICByZXNldENvbG9yQ2FjaGUoKSB7XHJcbiAgICB0aGlzLnRpbGVDb2xvcnMgPSB7fTtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgb3IgZ2VuZXJhdGUgdGhlIGNvbG9yIGZvciBhIHNwZWNpZmljIHRpbGUgKi9cclxuICBnZXRUaWxlQ29sb3IociwgYywgdGlsZVZhbHVlLCByb29tcykge1xyXG4gICAgLy8gTk9URTogV2Ugc3RpbGwgdXNlIHRoZSBjYWNoZSBrZXksIG1haW5seSB1c2VmdWwgaWYgcm9vbXMgbmVlZCBzcGVjaWZpY1xyXG4gICAgLy8gdGlsZSBjb2xvcnMgbm90IGhhbmRsZWQgYnkgZHJhd1Jvb21EZXRhaWxzIGxhdGVyLCBvciBpZiB3ZSBhZGQgbW9yZSBjb21wbGV4IGxvZ2ljLlxyXG4gICAgLy8gRm9yIHRoZSBiYXNlIHRpbGVzIG1vZGlmaWVkIGJlbG93LCBpdCdzIGxlc3MgZXNzZW50aWFsLlxyXG4gICAgY29uc3Qga2V5ID0gYCR7cn0sJHtjfWA7XHJcbiAgICBpZiAodGhpcy50aWxlQ29sb3JzW2tleV0pIHtcclxuICAgICAgcmV0dXJuIHRoaXMudGlsZUNvbG9yc1trZXldO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjb2xvcjtcclxuXHJcbiAgICAvLyAtLS0gUkVNT1ZFRCBwZXItdGlsZSBoYXNoL3ZhcmlhdGlvbiBmb3IgYmFzZSB0eXBlcyAtLS1cclxuICAgIC8vIGNvbnN0IGhhc2ggPSBzaW1wbGVIYXNoKHIgKiAxMDAwICsgYyk7XHJcbiAgICAvLyBjb25zdCB2YXJpYXRpb24gPSAoKGhhc2ggJSAyMSkgLSAxMCkgLyAxMDA7XHJcblxyXG4gICAgc3dpdGNoICh0aWxlVmFsdWUpIHtcclxuICAgICAgY2FzZSBUSUxFX1dBTEw6XHJcbiAgICAgICAgLy8gVXNlIHRoZSBzaW5nbGUsIGNvbnNpc3RlbnQgYmFzZSBjb2xvciBkaXJlY3RseVxyXG4gICAgICAgIGNvbG9yID0gdGhpcy5iYXNlV2FsbENvbG9yO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFRJTEVfQ09SUklET1I6XHJcbiAgICAgICAgLy8gVXNlIHRoZSBzaW5nbGUsIGNvbnNpc3RlbnQgYmFzZSBjb2xvciBkaXJlY3RseVxyXG4gICAgICAgIGNvbG9yID0gdGhpcy5iYXNlQ29ycmlkb3JDb2xvcjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBUSUxFX1JPT01fRkxPT1I6XHJcbiAgICAgICAgLy8gVXNlIHRoZSBjb25zaXN0ZW50IGJhc2Ugcm9vbSBmbG9vciBjb2xvci5cclxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgZHJhd1Jvb21EZXRhaWxzIGZvciBhY3R1YWwgcm9vbSB0aWxlcy5cclxuICAgICAgICAvLyBJdCBzZXJ2ZXMgYXMgdGhlIGNvbG9yIGlmIGEgVElMRV9ST09NX0ZMT09SIHNvbWVob3cgZXhpc3RzIG91dHNpZGUgYSBkZWZpbmVkIHJvb20uXHJcbiAgICAgICAgY29sb3IgPSB0aGlzLmJhc2VSb29tRmxvb3JDb2xvcjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBUSUxFX0xJRlQ6XHJcbiAgICAgICAgLy8gVXNlIHRoZSBjb25zaXN0ZW50IGxpZnQgY29sb3JcclxuICAgICAgICBjb2xvciA9IHRoaXMubGlmdENvbG9yO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGNvbG9yID0gdGhpcy5lcnJvckNvbG9yOyAvLyBFcnJvciBjb2xvclxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0aWxsIGNhY2hlIHRoZSByZXN1bHRcclxuICAgIHRoaXMudGlsZUNvbG9yc1trZXldID0gY29sb3I7XHJcbiAgICByZXR1cm4gY29sb3I7XHJcbiAgfVxyXG5cclxuICAvKiogTWFpbiBkcmF3aW5nIGZ1bmN0aW9uICovXHJcbiAgZHJhdyhjdHgsIG1hcERhdGEsIGJvb2tJbWFnZSA9IG51bGwpIHtcclxuICAgIGNvbnN0IHsgbWFwLCByb29tcywgYm9va3MsIGxpZnRQb3NpdGlvbiwgb2Zmc2V0WCwgb2Zmc2V0WSwgY29scywgcm93cyB9ID0gbWFwRGF0YTtcclxuXHJcbiAgICAvLyBSb3VuZCBvZmZzZXRzIGZvciBzaGFycG5lc3NcclxuICAgIGNvbnN0IGN1cnJlbnRPZmZzZXRYID0gTWF0aC5mbG9vcihvZmZzZXRYKTtcclxuICAgIGNvbnN0IGN1cnJlbnRPZmZzZXRZID0gTWF0aC5mbG9vcihvZmZzZXRZKTtcclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgdmlzaWJsZSB0aWxlcyB3aXRoIGEgc21hbGwgYnVmZmVyXHJcbiAgICBjb25zdCBzdGFydENvbCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoLWN1cnJlbnRPZmZzZXRYIC8gdGhpcy50aWxlU2l6ZSkgLSAxKTtcclxuICAgIGNvbnN0IGVuZENvbCA9IE1hdGgubWluKFxyXG4gICAgICBjb2xzLFxyXG4gICAgICBNYXRoLmNlaWwoKC1jdXJyZW50T2Zmc2V0WCArIGN0eC5jYW52YXMud2lkdGgpIC8gdGhpcy50aWxlU2l6ZSkgKyAxXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc3RhcnRSb3cgPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKC1jdXJyZW50T2Zmc2V0WSAvIHRoaXMudGlsZVNpemUpIC0gMSk7XHJcbiAgICBjb25zdCBlbmRSb3cgPSBNYXRoLm1pbihcclxuICAgICAgcm93cyxcclxuICAgICAgTWF0aC5jZWlsKCgtY3VycmVudE9mZnNldFkgKyBjdHguY2FudmFzLmhlaWdodCkgLyB0aGlzLnRpbGVTaXplKSArIDFcclxuICAgICk7XHJcblxyXG4gICAgY3R4LnNhdmUoKTsgLy8gU2F2ZSBjb250ZXh0IHN0YXRlXHJcblxyXG4gICAgLy8gMS4gRHJhdyBiYXNlIHRpbGVzICh3YWxscywgY29ycmlkb3JzLCBkZWZhdWx0IGZsb29yLCBsaWZ0IGJhc2UpXHJcbiAgICAvLyAgICBUaGVzZSB3aWxsIG5vdyB1c2UgdGhlIGNvbnNpc3RlbnQgY29sb3JzIGZyb20gZ2V0VGlsZUNvbG9yLlxyXG4gICAgdGhpcy5kcmF3QmFzZVRpbGVzKFxyXG4gICAgICBjdHgsXHJcbiAgICAgIG1hcCxcclxuICAgICAgcm9vbXMsXHJcbiAgICAgIGN1cnJlbnRPZmZzZXRYLFxyXG4gICAgICBjdXJyZW50T2Zmc2V0WSxcclxuICAgICAgY29scyxcclxuICAgICAgcm93cyxcclxuICAgICAgc3RhcnRSb3csXHJcbiAgICAgIGVuZFJvdyxcclxuICAgICAgc3RhcnRDb2wsXHJcbiAgICAgIGVuZENvbFxyXG4gICAgKTtcclxuXHJcbiAgICAvLyAyLiBEcmF3IHNwZWNpZmljIHJvb20gZmxvb3JzIGFuZCBkZWNvcmF0aW9uc1xyXG4gICAgLy8gICAgVGhpcyBmdW5jdGlvbiBXSUxMIGFwcGx5IHNwZWNpZmljIGNvbG9ycyBiYXNlZCBvbiByb29tIHR5cGUsXHJcbiAgICAvLyAgICBhbmQgc3VidGxlIHBlci10aWxlIHZhcmlhdGlvbnMgV0lUSElOIHRoZSByb29tIGZsb29yLlxyXG4gICAgdGhpcy5kcmF3Um9vbURldGFpbHMoXHJcbiAgICAgIGN0eCxcclxuICAgICAgbWFwLFxyXG4gICAgICByb29tcyxcclxuICAgICAgbGlmdFBvc2l0aW9uLFxyXG4gICAgICBjdXJyZW50T2Zmc2V0WCxcclxuICAgICAgY3VycmVudE9mZnNldFksXHJcbiAgICAgIGNvbHMsXHJcbiAgICAgIHJvd3MsXHJcbiAgICAgIHN0YXJ0Um93LFxyXG4gICAgICBlbmRSb3csXHJcbiAgICAgIHN0YXJ0Q29sLFxyXG4gICAgICBlbmRDb2xcclxuICAgICk7XHJcblxyXG4gICAgLy8gMy4gRHJhdyBsaWZ0IGRldGFpbHMgKG92ZXJsYXlpbmcgcm9vbSBmbG9vcnMgaWYgbmVlZGVkKVxyXG4gICAgdGhpcy5kcmF3TGlmdERldGFpbHMoY3R4LCBsaWZ0UG9zaXRpb24sIGN1cnJlbnRPZmZzZXRYLCBjdXJyZW50T2Zmc2V0WSk7XHJcblxyXG4gICAgLy8gNC4gRHJhdyBib29rc1xyXG4gICAgdGhpcy5kcmF3Qm9va3MoY3R4LCBib29rcywgY3VycmVudE9mZnNldFgsIGN1cnJlbnRPZmZzZXRZLCBib29rSW1hZ2UpO1xyXG5cclxuICAgIGN0eC5yZXN0b3JlKCk7IC8vIFJlc3RvcmUgY29udGV4dCBzdGF0ZVxyXG4gIH1cclxuXHJcbiAgLyoqIERyYXcgYmFzZSB0aWxlcyAqL1xyXG4gIGRyYXdCYXNlVGlsZXMoY3R4LCBtYXAsIHJvb21zLCBvZmZzZXRYLCBvZmZzZXRZLCBjb2xzLCByb3dzLCBzdGFydFJvdywgZW5kUm93LCBzdGFydENvbCwgZW5kQ29sKSB7XHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgY3R4LnNoYWRvd0NvbG9yID0gJ3RyYW5zcGFyZW50JztcclxuXHJcbiAgICBjb25zdCB3YWxsRWRnZUNvbG9yRGFyayA9ICcjMzgzODM4JztcclxuICAgIGNvbnN0IHdhbGxFZGdlQ29sb3JMaWdodCA9ICcjNjA2MDYwJztcclxuICAgIGNvbnN0IHdhbGxUb3BFZGdlQ29sb3IgPSAnIzc1NzU3NSc7XHJcblxyXG4gICAgZm9yIChsZXQgciA9IHN0YXJ0Um93OyByIDwgZW5kUm93OyByKyspIHtcclxuICAgICAgZm9yIChsZXQgYyA9IHN0YXJ0Q29sOyBjIDwgZW5kQ29sOyBjKyspIHtcclxuICAgICAgICBjb25zdCB0aWxlVmFsdWUgPSBtYXBbcl0/LltjXTtcclxuICAgICAgICBpZiAodGlsZVZhbHVlID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBjb25zdCBzY3JlZW5YID0gTWF0aC5mbG9vcihjICogdGhpcy50aWxlU2l6ZSArIG9mZnNldFgpO1xyXG4gICAgICAgIGNvbnN0IHNjcmVlblkgPSBNYXRoLmZsb29yKHIgKiB0aGlzLnRpbGVTaXplICsgb2Zmc2V0WSk7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBjb2xvciAtIG5vdyBjb25zaXN0ZW50IGZvciB3YWxscy9jb3JyaWRvcnMvZGVmYXVsdCBmbG9vci9saWZ0XHJcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmdldFRpbGVDb2xvcihyLCBjLCB0aWxlVmFsdWUsIHJvb21zKTtcclxuXHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xyXG4gICAgICAgIGN0eC5maWxsUmVjdChzY3JlZW5YLCBzY3JlZW5ZLCB0aGlzLnRpbGVTaXplLCB0aGlzLnRpbGVTaXplKTtcclxuXHJcbiAgICAgICAgLy8gLS0tIFdhbGwgRWRnZXMgYW5kIE5vaXNlIChTdGlsbCBBcHBsaWVkIGZvciBEZXRhaWwpIC0tLVxyXG4gICAgICAgIGlmICh0aWxlVmFsdWUgPT09IFRJTEVfV0FMTCkge1xyXG4gICAgICAgICAgLy8gTm9pc2UgdGV4dHVyZSAoYXBwbGllZCBPTiBUT1Agb2YgdGhlIGNvbnNpc3RlbnQgYmFzZSBjb2xvcilcclxuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwLjA2KSc7XHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoXHJcbiAgICAgICAgICAgICAgc2NyZWVuWCArIE1hdGgucmFuZG9tKCkgKiB0aGlzLnRpbGVTaXplLFxyXG4gICAgICAgICAgICAgIHNjcmVlblkgKyBNYXRoLnJhbmRvbSgpICogdGhpcy50aWxlU2l6ZSxcclxuICAgICAgICAgICAgICAxLFxyXG4gICAgICAgICAgICAgIDFcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBFZGdlIHJlbmRlcmluZyAoYXBwbGllZCBPTiBUT1ApXHJcbiAgICAgICAgICBjb25zdCBlZGdlU2l6ZSA9IDI7XHJcbiAgICAgICAgICBpZiAociA+IDAgJiYgbWFwW3IgLSAxXT8uW2NdICE9PSBUSUxFX1dBTEwpIHtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHdhbGxUb3BFZGdlQ29sb3I7XHJcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChzY3JlZW5YLCBzY3JlZW5ZLCB0aGlzLnRpbGVTaXplLCBlZGdlU2l6ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAociA8IHJvd3MgLSAxICYmIG1hcFtyICsgMV0/LltjXSAhPT0gVElMRV9XQUxMKSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB3YWxsRWRnZUNvbG9yRGFyaztcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHNjcmVlblgsIHNjcmVlblkgKyB0aGlzLnRpbGVTaXplIC0gZWRnZVNpemUsIHRoaXMudGlsZVNpemUsIGVkZ2VTaXplKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChjID4gMCAmJiBtYXBbcl0/LltjIC0gMV0gIT09IFRJTEVfV0FMTCkge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gd2FsbEVkZ2VDb2xvckxpZ2h0O1xyXG4gICAgICAgICAgICBjdHguZmlsbFJlY3Qoc2NyZWVuWCwgc2NyZWVuWSArIGVkZ2VTaXplLCBlZGdlU2l6ZSwgdGhpcy50aWxlU2l6ZSAtIGVkZ2VTaXplKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChjIDwgY29scyAtIDEgJiYgbWFwW3JdPy5bYyArIDFdICE9PSBUSUxFX1dBTEwpIHtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHdhbGxFZGdlQ29sb3JEYXJrO1xyXG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoXHJcbiAgICAgICAgICAgICAgc2NyZWVuWCArIHRoaXMudGlsZVNpemUgLSBlZGdlU2l6ZSxcclxuICAgICAgICAgICAgICBzY3JlZW5ZICsgZWRnZVNpemUsXHJcbiAgICAgICAgICAgICAgZWRnZVNpemUsXHJcbiAgICAgICAgICAgICAgdGhpcy50aWxlU2l6ZSAtIGVkZ2VTaXplXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBDb3JuZXIgbG9naWMgKHJlbWFpbnMgdGhlIHNhbWUpXHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHIgPiAwICYmXHJcbiAgICAgICAgICAgIGMgPiAwICYmXHJcbiAgICAgICAgICAgIG1hcFtyIC0gMV0/LltjXSAhPT0gVElMRV9XQUxMICYmXHJcbiAgICAgICAgICAgIG1hcFtyXT8uW2MgLSAxXSAhPT0gVElMRV9XQUxMICYmXHJcbiAgICAgICAgICAgIG1hcFtyIC0gMV0/LltjIC0gMV0gIT09IFRJTEVfV0FMTFxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB3YWxsRWRnZUNvbG9yTGlnaHQ7XHJcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChzY3JlZW5YLCBzY3JlZW5ZLCBlZGdlU2l6ZSwgZWRnZVNpemUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICByID4gMCAmJlxyXG4gICAgICAgICAgICBjIDwgY29scyAtIDEgJiZcclxuICAgICAgICAgICAgbWFwW3IgLSAxXT8uW2NdICE9PSBUSUxFX1dBTEwgJiZcclxuICAgICAgICAgICAgbWFwW3JdPy5bYyArIDFdICE9PSBUSUxFX1dBTEwgJiZcclxuICAgICAgICAgICAgbWFwW3IgLSAxXT8uW2MgKyAxXSAhPT0gVElMRV9XQUxMXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHdhbGxUb3BFZGdlQ29sb3I7XHJcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChzY3JlZW5YICsgdGhpcy50aWxlU2l6ZSAtIGVkZ2VTaXplLCBzY3JlZW5ZLCBlZGdlU2l6ZSwgZWRnZVNpemUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gLi4uIHBvdGVudGlhbGx5IG90aGVyIGNvcm5lcnNcclxuICAgICAgICB9IGVsc2UgaWYgKHRpbGVWYWx1ZSA9PT0gVElMRV9DT1JSSURPUikge1xyXG4gICAgICAgICAgLy8gQ29ycmlkb3IgTm9pc2UgKGFwcGxpZWQgT04gVE9QIG9mIHRoZSBjb25zaXN0ZW50IGJhc2UgY29sb3IpXHJcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC4wMyknO1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KFxyXG4gICAgICAgICAgICAgIHNjcmVlblggKyBNYXRoLnJhbmRvbSgpICogdGhpcy50aWxlU2l6ZSxcclxuICAgICAgICAgICAgICBzY3JlZW5ZICsgTWF0aC5yYW5kb20oKSAqIHRoaXMudGlsZVNpemUsXHJcbiAgICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgICAxXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5PVEU6IE5vIHNwZWNpYWwgZHJhd2luZyBuZWVkZWQgaGVyZSBmb3IgVElMRV9ST09NX0ZMT09SIG9yIFRJTEVfTElGVFxyXG4gICAgICAgIC8vIGFzIGRyYXdSb29tRGV0YWlscyBhbmQgZHJhd0xpZnREZXRhaWxzIGhhbmRsZSB0aGVpciBzcGVjaWZpY3MuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgfVxyXG5cclxuICAvKiogRHJhdyBzcGVjaWZpYyByb29tIGZsb29ycyBhbmQgZGVjb3JhdGlvbnMgKi9cclxuICBkcmF3Um9vbURldGFpbHMoXHJcbiAgICBjdHgsXHJcbiAgICBtYXAsXHJcbiAgICByb29tcyxcclxuICAgIGxpZnRQb3NpdGlvbixcclxuICAgIG9mZnNldFgsXHJcbiAgICBvZmZzZXRZLFxyXG4gICAgY29scyxcclxuICAgIHJvd3MsXHJcbiAgICBzdGFydFJvdyxcclxuICAgIGVuZFJvdyxcclxuICAgIHN0YXJ0Q29sLFxyXG4gICAgZW5kQ29sXHJcbiAgKSB7XHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgY3R4LnNoYWRvd0NvbG9yID0gJ3RyYW5zcGFyZW50JztcclxuXHJcbiAgICBmb3IgKGNvbnN0IHJvb20gb2Ygcm9vbXMpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHJvb20uY29sICsgcm9vbS53aWR0aCA8IHN0YXJ0Q29sIHx8XHJcbiAgICAgICAgcm9vbS5jb2wgPiBlbmRDb2wgfHxcclxuICAgICAgICByb29tLnJvdyArIHJvb20uaGVpZ2h0IDwgc3RhcnRSb3cgfHxcclxuICAgICAgICByb29tLnJvdyA+IGVuZFJvd1xyXG4gICAgICApXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBjb25zdCByb29tU2NyZWVuWCA9IE1hdGguZmxvb3Iocm9vbS5jb2wgKiB0aGlzLnRpbGVTaXplICsgb2Zmc2V0WCk7XHJcbiAgICAgIGNvbnN0IHJvb21TY3JlZW5ZID0gTWF0aC5mbG9vcihyb29tLnJvdyAqIHRoaXMudGlsZVNpemUgKyBvZmZzZXRZKTtcclxuICAgICAgY29uc3Qgcm9vbVNjcmVlblcgPSByb29tLndpZHRoICogdGhpcy50aWxlU2l6ZTtcclxuICAgICAgY29uc3Qgcm9vbVNjcmVlbkggPSByb29tLmhlaWdodCAqIHRoaXMudGlsZVNpemU7XHJcblxyXG4gICAgICAvLyAtLS0gRGV0ZXJtaW5lIEZsb29yIENvbG9yIEJhc2VkIG9uIFJvb20gVHlwZSAoVGhpcyBsb2dpYyByZW1haW5zKSAtLS1cclxuICAgICAgbGV0IGZsb29yQ29sb3IgPSB0aGlzLmJhc2VSb29tRmxvb3JDb2xvcjsgLy8gU3RhcnQgd2l0aCBkZWZhdWx0XHJcbiAgICAgIC8vIFVzZSBhIHNlZWQgdGhhdCBjaGFuZ2VzIHBlciByb29tIGJ1dCBpcyBjb25zaXN0ZW50IGZvciB0aGF0IHJvb21cclxuICAgICAgLy8gQWRkZWQgZmxvb3JOdW1iZXIgZGVwZW5kZW5jeSBpZiBhdmFpbGFibGUgaW4gYHRoaXNgLCBvdGhlcndpc2UgdXNlIHJvb20uaWRcclxuICAgICAgY29uc3QgZmxvb3JOdW0gPSB0eXBlb2YgdGhpcy5mbG9vck51bWJlciA9PT0gJ251bWJlcicgPyB0aGlzLmZsb29yTnVtYmVyIDogMDtcclxuICAgICAgbGV0IHJvb21TZWVkID0gc2ltcGxlSGFzaChyb29tLmlkKSArIGZsb29yTnVtICogMTAwOyAvLyBVc2UgaGFzaCBvZiBJRCBmb3IgbW9yZSB2YXJpYXRpb25cclxuXHJcbiAgICAgIHN3aXRjaCAocm9vbS50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnY2xhc3Nyb29tJzpcclxuICAgICAgICAgIGZsb29yQ29sb3IgPSBhZGp1c3RDb2xvckJyaWdodG5lc3MoJyNhMGM4ZTAnLCAwLjkgKyAoc2ltcGxlSGFzaChyb29tU2VlZCkgJSAxMSkgLyAxMDApO1xyXG4gICAgICAgICAgYnJlYWs7IC8vIEJsdWlzaFxyXG4gICAgICAgIGNhc2UgJ29mZmljZSc6XHJcbiAgICAgICAgICBmbG9vckNvbG9yID0gYWRqdXN0Q29sb3JCcmlnaHRuZXNzKFxyXG4gICAgICAgICAgICAnI2YwZThjMCcsXHJcbiAgICAgICAgICAgIDAuOSArIChzaW1wbGVIYXNoKHJvb21TZWVkICsgMSkgJSAxMSkgLyAxMDBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBicmVhazsgLy8gQmVpZ2VcclxuICAgICAgICBjYXNlICdsaWJyYXJ5JzpcclxuICAgICAgICAgIGZsb29yQ29sb3IgPSBhZGp1c3RDb2xvckJyaWdodG5lc3MoXHJcbiAgICAgICAgICAgICcjZDhjMGE4JyxcclxuICAgICAgICAgICAgMC45ICsgKHNpbXBsZUhhc2gocm9vbVNlZWQgKyAyKSAlIDExKSAvIDEwMFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGJyZWFrOyAvLyBXb29kZW5cclxuICAgICAgICBjYXNlICdneW0nOlxyXG4gICAgICAgICAgZmxvb3JDb2xvciA9IGFkanVzdENvbG9yQnJpZ2h0bmVzcyhcclxuICAgICAgICAgICAgJyNiMGQwYjAnLFxyXG4gICAgICAgICAgICAwLjkgKyAoc2ltcGxlSGFzaChyb29tU2VlZCArIDMpICUgMTEpIC8gMTAwXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgYnJlYWs7IC8vIEdyZWVuaXNoXHJcbiAgICAgICAgY2FzZSAnbGFiJzpcclxuICAgICAgICAgIGZsb29yQ29sb3IgPSBhZGp1c3RDb2xvckJyaWdodG5lc3MoXHJcbiAgICAgICAgICAgICcjZTBlMGZmJyxcclxuICAgICAgICAgICAgMC45ICsgKHNpbXBsZUhhc2gocm9vbVNlZWQgKyA0KSAlIDExKSAvIDEwMFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGJyZWFrOyAvLyBMaWdodCBibHVlLXB1cnBsZVxyXG4gICAgICAgIGNhc2UgJ3N0b3JhZ2UnOlxyXG4gICAgICAgICAgZmxvb3JDb2xvciA9IGFkanVzdENvbG9yQnJpZ2h0bmVzcyhcclxuICAgICAgICAgICAgJyNiMGEwOTAnLFxyXG4gICAgICAgICAgICAwLjkgKyAoc2ltcGxlSGFzaChyb29tU2VlZCArIDUpICUgMTEpIC8gMTAwXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgYnJlYWs7IC8vIEdyYXktYnJvd25cclxuICAgICAgICBjYXNlICd1dGlsaXR5JzpcclxuICAgICAgICAgIGZsb29yQ29sb3IgPSBhZGp1c3RDb2xvckJyaWdodG5lc3MoXHJcbiAgICAgICAgICAgICcjYjBiMGIwJyxcclxuICAgICAgICAgICAgMC45ICsgKHNpbXBsZUhhc2gocm9vbVNlZWQgKyA2KSAlIDExKSAvIDEwMFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGJyZWFrOyAvLyBHcmF5IGNvbmNyZXRlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIC0tLSBEcmF3IFJvb20gRmxvb3IgKFRpbGUgYnkgVGlsZSB3aXRoaW4gVmlzaWJsZSBBcmVhKSAtLS1cclxuICAgICAgZm9yIChcclxuICAgICAgICBsZXQgciA9IE1hdGgubWF4KHJvb20ucm93LCBzdGFydFJvdyk7XHJcbiAgICAgICAgciA8IE1hdGgubWluKHJvb20ucm93ICsgcm9vbS5oZWlnaHQsIGVuZFJvdyk7XHJcbiAgICAgICAgcisrXHJcbiAgICAgICkge1xyXG4gICAgICAgIGZvciAoXHJcbiAgICAgICAgICBsZXQgYyA9IE1hdGgubWF4KHJvb20uY29sLCBzdGFydENvbCk7XHJcbiAgICAgICAgICBjIDwgTWF0aC5taW4ocm9vbS5jb2wgKyByb29tLndpZHRoLCBlbmRDb2wpO1xyXG4gICAgICAgICAgYysrXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb25zdCB0aWxlVmFsdWUgPSBtYXBbcl0/LltjXTtcclxuICAgICAgICAgIC8vIE9ubHkgZHJhdyBpZiBpdCdzIGFjdHVhbGx5IGEgVElMRV9ST09NX0ZMT09SXHJcbiAgICAgICAgICBpZiAodGlsZVZhbHVlID09PSBUSUxFX1JPT01fRkxPT1IpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NyZWVuWCA9IE1hdGguZmxvb3IoYyAqIHRoaXMudGlsZVNpemUgKyBvZmZzZXRYKTtcclxuICAgICAgICAgICAgY29uc3Qgc2NyZWVuWSA9IE1hdGguZmxvb3IociAqIHRoaXMudGlsZVNpemUgKyBvZmZzZXRZKTtcclxuXHJcbiAgICAgICAgICAgIC8vIC0tLSBTdWJ0bGUgUGVyLVRpbGUgVmFyaWF0aW9uIFdJVEhJTiBSb29tIEZsb29yIChLZXB0IGZvciB0ZXh0dXJlKSAtLS1cclxuICAgICAgICAgICAgY29uc3QgdGlsZUhhc2ggPSBzaW1wbGVIYXNoKHIgKiA1MDAwICsgYyAqIDMgKyByb29tU2VlZCk7IC8vIEluY2x1ZGUgcm9vbVNlZWRcclxuICAgICAgICAgICAgY29uc3QgdmFyaWF0aW9uID0gKCh0aWxlSGFzaCAlIDExKSAtIDUpIC8gMTAwOyAvLyBWYXJpYXRpb24gLTAuMDUgdG8gKzAuMDVcclxuICAgICAgICAgICAgY29uc3QgYnJpZ2h0bmVzc0ZhY3RvciA9IDAuOTggKyB2YXJpYXRpb247XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBhZGp1c3RDb2xvckJyaWdodG5lc3MoZmxvb3JDb2xvciwgYnJpZ2h0bmVzc0ZhY3Rvcik7XHJcbiAgICAgICAgICAgIC8vIC0tLSBFbmQgUGVyLVRpbGUgVmFyaWF0aW9uIC0tLVxyXG5cclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHNjcmVlblgsIHNjcmVlblksIHRoaXMudGlsZVNpemUsIHRoaXMudGlsZVNpemUpO1xyXG5cclxuICAgICAgICAgICAgLy8gT3B0aW9uYWwgZmxvb3IgdGV4dHVyZSAocmVtYWlucyB0aGUgc2FtZSlcclxuICAgICAgICAgICAgaWYgKHJvb20udHlwZSA9PT0gJ2xhYicpIHtcclxuICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgwLDAsMCwwLjA4KSc7XHJcbiAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qoc2NyZWVuWCArIDAuNSwgc2NyZWVuWSArIDAuNSwgdGhpcy50aWxlU2l6ZSAtIDEsIHRoaXMudGlsZVNpemUgLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gLS0tIERyYXcgRGVjb3JhdGlvbnMgKHJlbWFpbnMgdGhlIHNhbWUpIC0tLVxyXG4gICAgICB0aGlzLmRyYXdSb29tRGVjb3JhdGlvbnMoY3R4LCByb29tLCByb29tU2NyZWVuWCwgcm9vbVNjcmVlblksIHJvb21TY3JlZW5XLCByb29tU2NyZWVuSCk7XHJcbiAgICB9XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tIGRyYXdMaWZ0RGV0YWlscywgZHJhd1Jvb21EZWNvcmF0aW9ucywgZHJhd0Jvb2tzIHJlbWFpbiB1bmNoYW5nZWQgLS0tXHJcbiAgLy8gLi4uIChrZWVwIHRoZSBleGlzdGluZyBjb2RlIGZvciB0aGVzZSBtZXRob2RzKSAuLi5cclxuICAvKiogTmFyeXN1aiBkZXRhbGUgd2luZHkgKHByenljaXNrLCBrb250dXIpICovXHJcbiAgZHJhd0xpZnREZXRhaWxzKGN0eCwgbGlmdFBvc2l0aW9uLCBvZmZzZXRYLCBvZmZzZXRZKSB7XHJcbiAgICBpZiAoIWxpZnRQb3NpdGlvbikgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHNjcmVlblggPSBNYXRoLmZsb29yKGxpZnRQb3NpdGlvbi50aWxlWCAqIHRoaXMudGlsZVNpemUgKyBvZmZzZXRYKTtcclxuICAgIGNvbnN0IHNjcmVlblkgPSBNYXRoLmZsb29yKGxpZnRQb3NpdGlvbi50aWxlWSAqIHRoaXMudGlsZVNpemUgKyBvZmZzZXRZKTtcclxuXHJcbiAgICAvLyBTcHJhd2TFuiwgY3p5IHdpbmRhIGplc3Qgd2lkb2N6bmEgcHJ6ZWQgcnlzb3dhbmllbSBkZXRhbGlcclxuICAgIGlmIChcclxuICAgICAgc2NyZWVuWCArIHRoaXMudGlsZVNpemUgPCAwIHx8XHJcbiAgICAgIHNjcmVlblggPiBjdHguY2FudmFzLndpZHRoIHx8XHJcbiAgICAgIHNjcmVlblkgKyB0aGlzLnRpbGVTaXplIDwgMCB8fFxyXG4gICAgICBzY3JlZW5ZID4gY3R4LmNhbnZhcy5oZWlnaHRcclxuICAgICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC5zaGFkb3dDb2xvciA9ICd0cmFuc3BhcmVudCc7IC8vIEJyYWsgY2llbmlhIGRsYSBkZXRhbGkgd2luZHlcclxuXHJcbiAgICAvLyBXeXJhxbpuaWVqc3phIHJhbWthIHdpbmR5XHJcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnI2QwZDBkMCc7IC8vIEphc25hIHJhbWthXHJcbiAgICBjdHgubGluZVdpZHRoID0gMTtcclxuICAgIGN0eC5zdHJva2VSZWN0KHNjcmVlblggKyAwLjUsIHNjcmVlblkgKyAwLjUsIHRoaXMudGlsZVNpemUgLSAxLCB0aGlzLnRpbGVTaXplIC0gMSk7XHJcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzQwNDA0MCc7IC8vIENpZW1ueSB3ZXduxJl0cnpueSBjaWXFhFxyXG4gICAgY3R4LnN0cm9rZVJlY3Qoc2NyZWVuWCArIDEuNSwgc2NyZWVuWSArIDEuNSwgdGhpcy50aWxlU2l6ZSAtIDMsIHRoaXMudGlsZVNpemUgLSAzKTtcclxuXHJcbiAgICAvLyBVbGVwc3pvbnkgcHJ6eWNpc2tcclxuICAgIGNvbnN0IGJ1dHRvblJhZGl1cyA9IHRoaXMudGlsZVNpemUgKiAwLjE1OyAvLyBUcm9jaMSZIHdpxJlrc3p5XHJcbiAgICBjb25zdCBidXR0b25YID0gc2NyZWVuWCArIHRoaXMudGlsZVNpemUgKiAwLjg7XHJcbiAgICBjb25zdCBidXR0b25ZID0gc2NyZWVuWSArIHRoaXMudGlsZVNpemUgKiAwLjU7XHJcblxyXG4gICAgLy8gUG9kc3Rhd2EgcHJ6eWNpc2t1IChjaWVtbmllanN6YSlcclxuICAgIGN0eC5maWxsU3R5bGUgPSAnIzQ0NCc7XHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHguYXJjKGJ1dHRvblgsIGJ1dHRvblksIGJ1dHRvblJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICAvLyBTYW0gcHJ6eWNpc2sgKGN6ZXJ3b255KVxyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICcjZmY0NDQ0JztcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5hcmMoYnV0dG9uWCwgYnV0dG9uWSwgYnV0dG9uUmFkaXVzICogMC44LCAwLCBNYXRoLlBJICogMik7XHJcbiAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgIC8vIE9kYmxhc2sgbmEgcHJ6eWNpc2t1XHJcbiAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSc7XHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHguYXJjKFxyXG4gICAgICBidXR0b25YIC0gYnV0dG9uUmFkaXVzICogMC4yLFxyXG4gICAgICBidXR0b25ZIC0gYnV0dG9uUmFkaXVzICogMC4yLFxyXG4gICAgICBidXR0b25SYWRpdXMgKiAwLjMsXHJcbiAgICAgIDAsXHJcbiAgICAgIE1hdGguUEkgKiAyXHJcbiAgICApO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqIE5hcnlzdWogZGVrb3JhY2plIGRsYSBrb25rcmV0bmVnbyBwb2tvanUgKi9cclxuICBkcmF3Um9vbURlY29yYXRpb25zKGN0eCwgcm9vbSwgeCwgeSwgdywgaCkge1xyXG4gICAgLy8geCwgeSB0byBsZXd5IGfDs3JueSByw7NnIHBva29qdSBuYSBla3JhbmllXHJcbiAgICAvLyB3LCBoIHRvIHN6ZXJva2/Fm8SHIGkgd3lzb2tvxZvEhyBwb2tvanUgbmEgZWtyYW5pZVxyXG4gICAgY29uc3QgdHMgPSB0aGlzLnRpbGVTaXplO1xyXG4gICAgY29uc3QgbWFyZ2luID0gdHMgKiAwLjI7IC8vIE1uaWVqc3p5IG1hcmdpbmVzXHJcbiAgICBjb25zdCBvYmpNYXJnaW4gPSB0cyAqIDAuMTsgLy8gT2RzdMSZcCBtacSZZHp5IG9iaWVrdGFtaVxyXG4gICAgY3R4LmxpbmVXaWR0aCA9IDE7XHJcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzQ0NCc7IC8vIENpZW1uaWVqc3phIGRvbXnFm2xuYSBvYnfDs2RrYVxyXG5cclxuICAgIC8vID09PSBGVU5LQ0pFIFBPTU9DTklDWkUgRE8gUllTT1dBTklBID09PVxyXG4gICAgY29uc3QgZHJhd1JlY3QgPSAocngsIHJ5LCBydywgcmgsIGNvbG9yLCBvdXRsaW5lID0gdHJ1ZSkgPT4ge1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICAgIGNvbnN0IHNjcmVlblggPSBNYXRoLmZsb29yKHggKyByeCk7XHJcbiAgICAgIGNvbnN0IHNjcmVlblkgPSBNYXRoLmZsb29yKHkgKyByeSk7XHJcbiAgICAgIGNvbnN0IHNjcmVlblcgPSBNYXRoLmZsb29yKHJ3KTtcclxuICAgICAgY29uc3Qgc2NyZWVuSCA9IE1hdGguZmxvb3IocmgpO1xyXG4gICAgICBjdHguZmlsbFJlY3Qoc2NyZWVuWCwgc2NyZWVuWSwgc2NyZWVuVywgc2NyZWVuSCk7XHJcbiAgICAgIGlmIChvdXRsaW5lKSB7XHJcbiAgICAgICAgY3R4LnN0cm9rZVJlY3Qoc2NyZWVuWCArIDAuNSwgc2NyZWVuWSArIDAuNSwgc2NyZWVuVyAtIDEsIHNjcmVlbkggLSAxKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IGRyYXdDaXJjbGUgPSAoY3gsIGN5LCByYWRpdXMsIGNvbG9yLCBvdXRsaW5lID0gdHJ1ZSkgPT4ge1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICAgIGNvbnN0IHNjcmVlblggPSBNYXRoLmZsb29yKHggKyBjeCk7XHJcbiAgICAgIGNvbnN0IHNjcmVlblkgPSBNYXRoLmZsb29yKHkgKyBjeSk7XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LmFyYyhzY3JlZW5YLCBzY3JlZW5ZLCBNYXRoLmZsb29yKHJhZGl1cyksIDAsIE1hdGguUEkgKiAyKTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgaWYgKG91dGxpbmUpIHtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzd2l0Y2ggKHJvb20udHlwZSkge1xyXG4gICAgICBjYXNlICdjbGFzc3Jvb20nOiAvLyBTYWxhIGxla2N5am5hXHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM1ZDQwMzcnOyAvLyBCcsSFem93YSBvYnfDs2RrYSBkbGEgbWVibGlcclxuICAgICAgICBjb25zdCBkZXNrVyA9IHRzICogMC42LFxyXG4gICAgICAgICAgZGVza0ggPSB0cyAqIDAuNCxcclxuICAgICAgICAgIGNoYWlySCA9IHRzICogMC4yNTtcclxuICAgICAgICBjb25zdCBzcGFjZVggPSB0cyAqIDEuMCxcclxuICAgICAgICAgIHNwYWNlWSA9IHRzICogMC45O1xyXG4gICAgICAgIC8vIFRhYmxpY2EgbmEgZ8Ozcm5laiDFm2NpYW5pZVxyXG4gICAgICAgIGRyYXdSZWN0KHcgKiAwLjI1LCBtYXJnaW4sIHcgKiAwLjUsIHRzICogMC4yLCAnIzMzMycsIHRydWUpO1xyXG4gICAgICAgIGRyYXdSZWN0KHcgKiAwLjI1ICsgMiwgbWFyZ2luICsgMiwgdyAqIDAuNSAtIDQsIHRzICogMC4yIC0gNCwgJyM0Q0FGNTAnLCBmYWxzZSk7IC8vIFppZWxvbmEgcG93aWVyemNobmlhXHJcblxyXG4gICAgICAgIC8vIMWBYXdraSBpIGtyemVzxYJhIHcgcnrEmWRhY2hcclxuICAgICAgICBmb3IgKGxldCByID0gMDsgOyByKyspIHtcclxuICAgICAgICAgIGNvbnN0IHJvd1kgPSBtYXJnaW4gKyB0cyAqIDAuNSArIHIgKiBzcGFjZVk7XHJcbiAgICAgICAgICBpZiAocm93WSArIGRlc2tIICsgY2hhaXJIID4gaCAtIG1hcmdpbikgYnJlYWs7IC8vIFNwcmF3ZHplbmllIGN6eSB6bWllxZtjaSBzacSZIHJ6xIVkXHJcbiAgICAgICAgICBmb3IgKGxldCBjID0gMDsgOyBjKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY29sWCA9IG1hcmdpbiArIGMgKiBzcGFjZVg7XHJcbiAgICAgICAgICAgIGlmIChjb2xYICsgZGVza1cgPiB3IC0gbWFyZ2luKSBicmVhazsgLy8gU3ByYXdkemVuaWUgY3p5IHptaWXFm2NpIHNpxJkga29sdW1uYVxyXG4gICAgICAgICAgICAvLyDFgWF3a2FcclxuICAgICAgICAgICAgZHJhd1JlY3QoY29sWCwgcm93WSwgZGVza1csIGRlc2tILCAnIzhCNDUxMycpO1xyXG4gICAgICAgICAgICAvLyBLcnplc8WCbyBwb25pxbxlalxyXG4gICAgICAgICAgICBkcmF3UmVjdChjb2xYICsgZGVza1cgKiAwLjEsIHJvd1kgKyBkZXNrSCArIG9iak1hcmdpbiwgZGVza1cgKiAwLjgsIGNoYWlySCwgJyM2YTRhM2EnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdvZmZpY2UnOiAvLyBCaXVyb1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjNWQ0MDM3JztcclxuICAgICAgICAvLyBCaXVya29cclxuICAgICAgICBjb25zdCB0YWJsZVcgPSBNYXRoLm1pbih3ICogMC42LCB0cyAqIDIuNSk7XHJcbiAgICAgICAgY29uc3QgdGFibGVIID0gTWF0aC5taW4oaCAqIDAuNCwgdHMgKiAxLjIpO1xyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiwgbWFyZ2luLCB0YWJsZVcsIHRhYmxlSCwgJyNhMDUyMmQnKTtcclxuICAgICAgICAvLyBLcnplc8WCbyBiaXVyb3dlXHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luICsgdGFibGVXICsgb2JqTWFyZ2luLCBtYXJnaW4gKyB0YWJsZUggKiAwLjEsIHRzICogMC42LCB0cyAqIDAuNiwgJyM0NDQnKTtcclxuICAgICAgICAvLyBTemFmYSBuYSBha3RhXHJcbiAgICAgICAgY29uc3QgY2FiaW5ldFcgPSB0cyAqIDAuODtcclxuICAgICAgICBkcmF3UmVjdCh3IC0gbWFyZ2luIC0gY2FiaW5ldFcsIG1hcmdpbiwgY2FiaW5ldFcsIGggLSBtYXJnaW4gKiAyLCAnIzZCNEY0MScpO1xyXG4gICAgICAgIC8vIEtvbXB1dGVyIG5hIGJpdXJrdSAoc3ltYm9saWN6bmllKVxyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiArIG9iak1hcmdpbiwgbWFyZ2luICsgb2JqTWFyZ2luLCB0cyAqIDAuNSwgdHMgKiAwLjQsICcjMzMzJyk7IC8vIE1vbml0b3JcclxuICAgICAgICBkcmF3UmVjdChcclxuICAgICAgICAgIG1hcmdpbiArIG9iak1hcmdpbiArIHRzICogMC4xLFxyXG4gICAgICAgICAgbWFyZ2luICsgb2JqTWFyZ2luICsgdHMgKiAwLjQgKyAyLFxyXG4gICAgICAgICAgdHMgKiAwLjMsXHJcbiAgICAgICAgICB0cyAqIDAuMSxcclxuICAgICAgICAgICcjNTU1J1xyXG4gICAgICAgICk7IC8vIEtsYXdpYXR1cmFcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2xpYnJhcnknOiAvLyBCaWJsaW90ZWthXHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM0MDJhMTAnOyAvLyBDaWVtbmllanN6YSBvYnfDs2RrYSBkbGEgcmVnYcWCw7N3XHJcbiAgICAgICAgY29uc3Qgc2hlbGZXID0gdHMgKiAwLjY7XHJcbiAgICAgICAgY29uc3Qgc2hlbGZTcGFjaW5nID0gdHMgKiAxLjU7XHJcbiAgICAgICAgLy8gUmVnYcWCeSB3IHBpb25pZVxyXG4gICAgICAgIGZvciAobGV0IHN4ID0gbWFyZ2luOyBzeCA8IHcgLSBtYXJnaW4gLSBzaGVsZlc7IHN4ICs9IHNoZWxmU3BhY2luZykge1xyXG4gICAgICAgICAgZHJhd1JlY3Qoc3gsIG1hcmdpbiwgc2hlbGZXLCBoIC0gbWFyZ2luICogMiwgJyM2NTQzMjEnKTtcclxuICAgICAgICAgIC8vIExpbmllIHDDs8WCZWtcclxuICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuMyknO1xyXG4gICAgICAgICAgZm9yIChsZXQgc2hlbGZZID0gbWFyZ2luICsgdHMgKiAwLjU7IHNoZWxmWSA8IGggLSBtYXJnaW47IHNoZWxmWSArPSB0cyAqIDAuNykge1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIHN4LCB5ICsgc2hlbGZZKTtcclxuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgc3ggKyBzaGVsZlcsIHkgKyBzaGVsZlkpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzQwMmExMCc7IC8vIFByenl3csOzxIcgZ8WCw7N3bnkga29sb3Igb2J3w7Nka2lcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU3TDs8WCIGRvIGN6eXRhbmlhIChqZcWbbGkgamVzdCBtaWVqc2NlKVxyXG4gICAgICAgIGlmICh3ID4gc2hlbGZTcGFjaW5nICogMS41KSB7XHJcbiAgICAgICAgICBjb25zdCB0YWJsZUxpYlggPSBzaGVsZlcgKyBtYXJnaW4gKyAodyAtIHNoZWxmVyAqIDIgLSBtYXJnaW4gKiAyIC0gdHMgKiAxLjUpIC8gMjsgLy8gV3nFm3JvZGt1aiBzdMOzxYIgbWnEmWR6eSByZWdhxYJhbWlcclxuICAgICAgICAgIGlmICh0YWJsZUxpYlggPiBzaGVsZlcgKyBtYXJnaW4pIHtcclxuICAgICAgICAgICAgLy8gVXBld25paiBzacSZLCDFvGUgamVzdCBtaWVqc2NlXHJcbiAgICAgICAgICAgIGRyYXdSZWN0KHRhYmxlTGliWCwgaCAqIDAuMywgdHMgKiAxLjUsIGggKiAwLjQsICcjOTY2RjMzJyk7XHJcbiAgICAgICAgICAgIC8vIEtyemVzxYJhIHByenkgc3RvbGVcclxuICAgICAgICAgICAgZHJhd1JlY3QodGFibGVMaWJYICsgdHMgKiAwLjIsIGggKiAwLjMgLSB0cyAqIDAuMywgdHMgKiAwLjUsIHRzICogMC4yNSwgJyM2YTRhM2EnKTtcclxuICAgICAgICAgICAgZHJhd1JlY3QoXHJcbiAgICAgICAgICAgICAgdGFibGVMaWJYICsgdHMgKiAwLjIsXHJcbiAgICAgICAgICAgICAgaCAqIDAuMyArIGggKiAwLjQgKyBvYmpNYXJnaW4sXHJcbiAgICAgICAgICAgICAgdHMgKiAwLjUsXHJcbiAgICAgICAgICAgICAgdHMgKiAwLjI1LFxyXG4gICAgICAgICAgICAgICcjNmE0YTNhJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2d5bSc6IC8vIFNpxYJvd25pYVxyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjNTU1JztcclxuICAgICAgICAvLyBNYXR5IGRvIMSHd2ljemXFhFxyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiwgbWFyZ2luLCB3ICogMC40LCBoICogMC4zLCAnIzc3ODg5OScpO1xyXG4gICAgICAgIGRyYXdSZWN0KHcgLSBtYXJnaW4gLSB3ICogMC4zLCBoIC0gbWFyZ2luIC0gaCAqIDAuNCwgdyAqIDAuMywgaCAqIDAuNCwgJyM3Nzg4OTknKTtcclxuICAgICAgICAvLyBCaWXFvG5pYSAoc3ltYm9saWN6bmllKVxyXG4gICAgICAgIGRyYXdSZWN0KHcgKiAwLjYsIG1hcmdpbiwgdHMgKiAwLjgsIHRzICogMS44LCAnIzMzMycpO1xyXG4gICAgICAgIGRyYXdSZWN0KHcgKiAwLjYgKyB0cyAqIDAuMSwgbWFyZ2luICsgdHMgKiAwLjEsIHRzICogMC42LCB0cyAqIDEuNiwgJyM1NTUnLCBmYWxzZSk7XHJcbiAgICAgICAgLy8gxYFhd2VjemthXHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luLCBoICogMC41LCB0cyAqIDEuNSwgdHMgKiAwLjQsICcjOEI0NTEzJyk7XHJcbiAgICAgICAgLy8gU3RvamFrIHogY2nEmcW8YXJrYW1pXHJcbiAgICAgICAgZHJhd1JlY3QodyAtIG1hcmdpbiAtIHRzICogMC41LCBtYXJnaW4sIHRzICogMC41LCB0cyAqIDEuNSwgJyM0NDQnKTtcclxuICAgICAgICBkcmF3Q2lyY2xlKHcgLSBtYXJnaW4gLSB0cyAqIDAuMjUsIG1hcmdpbiArIHRzICogMC4zLCB0cyAqIDAuMTUsICcjNjY2Jyk7XHJcbiAgICAgICAgZHJhd0NpcmNsZSh3IC0gbWFyZ2luIC0gdHMgKiAwLjI1LCBtYXJnaW4gKyB0cyAqIDAuNywgdHMgKiAwLjE1LCAnIzY2NicpO1xyXG4gICAgICAgIGRyYXdDaXJjbGUodyAtIG1hcmdpbiAtIHRzICogMC4yNSwgbWFyZ2luICsgdHMgKiAxLjEsIHRzICogMC4xNSwgJyM2NjYnKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2xhYic6IC8vIExhYm9yYXRvcml1bVxyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjNjY4JztcclxuICAgICAgICAvLyBTdG/FgnkgbGFib3JhdG9yeWpuZSAoZMWCdWdpZSlcclxuICAgICAgICBjb25zdCBsYWJUYWJsZUggPSB0cyAqIDAuODtcclxuICAgICAgICBkcmF3UmVjdChtYXJnaW4sIG1hcmdpbiwgdyAtIG1hcmdpbiAqIDIsIGxhYlRhYmxlSCwgJyNkMGQwZDgnKTsgLy8gSmFzbm9zemFyeSBzdMOzxYJcclxuICAgICAgICBkcmF3UmVjdChtYXJnaW4sIGggLSBtYXJnaW4gLSBsYWJUYWJsZUgsIHcgLSBtYXJnaW4gKiAyLCBsYWJUYWJsZUgsICcjZDBkMGQ4Jyk7XHJcbiAgICAgICAgLy8gU3ByesSZdCBuYSBzdG/FgmFjaFxyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiArIHRzICogMC4yLCBtYXJnaW4gKyB0cyAqIDAuMSwgdHMgKiAwLjUsIHRzICogMC41LCAnIzRhOTBlMicpOyAvLyBDb8WbIG5pZWJpZXNraWVnb1xyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiArIHRzICogMS4wLCBtYXJnaW4gKyB0cyAqIDAuMSwgdHMgKiAwLjMsIHRzICogMC42LCAnI2Y1YTYyMycpOyAvLyBDb8WbIHBvbWFyYcWEY3pvd2Vnb1xyXG4gICAgICAgIGRyYXdDaXJjbGUodyAtIG1hcmdpbiAqIDIgLSB0cyAqIDAuNCwgbWFyZ2luICsgbGFiVGFibGVIICogMC41LCB0cyAqIDAuMiwgJyNlMDQwNDAnLCB0cnVlKTsgLy8gQ2/FmyBjemVyd29uZWdvIG9rcsSFZ8WCZWdvXHJcbiAgICAgICAgLy8gU3phZmthIHogb2RjenlubmlrYW1pXHJcbiAgICAgICAgZHJhd1JlY3QoXHJcbiAgICAgICAgICB3ICogMC40LFxyXG4gICAgICAgICAgbWFyZ2luICsgbGFiVGFibGVIICsgb2JqTWFyZ2luLFxyXG4gICAgICAgICAgdHMsXHJcbiAgICAgICAgICBoIC0gbWFyZ2luICogMiAtIGxhYlRhYmxlSCAqIDIgLSBvYmpNYXJnaW4gKiAyLFxyXG4gICAgICAgICAgJyNhMGEwYjAnXHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ3N0b3JhZ2UnOiAvLyBNYWdhenluXHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM0ZDQwMzAnO1xyXG4gICAgICAgIC8vIFDDs8WCa2kvcmVnYcWCeSBtZXRhbG93ZVxyXG4gICAgICAgIGNvbnN0IG1ldGFsU2hlbGZXID0gdyAtIG1hcmdpbiAqIDI7XHJcbiAgICAgICAgY29uc3QgbWV0YWxTaGVsZkggPSB0cyAqIDAuNTtcclxuICAgICAgICBkcmF3UmVjdChtYXJnaW4sIG1hcmdpbiwgbWV0YWxTaGVsZlcsIG1ldGFsU2hlbGZILCAnIzllOWU5ZScpO1xyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiwgaCAtIG1hcmdpbiAtIG1ldGFsU2hlbGZILCBtZXRhbFNoZWxmVywgbWV0YWxTaGVsZkgsICcjOWU5ZTllJyk7XHJcbiAgICAgICAgLy8gUHVkxYJhXHJcbiAgICAgICAgY29uc3QgYm94U2l6ZSA9IHRzICogMC42O1xyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiArIHRzICogMC4yLCBtYXJnaW4gKyBtZXRhbFNoZWxmSCArIG9iak1hcmdpbiwgYm94U2l6ZSwgYm94U2l6ZSwgJyNiZjhmNmYnKTtcclxuICAgICAgICBkcmF3UmVjdChtYXJnaW4gKyB0cyAqIDEuMCwgbWFyZ2luICsgbWV0YWxTaGVsZkggKyBvYmpNYXJnaW4sIGJveFNpemUsIGJveFNpemUsICcjYmY4ZjZmJyk7XHJcbiAgICAgICAgZHJhd1JlY3QoXHJcbiAgICAgICAgICB3IC0gbWFyZ2luIC0gYm94U2l6ZSAqIDEuNSxcclxuICAgICAgICAgIG1hcmdpbiArIG1ldGFsU2hlbGZIICsgb2JqTWFyZ2luICogMyxcclxuICAgICAgICAgIGJveFNpemUgKiAxLjIsXHJcbiAgICAgICAgICBib3hTaXplICogMC44LFxyXG4gICAgICAgICAgJyNiZjhmNmYnXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBTdGFyZSBiaXVya28gdyByb2d1XHJcbiAgICAgICAgZHJhd1JlY3QodyAtIG1hcmdpbiAtIHRzLCBoIC0gbWFyZ2luIC0gdHMsIHRzICogMC44LCB0cyAqIDAuOCwgJyM2YTRhM2EnKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ3V0aWxpdHknOiAvLyBQb21pZXN6Y3plbmllIGdvc3BvZGFyY3plXHJcbiAgICAgIGRlZmF1bHQ6IC8vIERvbXnFm2xuZSwgamXFm2xpIHR5cCBuaWV6bmFueVxyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjNWQ0MDM3JztcclxuICAgICAgICAvLyBTa3J6eW5raS91cnrEhWR6ZW5pYVxyXG4gICAgICAgIGRyYXdSZWN0KHcgKiAwLjEsIGggKiAwLjE1LCB3ICogMC4zLCBoICogMC4yNSwgJyNBMDUyMkQnKTtcclxuICAgICAgICBkcmF3UmVjdCh3ICogMC42LCBoICogMC41LCB3ICogMC4zLCBoICogMC40LCAnI0EwNTIyRCcpO1xyXG4gICAgICAgIC8vIFN6YWZhIG1ldGFsb3dhXHJcbiAgICAgICAgZHJhd1JlY3QodyAtIG1hcmdpbiAtIHRzICogMC41LCBtYXJnaW4sIHRzICogMC41LCBoIC0gbWFyZ2luICogMiwgJyM3NzcnKTtcclxuICAgICAgICAvLyBSdXJ5L2thYmxlIChzeW1ib2xpY3puaWUpXHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM1NTUnO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHgubW92ZVRvKHggKyBtYXJnaW4sIHkgKyBoICogMC44KTtcclxuICAgICAgICBjdHgubGluZVRvKHggKyB3IC0gbWFyZ2luLCB5ICsgaCAqIDAuOCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHgubW92ZVRvKHggKyB3ICogMC43LCB5ICsgbWFyZ2luKTtcclxuICAgICAgICBjdHgubGluZVRvKHggKyB3ICogMC43LCB5ICsgaCAtIG1hcmdpbik7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAxOyAvLyBQcnp5d3LDs8SHIGdydWJvxZvEhyBsaW5paVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIE5hcnlzdWoga3NpxIXFvGtpICovXHJcbiAgZHJhd0Jvb2tzKGN0eCwgYm9va3MsIG9mZnNldFgsIG9mZnNldFksIGJvb2tJbWFnZSkge1xyXG4gICAgaWYgKCFib29rcyB8fCBib29rcy5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgIGNvbnN0IGRlZmF1bHRCb29rU2l6ZSA9IHRoaXMudGlsZVNpemUgKiAwLjY7XHJcblxyXG4gICAgZm9yIChjb25zdCBib29rIG9mIGJvb2tzKSB7XHJcbiAgICAgIGNvbnN0IGlzQ29sbGVjdGVkID0gYm9vay5pc0NvbGxlY3RlZCB8fCBib29rLmNvbGxlY3RlZDsgLy8gSGFuZGxlIGJvdGggcG90ZW50aWFsIHByb3BlcnRpZXNcclxuICAgICAgaWYgKCFpc0NvbGxlY3RlZCkge1xyXG4gICAgICAgIGNvbnN0IGJvb2tTaXplID0gYm9vay5zaXplIHx8IGRlZmF1bHRCb29rU2l6ZTtcclxuICAgICAgICAvLyBSb3VuZCBkcmF3aW5nIGNvb3JkaW5hdGVzXHJcbiAgICAgICAgY29uc3Qgc2NyZWVuWCA9IE1hdGguZmxvb3IoYm9vay54ICsgb2Zmc2V0WCAtIGJvb2tTaXplIC8gMik7XHJcbiAgICAgICAgY29uc3Qgc2NyZWVuWSA9IE1hdGguZmxvb3IoYm9vay55ICsgb2Zmc2V0WSAtIGJvb2tTaXplIC8gMik7XHJcblxyXG4gICAgICAgIC8vIEJhc2ljIHZpc2liaWxpdHkgY2hlY2tcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBzY3JlZW5YICsgYm9va1NpemUgPiAwICYmXHJcbiAgICAgICAgICBzY3JlZW5YIDwgY3R4LmNhbnZhcy53aWR0aCAmJlxyXG4gICAgICAgICAgc2NyZWVuWSArIGJvb2tTaXplID4gMCAmJlxyXG4gICAgICAgICAgc2NyZWVuWSA8IGN0eC5jYW52YXMuaGVpZ2h0XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAvLyBQcmVmZXIgYm9vaydzIG93biBkcmF3IG1ldGhvZCBpZiBhdmFpbGFibGVcclxuICAgICAgICAgIGlmICh0eXBlb2YgYm9vay5kcmF3ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIC8vIFBhc3Mgcm91bmRlZCBjb29yZGluYXRlcyBhbmQgc2l6ZVxyXG4gICAgICAgICAgICBib29rLmRyYXcoY3R4LCBvZmZzZXRYLCBvZmZzZXRZLCBib29rSW1hZ2UpOyAvLyBib29rLmRyYXcgc2hvdWxkIGhhbmRsZSBpdHMgb3duIHJvdW5kaW5nIGlmIG5lZWRlZCBpbnRlcm5hbGx5XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBGYWxsYmFjayBkcmF3aW5nXHJcbiAgICAgICAgICAgIGlmIChib29rSW1hZ2UpIHtcclxuICAgICAgICAgICAgICAvLyBEcmF3IHdpdGggcm91bmRlZCBjb29yZGluYXRlc1xyXG4gICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoYm9va0ltYWdlLCBzY3JlZW5YLCBzY3JlZW5ZLCBib29rU2l6ZSwgYm9va1NpemUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzhkNmU2Myc7IC8vIEJyb3duIGJvb2sgY29sb3JcclxuICAgICAgICAgICAgICBjdHguZmlsbFJlY3Qoc2NyZWVuWCwgc2NyZWVuWSwgYm9va1NpemUsIGJvb2tTaXplKTtcclxuICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzVkNDAzNyc7IC8vIERhcmtlciBvdXRsaW5lXHJcbiAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qoc2NyZWVuWCArIDAuNSwgc2NyZWVuWSArIDAuNSwgYm9va1NpemUgLSAxLCBib29rU2l6ZSAtIDEpOyAvLyBEcmF3IGJvcmRlciBtb3JlIGNsZWFybHlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufSAvLyBFbmQgY2xhc3MgTWFwUmVuZGVyZXJcclxuIiwiLy8gc3JjL21hcC9tYXBHZW5lcmF0b3IuanNcclxuXHJcbmltcG9ydCB7XHJcbiAgVElMRV9XQUxMLFxyXG4gIFRJTEVfQ09SUklET1IsXHJcbiAgVElMRV9ST09NX0ZMT09SLFxyXG4gIFRJTEVfTElGVCxcclxuICBHWU1fQ0hBTkNFX09OX0ZJUlNUX0ZMT09SLFxyXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IHJhbmRvbUludCwgcGVyZm9ybUJGUyB9IGZyb20gJy4uL3V0aWxzL21hcC5qcyc7IC8vIEFzc3VtaW5nIHBlcmZvcm1CRlMgaXMgaW4gbWFwLmpzXHJcblxyXG4vLyAtLS0gTW9kdWxlLWxldmVsIHN0YXRlIGZvciBsaWZ0IGNvbnNpc3RlbmN5IC0tLVxyXG5sZXQgY29uc2lzdGVudExpZnRDb29yZHMgPSBudWxsO1xyXG5cclxuLy8gLS0tIEdlbmVyYXRpb24gUGFyYW1ldGVycyAoRGVmYXVsdHMpIC0tLVxyXG5jb25zdCBERUZBVUxUX0dFTl9QQVJBTVMgPSB7XHJcbiAgbWluUm9vbVNpemU6IDUsXHJcbiAgbWF4Um9vbVNpemU6IDEwLFxyXG4gIGNvcnJpZG9yVGhpY2tuZXNzOiAxLCAvLyBDdXJyZW50bHkgaGFyZGNvZGVkIHRvIDEgaW4gY2FydmluZyBmdW5jc1xyXG4gIG51bVJvb21zOiAxMixcclxuICBtYXhSb29tQXR0ZW1wdHM6IDIwMCxcclxuICByb29tVHlwZVdlaWdodHM6IHtcclxuICAgIGNsYXNzcm9vbTogNTAsXHJcbiAgICBvZmZpY2U6IDI1LFxyXG4gICAgbGlicmFyeTogMTUsXHJcbiAgICBneW06IDAsIC8vIEJhc2Ugd2VpZ2h0LCBhZGp1c3RlZCBiYXNlZCBvbiBmbG9vclxyXG4gICAgdXRpbGl0eTogMTAsXHJcbiAgfSxcclxufTtcclxuXHJcbi8vIC0tLSBDb3JlIEdlbmVyYXRpb24gRnVuY3Rpb24gLS0tXHJcbi8vIEluIGdlbmVyYXRlTGV2ZWxEYXRhLCBtYWtlIHN1cmUgdG8gcGFzcyBgcm9vbXNgIHRvIGBfcGxhY2VMaWZ0YFxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVMZXZlbERhdGEoY29uZmlnKSB7XHJcbiAgY29uc3QgeyBjb2xzLCByb3dzLCBmbG9vck51bWJlciwgbWluRmxvb3IsIHRpbGVTaXplLCBnZW5lcmF0aW9uUGFyYW1zOiB1c2VyUGFyYW1zIH0gPSBjb25maWc7XHJcbiAgY29uc3QgZ2VuUGFyYW1zID0geyAuLi5ERUZBVUxUX0dFTl9QQVJBTVMsIC4uLnVzZXJQYXJhbXMgfTtcclxuXHJcbiAgZ2VuUGFyYW1zLnJvb21UeXBlV2VpZ2h0cy5neW0gPSBmbG9vck51bWJlciA9PT0gbWluRmxvb3IgPyBHWU1fQ0hBTkNFX09OX0ZJUlNUX0ZMT09SICogMTAwIDogMDtcclxuXHJcbiAgaWYgKGZsb29yTnVtYmVyID09PSBtaW5GbG9vcikge1xyXG4gICAgY29uc2lzdGVudExpZnRDb29yZHMgPSBudWxsO1xyXG4gICAgY29uc29sZS5sb2coYFtNYXBHZW4gRmxvb3IgJHtmbG9vck51bWJlcn1dIFJlc2V0IGNvbnNpc3RlbnQgbGlmdCBjb29yZHMgZm9yIHRoZSBmaXJzdCBmbG9vci5gKTtcclxuICB9XHJcblxyXG4gIGNvbnNvbGUubG9nKGBbTWFwR2VuIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBTdGFydGluZyBtYXAgZ2VuZXJhdGlvbiAoJHtjb2xzfXgke3Jvd3N9KS4uLmApO1xyXG4gIGNvbnN0IG1hcCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IHJvd3MgfSwgKCkgPT4gQXJyYXkoY29scykuZmlsbChUSUxFX1dBTEwpKTtcclxuICBjb25zdCByb29tcyA9IFtdOyAvLyBUaGlzIGlzIHRoZSBgcm9vbXNMaXN0YFxyXG4gIGxldCBsaWZ0UG9zaXRpb24gPSBudWxsO1xyXG5cclxuICBfcGxhY2VSb29tcyhtYXAsIHJvb21zLCBjb2xzLCByb3dzLCBnZW5QYXJhbXMpOyAvLyByb29tcyBpcyBwb3B1bGF0ZWQgaGVyZVxyXG5cclxuICBpZiAocm9vbXMubGVuZ3RoIDwgMiAmJiBmbG9vck51bWJlciAhPT0gbWluRmxvb3IpIHtcclxuICAgIGNvbnNvbGUud2FybihcclxuICAgICAgYFtNYXBHZW4gRmxvb3IgJHtmbG9vck51bWJlcn1dIFBsYWNlZCBvbmx5ICR7cm9vbXMubGVuZ3RofSByb29tcy4gRXhwZWN0IGxpbWl0ZWQgY29ubmVjdGl2aXR5LmBcclxuICAgICk7XHJcbiAgfSBlbHNlIGlmIChyb29tcy5sZW5ndGggPj0gMikge1xyXG4gICAgX2Nvbm5lY3RSb29tc0JldHRlcihtYXAsIHJvb21zLCBjb2xzLCByb3dzKTtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBwbGFjZWRMaWZ0RGF0YSA9IF9wbGFjZUxpZnQoXHJcbiAgICAgIG1hcCxcclxuICAgICAgY29scyxcclxuICAgICAgcm93cyxcclxuICAgICAgZmxvb3JOdW1iZXIsXHJcbiAgICAgIG1pbkZsb29yLFxyXG4gICAgICB0aWxlU2l6ZSxcclxuICAgICAgY29uc2lzdGVudExpZnRDb29yZHMsXHJcbiAgICAgIHJvb21zIC8vIFBBU1MgVEhFIEdFTkVSQVRFRCBST09NUyBMSVNUIEhFUkVcclxuICAgICk7XHJcbiAgICBsaWZ0UG9zaXRpb24gPSBwbGFjZWRMaWZ0RGF0YS5wb3NpdGlvbjtcclxuICAgIGlmIChwbGFjZWRMaWZ0RGF0YS5jb29yZHMpIHtcclxuICAgICAgY29uc2lzdGVudExpZnRDb29yZHMgPSBwbGFjZWRMaWZ0RGF0YS5jb29yZHM7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYFtNYXBHZW4gRmxvb3IgJHtmbG9vck51bWJlcn1dIENSSVRJQ0FMOiBMaWZ0IHBsYWNlbWVudCBmYWlsZWQ6YCwgZXJyb3IpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBMaWZ0IHBsYWNlbWVudCBmYWlsZWQgb24gZmxvb3IgJHtmbG9vck51bWJlcn06ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICB9XHJcblxyXG4gIF9lbnN1cmVNYXBCb3JkZXJzKG1hcCwgY29scywgcm93cyk7XHJcblxyXG4gIGlmIChsaWZ0UG9zaXRpb24gJiYgIV9pc0xpZnRSZWFjaGFibGUobWFwLCBsaWZ0UG9zaXRpb24sIGNvbHMsIHJvd3MpKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgIGBbTWFwVmFsaWRhdGlvbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gTGlmdCBhdCB0aWxlKCR7bGlmdFBvc2l0aW9uLnRpbGVYfSwgJHtsaWZ0UG9zaXRpb24udGlsZVl9KSBpbml0aWFsbHkgdW5yZWFjaGFibGUuIEF0dGVtcHRpbmcgZmluYWwgZm9yY2UgY29ubmVjdGlvbi5gXHJcbiAgICApO1xyXG4gICAgY29uc3QgY29ubmVjdGVkID0gX2ZvcmNlQ29ubmVjdGlvblRvUG9pbnQoXHJcbiAgICAgIG1hcCxcclxuICAgICAgbGlmdFBvc2l0aW9uLnRpbGVYLFxyXG4gICAgICBsaWZ0UG9zaXRpb24udGlsZVksXHJcbiAgICAgIGNvbHMsXHJcbiAgICAgIHJvd3NcclxuICAgICk7XHJcbiAgICBpZiAoIWNvbm5lY3RlZCB8fCAhX2lzTGlmdFJlYWNoYWJsZShtYXAsIGxpZnRQb3NpdGlvbiwgY29scywgcm93cykpIHtcclxuICAgICAgY29uc3QgZXJyb3JNc2cgPSBgQ1JJVElDQUw6IFBsYWNlZCBsaWZ0IGF0IHRpbGUoJHtsaWZ0UG9zaXRpb24udGlsZVh9LCAke2xpZnRQb3NpdGlvbi50aWxlWX0pIGlzIFVOUkVBQ0hBQkxFIGV2ZW4gYWZ0ZXIgZm9yY2UgY29ubmVjdCEgR2VuZXJhdGlvbiBmYWlsZWQuYDtcclxuICAgICAgY29uc29sZS5lcnJvcihgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gJHtlcnJvck1zZ31gKTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaWZ0IGlzIHVucmVhY2hhYmxlIG9uIGZsb29yICR7Zmxvb3JOdW1iZXJ9LiBDYW5ub3QgcHJvY2VlZC5gKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGBbTWFwVmFsaWRhdGlvbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gTGlmdCBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwgYWZ0ZXIgc2Vjb25kIGF0dGVtcHQuYFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAobGlmdFBvc2l0aW9uKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgYFtNYXBWYWxpZGF0aW9uIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBMaWZ0IGF0IHRpbGUoJHtsaWZ0UG9zaXRpb24udGlsZVh9LCAke2xpZnRQb3NpdGlvbi50aWxlWX0pIGlzIHJlYWNoYWJsZS5gXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE1hcCBnZW5lcmF0ZWQgd2l0aG91dCBhIHZhbGlkIGxpZnQgcG9zaXRpb24gb24gZmxvb3IgJHtmbG9vck51bWJlcn0uYCk7XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLmxvZyhgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gTWFwIGdlbmVyYXRpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseS5gKTtcclxuICByZXR1cm4geyBtYXAsIHJvb21zLCBsaWZ0UG9zaXRpb24gfTtcclxufVxyXG5cclxuLy8gLS0tIEhlbHBlcjogUGxhY2UgUm9vbXMgLS0tXHJcbmZ1bmN0aW9uIF9wbGFjZVJvb21zKG1hcCwgcm9vbXMsIGNvbHMsIHJvd3MsIGdlblBhcmFtcykge1xyXG4gIGNvbnN0IHsgbWluUm9vbVNpemUsIG1heFJvb21TaXplLCBudW1Sb29tcywgbWF4Um9vbUF0dGVtcHRzLCByb29tVHlwZVdlaWdodHMgfSA9IGdlblBhcmFtcztcclxuICBsZXQgcm9vbUF0dGVtcHRzID0gMDtcclxuXHJcbiAgY29uc3Qgd2VpZ2h0ZWRUeXBlcyA9IFtdO1xyXG4gIGxldCB0b3RhbFdlaWdodCA9IDA7XHJcbiAgZm9yIChjb25zdCB0eXBlIGluIHJvb21UeXBlV2VpZ2h0cykge1xyXG4gICAgY29uc3Qgd2VpZ2h0ID0gcm9vbVR5cGVXZWlnaHRzW3R5cGVdO1xyXG4gICAgaWYgKHdlaWdodCA+IDApIHtcclxuICAgICAgdG90YWxXZWlnaHQgKz0gd2VpZ2h0O1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdlaWdodDsgaSsrKSB7XHJcbiAgICAgICAgd2VpZ2h0ZWRUeXBlcy5wdXNoKHR5cGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIEVuc3VyZSB3ZWlnaHRlZFR5cGVzIGlzIG5vdCBlbXB0eSBpZiBhbGwgd2VpZ2h0cyBhcmUgMCAoZWRnZSBjYXNlKVxyXG4gIGlmICh3ZWlnaHRlZFR5cGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgd2VpZ2h0ZWRUeXBlcy5wdXNoKCd1dGlsaXR5Jyk7IC8vIERlZmF1bHQgZmFsbGJhY2tcclxuICAgIGNvbnNvbGUud2FybihcclxuICAgICAgXCJbTWFwR2VuIFJvb21zXSBObyByb29tIHR5cGUgd2VpZ2h0cyBwcm92aWRlZCBvciBhbGwgYXJlIHplcm8uIERlZmF1bHRpbmcgdG8gJ3V0aWxpdHknLlwiXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgd2hpbGUgKHJvb21zLmxlbmd0aCA8IG51bVJvb21zICYmIHJvb21BdHRlbXB0cyA8IG1heFJvb21BdHRlbXB0cykge1xyXG4gICAgcm9vbUF0dGVtcHRzKys7XHJcbiAgICBjb25zdCByb29tV2lkdGggPSByYW5kb21JbnQobWluUm9vbVNpemUsIG1heFJvb21TaXplKTtcclxuICAgIGNvbnN0IHJvb21IZWlnaHQgPSByYW5kb21JbnQobWluUm9vbVNpemUsIG1heFJvb21TaXplKTtcclxuICAgIC8vIEVuc3VyZSByb29tIGZpdHMgd2l0aGluIG1hcCBib3VuZGFyaWVzIChsZWF2aW5nIDEtdGlsZSBib3JkZXIpXHJcbiAgICBjb25zdCByb29tQ29sID0gcmFuZG9tSW50KDEsIGNvbHMgLSByb29tV2lkdGggLSAxKTtcclxuICAgIGNvbnN0IHJvb21Sb3cgPSByYW5kb21JbnQoMSwgcm93cyAtIHJvb21IZWlnaHQgLSAxKTtcclxuXHJcbiAgICBjb25zdCByb29tVHlwZSA9IHdlaWdodGVkVHlwZXNbcmFuZG9tSW50KDAsIHdlaWdodGVkVHlwZXMubGVuZ3RoIC0gMSldO1xyXG5cclxuICAgIGNvbnN0IG5ld1Jvb20gPSB7XHJcbiAgICAgIGNvbDogcm9vbUNvbCxcclxuICAgICAgcm93OiByb29tUm93LFxyXG4gICAgICB3aWR0aDogcm9vbVdpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHJvb21IZWlnaHQsXHJcbiAgICAgIHR5cGU6IHJvb21UeXBlLFxyXG4gICAgICBpZDogYHJvb21fJHtyb29tcy5sZW5ndGggKyAxfWAsXHJcbiAgICAgIGNlbnRlclRpbGVYOiBNYXRoLmZsb29yKHJvb21Db2wgKyByb29tV2lkdGggLyAyKSxcclxuICAgICAgY2VudGVyVGlsZVk6IE1hdGguZmxvb3Iocm9vbVJvdyArIHJvb21IZWlnaHQgLyAyKSxcclxuICAgICAgY29ubmVjdGVkOiBmYWxzZSxcclxuICAgIH07XHJcblxyXG4gICAgbGV0IG92ZXJsYXBzID0gZmFsc2U7XHJcbiAgICBjb25zdCBidWZmZXIgPSAyOyAvLyBLZWVwIGEgYnVmZmVyIGJldHdlZW4gcm9vbXNcclxuICAgIGZvciAoY29uc3QgZXhpc3RpbmdSb29tIG9mIHJvb21zKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBuZXdSb29tLmNvbCA8IGV4aXN0aW5nUm9vbS5jb2wgKyBleGlzdGluZ1Jvb20ud2lkdGggKyBidWZmZXIgJiZcclxuICAgICAgICBuZXdSb29tLmNvbCArIG5ld1Jvb20ud2lkdGggKyBidWZmZXIgPiBleGlzdGluZ1Jvb20uY29sICYmXHJcbiAgICAgICAgbmV3Um9vbS5yb3cgPCBleGlzdGluZ1Jvb20ucm93ICsgZXhpc3RpbmdSb29tLmhlaWdodCArIGJ1ZmZlciAmJlxyXG4gICAgICAgIG5ld1Jvb20ucm93ICsgbmV3Um9vbS5oZWlnaHQgKyBidWZmZXIgPiBleGlzdGluZ1Jvb20ucm93XHJcbiAgICAgICkge1xyXG4gICAgICAgIG92ZXJsYXBzID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghb3ZlcmxhcHMpIHtcclxuICAgICAgcm9vbXMucHVzaChuZXdSb29tKTtcclxuICAgICAgLy8gQ2FydmUgcm9vbSBmbG9vclxyXG4gICAgICBmb3IgKGxldCByID0gbmV3Um9vbS5yb3c7IHIgPCBuZXdSb29tLnJvdyArIG5ld1Jvb20uaGVpZ2h0OyByKyspIHtcclxuICAgICAgICBmb3IgKGxldCBjID0gbmV3Um9vbS5jb2w7IGMgPCBuZXdSb29tLmNvbCArIG5ld1Jvb20ud2lkdGg7IGMrKykge1xyXG4gICAgICAgICAgLy8gRG91YmxlIGNoZWNrIGJvdW5kcyBqdXN0IGluIGNhc2UgY2FsY3VsYXRpb24gd2FzIG9mZlxyXG4gICAgICAgICAgaWYgKHIgPj0gMCAmJiByIDwgcm93cyAmJiBjID49IDAgJiYgYyA8IGNvbHMpIHtcclxuICAgICAgICAgICAgbWFwW3JdW2NdID0gVElMRV9ST09NX0ZMT09SO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBpZiAocm9vbXMubGVuZ3RoIDwgbnVtUm9vbXMpIHtcclxuICAgIGNvbnNvbGUud2FybihcclxuICAgICAgYFtNYXBHZW4gUm9vbXNdIFBsYWNlZCBvbmx5ICR7cm9vbXMubGVuZ3RofS8ke251bVJvb21zfSByb29tcyBhZnRlciAke3Jvb21BdHRlbXB0c30gYXR0ZW1wdHMuYFxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coYFtNYXBHZW4gUm9vbXNdIFBsYWNlZCAke3Jvb21zLmxlbmd0aH0gcm9vbXMgYWZ0ZXIgJHtyb29tQXR0ZW1wdHN9IGF0dGVtcHRzLmApO1xyXG4gIH1cclxufVxyXG5cclxuLy8gLS0tIEhlbHBlcjogQ29ubmVjdCBSb29tcyAtLS1cclxuZnVuY3Rpb24gX2Nvbm5lY3RSb29tc0JldHRlcihtYXAsIHJvb21zLCBjb2xzLCByb3dzKSB7XHJcbiAgaWYgKHJvb21zLmxlbmd0aCA8IDIpIHJldHVybjtcclxuICBjb25zb2xlLmxvZyhgW01hcEdlbiBDb25uZWN0XSBDb25uZWN0aW5nICR7cm9vbXMubGVuZ3RofSByb29tcyAoaW1wcm92ZWQpLi4uYCk7XHJcblxyXG4gIC8vIFVzZSBhIFNldCBmb3IgZmFzdGVyIGNoZWNraW5nIG9mIGNvbm5lY3RlZCBzdGF0dXNcclxuICBjb25zdCBjb25uZWN0ZWRTZXQgPSBuZXcgU2V0KFtyb29tc1swXS5pZF0pO1xyXG4gIGxldCB1bmNvbm5lY3RlZFJvb21zID0gcm9vbXMuc2xpY2UoMSk7IC8vIFN0YXJ0IHdpdGggYWxsIGJ1dCB0aGUgZmlyc3RcclxuXHJcbiAgd2hpbGUgKHVuY29ubmVjdGVkUm9vbXMubGVuZ3RoID4gMCkge1xyXG4gICAgbGV0IGJlc3REaXN0YW5jZVNxID0gSW5maW5pdHk7XHJcbiAgICBsZXQgYmVzdFVuY29ubmVjdGVkUm9vbSA9IG51bGw7XHJcbiAgICBsZXQgYmVzdENvbm5lY3RlZFJvb21JZCA9IG51bGw7IC8vIFN0b3JlIElEIG9mIHRoZSBjb25uZWN0ZWQgcm9vbVxyXG4gICAgbGV0IGJlc3RVbmNvbm5lY3RlZEluZGV4ID0gLTE7XHJcblxyXG4gICAgLy8gRmluZCB0aGUgdW5jb25uZWN0ZWQgcm9vbSBjbG9zZXN0IHRvIEFOWSBjb25uZWN0ZWQgcm9vbVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmNvbm5lY3RlZFJvb21zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHJvb21VID0gdW5jb25uZWN0ZWRSb29tc1tpXTtcclxuICAgICAgZm9yIChjb25zdCByb29tQyBvZiByb29tcykge1xyXG4gICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBBTEwgcm9vbXNcclxuICAgICAgICBpZiAoY29ubmVjdGVkU2V0Lmhhcyhyb29tQy5pZCkpIHtcclxuICAgICAgICAgIC8vIENoZWNrIGlmIHJvb21DIGlzIGNvbm5lY3RlZFxyXG4gICAgICAgICAgY29uc3QgZHggPSByb29tVS5jZW50ZXJUaWxlWCAtIHJvb21DLmNlbnRlclRpbGVYO1xyXG4gICAgICAgICAgY29uc3QgZHkgPSByb29tVS5jZW50ZXJUaWxlWSAtIHJvb21DLmNlbnRlclRpbGVZO1xyXG4gICAgICAgICAgY29uc3QgZGlzdFNxID0gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgICAgICAgICBpZiAoZGlzdFNxIDwgYmVzdERpc3RhbmNlU3EpIHtcclxuICAgICAgICAgICAgYmVzdERpc3RhbmNlU3EgPSBkaXN0U3E7XHJcbiAgICAgICAgICAgIGJlc3RVbmNvbm5lY3RlZFJvb20gPSByb29tVTtcclxuICAgICAgICAgICAgYmVzdENvbm5lY3RlZFJvb21JZCA9IHJvb21DLmlkO1xyXG4gICAgICAgICAgICBiZXN0VW5jb25uZWN0ZWRJbmRleCA9IGk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJlc3RVbmNvbm5lY3RlZFJvb20gJiYgYmVzdENvbm5lY3RlZFJvb21JZCAhPT0gbnVsbCkge1xyXG4gICAgICAvLyBGaW5kIHRoZSBhY3R1YWwgY29ubmVjdGVkIHJvb20gb2JqZWN0IHVzaW5nIHRoZSBJRFxyXG4gICAgICBjb25zdCBiZXN0Q29ubmVjdGVkUm9vbSA9IHJvb21zLmZpbmQoKHIpID0+IHIuaWQgPT09IGJlc3RDb25uZWN0ZWRSb29tSWQpO1xyXG4gICAgICBpZiAoIWJlc3RDb25uZWN0ZWRSb29tKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgIGBbTWFwR2VuIENvbm5lY3RdIEVycm9yOiBDb3VsZCBub3QgZmluZCBjb25uZWN0ZWQgcm9vbSB3aXRoIElEICR7YmVzdENvbm5lY3RlZFJvb21JZH0uIFNraXBwaW5nIGNvbm5lY3Rpb24uYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwcm9ibGVtYXRpYyB1bmNvbm5lY3RlZCByb29tIHRvIGF2b2lkIGluZmluaXRlIGxvb3BcclxuICAgICAgICB1bmNvbm5lY3RlZFJvb21zLnNwbGljZShiZXN0VW5jb25uZWN0ZWRJbmRleCwgMSk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIF9jYXJ2ZUNvcnJpZG9yQmV0d2VlbihtYXAsIGJlc3RDb25uZWN0ZWRSb29tLCBiZXN0VW5jb25uZWN0ZWRSb29tLCBjb2xzLCByb3dzKTtcclxuICAgICAgY29ubmVjdGVkU2V0LmFkZChiZXN0VW5jb25uZWN0ZWRSb29tLmlkKTsgLy8gQWRkIHRoZSBuZXdseSBjb25uZWN0ZWQgcm9vbSBJRCB0byB0aGUgc2V0XHJcbiAgICAgIHVuY29ubmVjdGVkUm9vbXMuc3BsaWNlKGJlc3RVbmNvbm5lY3RlZEluZGV4LCAxKTsgLy8gUmVtb3ZlIGZyb20gdW5jb25uZWN0ZWQgbGlzdFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAnW01hcEdlbiBDb25uZWN0XSBDb3VsZCBub3QgZmluZCBuZXh0IHBhaXIgb2Ygcm9vbXMgdG8gY29ubmVjdC4gQnJlYWtpbmcgbG9vcC4gUmVtYWluaW5nIHVuY29ubmVjdGVkOicsXHJcbiAgICAgICAgdW5jb25uZWN0ZWRSb29tcy5tYXAoKHIpID0+IHIuaWQpXHJcbiAgICAgICk7XHJcbiAgICAgIGJyZWFrOyAvLyBBdm9pZCBpbmZpbml0ZSBsb29wIGlmIHNvbWV0aGluZyB3ZW50IHdyb25nXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKGBbTWFwR2VuIENvbm5lY3RdIEZpbmlzaGVkIGNvbm5lY3Rpbmcgcm9vbXMuIENvbm5lY3RlZCBjb3VudDogJHtjb25uZWN0ZWRTZXQuc2l6ZX1gKTtcclxufVxyXG5cclxuLy8gLS0tIEhlbHBlcjogQ2FydmUgQ29ycmlkb3JzIC0tLVxyXG5mdW5jdGlvbiBfY2FydmVDb3JyaWRvckJldHdlZW4obWFwLCByb29tQSwgcm9vbUIsIGNvbHMsIHJvd3MpIHtcclxuICBjb25zdCB7IGNlbnRlclRpbGVYOiBheCwgY2VudGVyVGlsZVk6IGF5IH0gPSByb29tQTtcclxuICBjb25zdCB7IGNlbnRlclRpbGVYOiBieCwgY2VudGVyVGlsZVk6IGJ5IH0gPSByb29tQjtcclxuICAvLyBSYW5kb21seSBjaG9vc2UgTC1zaGFwZSBkaXJlY3Rpb24gKEhvcml6b250YWwgdGhlbiBWZXJ0aWNhbCwgb3IgVmVydGljYWwgdGhlbiBIb3Jpem9udGFsKVxyXG4gIGlmIChNYXRoLnJhbmRvbSgpIDwgMC41KSB7XHJcbiAgICAvLyBIIHRoZW4gVlxyXG4gICAgX2NhcnZlSG9yaXpvbnRhbENvcnJpZG9yKG1hcCwgYXksIGF4LCBieCwgY29scywgcm93cyk7XHJcbiAgICBfY2FydmVWZXJ0aWNhbENvcnJpZG9yKG1hcCwgYngsIGF5LCBieSwgY29scywgcm93cyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFYgdGhlbiBIXHJcbiAgICBfY2FydmVWZXJ0aWNhbENvcnJpZG9yKG1hcCwgYXgsIGF5LCBieSwgY29scywgcm93cyk7XHJcbiAgICBfY2FydmVIb3Jpem9udGFsQ29ycmlkb3IobWFwLCBieSwgYXgsIGJ4LCBjb2xzLCByb3dzKTtcclxuICB9XHJcbn1cclxuZnVuY3Rpb24gX2NhcnZlSG9yaXpvbnRhbENvcnJpZG9yKG1hcCwgciwgYzEsIGMyLCBjb2xzLCByb3dzKSB7XHJcbiAgLy8gRW5zdXJlIHJvdyBpcyB2YWxpZFxyXG4gIGlmIChyIDwgMCB8fCByID49IHJvd3MpIHJldHVybjtcclxuICBjb25zdCBzdGFydENvbCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGMxLCBjMikpOyAvLyBDbGFtcCB0byBtYXAgYm91bmRzXHJcbiAgY29uc3QgZW5kQ29sID0gTWF0aC5taW4oY29scyAtIDEsIE1hdGgubWF4KGMxLCBjMikpOyAvLyBDbGFtcCB0byBtYXAgYm91bmRzXHJcbiAgZm9yIChsZXQgYyA9IHN0YXJ0Q29sOyBjIDw9IGVuZENvbDsgYysrKSB7XHJcbiAgICAvLyBPbmx5IGNhcnZlIGlmIGl0J3MgY3VycmVudGx5IGEgd2FsbFxyXG4gICAgaWYgKG1hcFtyXT8uW2NdID09PSBUSUxFX1dBTEwpIHtcclxuICAgICAgbWFwW3JdW2NdID0gVElMRV9DT1JSSURPUjtcclxuICAgIH1cclxuICAgIC8vIE9wdGlvbmFsOiBBbHNvIGNhcnZlIGFkamFjZW50IHZlcnRpY2FsIHRpbGVzIGZvciB0aGlja25lc3MgPiAxXHJcbiAgICAvLyBpZiAodGhpY2tuZXNzID4gMSAmJiByKzEgPCByb3dzICYmIG1hcFtyKzFdPy5bY10gPT09IFRJTEVfV0FMTCkgbWFwW3IrMV1bY10gPSBUSUxFX0NPUlJJRE9SO1xyXG4gIH1cclxufVxyXG5mdW5jdGlvbiBfY2FydmVWZXJ0aWNhbENvcnJpZG9yKG1hcCwgYywgcjEsIHIyLCBjb2xzLCByb3dzKSB7XHJcbiAgLy8gRW5zdXJlIGNvbCBpcyB2YWxpZFxyXG4gIGlmIChjIDwgMCB8fCBjID49IGNvbHMpIHJldHVybjtcclxuICBjb25zdCBzdGFydFJvdyA9IE1hdGgubWF4KDAsIE1hdGgubWluKHIxLCByMikpOyAvLyBDbGFtcCB0byBtYXAgYm91bmRzXHJcbiAgY29uc3QgZW5kUm93ID0gTWF0aC5taW4ocm93cyAtIDEsIE1hdGgubWF4KHIxLCByMikpOyAvLyBDbGFtcCB0byBtYXAgYm91bmRzXHJcbiAgZm9yIChsZXQgciA9IHN0YXJ0Um93OyByIDw9IGVuZFJvdzsgcisrKSB7XHJcbiAgICAvLyBPbmx5IGNhcnZlIGlmIGl0J3MgY3VycmVudGx5IGEgd2FsbFxyXG4gICAgaWYgKG1hcFtyXT8uW2NdID09PSBUSUxFX1dBTEwpIHtcclxuICAgICAgbWFwW3JdW2NdID0gVElMRV9DT1JSSURPUjtcclxuICAgIH1cclxuICAgIC8vIE9wdGlvbmFsOiBBbHNvIGNhcnZlIGFkamFjZW50IGhvcml6b250YWwgdGlsZXMgZm9yIHRoaWNrbmVzcyA+IDFcclxuICAgIC8vIGlmICh0aGlja25lc3MgPiAxICYmIGMrMSA8IGNvbHMgJiYgbWFwW3JdPy5bYysxXSA9PT0gVElMRV9XQUxMKSBtYXBbcl1bYysxXSA9IFRJTEVfQ09SUklET1I7XHJcbiAgfVxyXG59XHJcblxyXG4vLyAtLS0gTkVXIEhFTFBFUjogR2V0IFRpbGUgT3Blbm5lc3MgRGV0YWlscyAtLS1cclxuZnVuY3Rpb24gX2dldFRpbGVPcGVubmVzc0RldGFpbHModGlsZVgsIHRpbGVZLCBtYXAsIGNvbHMsIHJvd3MpIHtcclxuICAvLyBMb2NhbCB3YWxrYWJsZSBkZWZpbml0aW9uIGZvciB0aGlzIGhlbHBlclxyXG4gIGNvbnN0IGlzVGlsZVdhbGthYmxlID0gKHgsIHksIGN1cnJlbnRNYXAsIG1hcENvbHMsIG1hcFJvd3MpID0+IHtcclxuICAgIGlmICh4IDwgMCB8fCB4ID49IG1hcENvbHMgfHwgeSA8IDAgfHwgeSA+PSBtYXBSb3dzKSByZXR1cm4gZmFsc2U7XHJcbiAgICBjb25zdCB0aWxlVmFsID0gY3VycmVudE1hcFt5XT8uW3hdO1xyXG4gICAgcmV0dXJuIHRpbGVWYWwgPT09IFRJTEVfQ09SUklET1IgfHwgdGlsZVZhbCA9PT0gVElMRV9ST09NX0ZMT09SIHx8IHRpbGVWYWwgPT09IFRJTEVfTElGVDtcclxuICB9O1xyXG5cclxuICBsZXQgb3BlblNpZGVzID0gMDtcclxuICAvLyBPcmRlcjogTiwgUywgVywgRVxyXG4gIGNvbnN0IG5laWdoYm9yRGVsdGFzID0gW1xyXG4gICAgeyBkeDogMCwgZHk6IC0xIH0sXHJcbiAgICB7IGR4OiAwLCBkeTogMSB9LFxyXG4gICAgeyBkeDogLTEsIGR5OiAwIH0sXHJcbiAgICB7IGR4OiAxLCBkeTogMCB9LFxyXG4gIF07XHJcbiAgbGV0IHdhbGthYmxlTmVpZ2hib3JGbGFncyA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV07IC8vIE4sIFMsIFcsIEVcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZWlnaGJvckRlbHRhcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgbnggPSB0aWxlWCArIG5laWdoYm9yRGVsdGFzW2ldLmR4O1xyXG4gICAgY29uc3QgbnkgPSB0aWxlWSArIG5laWdoYm9yRGVsdGFzW2ldLmR5O1xyXG4gICAgaWYgKGlzVGlsZVdhbGthYmxlKG54LCBueSwgbWFwLCBjb2xzLCByb3dzKSkge1xyXG4gICAgICBvcGVuU2lkZXMrKztcclxuICAgICAgd2Fsa2FibGVOZWlnaGJvckZsYWdzW2ldID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxldCBpc0Nob2tlcG9pbnQgPSBmYWxzZTtcclxuICBpZiAob3BlblNpZGVzID09PSAyKSB7XHJcbiAgICBjb25zdCBbTiwgUywgVywgRV0gPSB3YWxrYWJsZU5laWdoYm9yRmxhZ3M7XHJcbiAgICAvLyBWZXJ0aWNhbCBjaG9rZXBvaW50IChOJlMgb3BlbiwgVyZFIGNsb3NlZCkgT1IgSG9yaXpvbnRhbCBjaG9rZXBvaW50IChXJkUgb3BlbiwgTiZTIGNsb3NlZClcclxuICAgIGlmICgoTiAmJiBTICYmICFXICYmICFFKSB8fCAoVyAmJiBFICYmICFOICYmICFTKSkge1xyXG4gICAgICBpc0Nob2tlcG9pbnQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4geyBvcGVuU2lkZXMsIGlzQ2hva2Vwb2ludCB9O1xyXG59XHJcblxyXG4vLyAtLS0gSGVscGVyOiBQbGFjZSBMaWZ0IC0tLVxyXG4vLyBUYWtlcyBjdXJyZW50IGBsaWZ0Q29vcmRzYCBhbmQgcmV0dXJucyB0aGUgdXNlZC9mb3VuZCBjb29yZHMgYW5kIHBvc2l0aW9uXHJcbi8vIE1vZGlmeSBfcGxhY2VMaWZ0IHRvIHBhc3MgdGhlIHJvb21zIGxpc3QgdG8gX2ZpbmRMaWZ0UGxhY2VtZW50TG9jYXRpb25cclxuZnVuY3Rpb24gX3BsYWNlTGlmdChcclxuICBtYXAsXHJcbiAgY29scyxcclxuICByb3dzLFxyXG4gIGZsb29yTnVtYmVyLFxyXG4gIG1pbkZsb29yLFxyXG4gIHRpbGVTaXplLFxyXG4gIGN1cnJlbnRDb25zaXN0ZW50Q29vcmRzLFxyXG4gIHJvb21zTGlzdFxyXG4pIHtcclxuICAvLyBBZGRlZCByb29tc0xpc3RcclxuICBsZXQgY29vcmRzVG9Vc2UgPSBjdXJyZW50Q29uc2lzdGVudENvb3JkcztcclxuICBsZXQgbmV3bHlGb3VuZENvb3JkcyA9IG51bGw7XHJcblxyXG4gIC8vIEZpbmQgY29vcmRzIG9ubHkgb24gdGhlIGZpcnN0IGZsb29yIGlmIG5vdCBhbHJlYWR5IHNldFxyXG4gIGlmIChmbG9vck51bWJlciA9PT0gbWluRmxvb3IgJiYgIWNvb3Jkc1RvVXNlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gRmluZGluZyBpbml0aWFsIGxpZnQgcGxhY2VtZW50IGxvY2F0aW9uLi4uYCk7XHJcbiAgICBjb29yZHNUb1VzZSA9IF9maW5kTGlmdFBsYWNlbWVudExvY2F0aW9uKG1hcCwgY29scywgcm93cywgcm9vbXNMaXN0KTsgLy8gUEFTUyByb29tc0xpc3RcclxuICAgIGlmICghY29vcmRzVG9Vc2UpIHtcclxuICAgICAgLy8gRmFsbGJhY2s6IGlmIG5vIGdvb2Qgcm9vbSBzcG90LCB0cnkgdGhlIHByZXZpb3VzIGdlbmVyYWwgZmluZCBsb2dpYyAod2hpY2ggaW5jbHVkZXMgY29ycmlkb3JzKVxyXG4gICAgICAvLyBGb3Igc2ltcGxpY2l0eSBoZXJlLCB3ZSdsbCBqdXN0IGdvIHRvIHRoZSBjZW50ZXIuIEEgbW9yZSByb2J1c3QgZmFsbGJhY2sgY291bGQgYmUgdG8gY2FsbFxyXG4gICAgICAvLyBhIHZlcnNpb24gb2YgX2ZpbmRMaWZ0UGxhY2VtZW50TG9jYXRpb24gdGhhdCAqZG9lcyogY29uc2lkZXIgY29ycmlkb3JzLlxyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgYFtNYXBHZW4gRmxvb3IgJHtmbG9vck51bWJlcn1dIE5vIGlkZWFsIElOLVJPT00gbGlmdCBsb2NhdGlvbiBmb3VuZC4gRm9yY2luZyBwbGFjZW1lbnQgbmVhciBjZW50ZXIuYFxyXG4gICAgICApO1xyXG4gICAgICBjb29yZHNUb1VzZSA9IHsgdGlsZVg6IE1hdGguZmxvb3IoY29scyAvIDIpLCB0aWxlWTogTWF0aC5mbG9vcihyb3dzIC8gMikgfTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gRXN0YWJsaXNoZWQgY29uc2lzdGVudCBsaWZ0IGNvb3JkcyBhdCB0aWxlKCR7Y29vcmRzVG9Vc2UudGlsZVh9LCAke2Nvb3Jkc1RvVXNlLnRpbGVZfSlgXHJcbiAgICApO1xyXG4gICAgbmV3bHlGb3VuZENvb3JkcyA9IGNvb3Jkc1RvVXNlO1xyXG4gIH0gZWxzZSBpZiAoIWNvb3Jkc1RvVXNlICYmIGZsb29yTnVtYmVyID4gbWluRmxvb3IpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgW01hcEdlbiBMaWZ0XSBNaXNzaW5nIGNvbnNpc3RlbnQgY29vcmRpbmF0ZXMgZm9yIGZsb29yICR7Zmxvb3JOdW1iZXJ9LmApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgeyB0aWxlWCwgdGlsZVkgfSA9IGNvb3Jkc1RvVXNlO1xyXG5cclxuICAvLyBCYXNpYyBib3VuZHMgY2hlY2sgZm9yIHNhZmV0eVxyXG4gIGlmICh0aWxlWSA8IDAgfHwgdGlsZVkgPj0gcm93cyB8fCB0aWxlWCA8IDAgfHwgdGlsZVggPj0gY29scykge1xyXG4gICAgLy8gVGhpcyBtaWdodCBoYXBwZW4gaWYgdGhlIGZhbGxiYWNrIGNvb3JkcyBhcmUgYmFkIG9uIGEgdmVyeSBzbWFsbCBtYXBcclxuICAgIGNvbnN0IHNhZmVGYWxsYmFja1ggPSBNYXRoLm1heCgxLCBNYXRoLm1pbihjb2xzIC0gMiwgdGlsZVgpKTtcclxuICAgIGNvbnN0IHNhZmVGYWxsYmFja1kgPSBNYXRoLm1heCgxLCBNYXRoLm1pbihyb3dzIC0gMiwgdGlsZVkpKTtcclxuICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgIGBbTWFwR2VuIExpZnRdIENvb3JkcyAoJHt0aWxlWH0sICR7dGlsZVl9KSBhcmUgb3V0c2lkZSBtYXAgYm91bmRzIG9uIGZsb29yICR7Zmxvb3JOdW1iZXJ9LiBBZGp1c3RlZCB0byAoJHtzYWZlRmFsbGJhY2tYfSwke3NhZmVGYWxsYmFja1l9KWBcclxuICAgICk7XHJcbiAgICBjb29yZHNUb1VzZSA9IHsgdGlsZVg6IHNhZmVGYWxsYmFja1gsIHRpbGVZOiBzYWZlRmFsbGJhY2tZIH07XHJcbiAgICAvLyBSZS1hc3NpZ24gdGlsZVgsIHRpbGVZIGZvciB0aGUgcmVzdCBvZiB0aGUgZnVuY3Rpb25cclxuICAgIC8vIFRoaXMgaXMgYSBiaXQgaGFja3k7IGlkZWFsbHksIHRoZSBwcmltYXJ5IGZpbmQgbG9naWMgb3IgaXRzIGZhbGxiYWNrIHNob3VsZCBhbHdheXMgcmV0dXJuIHZhbGlkIGNvb3Jkcy5cclxuICAgIC8vIEhvd2V2ZXIsIGlmIGBjb25zaXN0ZW50TGlmdENvb3Jkc2Agd2VyZSBzb21laG93IGludmFsaWQgZnJvbSBhIHByZXZpb3VzIGZsb29yLCB0aGlzIGNvdWxkIGJlIGFuIGlzc3VlLlxyXG4gICAgLy8gRm9yIG5vdywgd2UnbGwgYXNzdW1lIGBfZmluZExpZnRQbGFjZW1lbnRMb2NhdGlvbmAgb3IgaXRzIGRpcmVjdCBmYWxsYmFjayBpcyByb2J1c3QgZW5vdWdoLlxyXG4gICAgLy8gVGhlIG9yaWdpbmFsIGVycm9yIHRocm93IGlzIGJldHRlciBpZiB3ZSBleHBlY3QgYGNvb3Jkc1RvVXNlYCB0byBhbHdheXMgYmUgdmFsaWQgZnJvbSBnZW5lcmF0aW9uLlxyXG4gICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICBgW01hcEdlbiBMaWZ0XSBDb29yZHMgKCR7Y29vcmRzVG9Vc2UudGlsZVh9LCAke2Nvb3Jkc1RvVXNlLnRpbGVZfSkgYXJlIG91dHNpZGUgbWFwIGJvdW5kcyBvbiBmbG9vciAke2Zsb29yTnVtYmVyfS5gXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlIGNob3NlbiBzcG90IGlzIGEgd2FsbDsgaWYgc28sIGF0dGVtcHQgY29ubmVjdGlvblxyXG4gIC8vIFRoaXMgaXMgY3J1Y2lhbCBpZiB0aGUgZmFsbGJhY2sgKGNlbnRlciBvZiBtYXApIHdhcyB1c2VkLlxyXG4gIGlmIChtYXBbdGlsZVldW3RpbGVYXSA9PT0gVElMRV9XQUxMKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgIGBbTWFwR2VuIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBMaWZ0IGxvY2F0aW9uIHRpbGUoJHt0aWxlWH0sICR7dGlsZVl9KSBpcyBhIHdhbGwgKGxpa2VseSBmYWxsYmFjaykuIEZvcmNpbmcgY29ubmVjdGlvbi4uLmBcclxuICAgICk7XHJcbiAgICBjb25zdCBjb25uZWN0ZWQgPSBfZm9yY2VDb25uZWN0aW9uVG9Qb2ludChtYXAsIHRpbGVYLCB0aWxlWSwgY29scywgcm93cyk7XHJcbiAgICBpZiAoIWNvbm5lY3RlZCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIGBbTWFwR2VuIExpZnQgQ29ubmVjdF0gRkFJTEVEIHRvIGNvbm5lY3Qgd2FsbCBhdCBsaWZ0IGxvY2F0aW9uIHRpbGUoJHt0aWxlWH0sICR7dGlsZVl9KS4gTGlmdCBtaWdodCBiZSBpc29sYXRlZC5gXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhgICBbTWFwR2VuIExpZnQgQ29ubmVjdF0gQ29ubmVjdGlvbiBhdHRlbXB0IGZpbmlzaGVkIGZvciB3YWxsIGF0IGxpZnQgbG9jYXRpb24uYCk7XHJcbiAgICAgIGlmIChtYXBbdGlsZVldW3RpbGVYXSA9PT0gVElMRV9XQUxMKSB7XHJcbiAgICAgICAgLy8gRG91YmxlIGNoZWNrIGFmdGVyIGNvbm5lY3Rpb25cclxuICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICBgICBbTWFwR2VuIExpZnQgQ29ubmVjdF0gRm9yY2UgY29ubmVjdGlvbiBjb21wbGV0ZWQsIGJ1dCB0YXJnZXQgdGlsZSAoJHt0aWxlWH0sJHt0aWxlWX0pIHJlbWFpbmVkIFdBTEwuIFNldHRpbmcgdG8gQ09SUklET1IuYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbWFwW3RpbGVZXVt0aWxlWF0gPSBUSUxFX0NPUlJJRE9SO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBgICBbTWFwR2VuIExpZnRdIExpZnQgbG9jYXRpb24gdGlsZSgke3RpbGVYfSwgJHt0aWxlWX0pIGlzIGFscmVhZHkgd2Fsa2FibGUgKFR5cGU6ICR7bWFwW3RpbGVZXVt0aWxlWF19KS5gXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gUGxhY2UgdGhlIGxpZnQgdGlsZVxyXG4gIG1hcFt0aWxlWV1bdGlsZVhdID0gVElMRV9MSUZUO1xyXG5cclxuICBjb25zdCBsaWZ0V29ybGRQb3MgPSB7XHJcbiAgICB4OiAodGlsZVggKyAwLjUpICogdGlsZVNpemUsXHJcbiAgICB5OiAodGlsZVkgKyAwLjUpICogdGlsZVNpemUsXHJcbiAgICB0aWxlWDogdGlsZVgsXHJcbiAgICB0aWxlWTogdGlsZVksXHJcbiAgfTtcclxuXHJcbiAgY29uc29sZS5sb2coXHJcbiAgICBgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gUGxhY2VkL0NvbmZpcm1lZCBsaWZ0IGF0IHRpbGUoJHt0aWxlWH0sICR7dGlsZVl9KS4gV29ybGQ6ICgke2xpZnRXb3JsZFBvcy54LnRvRml4ZWQoXHJcbiAgICAgIDFcclxuICAgICl9LCAke2xpZnRXb3JsZFBvcy55LnRvRml4ZWQoMSl9KWBcclxuICApO1xyXG5cclxuICByZXR1cm4geyBwb3NpdGlvbjogbGlmdFdvcmxkUG9zLCBjb29yZHM6IG5ld2x5Rm91bmRDb29yZHMgfHwgY29vcmRzVG9Vc2UgfTtcclxufVxyXG5cclxuLy8gLS0tIE1PRElGSUVEIEhlbHBlcjogRmluZCBMaWZ0IExvY2F0aW9uIChGb3IgRmlyc3QgRmxvb3IpIC0tLVxyXG5mdW5jdGlvbiBfZmluZExpZnRQbGFjZW1lbnRMb2NhdGlvbihtYXAsIGNvbHMsIHJvd3MsIHJvb21zTGlzdCkge1xyXG4gIC8vIEFkZGVkIHJvb21zTGlzdCBwYXJhbWV0ZXJcclxuICBjb25zdCBjZW50ZXJYID0gTWF0aC5mbG9vcihjb2xzIC8gMik7XHJcbiAgY29uc3QgY2VudGVyWSA9IE1hdGguZmxvb3Iocm93cyAvIDIpO1xyXG5cclxuICBsZXQgYmVzdFNwb3RDYW5kaWRhdGUgPSBudWxsO1xyXG5cclxuICBjb25zb2xlLmxvZyhgICBbTWFwR2VuIEZpbmRMaWZ0IFYzXSBTZWFyY2hpbmcgZm9yIG9wdGltYWwgbGlmdCBzcG90IElOU0lERSBhIHJvb20uLi5gKTtcclxuXHJcbiAgaWYgKCFyb29tc0xpc3QgfHwgcm9vbXNMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgY29uc29sZS53YXJuKFxyXG4gICAgICBgICBbTWFwR2VuIEZpbmRMaWZ0IFYzXSBObyByb29tcyBhdmFpbGFibGUgdG8gcGxhY2UgYSBsaWZ0IGluLiBGYWxsYmFjayB3aWxsIGJlIHVzZWQgYnkgY2FsbGVyLmBcclxuICAgICk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGZvciAoY29uc3Qgcm9vbSBvZiByb29tc0xpc3QpIHtcclxuICAgIC8vIEl0ZXJhdGUgXCJpbnRlcm5hbFwiIGZsb29yIHRpbGVzIG9mIHRoZSByb29tLlxyXG4gICAgLy8gSW50ZXJuYWwgdGlsZXMgYXJlIGF0IGxlYXN0IDEgdGlsZSBhd2F5IGZyb20gdGhlIHJvb20ncyBib3VuZGluZyB3YWxscy5cclxuICAgIC8vIFJlcXVpcmVzIHJvb20gdG8gYmUgYXQgbGVhc3QgM3gzIGluIHNpemUgdG8gaGF2ZSBhbnkgaW50ZXJuYWwgdGlsZXMuXHJcbiAgICAvLyAobWluUm9vbVNpemUgaXMgNSwgc28gYSA1eDUgcm9vbSBoYXMgYSAzeDMgaW50ZXJuYWwgYXJlYSlcclxuICAgIGNvbnN0IHN0YXJ0SW50ZXJuYWxDb2wgPSByb29tLmNvbCArIDE7XHJcbiAgICBjb25zdCBlbmRJbnRlcm5hbENvbCA9IHJvb20uY29sICsgcm9vbS53aWR0aCAtIDI7XHJcbiAgICBjb25zdCBzdGFydEludGVybmFsUm93ID0gcm9vbS5yb3cgKyAxO1xyXG4gICAgY29uc3QgZW5kSW50ZXJuYWxSb3cgPSByb29tLnJvdyArIHJvb20uaGVpZ2h0IC0gMjtcclxuXHJcbiAgICBpZiAoc3RhcnRJbnRlcm5hbENvbCA+IGVuZEludGVybmFsQ29sIHx8IHN0YXJ0SW50ZXJuYWxSb3cgPiBlbmRJbnRlcm5hbFJvdykge1xyXG4gICAgICAvLyBSb29tIGlzIHRvbyBzbWFsbCAoZS5nLiwgMnhOIG9yIE54MikgdG8gaGF2ZSBcImludGVybmFsXCIgdGlsZXMgYnkgdGhpcyBkZWZpbml0aW9uLlxyXG4gICAgICAvLyBXZSBjb3VsZCBpdGVyYXRlIGFsbCByb29tLmNvbCB0byByb29tLmNvbCArIHJvb20ud2lkdGggLTEgZXRjLiBpZiB3ZSB3YW50IHRvIGluY2x1ZGUgZWRnZXMuXHJcbiAgICAgIC8vIEZvciBub3csIHN0aWNraW5nIHRvIFwiaW50ZXJuYWxcIiBmb3IgYmV0dGVyIHBsYWNlbWVudC5cclxuICAgICAgLy8gY29uc29sZS5sb2coYCAgICBbRmluZExpZnQgVjNdIFJvb20gJHtyb29tLmlkfSAoJHtyb29tLndpZHRofXgke3Jvb20uaGVpZ2h0fSkgdG9vIHNtYWxsIGZvciBpbnRlcm5hbCB0aWxlcy4gU2tpcHBpbmcuYCk7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IHIgPSBzdGFydEludGVybmFsUm93OyByIDw9IGVuZEludGVybmFsUm93OyByKyspIHtcclxuICAgICAgZm9yIChsZXQgYyA9IHN0YXJ0SW50ZXJuYWxDb2w7IGMgPD0gZW5kSW50ZXJuYWxDb2w7IGMrKykge1xyXG4gICAgICAgIC8vIEJ5IGRlZmluaXRpb24sIG1hcFtyXVtjXSBzaG91bGQgYmUgVElMRV9ST09NX0ZMT09SIGhlcmUuXHJcblxyXG4gICAgICAgIGxldCBjdXJyZW50U2NvcmUgPSAwO1xyXG4gICAgICAgIGNvbnN0IGRpc3RTcSA9IChjIC0gY2VudGVyWCkgKiAoYyAtIGNlbnRlclgpICsgKHIgLSBjZW50ZXJZKSAqIChyIC0gY2VudGVyWSk7XHJcbiAgICAgICAgY3VycmVudFNjb3JlIC09IGRpc3RTcSAvIDMwOyAvLyBQcm94aW1pdHkgYm9udXNcclxuXHJcbiAgICAgICAgY29uc3QgZGV0YWlsc1NlbGYgPSBfZ2V0VGlsZU9wZW5uZXNzRGV0YWlscyhjLCByLCBtYXAsIGNvbHMsIHJvd3MpO1xyXG5cclxuICAgICAgICBpZiAoZGV0YWlsc1NlbGYub3BlblNpZGVzIDwgMSkge1xyXG4gICAgICAgICAgLy8gU2hvdWxkIGhhdmUgYXQgbGVhc3QgMSBjb25uZWN0aW9uIGlmIGl0J3MgYSB2YWxpZCBpbnRlcm5hbCByb29tIHRpbGUuXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZXRhaWxzU2VsZi5pc0Nob2tlcG9pbnQpIHtcclxuICAgICAgICAgIGN1cnJlbnRTY29yZSAtPSA3MDA7IC8vIFBlbmFsaXplIGlmIGxpZnQgdGlsZSBpdHNlbGYgd291bGQgZm9ybSBhIGNob2tlcG9pbnRcclxuICAgICAgICB9XHJcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGRldGFpbHNTZWxmLm9wZW5TaWRlcyAqIDEyMDsgLy8gTW9yZSBvcGVuIHNpZGVzIGZvciB0aGUgbGlmdCB0aWxlIGFyZSBnb29kLlxyXG5cclxuICAgICAgICBsZXQgd29yc3RBY2Nlc3NQZW5hbHR5RnJvbU5laWdoYm9ycyA9IDA7XHJcbiAgICAgICAgbGV0IG51bUFjdHVhbEFjY2Vzc1BvaW50cyA9IDA7XHJcbiAgICAgICAgY29uc3QgbmVpZ2hib3JEZWx0YXMgPSBbXHJcbiAgICAgICAgICB7IGR4OiAwLCBkeTogLTEgfSxcclxuICAgICAgICAgIHsgZHg6IDAsIGR5OiAxIH0sXHJcbiAgICAgICAgICB7IGR4OiAtMSwgZHk6IDAgfSxcclxuICAgICAgICAgIHsgZHg6IDEsIGR5OiAwIH0sXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkZWx0YSBvZiBuZWlnaGJvckRlbHRhcykge1xyXG4gICAgICAgICAgY29uc3QgbmNBY2Nlc3MgPSBjICsgZGVsdGEuZHg7XHJcbiAgICAgICAgICBjb25zdCBuckFjY2VzcyA9IHIgKyBkZWx0YS5keTtcclxuXHJcbiAgICAgICAgICBpZiAobnJBY2Nlc3MgPj0gMCAmJiBuckFjY2VzcyA8IHJvd3MgJiYgbmNBY2Nlc3MgPj0gMCAmJiBuY0FjY2VzcyA8IGNvbHMpIHtcclxuICAgICAgICAgICAgY29uc3QgYWNjZXNzVGlsZVR5cGUgPSBtYXBbbnJBY2Nlc3NdPy5bbmNBY2Nlc3NdO1xyXG4gICAgICAgICAgICBpZiAoYWNjZXNzVGlsZVR5cGUgPT09IFRJTEVfQ09SUklET1IgfHwgYWNjZXNzVGlsZVR5cGUgPT09IFRJTEVfUk9PTV9GTE9PUikge1xyXG4gICAgICAgICAgICAgIG51bUFjdHVhbEFjY2Vzc1BvaW50cysrO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGRldGFpbHNBY2Nlc3NUaWxlID0gX2dldFRpbGVPcGVubmVzc0RldGFpbHMoXHJcbiAgICAgICAgICAgICAgICBuY0FjY2VzcyxcclxuICAgICAgICAgICAgICAgIG5yQWNjZXNzLFxyXG4gICAgICAgICAgICAgICAgbWFwLFxyXG4gICAgICAgICAgICAgICAgY29scyxcclxuICAgICAgICAgICAgICAgIHJvd3NcclxuICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoZGV0YWlsc0FjY2Vzc1RpbGUub3BlblNpZGVzID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBY2Nlc3MgdGlsZSBvbmx5IGxlYWRzIHRvIG91ciBjYW5kaWRhdGUgKGl0J3MgYSBzdHViKVxyXG4gICAgICAgICAgICAgICAgd29yc3RBY2Nlc3NQZW5hbHR5RnJvbU5laWdoYm9ycyA9IE1hdGgubWF4KHdvcnN0QWNjZXNzUGVuYWx0eUZyb21OZWlnaGJvcnMsIDMwMDAwKTsgLy8gTWFzc2l2ZSBwZW5hbHR5XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpZiAoZGV0YWlsc0FjY2Vzc1RpbGUuaXNDaG9rZXBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICB3b3JzdEFjY2Vzc1BlbmFsdHlGcm9tTmVpZ2hib3JzID0gTWF0aC5tYXgod29yc3RBY2Nlc3NQZW5hbHR5RnJvbU5laWdoYm9ycywgNTAwKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBsaWZ0IGNhbmRpZGF0ZSBpcyBpbiB0aGUgbWlkZGxlIG9mIGEgcm9vbSwgbnVtQWN0dWFsQWNjZXNzUG9pbnRzIG1pZ2h0IGJlIGxvd1xyXG4gICAgICAgIC8vIGlmIGl0J3Mgc3Vycm91bmRlZCBieSBvdGhlciBUSUxFX1JPT01fRkxPT1Igb2YgdGhlICpzYW1lKiByb29tLlxyXG4gICAgICAgIC8vIGRldGFpbHNTZWxmLm9wZW5TaWRlcyBpcyBhIGJldHRlciBtZWFzdXJlIG9mIGl0cyBcImVtYmVkZG5lc3NcIiBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgLy8gVGhlIGNyaXRpY2FsIHBhcnQgaXMgdGhhdCBgd29yc3RBY2Nlc3NQZW5hbHR5RnJvbU5laWdoYm9yc2AgY2F0Y2hlcyBiYWQgKmV4dGVybmFsKiBhY2Nlc3MuXHJcbiAgICAgICAgaWYgKG51bUFjdHVhbEFjY2Vzc1BvaW50cyA9PT0gMCAmJiBkZXRhaWxzU2VsZi5vcGVuU2lkZXMgPCAyKSB7XHJcbiAgICAgICAgICAvLyBJZiBpdCBoYXMgbm8gZGlyZWN0IGNvcnJpZG9yL290aGVyIHJvb20gYWNjZXNzIEFORCBpcyBhbHNvIHZlcnkgY2xvc2VkIG9mZiBpdHNlbGZcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3VycmVudFNjb3JlIC09IHdvcnN0QWNjZXNzUGVuYWx0eUZyb21OZWlnaGJvcnM7XHJcblxyXG4gICAgICAgIGlmIChiZXN0U3BvdENhbmRpZGF0ZSA9PT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPiBiZXN0U3BvdENhbmRpZGF0ZS5zY29yZSkge1xyXG4gICAgICAgICAgYmVzdFNwb3RDYW5kaWRhdGUgPSB7XHJcbiAgICAgICAgICAgIHRpbGVYOiBjLFxyXG4gICAgICAgICAgICB0aWxlWTogcixcclxuICAgICAgICAgICAgc2NvcmU6IGN1cnJlbnRTY29yZSxcclxuICAgICAgICAgICAgZGVidWdfcm9vbTogcm9vbS5pZCxcclxuICAgICAgICAgICAgLy8gQWRkIG90aGVyIGRlYnVnIGZpZWxkcyBmcm9tIHByZXZpb3VzIHZlcnNpb24gaWYgbmVlZGVkXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGJlc3RTcG90Q2FuZGlkYXRlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgYCAgW01hcEdlbiBGaW5kTGlmdCBWM10gU2VsZWN0ZWQgYmVzdCBzcG90IElOIFJPT00gKCR7YmVzdFNwb3RDYW5kaWRhdGUuZGVidWdfcm9vbX0pIGF0IHRpbGUoJHtiZXN0U3BvdENhbmRpZGF0ZS50aWxlWH0sICR7YmVzdFNwb3RDYW5kaWRhdGUudGlsZVl9KS4gYCArXHJcbiAgICAgICAgYFNjb3JlOiAke2Jlc3RTcG90Q2FuZGlkYXRlLnNjb3JlLnRvRml4ZWQoMCl9LmBcclxuICAgICk7XHJcbiAgICByZXR1cm4geyB0aWxlWDogYmVzdFNwb3RDYW5kaWRhdGUudGlsZVgsIHRpbGVZOiBiZXN0U3BvdENhbmRpZGF0ZS50aWxlWSB9O1xyXG4gIH1cclxuXHJcbiAgY29uc29sZS53YXJuKFxyXG4gICAgJ1tNYXBHZW4gRmluZExpZnQgVjNdIE5vIHN1aXRhYmxlIElOLVJPT00gbG9jYXRpb24gZm91bmQgd2l0aCBpbnRlcm5hbCB0aWxlcy4gRmFsbGJhY2sgd2lsbCBiZSB1c2VkIGJ5IGNhbGxlci4nXHJcbiAgKTtcclxuICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuLy8gLS0tIEhlbHBlcjogRm9yY2UgQ29ubmVjdGlvbiAtLS1cclxuZnVuY3Rpb24gX2ZvcmNlQ29ubmVjdGlvblRvUG9pbnQobWFwLCB0YXJnZXRYLCB0YXJnZXRZLCBjb2xzLCByb3dzKSB7XHJcbiAgY29uc29sZS5sb2coXHJcbiAgICBgICBbTWFwR2VuIENvbm5lY3RdIFRyeWluZyB0byBjb25uZWN0IHdhbGwgYXQgdGlsZSgke3RhcmdldFh9LCAke3RhcmdldFl9KSB0byB3YWxrYWJsZSBhcmVhLi4uYFxyXG4gICk7XHJcbiAgY29uc3QgZGlyZWN0aW9ucyA9IFtcclxuICAgIFswLCAtMV0sXHJcbiAgICBbMCwgMV0sXHJcbiAgICBbLTEsIDBdLFxyXG4gICAgWzEsIDBdLFxyXG4gIF07XHJcbiAgbGV0IGlzQWRqYWNlbnRUb1dhbGthYmxlID0gZmFsc2U7XHJcbiAgbGV0IGFkamFjZW50V2Fsa2FibGVDb29yZCA9IG51bGw7XHJcblxyXG4gIC8vIDEuIENoZWNrIGlmIGFscmVhZHkgYWRqYWNlbnQgdG8gYSB3YWxrYWJsZSB0aWxlXHJcbiAgZm9yIChjb25zdCBbZHgsIGR5XSBvZiBkaXJlY3Rpb25zKSB7XHJcbiAgICBjb25zdCBueCA9IHRhcmdldFggKyBkeDtcclxuICAgIGNvbnN0IG55ID0gdGFyZ2V0WSArIGR5O1xyXG4gICAgY29uc3QgbmVpZ2hib3JUaWxlID0gbWFwW255XT8uW254XTtcclxuICAgIGlmIChcclxuICAgICAgbmVpZ2hib3JUaWxlID09PSBUSUxFX0NPUlJJRE9SIHx8XHJcbiAgICAgIG5laWdoYm9yVGlsZSA9PT0gVElMRV9ST09NX0ZMT09SIHx8XHJcbiAgICAgIG5laWdoYm9yVGlsZSA9PT0gVElMRV9MSUZUXHJcbiAgICApIHtcclxuICAgICAgaXNBZGphY2VudFRvV2Fsa2FibGUgPSB0cnVlO1xyXG4gICAgICBhZGphY2VudFdhbGthYmxlQ29vcmQgPSB7IHg6IG54LCB5OiBueSB9O1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChpc0FkamFjZW50VG9XYWxrYWJsZSkge1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIGAgIFtNYXBHZW4gQ29ubmVjdF0gVGFyZ2V0KCR7dGFyZ2V0WH0sICR7dGFyZ2V0WX0pIGlzIGFkamFjZW50IHRvIHdhbGthYmxlIGF0ICgke2FkamFjZW50V2Fsa2FibGVDb29yZC54fSwgJHthZGphY2VudFdhbGthYmxlQ29vcmQueX0pLiBTZXR0aW5nIHRhcmdldCB0byBDb3JyaWRvci5gXHJcbiAgICApO1xyXG4gICAgLy8gTWFrZSB0aGUgdGFyZ2V0IHRpbGUgaXRzZWxmIHdhbGthYmxlIChDb3JyaWRvciBpcyBhIHNhZmUgYmV0KVxyXG4gICAgbWFwW3RhcmdldFldW3RhcmdldFhdID0gVElMRV9DT1JSSURPUjtcclxuICAgIHJldHVybiB0cnVlOyAvLyBDb25uZWN0aW9uIGlzIHRyaXZpYWxcclxuICB9XHJcblxyXG4gIC8vIDIuIElmIG5vdCBhZGphY2VudCwgZmluZCB0aGUgbmVhcmVzdCB3YWxrYWJsZSB0aWxlIChDb3JyaWRvciBvciBGbG9vcikgdXNpbmcgQkZTXHJcbiAgY29uc29sZS5sb2coXHJcbiAgICBgICBbTWFwR2VuIENvbm5lY3RdIFRhcmdldCBub3QgYWRqYWNlbnQuIFNlYXJjaGluZyBuZWFyZXN0IHdhbGthYmxlIChDb3JyaWRvci9GbG9vcikgdmlhIEJGUy4uLmBcclxuICApO1xyXG4gIGNvbnN0IHF1ZXVlID0gW1t0YXJnZXRYLCB0YXJnZXRZLCAwXV07IC8vIHgsIHksIGRpc3RhbmNlXHJcbiAgY29uc3QgdmlzaXRlZCA9IG5ldyBTZXQoW2Ake3RhcmdldFh9LCR7dGFyZ2V0WX1gXSk7XHJcbiAgY29uc3QgYmZzUGF0aGFibGUgPSBbVElMRV9XQUxMLCBUSUxFX0NPUlJJRE9SLCBUSUxFX1JPT01fRkxPT1IsIFRJTEVfTElGVF07IC8vIENhbiBwYXRoIHRocm91Z2ggYW55dGhpbmdcclxuICBjb25zdCB0YXJnZXRXYWxrYWJsZSA9IFtUSUxFX0NPUlJJRE9SLCBUSUxFX1JPT01fRkxPT1JdO1xyXG4gIGxldCBjbG9zZXN0V2Fsa2FibGUgPSBudWxsO1xyXG4gIGxldCBtaW5Gb3VuZERpc3QgPSBJbmZpbml0eTtcclxuXHJcbiAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgIGNvbnN0IFtjdXJyWCwgY3VyclksIGRpc3RdID0gcXVldWUuc2hpZnQoKTtcclxuXHJcbiAgICAvLyBJZiB3ZSBhbHJlYWR5IGZvdW5kICphKiB3YWxrYWJsZSB0aWxlLCBkb24ndCBleHBsb3JlIHBhdGhzIGxvbmdlciB0aGFuIHRoYXRcclxuICAgIGlmIChkaXN0ID49IG1pbkZvdW5kRGlzdCkgY29udGludWU7XHJcblxyXG4gICAgZm9yIChjb25zdCBbZHgsIGR5XSBvZiBkaXJlY3Rpb25zKSB7XHJcbiAgICAgIGNvbnN0IG5leHRYID0gY3VyclggKyBkeDtcclxuICAgICAgY29uc3QgbmV4dFkgPSBjdXJyWSArIGR5O1xyXG4gICAgICBjb25zdCBrZXkgPSBgJHtuZXh0WH0sJHtuZXh0WX1gO1xyXG5cclxuICAgICAgaWYgKG5leHRYID49IDAgJiYgbmV4dFggPCBjb2xzICYmIG5leHRZID49IDAgJiYgbmV4dFkgPCByb3dzICYmICF2aXNpdGVkLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgY29uc3QgdGlsZVZhbHVlID0gbWFwW25leHRZXT8uW25leHRYXTtcclxuICAgICAgICB2aXNpdGVkLmFkZChrZXkpO1xyXG5cclxuICAgICAgICAvLyBGb3VuZCBhIHRhcmdldCB3YWxrYWJsZSB0aWxlP1xyXG4gICAgICAgIGlmICh0YXJnZXRXYWxrYWJsZS5pbmNsdWRlcyh0aWxlVmFsdWUpKSB7XHJcbiAgICAgICAgICBpZiAoZGlzdCArIDEgPCBtaW5Gb3VuZERpc3QpIHtcclxuICAgICAgICAgICAgLy8gRm91bmQgYSBjbG9zZXIgb25lXHJcbiAgICAgICAgICAgIG1pbkZvdW5kRGlzdCA9IGRpc3QgKyAxO1xyXG4gICAgICAgICAgICBjbG9zZXN0V2Fsa2FibGUgPSB7IHg6IG5leHRYLCB5OiBuZXh0WSwgZGlzdDogbWluRm91bmREaXN0IH07XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgIGAgICAgW0JGU10gRm91bmQgcG90ZW50aWFsIHRhcmdldCBhdCAoJHtuZXh0WH0sICR7bmV4dFl9KSwgZGlzdCAke21pbkZvdW5kRGlzdH1gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBEb24ndCBwdXNoIHRoaXMgdGFyZ2V0IG9udG8gcXVldWUsIHdlIHN0b3Agc2VhcmNoaW5nIGZyb20gaGVyZVxyXG4gICAgICAgIH0gZWxzZSBpZiAoYmZzUGF0aGFibGUuaW5jbHVkZXModGlsZVZhbHVlKSkge1xyXG4gICAgICAgICAgLy8gQ2FuIGNvbnRpbnVlIHNlYXJjaGluZyBmcm9tIHRoaXMgbmVpZ2hib3IgaWYgaXQncyBwYXRoYWJsZSBhbmQgY2xvc2VyIHRoYW4gY3VycmVudCBiZXN0XHJcbiAgICAgICAgICBpZiAoZGlzdCArIDEgPCBtaW5Gb3VuZERpc3QpIHtcclxuICAgICAgICAgICAgcXVldWUucHVzaChbbmV4dFgsIG5leHRZLCBkaXN0ICsgMV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gMy4gQ2FydmUgcGF0aCBpZiBhIHdhbGthYmxlIHRpbGUgd2FzIGZvdW5kXHJcbiAgaWYgKGNsb3Nlc3RXYWxrYWJsZSkge1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIGAgIFtNYXBHZW4gQ29ubmVjdF0gRm91bmQgY2xvc2VzdCB3YWxrYWJsZSBhdCB0aWxlKCR7Y2xvc2VzdFdhbGthYmxlLnh9LCAke2Nsb3Nlc3RXYWxrYWJsZS55fSkgZGlzdGFuY2UgJHtjbG9zZXN0V2Fsa2FibGUuZGlzdH0uIENhcnZpbmcgcGF0aC4uLmBcclxuICAgICk7XHJcbiAgICAvLyBTaW1wbGUgTC1zaGFwZWQgY2FydmluZyBmcm9tIHRhcmdldCB0byBjbG9zZXN0IHdhbGthYmxlXHJcbiAgICBfY2FydmVIb3Jpem9udGFsQ29ycmlkb3IobWFwLCB0YXJnZXRZLCB0YXJnZXRYLCBjbG9zZXN0V2Fsa2FibGUueCwgY29scywgcm93cyk7XHJcbiAgICBfY2FydmVWZXJ0aWNhbENvcnJpZG9yKG1hcCwgY2xvc2VzdFdhbGthYmxlLngsIHRhcmdldFksIGNsb3Nlc3RXYWxrYWJsZS55LCBjb2xzLCByb3dzKTtcclxuICAgIGNvbnNvbGUubG9nKGAgIFtNYXBHZW4gQ29ubmVjdF0gQ2FydmVkIHBhdGggYXR0ZW1wdCBmaW5pc2hlZC5gKTtcclxuXHJcbiAgICAvLyBWZXJpZnkgdGhlIHRhcmdldCB0aWxlIGl0c2VsZiBiZWNhbWUgd2Fsa2FibGUgKHNob3VsZCBiZSBjb3JyaWRvciBub3cpXHJcbiAgICBpZiAobWFwW3RhcmdldFldW3RhcmdldFhdID09PSBUSUxFX0NPUlJJRE9SIHx8IG1hcFt0YXJnZXRZXVt0YXJnZXRYXSA9PT0gVElMRV9ST09NX0ZMT09SKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGAgICAgW1ZlcmlmeV0gVGFyZ2V0IHRpbGUgKCR7dGFyZ2V0WH0sJHt0YXJnZXRZfSkgaXMgbm93IHdhbGthYmxlIChUeXBlOiAke21hcFt0YXJnZXRZXVt0YXJnZXRYXX0pYFxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICBgICBbTWFwR2VuIENvbm5lY3RdIENhcnZpbmcgZG9uZSwgYnV0IHRhcmdldCB0aWxlKCR7dGFyZ2V0WH0sICR7dGFyZ2V0WX0pIGlzIHN0aWxsIFdBTEwgKFZhbHVlOiAke21hcFt0YXJnZXRZXVt0YXJnZXRYXX0pLiBTZXR0aW5nIG1hbnVhbGx5LmBcclxuICAgICAgKTtcclxuICAgICAgLy8gRm9yY2UgaXQganVzdCBpbiBjYXNlIGNhcnZpbmcgbG9naWMgaGFkIGFuIGVkZ2UgY2FzZVxyXG4gICAgICBtYXBbdGFyZ2V0WV1bdGFyZ2V0WF0gPSBUSUxFX0NPUlJJRE9SO1xyXG4gICAgICByZXR1cm4gdHJ1ZTsgLy8gQXNzdW1lIHN1Y2Nlc3MgaWYgd2UgZm91bmQgYSBwYXRoIGFuZCBmb3JjZWQgdGhlIHRpbGVcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5lcnJvcihcclxuICAgICAgYCAgW01hcEdlbiBDb25uZWN0XSBGQUlMRUQgdG8gZmluZCBBTlkgbmVhcmJ5IHdhbGthYmxlIChDb3JyaWRvci9GbG9vcikgdmlhIEJGUyBmcm9tIHdhbGwgYXQgdGlsZSgke3RhcmdldFh9LCAke3RhcmdldFl9KS4gQ2Fubm90IGNvbm5lY3QuYFxyXG4gICAgKTtcclxuICAgIHJldHVybiBmYWxzZTsgLy8gQ29ubmVjdGlvbiBmYWlsZWRcclxuICB9XHJcbn1cclxuXHJcbi8vIC0tLSBIZWxwZXI6IENoZWNrIExpZnQgUmVhY2hhYmlsaXR5IC0tLVxyXG5mdW5jdGlvbiBfaXNMaWZ0UmVhY2hhYmxlKG1hcCwgbGlmdFBvc2l0aW9uLCBjb2xzLCByb3dzKSB7XHJcbiAgaWYgKCFsaWZ0UG9zaXRpb24pIHJldHVybiBmYWxzZTtcclxuICBjb25zdCB7IHRpbGVYLCB0aWxlWSB9ID0gbGlmdFBvc2l0aW9uO1xyXG4gIGlmIChcclxuICAgIHRpbGVZIDwgMCB8fFxyXG4gICAgdGlsZVkgPj0gcm93cyB8fFxyXG4gICAgdGlsZVggPCAwIHx8XHJcbiAgICB0aWxlWCA+PSBjb2xzIHx8XHJcbiAgICBtYXBbdGlsZVldPy5bdGlsZVhdICE9PSBUSUxFX0xJRlRcclxuICApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgIGBbTWFwVmFsaWRhdGlvbiBSZWFjaGFiaWxpdHldIEludmFsaWQgbGlmdCBwb3NpdGlvbiBwcm92aWRlZDogKCR7dGlsZVh9LCAke3RpbGVZfSlgXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gVXNlIEJGUyB1dGlsaXR5IGZ1bmN0aW9uIHRvIGNoZWNrIHJlYWNoYWJpbGl0eSBmcm9tIHRoZSBsaWZ0IHRpbGVcclxuICAvLyBXZSBuZWVkIHRvIGtub3cgaWYgdGhlIGxpZnQgY2FuIHJlYWNoICphbnkqIFRJTEVfQ09SUklET1Igb3IgVElMRV9ST09NX0ZMT09SXHJcbiAgY29uc3Qgd2Fsa2FibGVGb3JMaWZ0U2VhcmNoID0gW1RJTEVfQ09SUklET1IsIFRJTEVfUk9PTV9GTE9PUiwgVElMRV9MSUZUXTsgLy8gQkZTIGNhbiB0cmF2ZXJzZSB0aGVzZVxyXG4gIGNvbnN0IHRhcmdldFRpbGVzID0gW1RJTEVfQ09SUklET1IsIFRJTEVfUk9PTV9GTE9PUl07IC8vIFN1Y2Nlc3MgaWYgQkZTIGZpbmRzIG9uZSBvZiB0aGVzZVxyXG5cclxuICBjb25zdCB7IHJlYWNoYWJsZSB9ID0gcGVyZm9ybUJGUyhcclxuICAgIG1hcCxcclxuICAgIHRpbGVYLFxyXG4gICAgdGlsZVksXHJcbiAgICBjb2xzLFxyXG4gICAgcm93cyxcclxuICAgIHdhbGthYmxlRm9yTGlmdFNlYXJjaCxcclxuICAgIHRhcmdldFRpbGVzXHJcbiAgKTtcclxuXHJcbiAgaWYgKCFyZWFjaGFibGUpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgIGBbTWFwVmFsaWRhdGlvbiBSZWFjaGFiaWxpdHldIEZBSUxFRC4gTGlmdCBhdCB0aWxlKCR7dGlsZVh9LCAke3RpbGVZfSkgaXMgaXNvbGF0ZWQgZnJvbSBjb3JyaWRvcnMvcm9vbXMuYFxyXG4gICAgKTtcclxuICB9XHJcbiAgcmV0dXJuIHJlYWNoYWJsZTtcclxufVxyXG5cclxuLy8gLS0tIEhlbHBlcjogRW5zdXJlIEJvcmRlcnMgLS0tXHJcbmZ1bmN0aW9uIF9lbnN1cmVNYXBCb3JkZXJzKG1hcCwgY29scywgcm93cykge1xyXG4gIGNvbnNvbGUubG9nKCcgIFtNYXBHZW5dIEVuc3VyaW5nIG1hcCBib3JkZXJzIGFyZSB3YWxscy4nKTtcclxuICAvLyBUb3AgYW5kIEJvdHRvbSBib3JkZXJzXHJcbiAgZm9yIChsZXQgYyA9IDA7IGMgPCBjb2xzOyBjKyspIHtcclxuICAgIGlmIChtYXBbMF0/LltjXSAhPT0gdW5kZWZpbmVkKSBtYXBbMF1bY10gPSBUSUxFX1dBTEw7XHJcbiAgICBpZiAobWFwW3Jvd3MgLSAxXT8uW2NdICE9PSB1bmRlZmluZWQpIG1hcFtyb3dzIC0gMV1bY10gPSBUSUxFX1dBTEw7XHJcbiAgfVxyXG4gIC8vIExlZnQgYW5kIFJpZ2h0IGJvcmRlcnNcclxuICBmb3IgKGxldCByID0gMDsgciA8IHJvd3M7IHIrKykge1xyXG4gICAgaWYgKG1hcFtyXT8uWzBdICE9PSB1bmRlZmluZWQpIG1hcFtyXVswXSA9IFRJTEVfV0FMTDtcclxuICAgIGlmIChtYXBbcl0/Lltjb2xzIC0gMV0gIT09IHVuZGVmaW5lZCkgbWFwW3JdW2NvbHMgLSAxXSA9IFRJTEVfV0FMTDtcclxuICB9XHJcbn1cclxuXHJcbi8vIC0tLSBEZWJ1ZyBIZWxwZXIgLS0tXHJcbi8vIChPcHRpb25hbCwgdW5jb21tZW50IHRoZSBjYWxsIGluIGdlbmVyYXRlTGV2ZWxEYXRhIHRvIHVzZSB3aGVuIGRlYnVnZ2luZyByZWFjaGFiaWxpdHkpXHJcbmZ1bmN0aW9uIGxvZ01hcEdyaWRGb3JEZWJ1ZyhtYXAsIGNvbHMsIHJvd3MpIHtcclxuICBjb25zb2xlLmxvZygnLS0tIERFQlVHIE1BUCBHUklEIC0tLScpO1xyXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgcm93czsgeSsrKSB7XHJcbiAgICBjb25zdCByb3dTdHJpbmcgPSBtYXBbeV1cclxuICAgICAgLm1hcCgodGlsZSkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAodGlsZSkge1xyXG4gICAgICAgICAgY2FzZSBUSUxFX1dBTEw6XHJcbiAgICAgICAgICAgIHJldHVybiAnIyc7XHJcbiAgICAgICAgICBjYXNlIFRJTEVfQ09SUklET1I6XHJcbiAgICAgICAgICAgIHJldHVybiAnLic7XHJcbiAgICAgICAgICBjYXNlIFRJTEVfUk9PTV9GTE9PUjpcclxuICAgICAgICAgICAgcmV0dXJuICcgJztcclxuICAgICAgICAgIGNhc2UgVElMRV9MSUZUOlxyXG4gICAgICAgICAgICByZXR1cm4gJ0wnO1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuICc/JztcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5qb2luKCcnKTtcclxuICAgIGNvbnNvbGUubG9nKHJvd1N0cmluZyk7XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKCctLS0gRU5EIERFQlVHIE1BUCBHUklEIC0tLScpO1xyXG59XHJcbiIsIi8vIHNyYy9tYXAvUHJvY2VkdXJhbE1hcC5qc1xyXG5pbXBvcnQgeyBCb29rIH0gZnJvbSAnLi9Cb29rLmpzJztcclxuaW1wb3J0IHsgTWFwUmVuZGVyZXIgfSBmcm9tICcuL01hcFJlbmRlcmVyLmpzJztcclxuaW1wb3J0IHsgcmFuZG9tSW50IH0gZnJvbSAnLi4vdXRpbHMvbWFwLmpzJzsgLy8g0KPQsdC10LTQuNGC0LXRgdGMLCDRh9GC0L4g0Y3RgtC+0YIg0YTQsNC50Lsg0Lgg0YTRg9C90LrRhtC40Y8g0YHRg9GJ0LXRgdGC0LLRg9GO0YJcclxuaW1wb3J0IHsgZ2VuZXJhdGVMZXZlbERhdGEgfSBmcm9tICcuL01hcEdlbi5qcyc7XHJcbmltcG9ydCB7XHJcbiAgVElMRV9XQUxMLFxyXG4gIFRJTEVfQ09SUklET1IsXHJcbiAgVElMRV9ST09NX0ZMT09SLFxyXG4gIFRJTEVfTElGVCxcclxuICBMSUZUX0lOVEVSQUNUSU9OX1JBRElVU19NVUxUSVBMSUVSLFxyXG4gIC8vIEdZTV9DSEFOQ0VfT05fRklSU1RfRkxPT1IsIC8vINCV0YHQu9C4INC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyDQsiBNYXBHZW4uanNcclxufSBmcm9tICcuLi91dGlscy9jb25zdGFudHMuanMnO1xyXG5cclxuY29uc3QgREVCVUdfRkxPT1IgPSAzOyAvLyDQo9GB0YLQsNC90L7QstC40YLQtSDQvdCwINC90L7QvNC10YAg0Y3RgtCw0LbQsCDQtNC70Y8g0L7RgtC70LDQtNC60Lgg0LjQu9C4IG51bGwvMCDQtNC70Y8g0L7RgtC60LvRjtGH0LXQvdC40Y9cclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9jZWR1cmFsTWFwIHtcclxuICBjb25zdHJ1Y3RvcihjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBmbG9vck51bWJlciwgbWluRmxvb3IsIG1heEZsb29yKSB7XHJcbiAgICB0aGlzLnRpbGVTaXplID0gMzI7XHJcbiAgICB0aGlzLmNvbHMgPSA0MDtcclxuICAgIHRoaXMucm93cyA9IDMwO1xyXG4gICAgdGhpcy53aWR0aCA9IHRoaXMuY29scyAqIHRoaXMudGlsZVNpemU7XHJcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMucm93cyAqIHRoaXMudGlsZVNpemU7XHJcbiAgICB0aGlzLm9mZnNldFggPSAwO1xyXG4gICAgdGhpcy5vZmZzZXRZID0gMDtcclxuXHJcbiAgICB0aGlzLmZsb29yTnVtYmVyID0gZmxvb3JOdW1iZXI7XHJcbiAgICB0aGlzLm1pbkZsb29yID0gbWluRmxvb3I7XHJcbiAgICB0aGlzLm1heEZsb29yID0gbWF4Rmxvb3I7XHJcblxyXG4gICAgdGhpcy5tYXAgPSBudWxsO1xyXG4gICAgdGhpcy5yb29tcyA9IFtdO1xyXG4gICAgdGhpcy5ib29rcyA9IFtdO1xyXG4gICAgdGhpcy5saWZ0UG9zaXRpb24gPSBudWxsOyAvLyB7eCwgeSwgdGlsZVgsIHRpbGVZfVxyXG5cclxuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgTWFwUmVuZGVyZXIodGhpcy50aWxlU2l6ZSk7XHJcblxyXG4gICAgY29uc3QgZ2VuZXJhdGlvblBhcmFtcyA9IHtcclxuICAgICAgbWluUm9vbVNpemU6IDUsXHJcbiAgICAgIG1heFJvb21TaXplOiAxMCxcclxuICAgICAgY29ycmlkb3JUaGlja25lc3M6IDEsXHJcbiAgICAgIG51bVJvb21zOiAxMixcclxuICAgICAgbWF4Um9vbUF0dGVtcHRzOiAyMDAsXHJcbiAgICAgIGJvb2tzUGVyTWFwOiA1LCAvLyDQmtC+0LvQuNGH0LXRgdGC0LLQviDQutC90LjQsyDQvdCwINC60LDRgNGC0YNcclxuICAgICAgcm9vbVR5cGVXZWlnaHRzOiB7XHJcbiAgICAgICAgLy8g0JLQtdGB0LAg0LTQu9GPINGC0LjQv9C+0LIg0LrQvtC80L3QsNGCXHJcbiAgICAgICAgY2xhc3Nyb29tOiA1MCxcclxuICAgICAgICBvZmZpY2U6IDI1LFxyXG4gICAgICAgIGxpYnJhcnk6IDE1LFxyXG4gICAgICAgIGxhYjogMTAsXHJcbiAgICAgICAgc3RvcmFnZTogNSxcclxuICAgICAgICB1dGlsaXR5OiAxMCxcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZ2VuZXJhdGlvbkNvbmZpZyA9IHtcclxuICAgICAgICBjb2xzOiB0aGlzLmNvbHMsXHJcbiAgICAgICAgcm93czogdGhpcy5yb3dzLFxyXG4gICAgICAgIGZsb29yTnVtYmVyOiB0aGlzLmZsb29yTnVtYmVyLFxyXG4gICAgICAgIG1pbkZsb29yOiB0aGlzLm1pbkZsb29yLFxyXG4gICAgICAgIG1heEZsb29yOiB0aGlzLm1heEZsb29yLFxyXG4gICAgICAgIHRpbGVTaXplOiB0aGlzLnRpbGVTaXplLFxyXG4gICAgICAgIGdlbmVyYXRpb25QYXJhbXM6IGdlbmVyYXRpb25QYXJhbXMsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCB7IG1hcCwgcm9vbXMsIGxpZnRQb3NpdGlvbiB9ID0gZ2VuZXJhdGVMZXZlbERhdGEoZ2VuZXJhdGlvbkNvbmZpZyk7XHJcblxyXG4gICAgICB0aGlzLm1hcCA9IG1hcDtcclxuICAgICAgdGhpcy5yb29tcyA9IHJvb21zO1xyXG4gICAgICB0aGlzLmxpZnRQb3NpdGlvbiA9IGxpZnRQb3NpdGlvbjsgLy8g0KHQvtC00LXRgNC20LjRgiB7eCwgeSwgdGlsZVgsIHRpbGVZfVxyXG5cclxuICAgICAgdGhpcy5yZW5kZXJlci5yZXNldENvbG9yQ2FjaGUoKTtcclxuICAgICAgdGhpcy5wbGFjZUJvb2tzUmVsaWFibHkoZ2VuZXJhdGlvblBhcmFtcy5ib29rc1Blck1hcCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5mbG9vck51bWJlciA9PT0gREVCVUdfRkxPT1IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGBbUHJvY01hcCBGJHt0aGlzLmZsb29yTnVtYmVyfV0gSW5pdCBjb21wbGV0ZS4gTGlmdCBhdCB0aWxlICgke2xpZnRQb3NpdGlvbj8udGlsZVh9LCAke2xpZnRQb3NpdGlvbj8udGlsZVl9KS5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyB0aGlzLmxvZ01hcEdyaWQoKTsgLy8g0JzQvtC20L3QviDRgNCw0YHQutC+0LzQvNC10L3RgtC40YDQvtCy0LDRgtGMINC00LvRjyDQstGL0LLQvtC00LAg0YHQtdGC0LrQuCDRgdGA0LDQt9GDINC/0L7RgdC70LUg0LPQtdC90LXRgNCw0YbQuNC4XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9XSBDUklUSUNBTCBFUlJPUiBkdXJpbmcgbWFwIGdlbmVyYXRpb24gb3Igc2V0dXA6YCxcclxuICAgICAgICBlcnJvclxyXG4gICAgICApO1xyXG4gICAgICB0aHJvdyBlcnJvcjsgLy8g0J/QtdGA0LXQsdGA0LDRgdGL0LLQsNC10Lwg0L7RiNC40LHQutGDLCDRh9GC0L7QsdGLIEdhbWUuanMg0LzQvtCzINC10LUg0L7QsdGA0LDQsdC+0YLQsNGC0YxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBsYWNlQm9va3NSZWxpYWJseShib29rc1Blck1hcCkge1xyXG4gICAgdGhpcy5ib29rcyA9IFtdOyAvLyDQntGH0LjRidCw0LXQvCDQv9GA0LXQtNGL0LTRg9GJ0LjQtSDQutC90LjQs9C4XHJcbiAgICBjb25zdCBwb3RlbnRpYWxMb2NhdGlvbnMgPSBbXTtcclxuICAgIGNvbnN0IHBsYWNlZENvb3JkcyA9IG5ldyBTZXQoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGBbUHJvY01hcCBGJHt0aGlzLmZsb29yTnVtYmVyfV0gUGxhY2luZyB1cCB0byAke2Jvb2tzUGVyTWFwfSBib29rcy4uLmApO1xyXG5cclxuICAgIGZvciAobGV0IHIgPSAwOyByIDwgdGhpcy5yb3dzOyByKyspIHtcclxuICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmNvbHM7IGMrKykge1xyXG4gICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IHRoaXMubWFwW3JdPy5bY107XHJcbiAgICAgICAgY29uc3QgaXNMaWZ0VGlsZSA9XHJcbiAgICAgICAgICB0aGlzLmxpZnRQb3NpdGlvbiAmJiByID09PSB0aGlzLmxpZnRQb3NpdGlvbi50aWxlWSAmJiBjID09PSB0aGlzLmxpZnRQb3NpdGlvbi50aWxlWDtcclxuICAgICAgICAvLyDQmtC90LjQs9C4INC80L7QttC90L4g0YDQsNC30LzQtdGJ0LDRgtGMINCyINC60L7RgNC40LTQvtGA0LDRhSDQuNC70Lgg0L3QsCDQv9C+0LvRgyDQutC+0LzQvdCw0YIsINC90L4g0L3QtSDQvdCwINC60LvQtdGC0LrQtSDQu9C40YTRgtCwXHJcbiAgICAgICAgaWYgKCh0aWxlVmFsdWUgPT09IFRJTEVfQ09SUklET1IgfHwgdGlsZVZhbHVlID09PSBUSUxFX1JPT01fRkxPT1IpICYmICFpc0xpZnRUaWxlKSB7XHJcbiAgICAgICAgICBwb3RlbnRpYWxMb2NhdGlvbnMucHVzaCh7IHIsIGMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGJvb2tzUGxhY2VkID0gMDtcclxuICAgIHdoaWxlIChib29rc1BsYWNlZCA8IGJvb2tzUGVyTWFwICYmIHBvdGVudGlhbExvY2F0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG90ZW50aWFsTG9jYXRpb25zLmxlbmd0aCk7XHJcbiAgICAgIGNvbnN0IHsgciwgYyB9ID0gcG90ZW50aWFsTG9jYXRpb25zLnNwbGljZShyYW5kb21JbmRleCwgMSlbMF07IC8vINCj0LTQsNC70Y/QtdC8INCy0YvQsdGA0LDQvdC90YPRjiDQu9C+0LrQsNGG0LjRjlxyXG4gICAgICBjb25zdCBjb29yZEtleSA9IGAke2N9LCR7cn1gO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgICh0aGlzLm1hcFtyXT8uW2NdID09PSBUSUxFX0NPUlJJRE9SIHx8IHRoaXMubWFwW3JdPy5bY10gPT09IFRJTEVfUk9PTV9GTE9PUikgJiZcclxuICAgICAgICAhcGxhY2VkQ29vcmRzLmhhcyhjb29yZEtleSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgY29uc3QgYm9va1dvcmxkWCA9IChjICsgMC41KSAqIHRoaXMudGlsZVNpemU7XHJcbiAgICAgICAgY29uc3QgYm9va1dvcmxkWSA9IChyICsgMC41KSAqIHRoaXMudGlsZVNpemU7XHJcbiAgICAgICAgY29uc3QgYm9va0lkID0gYGJvb2tfZiR7dGhpcy5mbG9vck51bWJlcn1fJHtib29rc1BsYWNlZCArIDF9YDsgLy8g0KPQvdC40LrQsNC70YzQvdGL0LkgSURcclxuICAgICAgICB0aGlzLmJvb2tzLnB1c2gobmV3IEJvb2soYm9va1dvcmxkWCwgYm9va1dvcmxkWSwgYm9va0lkLCB0aGlzLnRpbGVTaXplKSk7XHJcbiAgICAgICAgcGxhY2VkQ29vcmRzLmFkZChjb29yZEtleSk7XHJcbiAgICAgICAgYm9va3NQbGFjZWQrKztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gaWYgKGJvb2tzUGxhY2VkIDwgYm9va3NQZXJNYXApIGNvbnNvbGUud2FybihgW1Byb2NNYXAgRiR7dGhpcy5mbG9vck51bWJlcn1dIFBsYWNlZCBvbmx5ICR7Ym9va3NQbGFjZWR9LyR7Ym9va3NQZXJNYXB9IGJvb2tzLmApO1xyXG4gIH1cclxuXHJcbiAgaXNXYWxrYWJsZSh3b3JsZFgsIHdvcmxkWSkge1xyXG4gICAgaWYgKCF0aGlzLm1hcCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgY29uc3QgdGlsZVggPSBNYXRoLmZsb29yKHdvcmxkWCAvIHRoaXMudGlsZVNpemUpO1xyXG4gICAgY29uc3QgdGlsZVkgPSBNYXRoLmZsb29yKHdvcmxkWSAvIHRoaXMudGlsZVNpemUpO1xyXG5cclxuICAgIGlmICh0aWxlWCA8IDAgfHwgdGlsZVggPj0gdGhpcy5jb2xzIHx8IHRpbGVZIDwgMCB8fCB0aWxlWSA+PSB0aGlzLnJvd3MpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlOyAvLyDQl9CwINC/0YDQtdC00LXQu9Cw0LzQuCDQutCw0YDRgtGLXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGlsZVZhbHVlID0gdGhpcy5tYXBbdGlsZVldPy5bdGlsZVhdO1xyXG4gICAgLy8g0JvQuNGE0YIg0YHRh9C40YLQsNC10YLRgdGPINC/0YDQvtGF0L7QtNC40LzRi9C8INC00LvRjyDQv9GA0L7QstC10YDQutC4INGB0YLQvtC70LrQvdC+0LLQtdC90LjQuSAo0L/QtdGA0YHQvtC90LDQtiDQvNC+0LbQtdGCINC90LAg0L3QtdCz0L4g0LfQsNC50YLQuClcclxuICAgIHJldHVybiB0aWxlVmFsdWUgPT09IFRJTEVfQ09SUklET1IgfHwgdGlsZVZhbHVlID09PSBUSUxFX1JPT01fRkxPT1IgfHwgdGlsZVZhbHVlID09PSBUSUxFX0xJRlQ7XHJcbiAgfVxyXG5cclxuICBmaW5kUmFuZG9tSW5pdGlhbFNwYXduUG9zaXRpb24oKSB7XHJcbiAgICBpZiAoIXRoaXMubWFwKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgY29uc3Qgc3VpdGFibGVUaWxlcyA9IFtdO1xyXG4gICAgLy8g0KHQvdCw0YfQsNC70LAg0LjRidC10Lwg0LHQvtC70LXQtSBcItC+0YLQutGA0YvRgtGL0LVcIiDQvNC10YHRgtCwXHJcbiAgICBmb3IgKGxldCByID0gMTsgciA8IHRoaXMucm93cyAtIDE7IHIrKykge1xyXG4gICAgICAvLyDQmNC30LHQtdCz0LDQtdC8INC60YDQsNC10LIg0LTQu9GPINC/0LXRgNCy0L7QuSDQv9C+0L/Ri9GC0LrQuFxyXG4gICAgICBmb3IgKGxldCBjID0gMTsgYyA8IHRoaXMuY29scyAtIDE7IGMrKykge1xyXG4gICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IHRoaXMubWFwW3JdPy5bY107XHJcbiAgICAgICAgY29uc3QgaXNMaWZ0ID1cclxuICAgICAgICAgIHRoaXMubGlmdFBvc2l0aW9uICYmIHIgPT09IHRoaXMubGlmdFBvc2l0aW9uLnRpbGVZICYmIGMgPT09IHRoaXMubGlmdFBvc2l0aW9uLnRpbGVYO1xyXG4gICAgICAgIGlmICgodGlsZVZhbHVlID09PSBUSUxFX0NPUlJJRE9SIHx8IHRpbGVWYWx1ZSA9PT0gVElMRV9ST09NX0ZMT09SKSAmJiAhaXNMaWZ0KSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5pc1RpbGVPcGVuRW5vdWdoKGMsIHIsIDMsIHRydWUpKSB7XHJcbiAgICAgICAgICAgIC8vINCi0YDQtdCx0YPQtdC8IDMg0L7RgtC60YDRi9GC0YvRhSDRgdGC0L7RgNC+0L3Riywg0LjQt9Cx0LXQs9Cw0LXQvCDRg9C30LrQuNGFINC/0YDQvtGF0L7QtNC+0LJcclxuICAgICAgICAgICAgc3VpdGFibGVUaWxlcy5wdXNoKHsgciwgYyB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vINCV0YHQu9C4INC90LUg0L3QsNGI0LvQuCDQuNC00LXQsNC70YzQvdGL0YUsINC40YnQtdC8INGBIDIg0L7RgtC60YDRi9GC0YvQvNC4INGB0YLQvtGA0L7QvdCw0LzQuFxyXG4gICAgaWYgKHN1aXRhYmxlVGlsZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgdGhpcy5yb3dzOyByKyspIHtcclxuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY29sczsgYysrKSB7XHJcbiAgICAgICAgICBjb25zdCB0aWxlVmFsdWUgPSB0aGlzLm1hcFtyXT8uW2NdO1xyXG4gICAgICAgICAgY29uc3QgaXNMaWZ0ID1cclxuICAgICAgICAgICAgdGhpcy5saWZ0UG9zaXRpb24gJiYgciA9PT0gdGhpcy5saWZ0UG9zaXRpb24udGlsZVkgJiYgYyA9PT0gdGhpcy5saWZ0UG9zaXRpb24udGlsZVg7XHJcbiAgICAgICAgICBpZiAoKHRpbGVWYWx1ZSA9PT0gVElMRV9DT1JSSURPUiB8fCB0aWxlVmFsdWUgPT09IFRJTEVfUk9PTV9GTE9PUikgJiYgIWlzTGlmdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1RpbGVPcGVuRW5vdWdoKGMsIHIsIDIsIHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgLy8gMiDQvtGC0LrRgNGL0YLRi9GFINGB0YLQvtGA0L7QvdGLLCDQuNC30LHQtdCz0LDQtdC8INGD0LfQutC40YUg0L/RgNC+0YXQvtC00L7QslxyXG4gICAgICAgICAgICAgIHN1aXRhYmxlVGlsZXMucHVzaCh7IHIsIGMgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vINCa0YDQsNC50L3QuNC5INGB0LvRg9GH0LDQuTog0LvRjtCx0LDRjyDQv9GA0L7RhdC+0LTQuNC80LDRjyDQvdC1INC70LjRhNGC0L7QstCw0Y8g0LrQu9C10YLQutCwXHJcbiAgICBpZiAoc3VpdGFibGVUaWxlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgLy8gY29uc29sZS53YXJuKGBbUHJvY01hcCBGJHt0aGlzLmZsb29yTnVtYmVyfSBSYW5kb21TcGF3bl0gTm8gaWRlYWwgc3BvdHMuIFVzaW5nIGFueSB2YWxpZCBub24tbGlmdCBmbG9vci9jb3JyaWRvci5gKTtcclxuICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCB0aGlzLnJvd3M7IHIrKykge1xyXG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jb2xzOyBjKyspIHtcclxuICAgICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IHRoaXMubWFwW3JdPy5bY107XHJcbiAgICAgICAgICBjb25zdCBpc0xpZnQgPVxyXG4gICAgICAgICAgICB0aGlzLmxpZnRQb3NpdGlvbiAmJiByID09PSB0aGlzLmxpZnRQb3NpdGlvbi50aWxlWSAmJiBjID09PSB0aGlzLmxpZnRQb3NpdGlvbi50aWxlWDtcclxuICAgICAgICAgIGlmICgodGlsZVZhbHVlID09PSBUSUxFX0NPUlJJRE9SIHx8IHRpbGVWYWx1ZSA9PT0gVElMRV9ST09NX0ZMT09SKSAmJiAhaXNMaWZ0KSB7XHJcbiAgICAgICAgICAgIHN1aXRhYmxlVGlsZXMucHVzaCh7IHIsIGMgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHN1aXRhYmxlVGlsZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9IFJhbmRvbVNwYXduXSBDUklUSUNBTDogTm8gc3VpdGFibGUgc3Bhd24gdGlsZXMgZm91bmQhYFxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgciwgYyB9ID0gc3VpdGFibGVUaWxlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzdWl0YWJsZVRpbGVzLmxlbmd0aCldO1xyXG4gICAgcmV0dXJuIHsgeDogKGMgKyAwLjUpICogdGhpcy50aWxlU2l6ZSwgeTogKHIgKyAwLjUpICogdGhpcy50aWxlU2l6ZSB9O1xyXG4gIH1cclxuXHJcbiAgaXNUaWxlT3BlbkVub3VnaCh0aWxlWCwgdGlsZVksIG1pbk9wZW5TaWRlcyA9IDIsIGF2b2lkT25lVGlsZVdpZGVQYXNzYWdlcyA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBpc0RlYnVnQ3VycmVudENhbGwgPSB0aGlzLmZsb29yTnVtYmVyID09PSBERUJVR19GTE9PUjsgLy8g0JvQvtCz0LjRgNGD0LXQvCDRgtC+0LvRjNC60L4g0LTQu9GPINC+0YLQu9Cw0LTQvtGH0L3QvtCz0L4g0Y3RgtCw0LbQsFxyXG4gICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9IGlzVGlsZU9wZW5Fbm91Z2hdIENoZWNraW5nICgke3RpbGVYfSwke3RpbGVZfSkgd2l0aCBtaW5PcGVuU2lkZXM9JHttaW5PcGVuU2lkZXN9LCBhdm9pZE5hcnJvdz0ke2F2b2lkT25lVGlsZVdpZGVQYXNzYWdlc31gKTtcclxuXHJcbiAgICBpZiAoIXRoaXMubWFwKSByZXR1cm4gZmFsc2U7XHJcbiAgICBsZXQgb3BlblNpZGVzQ291bnQgPSAwO1xyXG4gICAgLy8gZHgsIGR5LCBsYWJlbFxyXG4gICAgY29uc3QgZGlyZWN0aW9ucyA9IFtcclxuICAgICAgWzAsIC0xLCAnTiddLFxyXG4gICAgICBbMCwgMSwgJ1MnXSxcclxuICAgICAgWy0xLCAwLCAnVyddLFxyXG4gICAgICBbMSwgMCwgJ0UnXSxcclxuICAgIF07XHJcbiAgICBjb25zdCBpc09wZW5TaWRlID0gW2ZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlXTsgLy8gTiwgUywgVywgRVxyXG4gICAgLy8gbGV0IG5laWdoYm9yRGVidWcgPSB7fTsgLy8g0KDQsNGB0LrQvtC80LzQtdC90YLQuNGA0YPQudGC0LUg0LTQu9GPINC00LXRgtCw0LvRjNC90L7Qs9C+INC70L7Qs9CwINGB0L7RgdC10LTQtdC5XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IFtkeCwgZHksIGRpckxhYmVsXSA9IGRpcmVjdGlvbnNbaV07XHJcbiAgICAgIGNvbnN0IG5laWdoYm9yWCA9IHRpbGVYICsgZHg7XHJcbiAgICAgIGNvbnN0IG5laWdoYm9yWSA9IHRpbGVZICsgZHk7XHJcbiAgICAgIGxldCBuZWlnaGJvclRpbGVWYWx1ZSA9IFRJTEVfV0FMTDsgLy8g0J/QviDRg9C80L7Qu9GH0LDQvdC40Y4g0YHRgtC10L3QsCwg0LXRgdC70Lgg0LfQsCDQv9GA0LXQtNC10LvQsNC80LhcclxuXHJcbiAgICAgIGlmIChuZWlnaGJvclggPj0gMCAmJiBuZWlnaGJvclggPCB0aGlzLmNvbHMgJiYgbmVpZ2hib3JZID49IDAgJiYgbmVpZ2hib3JZIDwgdGhpcy5yb3dzKSB7XHJcbiAgICAgICAgbmVpZ2hib3JUaWxlVmFsdWUgPSB0aGlzLm1hcFtuZWlnaGJvclldPy5bbmVpZ2hib3JYXTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBuZWlnaGJvclRpbGVWYWx1ZSA9PT0gVElMRV9DT1JSSURPUiB8fFxyXG4gICAgICAgICAgbmVpZ2hib3JUaWxlVmFsdWUgPT09IFRJTEVfUk9PTV9GTE9PUiB8fFxyXG4gICAgICAgICAgbmVpZ2hib3JUaWxlVmFsdWUgPT09IFRJTEVfTElGVFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgb3BlblNpZGVzQ291bnQrKztcclxuICAgICAgICAgIGlzT3BlblNpZGVbaV0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBuZWlnaGJvckRlYnVnW2RpckxhYmVsXSA9IGAoJHtuZWlnaGJvclh9LCR7bmVpZ2hib3JZfSkgVHlwZToke25laWdoYm9yVGlsZVZhbHVlfSAoT3Blbjoke2lzT3BlblNpZGVbaV19KWA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2lzVGlsZU9wZW5Fbm91Z2hdIE5laWdoYm9ycyBmb3IgKCR7dGlsZVh9LCR7dGlsZVl9KTogJHtKU09OLnN0cmluZ2lmeShuZWlnaGJvckRlYnVnKX0gLT4gb3BlblNpZGVzQ291bnQ6ICR7b3BlblNpZGVzQ291bnR9YCk7XHJcblxyXG4gICAgaWYgKG9wZW5TaWRlc0NvdW50IDwgbWluT3BlblNpZGVzKSB7XHJcbiAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtpc1RpbGVPcGVuRW5vdWdoXSBSRVNVTFQgZm9yICgke3RpbGVYfSwke3RpbGVZfSk6IGZhbHNlIChvcGVuU2lkZXNDb3VudCAke29wZW5TaWRlc0NvdW50fSA8IG1pbk9wZW5TaWRlcyAke21pbk9wZW5TaWRlc30pYCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzICYmIG9wZW5TaWRlc0NvdW50ID09PSAyKSB7XHJcbiAgICAgIC8vINCf0YDQvtCy0LXRgNC60LAg0L3QsCDQv9GA0L7RhdC+0LQg0YjQuNGA0LjQvdC+0Lkg0LIgMSDQutC70LXRgtC60YMgKNC+0YLQutGA0YvRgtGLINGC0L7Qu9GM0LrQviDQv9GA0L7RgtC40LLQvtC/0L7Qu9C+0LbQvdGL0LUg0YHRgtC+0YDQvtC90YspXHJcbiAgICAgIGlmIChpc09wZW5TaWRlWzBdICYmIGlzT3BlblNpZGVbMV0gJiYgIWlzT3BlblNpZGVbMl0gJiYgIWlzT3BlblNpZGVbM10pIHtcclxuICAgICAgICAvLyDQodC10LLQtdGAINC4INCu0LMg0L7RgtC60YDRi9GC0YssINCX0LDQv9Cw0LQg0Lgg0JLQvtGB0YLQvtC6INC30LDQutGA0YvRgtGLXHJcbiAgICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2lzVGlsZU9wZW5Fbm91Z2hdIFJFU1VMVCBmb3IgKCR7dGlsZVh9LCR7dGlsZVl9KTogZmFsc2UgKHZlcnRpY2FsIDEtdGlsZSBwYXNzYWdlKWApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXNPcGVuU2lkZVsyXSAmJiBpc09wZW5TaWRlWzNdICYmICFpc09wZW5TaWRlWzBdICYmICFpc09wZW5TaWRlWzFdKSB7XHJcbiAgICAgICAgLy8g0JfQsNC/0LDQtCDQuCDQktC+0YHRgtC+0Log0L7RgtC60YDRi9GC0YssINCh0LXQstC10YAg0Lgg0K7QsyDQt9Cw0LrRgNGL0YLRi1xyXG4gICAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtpc1RpbGVPcGVuRW5vdWdoXSBSRVNVTFQgZm9yICgke3RpbGVYfSwke3RpbGVZfSk6IGZhbHNlIChob3Jpem9udGFsIDEtdGlsZSBwYXNzYWdlKWApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2lzVGlsZU9wZW5Fbm91Z2hdIFJFU1VMVCBmb3IgKCR7dGlsZVh9LCR7dGlsZVl9KTogdHJ1ZWApO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBmaW5kTmVhcmVzdFdhbGthYmxlVGlsZShcclxuICAgIHRhcmdldFdvcmxkWCxcclxuICAgIHRhcmdldFdvcmxkWSxcclxuICAgIG1heFJhZGl1cyA9IDgsXHJcbiAgICBleGNsdWRlTGlmdCA9IGZhbHNlLFxyXG4gICAgYXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzID0gZmFsc2VcclxuICApIHtcclxuICAgIGNvbnN0IGlzRGVidWdDdXJyZW50Q2FsbCA9IHRoaXMuZmxvb3JOdW1iZXIgPT09IERFQlVHX0ZMT09SO1xyXG4gICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9IGZpbmROZWFyZXN0V2Fsa2FibGVUaWxlXSBUYXJnZXRXb3JsZDooJHt0YXJnZXRXb3JsZFgudG9GaXhlZCgxKX0sJHt0YXJnZXRXb3JsZFkudG9GaXhlZCgxKX0pLCBtYXhSOiR7bWF4UmFkaXVzfSwgZXhjbHVkZUxpZnQ6JHtleGNsdWRlTGlmdH0sIGF2b2lkTmFycm93OiR7YXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzfWApO1xyXG5cclxuICAgIGlmICghdGhpcy5tYXApIHJldHVybiBudWxsO1xyXG4gICAgY29uc3QgdGFyZ2V0VGlsZVggPSBNYXRoLmZsb29yKHRhcmdldFdvcmxkWCAvIHRoaXMudGlsZVNpemUpO1xyXG4gICAgY29uc3QgdGFyZ2V0VGlsZVkgPSBNYXRoLmZsb29yKHRhcmdldFdvcmxkWSAvIHRoaXMudGlsZVNpemUpO1xyXG4gICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2ZpbmROZWFyZXN0XSBUYXJnZXRUaWxlOiAoJHt0YXJnZXRUaWxlWH0sJHt0YXJnZXRUaWxlWX0pYCk7XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0U2FmZVRpbGVzID0gW1RJTEVfQ09SUklET1IsIFRJTEVfUk9PTV9GTE9PUl07IC8vINCa0YPQtNCwINGF0L7RgtC40Lwg0L/QvtC/0LDRgdGC0YxcclxuXHJcbiAgICAvLyAxLiDQn9GA0L7QstC10YDRj9C10Lwg0YHQsNC80YMg0YbQtdC70LXQstGD0Y4g0LrQu9C10YLQutGDXHJcbiAgICBpZiAoXHJcbiAgICAgIHRhcmdldFRpbGVYID49IDAgJiZcclxuICAgICAgdGFyZ2V0VGlsZVggPCB0aGlzLmNvbHMgJiZcclxuICAgICAgdGFyZ2V0VGlsZVkgPj0gMCAmJlxyXG4gICAgICB0YXJnZXRUaWxlWSA8IHRoaXMucm93c1xyXG4gICAgKSB7XHJcbiAgICAgIGNvbnN0IHN0YXJ0VGlsZVZhbHVlID0gdGhpcy5tYXBbdGFyZ2V0VGlsZVldW3RhcmdldFRpbGVYXTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRhcmdldFNhZmVUaWxlcy5pbmNsdWRlcyhzdGFydFRpbGVWYWx1ZSkgJiZcclxuICAgICAgICAoIWV4Y2x1ZGVMaWZ0IHx8IHN0YXJ0VGlsZVZhbHVlICE9PSBUSUxFX0xJRlQpXHJcbiAgICAgICkge1xyXG4gICAgICAgIC8vINCV0YHQu9C4INGG0LXQu9GMIC0g0LvQuNGE0YIg0Lgg0LzRiyDQtdCz0L4g0L3QtSDQuNGB0LrQu9GO0YfQsNC10LwsINGC0L4g0YLRgNC10LHQvtCy0LDQvdC40Y8g0LogXCLQvtGC0LrRgNGL0YLQvtGB0YLQuFwiINC80L7Qs9GD0YIg0LHRi9GC0Ywg0L3QuNC20LUsINGCLtC6LiDRjdGC0L4g0LTQu9GPIHBhdGhmaW5kaW5nLCDQsCDQvdC1INGB0L/QsNCy0L3QsFxyXG4gICAgICAgIGNvbnN0IG1pblNpZGVzRm9ySW5pdGlhbCA9IDI7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgdGhpcy5pc1RpbGVPcGVuRW5vdWdoKFxyXG4gICAgICAgICAgICB0YXJnZXRUaWxlWCxcclxuICAgICAgICAgICAgdGFyZ2V0VGlsZVksXHJcbiAgICAgICAgICAgIG1pblNpZGVzRm9ySW5pdGlhbCxcclxuICAgICAgICAgICAgYXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbZmluZE5lYXJlc3RdIFNVQ0NFU1M6IFRhcmdldCB0aWxlICgke3RhcmdldFRpbGVYfSwke3RhcmdldFRpbGVZfSkgaXMgc3VpdGFibGUuYCk7XHJcbiAgICAgICAgICByZXR1cm4geyB4OiAodGFyZ2V0VGlsZVggKyAwLjUpICogdGhpcy50aWxlU2l6ZSwgeTogKHRhcmdldFRpbGVZICsgMC41KSAqIHRoaXMudGlsZVNpemUgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAyLiDQoNCw0LTQuNCw0LvRjNC90YvQuSDQv9C+0LjRgdC6XHJcbiAgICBmb3IgKGxldCByYWRpdXMgPSAxOyByYWRpdXMgPD0gbWF4UmFkaXVzOyByYWRpdXMrKykge1xyXG4gICAgICAvLyDQldGB0LvQuCDQuNC30LHQtdCz0LDQtdC8INGD0LfQutC40YUg0L/RgNC+0YXQvtC00L7Qsiwg0LTQu9GPINCx0LvQuNC20LDQudGI0LjRhSDRgdC+0YHQtdC00LXQuSAocmFkaXVzPTEpINGC0YDQtdCx0YPQtdC8INCx0L7Qu9GM0YjQtSDQvtGC0LrRgNGL0YLRi9GFINGB0YLQvtGA0L7QvVxyXG4gICAgICBjb25zdCBjdXJyZW50UmFkaXVzTWluT3BlblNpZGVzID0gMjtcclxuICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCAmJiByYWRpdXMgPT09IDEpIGNvbnNvbGUubG9nKGAgIFtmaW5kTmVhcmVzdF0gUmFkaWFsIHNlYXJjaCAocmFkaXVzIDEpLCBtaW5PcGVuU2lkZXMgZm9yIGNoZWNrOiAke2N1cnJlbnRSYWRpdXNNaW5PcGVuU2lkZXN9YCk7XHJcblxyXG4gICAgICBmb3IgKGxldCBkeSA9IC1yYWRpdXM7IGR5IDw9IHJhZGl1czsgZHkrKykge1xyXG4gICAgICAgIGZvciAobGV0IGR4ID0gLXJhZGl1czsgZHggPD0gcmFkaXVzOyBkeCsrKSB7XHJcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoZHgpIDwgcmFkaXVzICYmIE1hdGguYWJzKGR5KSA8IHJhZGl1cykgY29udGludWU7IC8vINCi0L7Qu9GM0LrQviDQs9GA0LDQvdC40YbQsCDRgtC10LrRg9GJ0LXQs9C+INGA0LDQtNC40YPRgdCwXHJcbiAgICAgICAgICBjb25zdCBjaGVja1ggPSB0YXJnZXRUaWxlWCArIGR4O1xyXG4gICAgICAgICAgY29uc3QgY2hlY2tZID0gdGFyZ2V0VGlsZVkgKyBkeTtcclxuXHJcbiAgICAgICAgICBpZiAoY2hlY2tYIDwgMCB8fCBjaGVja1ggPj0gdGhpcy5jb2xzIHx8IGNoZWNrWSA8IDAgfHwgY2hlY2tZID49IHRoaXMucm93cykgY29udGludWU7IC8vINCSINC/0YDQtdC00LXQu9Cw0YUg0LrQsNGA0YLRi1xyXG5cclxuICAgICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IHRoaXMubWFwW2NoZWNrWV0/LltjaGVja1hdO1xyXG4gICAgICAgICAgaWYgKHRhcmdldFNhZmVUaWxlcy5pbmNsdWRlcyh0aWxlVmFsdWUpICYmICghZXhjbHVkZUxpZnQgfHwgdGlsZVZhbHVlICE9PSBUSUxFX0xJRlQpKSB7XHJcbiAgICAgICAgICAgIC8vINCf0L7QtNGF0L7QtNC40YIg0LvQuCDRgtC40L8g0YLQsNC50LvQsFxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgdGhpcy5pc1RpbGVPcGVuRW5vdWdoKFxyXG4gICAgICAgICAgICAgICAgY2hlY2tYLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tZLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJhZGl1c01pbk9wZW5TaWRlcyxcclxuICAgICAgICAgICAgICAgIGF2b2lkT25lVGlsZVdpZGVQYXNzYWdlc1xyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2ZpbmROZWFyZXN0XSBTVUNDRVNTOiBSYWRpYWwgZm91bmQgKCR7Y2hlY2tYfSwke2NoZWNrWX0pIGF0IHJhZGl1cyAke3JhZGl1c30uYCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHsgeDogKGNoZWNrWCArIDAuNSkgKiB0aGlzLnRpbGVTaXplLCB5OiAoY2hlY2tZICsgMC41KSAqIHRoaXMudGlsZVNpemUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIDMuINCf0L7QuNGB0LogQkZTICjQt9Cw0L/QsNGB0L3QvtC5INCy0LDRgNC40LDQvdGCKVxyXG4gICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS53YXJuKGAgIFtmaW5kTmVhcmVzdF0gUmFkaWFsIHNlYXJjaCBmYWlsZWQgZm9yIHRhcmdldCAoJHt0YXJnZXRUaWxlWH0sJHt0YXJnZXRUaWxlWX0pLiBTdGFydGluZyBCRlMuLi5gKTtcclxuICAgIGNvbnN0IGJmc01pbk9wZW5TaWRlcyA9IDI7IC8vINCU0LvRjyBCRlMg0YHRgtCw0L3QtNCw0YDRgtC90YvQtSAyINGB0YLQvtGA0L7QvdGLLCDQvdC+INGBINC/0YDQvtCy0LXRgNC60L7QuSBhdm9pZE9uZVRpbGVXaWRlUGFzc2FnZXNcclxuICAgIGNvbnN0IHF1ZXVlID0gW1t0YXJnZXRUaWxlWCwgdGFyZ2V0VGlsZVldXTtcclxuICAgIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KFtgJHt0YXJnZXRUaWxlWH0sJHt0YXJnZXRUaWxlWX1gXSk7XHJcbiAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xyXG4gICAgICBbMCwgLTFdLFxyXG4gICAgICBbMCwgMV0sXHJcbiAgICAgIFstMSwgMF0sXHJcbiAgICAgIFsxLCAwXSxcclxuICAgIF07IC8vIE4sIFMsIFcsIEVcclxuICAgIC8vINCU0LvRjyDQv9GD0YLQuCBCRlMg0LzQvtC20L3QviDQv9GA0L7RhdC+0LTQuNGC0Ywg0YfQtdGA0LXQtyDQu9C40YTRgiwg0LTQsNC20LUg0LXRgdC70LggZXhjbHVkZUxpZnQ9dHJ1ZSAo0LzRiyDQvdC1INGF0L7RgtC40Lwg0L3QsCDQvdC10Lwg0J7QodCi0JDQndCe0JLQmNCi0KzQodCvKVxyXG4gICAgY29uc3QgYmZzV2Fsa2FibGVQYXRoVGlsZXMgPSBbVElMRV9DT1JSSURPUiwgVElMRV9ST09NX0ZMT09SLCBUSUxFX0xJRlRdO1xyXG5cclxuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IFtjdXJyWCwgY3VyclldID0gcXVldWUuc2hpZnQoKTtcclxuICAgICAgZm9yIChjb25zdCBbZHgsIGR5XSBvZiBkaXJlY3Rpb25zKSB7XHJcbiAgICAgICAgY29uc3QgbmV4dFggPSBjdXJyWCArIGR4O1xyXG4gICAgICAgIGNvbnN0IG5leHRZID0gY3VyclkgKyBkeTtcclxuICAgICAgICBjb25zdCBrZXkgPSBgJHtuZXh0WH0sJHtuZXh0WX1gO1xyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBuZXh0WCA+PSAwICYmXHJcbiAgICAgICAgICBuZXh0WCA8IHRoaXMuY29scyAmJlxyXG4gICAgICAgICAgbmV4dFkgPj0gMCAmJlxyXG4gICAgICAgICAgbmV4dFkgPCB0aGlzLnJvd3MgJiZcclxuICAgICAgICAgICF2aXNpdGVkLmhhcyhrZXkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb25zdCB0aWxlVmFsdWUgPSB0aGlzLm1hcFtuZXh0WV0/LltuZXh0WF07XHJcbiAgICAgICAgICB2aXNpdGVkLmFkZChrZXkpO1xyXG5cclxuICAgICAgICAgIGlmICh0YXJnZXRTYWZlVGlsZXMuaW5jbHVkZXModGlsZVZhbHVlKSAmJiAoIWV4Y2x1ZGVMaWZ0IHx8IHRpbGVWYWx1ZSAhPT0gVElMRV9MSUZUKSkge1xyXG4gICAgICAgICAgICAvLyDQndCw0YjQu9C4INC/0L7QtNGF0L7QtNGP0YnQuNC5INGC0LjQvyDRgtCw0LnQu9CwXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVGlsZU9wZW5Fbm91Z2gobmV4dFgsIG5leHRZLCBiZnNNaW5PcGVuU2lkZXMsIGF2b2lkT25lVGlsZVdpZGVQYXNzYWdlcykpIHtcclxuICAgICAgICAgICAgICAvLyDQmCDQvtC9INC00L7RgdGC0LDRgtC+0YfQvdC+INC+0YLQutGA0YvRglxyXG4gICAgICAgICAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtmaW5kTmVhcmVzdF0gU1VDQ0VTUzogQkZTIGZvdW5kICgke25leHRYfSwke25leHRZfSkuYCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHsgeDogKG5leHRYICsgMC41KSAqIHRoaXMudGlsZVNpemUsIHk6IChuZXh0WSArIDAuNSkgKiB0aGlzLnRpbGVTaXplIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vINCV0YHQu9C4INGC0LDQudC7INC/0YDQvtGF0L7QtNC40Lwg0LTQu9GPIEJGUywg0LTQvtCx0LDQstC70Y/QtdC8INCyINC+0YfQtdGA0LXQtNGMXHJcbiAgICAgICAgICBpZiAoYmZzV2Fsa2FibGVQYXRoVGlsZXMuaW5jbHVkZXModGlsZVZhbHVlKSkge1xyXG4gICAgICAgICAgICBxdWV1ZS5wdXNoKFtuZXh0WCwgbmV4dFldKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmVycm9yKGAgIFtmaW5kTmVhcmVzdF0gRkFJTFVSRTogTm8gc3VpdGFibGUgdGlsZSBmb3VuZCBmb3IgdGFyZ2V0ICgke3RhcmdldFRpbGVYfSwke3RhcmdldFRpbGVZfSkgYWZ0ZXIgYWxsIHNlYXJjaGVzLmApO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0KGxpZnRUaWxlWCwgbGlmdFRpbGVZLCBwcmVmZXJyZWREaXN0YW5jZSA9IDIpIHtcclxuICAgIGNvbnN0IGlzRGVidWdDdXJyZW50Q2FsbCA9IHRoaXMuZmxvb3JOdW1iZXIgPT09IERFQlVHX0ZMT09SO1xyXG4gICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9IGdldFNwYXduUG9pbnRJblJvb21PZkxpZnRdIENhbGxlZCBmb3IgbGlmdCBhdCAoJHtsaWZ0VGlsZVh9LCAke2xpZnRUaWxlWX0pLCBwcmVmZXJyZWREaXN0OiAke3ByZWZlcnJlZERpc3RhbmNlfWApO1xyXG5cclxuICAgIGxldCBhc3NvY2lhdGVkUm9vbSA9IG51bGw7XHJcbiAgICBsZXQgZW50cnlQb2ludFRvUm9vbSA9IG51bGw7IC8vIHt4LCB5fSAtINC60LvQtdGC0LrQsCDQv9C+0LvQsCDQutC+0LzQvdCw0YLRiywg0L/RgNC40LzRi9C60LDRjtGJ0LDRjyDQuiDQu9C40YTRgtGDL9C60L7RgNC40LTQvtGA0YMg0LvQuNGE0YLQsFxyXG4gICAgbGV0IGRpcmVjdGlvbkZyb21Tb3VyY2VUb0VudHJ5UG9pbnQgPSBudWxsOyAvLyB7ZHgsIGR5fSAtINC90LDQv9GA0LDQstC70LXQvdC40LUg0L7RgiDQuNGB0YLQvtGH0L3QuNC60LAgKNC70LjRhNGCINC40LvQuCDQutC+0YDQuNC00L7RgCDRgyDQu9C40YTRgtCwKSDQuiBlbnRyeVBvaW50VG9Sb29tXHJcblxyXG4gICAgY29uc3QgY2hlY2tOZWlnaGJvcnMgPSBbXHJcbiAgICAgIHsgZHg6IDAsIGR5OiAtMSB9LFxyXG4gICAgICB7IGR4OiAwLCBkeTogMSB9LFxyXG4gICAgICB7IGR4OiAtMSwgZHk6IDAgfSxcclxuICAgICAgeyBkeDogMSwgZHk6IDAgfSxcclxuICAgIF07IC8vIE4sIFMsIFcsIEVcclxuXHJcbiAgICAvLyDQrdGC0LDQvyAxOiDQm9C40YTRgiDQvdCw0L/RgNGP0LzRg9GOINC/0YDQuNC80YvQutCw0LXRgiDQuiDQutC+0LzQvdCw0YLQtT9cclxuICAgIC8vINCa0LvQtdGC0LrQsCDQu9C40YTRgtCwIGxpZnRUaWxlWCwgbGlmdFRpbGVZINCc0J7QltCV0KIg0LHRi9GC0YwgVElMRV9DT1JSSURPUiDQsiB0aGlzLm1hcCwg0LXRgdC70Lgg0L/Rg9GC0Ywg0LHRi9C7INC/0YDQvtC70L7QttC10L0g0Log0L3QtdC5LlxyXG4gICAgZm9yIChjb25zdCBuIG9mIGNoZWNrTmVpZ2hib3JzKSB7XHJcbiAgICAgIGNvbnN0IGFkalggPSBsaWZ0VGlsZVggKyBuLmR4OyAvLyDQodC+0YHQtdC0INC60LvQtdGC0LrQuCDQu9C40YTRgtCwXHJcbiAgICAgIGNvbnN0IGFkalkgPSBsaWZ0VGlsZVkgKyBuLmR5O1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgYWRqWCA+PSAwICYmXHJcbiAgICAgICAgYWRqWCA8IHRoaXMuY29scyAmJlxyXG4gICAgICAgIGFkalkgPj0gMCAmJlxyXG4gICAgICAgIGFkalkgPCB0aGlzLnJvd3MgJiZcclxuICAgICAgICB0aGlzLm1hcFthZGpZXT8uW2FkalhdID09PSBUSUxFX1JPT01fRkxPT1JcclxuICAgICAgKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCByb29tIG9mIHRoaXMucm9vbXMpIHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgYWRqWCA+PSByb29tLnggJiZcclxuICAgICAgICAgICAgYWRqWCA8IHJvb20ueCArIHJvb20ud2lkdGggJiZcclxuICAgICAgICAgICAgYWRqWSA+PSByb29tLnkgJiZcclxuICAgICAgICAgICAgYWRqWSA8IHJvb20ueSArIHJvb20uaGVpZ2h0XHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgYXNzb2NpYXRlZFJvb20gPSByb29tO1xyXG4gICAgICAgICAgICBlbnRyeVBvaW50VG9Sb29tID0geyB4OiBhZGpYLCB5OiBhZGpZIH07IC8vINCt0YLQviDQuCDQtdGB0YLRjCDRgtC+0YfQutCwINCy0YXQvtC00LAg0LIg0LrQvtC80L3QsNGC0YNcclxuICAgICAgICAgICAgZGlyZWN0aW9uRnJvbVNvdXJjZVRvRW50cnlQb2ludCA9IHsgZHg6IG4uZHgsIGR5OiBuLmR5IH07IC8vINCd0LDQv9GA0LDQstC70LXQvdC40LUg0L7RgiDQu9C40YTRgtCwINC6INGN0YLQvtC5INGC0L7Rh9C60LVcclxuICAgICAgICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2dldFNwYXduUG9pbnRJblJvb21PZkxpZnRdIExpZnQgKCR7bGlmdFRpbGVYfSwke2xpZnRUaWxlWX0pIGRpcmVjdGx5IGFkamFjZW50IHRvIHJvb20gZmxvb3IgYXQgKCR7YWRqWH0sJHthZGpZfSkuIFJvb20gSUQ6ICR7cm9vbS5pZCB8fCAnTi9BJ31gKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChhc3NvY2lhdGVkUm9vbSkgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0K3RgtCw0L8gMjog0JXRgdC70Lgg0L3QtSDQvdCw0L/RgNGP0LzRg9GOLCDRgtC+INGH0LXRgNC10Lcg0L7QtNC90YMg0LrQu9C10YLQutGDINC60L7RgNC40LTQvtGA0LA/XHJcbiAgICBpZiAoIWFzc29jaWF0ZWRSb29tKSB7XHJcbiAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0XSBMaWZ0IG5vdCBkaXJlY3RseSBhZGphY2VudC4gQ2hlY2tpbmcgbmVpZ2hib3JzIG9mIG5laWdoYm9ycyAodmlhIDEgY29ycmlkb3IgdGlsZSkuLi5gKTtcclxuICAgICAgZm9yIChjb25zdCBuT3V0ZXIgb2YgY2hlY2tOZWlnaGJvcnMpIHtcclxuICAgICAgICAvLyBuT3V0ZXIgLSDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INC6INCy0L7Qt9C80L7QttC90L7QuSDQutC70LXRgtC60LUg0LrQvtGA0LjQtNC+0YDQsCDRgNGP0LTQvtC8INGBINC70LjRhNGC0L7QvFxyXG4gICAgICAgIGNvbnN0IGNvcnJpZG9yWCA9IGxpZnRUaWxlWCArIG5PdXRlci5keDtcclxuICAgICAgICBjb25zdCBjb3JyaWRvclkgPSBsaWZ0VGlsZVkgKyBuT3V0ZXIuZHk7XHJcblxyXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+INGN0YLQsCDQv9GA0L7QvNC10LbRg9GC0L7Rh9C90LDRjyDQutC70LXRgtC60LAgLSDQutC+0YDQuNC00L7RgFxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGNvcnJpZG9yWCA8IDAgfHxcclxuICAgICAgICAgIGNvcnJpZG9yWCA+PSB0aGlzLmNvbHMgfHxcclxuICAgICAgICAgIGNvcnJpZG9yWSA8IDAgfHxcclxuICAgICAgICAgIGNvcnJpZG9yWSA+PSB0aGlzLnJvd3MgfHxcclxuICAgICAgICAgIHRoaXMubWFwW2NvcnJpZG9yWV0/Lltjb3JyaWRvclhdICE9PSBUSUxFX0NPUlJJRE9SXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgbklubmVyIG9mIGNoZWNrTmVpZ2hib3JzKSB7XHJcbiAgICAgICAgICAvLyBuSW5uZXIgLSDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INC+0YIg0LrQu9C10YLQutC4INC60L7RgNC40LTQvtGA0LAg0Log0LLQvtC30LzQvtC20L3QvtC5INC60L7QvNC90LDRgtC1XHJcbiAgICAgICAgICAvLyDQndC1INGB0LzQvtGC0YDQuNC8INC+0LHRgNCw0YLQvdC+INC90LAg0LjRgdGF0L7QtNC90YPRjiDQutC70LXRgtC60YMg0LvQuNGE0YLQsFxyXG4gICAgICAgICAgaWYgKG5Jbm5lci5keCA9PT0gLW5PdXRlci5keCAmJiBuSW5uZXIuZHkgPT09IC1uT3V0ZXIuZHkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHBvdGVudGlhbFJvb21YID0gY29ycmlkb3JYICsgbklubmVyLmR4O1xyXG4gICAgICAgICAgY29uc3QgcG90ZW50aWFsUm9vbVkgPSBjb3JyaWRvclkgKyBuSW5uZXIuZHk7XHJcblxyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBwb3RlbnRpYWxSb29tWCA+PSAwICYmXHJcbiAgICAgICAgICAgIHBvdGVudGlhbFJvb21YIDwgdGhpcy5jb2xzICYmXHJcbiAgICAgICAgICAgIHBvdGVudGlhbFJvb21ZID49IDAgJiZcclxuICAgICAgICAgICAgcG90ZW50aWFsUm9vbVkgPCB0aGlzLnJvd3MgJiZcclxuICAgICAgICAgICAgdGhpcy5tYXBbcG90ZW50aWFsUm9vbVldPy5bcG90ZW50aWFsUm9vbVhdID09PSBUSUxFX1JPT01fRkxPT1JcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJvb20gb2YgdGhpcy5yb29tcykge1xyXG4gICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHBvdGVudGlhbFJvb21YID49IHJvb20ueCAmJlxyXG4gICAgICAgICAgICAgICAgcG90ZW50aWFsUm9vbVggPCByb29tLnggKyByb29tLndpZHRoICYmXHJcbiAgICAgICAgICAgICAgICBwb3RlbnRpYWxSb29tWSA+PSByb29tLnkgJiZcclxuICAgICAgICAgICAgICAgIHBvdGVudGlhbFJvb21ZIDwgcm9vbS55ICsgcm9vbS5oZWlnaHRcclxuICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRSb29tID0gcm9vbTtcclxuICAgICAgICAgICAgICAgIGVudHJ5UG9pbnRUb1Jvb20gPSB7IHg6IHBvdGVudGlhbFJvb21YLCB5OiBwb3RlbnRpYWxSb29tWSB9OyAvLyDQrdGC0L4g0YLQvtGH0LrQsCDQstGF0L7QtNCwINCyINC60L7QvNC90LDRgtGDXHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb25Gcm9tU291cmNlVG9FbnRyeVBvaW50ID0geyBkeDogbklubmVyLmR4LCBkeTogbklubmVyLmR5IH07IC8vINCd0LDQv9GA0LDQstC70LXQvdC40LUg0L7RgiDQutC+0YDQuNC00L7RgNCwINC6INGN0YLQvtC5INGC0L7Rh9C60LVcclxuICAgICAgICAgICAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0XSBMaWZ0IG5lYXIgcm9vbSB2aWEgY29ycmlkb3IgKCR7Y29ycmlkb3JYfSwke2NvcnJpZG9yWX0pLiBFbnRyeSB0byByb29tIGF0ICgke3BvdGVudGlhbFJvb21YfSwke3BvdGVudGlhbFJvb21ZfSkuIFJvb20gSUQ6ICR7cm9vbS5pZCB8fCAnTi9BJ31gKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGFzc29jaWF0ZWRSb29tKSBicmVhazsgLy8g0J3QsNGI0LvQuCDQutC+0LzQvdCw0YLRgyDRh9C10YDQtdC3IG5Jbm5lclxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXNzb2NpYXRlZFJvb20pIGJyZWFrOyAvLyDQndCw0YjQu9C4INC60L7QvNC90LDRgtGDINGH0LXRgNC10Lcgbk91dGVyXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWFzc29jaWF0ZWRSb29tIHx8ICFlbnRyeVBvaW50VG9Sb29tIHx8ICFkaXJlY3Rpb25Gcm9tU291cmNlVG9FbnRyeVBvaW50KSB7XHJcbiAgICAgIC8vICAgaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS53YXJuKGAgIFtnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0XSBDb3VsZCBub3QgZmluZCBhbiBhc3NvY2lhdGVkIHJvb20gb3IgZW50cnkgcG9pbnQgZm9yIGxpZnQgYXQgKCR7bGlmdFRpbGVYfSwke2xpZnRUaWxlWX0pLmApO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDQotC10L/QtdGA0YwgZGlyZWN0aW9uRnJvbVNvdXJjZVRvRW50cnlQb2ludCAtINGN0YLQviDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INC+0YIgXCLQtNCy0LXRgNC4XCIgKGVudHJ5UG9pbnRUb1Jvb20pINCS0JPQm9Cj0JHQrCDQutC+0LzQvdCw0YLRiy5cclxuICAgIGNvbnN0IGlud2FyZER4ID0gZGlyZWN0aW9uRnJvbVNvdXJjZVRvRW50cnlQb2ludC5keDtcclxuICAgIGNvbnN0IGlud2FyZER5ID0gZGlyZWN0aW9uRnJvbVNvdXJjZVRvRW50cnlQb2ludC5keTtcclxuXHJcbiAgICAvLyDQmNGJ0LXQvCDRgtC+0YfQutGDINC90LAgKHByZWZlcnJlZERpc3RhbmNlIC0gMSkg0YjQsNCz0L7QsiDQstCz0LvRg9Cx0Ywg0L7RgiBlbnRyeVBvaW50VG9Sb29tXHJcbiAgICAvLyBwcmVmZXJyZWREaXN0YW5jZSA9IDIgLT4gZGlzdCA9IDEgKDEg0YjQsNCzINC+0YIg0LLRhdC+0LTQsCksIGRpc3QgPSAwICjRgdCw0Lwg0LLRhdC+0LQpXHJcbiAgICAvLyBwcmVmZXJyZWREaXN0YW5jZSA9IDEgLT4gZGlzdCA9IDAgKNGB0LDQvCDQstGF0L7QtClcclxuICAgIGZvciAobGV0IGRpc3RPZmZzZXQgPSBwcmVmZXJyZWREaXN0YW5jZSAtIDE7IGRpc3RPZmZzZXQgPj0gMDsgZGlzdE9mZnNldC0tKSB7XHJcbiAgICAgIGNvbnN0IHNwYXduQ2FuZGlkYXRlVGlsZVggPSBlbnRyeVBvaW50VG9Sb29tLnggKyBpbndhcmREeCAqIGRpc3RPZmZzZXQ7XHJcbiAgICAgIGNvbnN0IHNwYXduQ2FuZGlkYXRlVGlsZVkgPSBlbnRyeVBvaW50VG9Sb29tLnkgKyBpbndhcmREeSAqIGRpc3RPZmZzZXQ7XHJcbiAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0XSBUcnlpbmcgY2FuZGlkYXRlICgke3NwYXduQ2FuZGlkYXRlVGlsZVh9LCR7c3Bhd25DYW5kaWRhdGVUaWxlWX0pIGF0IGRpc3RPZmZzZXQgJHtkaXN0T2Zmc2V0fSBmcm9tIGVudHJ5ICR7SlNPTi5zdHJpbmdpZnkoZW50cnlQb2ludFRvUm9vbSl9YCk7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgc3Bhd25DYW5kaWRhdGVUaWxlWCA+PSBhc3NvY2lhdGVkUm9vbS54ICYmXHJcbiAgICAgICAgc3Bhd25DYW5kaWRhdGVUaWxlWCA8IGFzc29jaWF0ZWRSb29tLnggKyBhc3NvY2lhdGVkUm9vbS53aWR0aCAmJlxyXG4gICAgICAgIHNwYXduQ2FuZGlkYXRlVGlsZVkgPj0gYXNzb2NpYXRlZFJvb20ueSAmJlxyXG4gICAgICAgIHNwYXduQ2FuZGlkYXRlVGlsZVkgPCBhc3NvY2lhdGVkUm9vbS55ICsgYXNzb2NpYXRlZFJvb20uaGVpZ2h0ICYmXHJcbiAgICAgICAgdGhpcy5tYXBbc3Bhd25DYW5kaWRhdGVUaWxlWV0/LltzcGF3bkNhbmRpZGF0ZVRpbGVYXSA9PT0gVElMRV9ST09NX0ZMT09SXHJcbiAgICAgICkge1xyXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNC60LA6INC10YHRgtGMINC70Lgg0LXRidC1INC+0LTQvdCwINC60LvQtdGC0LrQsCDQv9C+0LvQsCDQutC+0LzQvdCw0YLRiyDQl9CQINGN0YLQvtC5INC60LDQvdC00LjQtNCw0YLRgdC60L7QuSDRgtC+0YfQutC+0LkgKNCyINGC0L7QvCDQttC1INC90LDQv9GA0LDQstC70LXQvdC40LggaW53YXJkKVxyXG4gICAgICAgIC8vINCt0YLQviDQs9Cw0YDQsNC90YLQuNGA0YPQtdGCLCDRh9GC0L4g0LzRiyDQvdC1INGB0L/QsNCy0L3QuNC80YHRjyDQstC/0LvQvtGC0L3Rg9GOINC6IFwi0LTQsNC70YzQvdC10LlcIiDRgdGC0LXQvdC1INC60L7QvNC90LDRgtGLLCDQtdGB0LvQuCDQutC+0LzQvdCw0YLQsCDRg9C30LrQsNGPLlxyXG4gICAgICAgIGNvbnN0IGZ1cnRoZXJJblggPSBzcGF3bkNhbmRpZGF0ZVRpbGVYICsgaW53YXJkRHg7XHJcbiAgICAgICAgY29uc3QgZnVydGhlckluWSA9IHNwYXduQ2FuZGlkYXRlVGlsZVkgKyBpbndhcmREeTtcclxuICAgICAgICBjb25zdCBoYXNTcGFjZUJlaGluZCA9XHJcbiAgICAgICAgICBmdXJ0aGVySW5YID49IGFzc29jaWF0ZWRSb29tLnggJiZcclxuICAgICAgICAgIGZ1cnRoZXJJblggPCBhc3NvY2lhdGVkUm9vbS54ICsgYXNzb2NpYXRlZFJvb20ud2lkdGggJiZcclxuICAgICAgICAgIGZ1cnRoZXJJblkgPj0gYXNzb2NpYXRlZFJvb20ueSAmJlxyXG4gICAgICAgICAgZnVydGhlckluWSA8IGFzc29jaWF0ZWRSb29tLnkgKyBhc3NvY2lhdGVkUm9vbS5oZWlnaHQgJiZcclxuICAgICAgICAgIHRoaXMubWFwW2Z1cnRoZXJJblldPy5bZnVydGhlckluWF0gPT09IFRJTEVfUk9PTV9GTE9PUjtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgdGhpcy5pc1RpbGVPcGVuRW5vdWdoKHNwYXduQ2FuZGlkYXRlVGlsZVgsIHNwYXduQ2FuZGlkYXRlVGlsZVksIDIsIHRydWUpICYmXHJcbiAgICAgICAgICBoYXNTcGFjZUJlaGluZFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgLy8gICBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbZ2V0U3Bhd25Qb2ludEluUm9vbU9mTGlmdF0gU1VDQ0VTUzogRm91bmQgc3VpdGFibGUgc3Bhd24gcG9pbnQgaW4gcm9vbTogVGlsZSAoJHtzcGF3bkNhbmRpZGF0ZVRpbGVYfSwke3NwYXduQ2FuZGlkYXRlVGlsZVl9KS4gSGFzIHNwYWNlIGJlaGluZDogJHtoYXNTcGFjZUJlaGluZH1gKTtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IChzcGF3bkNhbmRpZGF0ZVRpbGVYICsgMC41KSAqIHRoaXMudGlsZVNpemUsXHJcbiAgICAgICAgICAgIHk6IChzcGF3bkNhbmRpZGF0ZVRpbGVZICsgMC41KSAqIHRoaXMudGlsZVNpemUsXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbZ2V0U3Bhd25Qb2ludEluUm9vbU9mTGlmdF0gQ2FuZGlkYXRlICgke3NwYXduQ2FuZGlkYXRlVGlsZVh9LCR7c3Bhd25DYW5kaWRhdGVUaWxlWX0pIG5vdCBzdWl0YWJsZS4gT3BlbkVub3VnaDogJHt0aGlzLmlzVGlsZU9wZW5Fbm91Z2goc3Bhd25DYW5kaWRhdGVUaWxlWCwgc3Bhd25DYW5kaWRhdGVUaWxlWSwgMiwgdHJ1ZSl9LCBIYXNTcGFjZUJlaGluZDogJHtoYXNTcGFjZUJlaGluZH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2dldFNwYXduUG9pbnRJblJvb21PZkxpZnRdIENhbmRpZGF0ZSAoJHtzcGF3bkNhbmRpZGF0ZVRpbGVYfSwke3NwYXduQ2FuZGlkYXRlVGlsZVl9KSBpcyBub3QgdmFsaWQgcm9vbSBmbG9vciBvciBvdXQgb2Ygcm9vbSBib3VuZHMuYCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDQldGB0LvQuCDQvdC1INC90LDRiNC70Lgg0LjQtNC10LDQu9GM0L3Rg9GOINGC0L7Rh9C60YMg0YEg0L/RgNC+0YHRgtGA0LDQvdGB0YLQstC+0Lwg0LfQsCDRgdC/0LjQvdC+0LksINC/0YDQvtCx0YPQtdC8INGB0LDQvCBlbnRyeVBvaW50VG9Sb29tICjQtdGB0LvQuCDQvtC9INC/0L7QtNGF0L7QtNC40YIpXHJcbiAgICBpZiAodGhpcy5pc1RpbGVPcGVuRW5vdWdoKGVudHJ5UG9pbnRUb1Jvb20ueCwgZW50cnlQb2ludFRvUm9vbS55LCAyLCB0cnVlKSkge1xyXG4gICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbZ2V0U3Bhd25Qb2ludEluUm9vbU9mTGlmdF0gRmFsbGJhY2s6IFVzaW5nIGVudHJ5IHBvaW50IHRvIHJvb20gKCR7ZW50cnlQb2ludFRvUm9vbS54fSwke2VudHJ5UG9pbnRUb1Jvb20ueX0pIGFzIGl0J3Mgb3BlbiBlbm91Z2guYCk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgeDogKGVudHJ5UG9pbnRUb1Jvb20ueCArIDAuNSkgKiB0aGlzLnRpbGVTaXplLFxyXG4gICAgICAgIHk6IChlbnRyeVBvaW50VG9Sb29tLnkgKyAwLjUpICogdGhpcy50aWxlU2l6ZSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLndhcm4oYCAgW2dldFNwYXduUG9pbnRJblJvb21PZkxpZnRdIEZBSUxVUkU6IENvdWxkIG5vdCBmaW5kIGFueSBzdWl0YWJsZSBzcGF3biBwb2ludCBpbnNpZGUgcm9vbSBmb3IgbGlmdCBhdCAoJHtsaWZ0VGlsZVh9LCR7bGlmdFRpbGVZfSkuYCk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGZpbmROZWFyYnlVbmFuc3dlcmVkQm9vayh3b3JsZFgsIHdvcmxkWSwgcmFkaXVzID0gdGhpcy50aWxlU2l6ZSAqIDAuOCkge1xyXG4gICAgaWYgKCF0aGlzLmJvb2tzIHx8IHRoaXMuYm9va3MubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcclxuICAgIGxldCBjbG9zZXN0Qm9vayA9IG51bGw7XHJcbiAgICBsZXQgbWluRGlzdGFuY2VTcSA9IHJhZGl1cyAqIHJhZGl1cztcclxuXHJcbiAgICBmb3IgKGNvbnN0IGJvb2sgb2YgdGhpcy5ib29rcykge1xyXG4gICAgICBpZiAoIWJvb2suaXNDb2xsZWN0ZWQpIHtcclxuICAgICAgICAvLyDQn9GA0LXQtNC/0L7Qu9Cw0LPQsNC10LwsINGH0YLQviDRgyBCb29rINC10YHRgtGMINGB0LLQvtC50YHRgtCy0L4gaXNDb2xsZWN0ZWRcclxuICAgICAgICBjb25zdCBkeCA9IGJvb2sueCAtIHdvcmxkWDtcclxuICAgICAgICBjb25zdCBkeSA9IGJvb2sueSAtIHdvcmxkWTtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZVNxID0gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgICAgICAgaWYgKGRpc3RhbmNlU3EgPCBtaW5EaXN0YW5jZVNxKSB7XHJcbiAgICAgICAgICBtaW5EaXN0YW5jZVNxID0gZGlzdGFuY2VTcTtcclxuICAgICAgICAgIGNsb3Nlc3RCb29rID0gYm9vaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjbG9zZXN0Qm9vaztcclxuICB9XHJcblxyXG4gIG1hcmtCb29rQXNDb2xsZWN0ZWQoYm9va1RvQ29sbGVjdCkge1xyXG4gICAgaWYgKCFib29rVG9Db2xsZWN0IHx8ICF0aGlzLmJvb2tzKSByZXR1cm4gZmFsc2U7XHJcbiAgICBjb25zdCBib29rID0gdGhpcy5ib29rcy5maW5kKChiKSA9PiBiLmlkID09PSBib29rVG9Db2xsZWN0LmlkKTsgLy8g0JjRidC10Lwg0L/QviBJRFxyXG4gICAgaWYgKGJvb2sgJiYgIWJvb2suaXNDb2xsZWN0ZWQpIHtcclxuICAgICAgYm9vay5pc0NvbGxlY3RlZCA9IHRydWU7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBbUHJvY01hcCBGJHt0aGlzLmZsb29yTnVtYmVyfV0gQm9vayAke2Jvb2suaWR9IG1hcmtlZCBhcyBjb2xsZWN0ZWQuYCk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZmluZE5lYXJieUxpZnQod29ybGRYLCB3b3JsZFksIHJhZGl1cyA9IHRoaXMudGlsZVNpemUgKiBMSUZUX0lOVEVSQUNUSU9OX1JBRElVU19NVUxUSVBMSUVSKSB7XHJcbiAgICBpZiAoIXRoaXMubGlmdFBvc2l0aW9uKSByZXR1cm4gbnVsbDtcclxuICAgIC8vINCg0LDRgdGB0YLQvtGP0L3QuNC1INC+0YIg0YbQtdC90YLRgNCwINC/0LXRgNGB0L7QvdCw0LbQsCDQtNC+INGG0LXQvdGC0YDQsCDQutC70LXRgtC60Lgg0LvQuNGE0YLQsFxyXG4gICAgY29uc3QgZHggPSB3b3JsZFggLSB0aGlzLmxpZnRQb3NpdGlvbi54OyAvLyBsaWZ0UG9zaXRpb24ueCAtINC80LjRgNC+0LLRi9C1INC60L7QvtGA0LTQuNC90LDRgtGLXHJcbiAgICBjb25zdCBkeSA9IHdvcmxkWSAtIHRoaXMubGlmdFBvc2l0aW9uLnk7XHJcbiAgICBjb25zdCBkaXN0YW5jZVNxID0gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgICByZXR1cm4gZGlzdGFuY2VTcSA8IHJhZGl1cyAqIHJhZGl1cyA/IHRoaXMubGlmdFBvc2l0aW9uIDogbnVsbDtcclxuICB9XHJcblxyXG4gIGdldExpZnRQb3NpdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmxpZnRQb3NpdGlvbjsgLy8g0JLQvtC30LLRgNCw0YnQsNC10YIge3gsIHksIHRpbGVYLCB0aWxlWX1cclxuICB9XHJcblxyXG4gIGRyYXcoY3R4LCBib29rSW1hZ2UgPSBudWxsKSB7XHJcbiAgICBpZiAoIXRoaXMubWFwIHx8ICF0aGlzLnJlbmRlcmVyKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbWFwRGF0YSA9IHtcclxuICAgICAgbWFwOiB0aGlzLm1hcCxcclxuICAgICAgcm9vbXM6IHRoaXMucm9vbXMsXHJcbiAgICAgIGJvb2tzOiB0aGlzLmJvb2tzLCAvLyDQn9C10YDQtdC00LDQtdC8INCw0LrRgtGD0LDQu9GM0L3Ri9C5INC80LDRgdGB0LjQsiDQutC90LjQs1xyXG4gICAgICBsaWZ0UG9zaXRpb246IHRoaXMubGlmdFBvc2l0aW9uLCAvLyDQn9C10YDQtdC00LDQtdC8IHRpbGVYLCB0aWxlWSDQuCDQvNC40YDQvtCy0YvQtSB4LHkg0LvQuNGE0YLQsFxyXG4gICAgICBvZmZzZXRYOiB0aGlzLm9mZnNldFgsXHJcbiAgICAgIG9mZnNldFk6IHRoaXMub2Zmc2V0WSxcclxuICAgICAgY29sczogdGhpcy5jb2xzLFxyXG4gICAgICByb3dzOiB0aGlzLnJvd3MsXHJcbiAgICAgIHRpbGVTaXplOiB0aGlzLnRpbGVTaXplLFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVuZGVyZXIuZHJhdyhjdHgsIG1hcERhdGEsIGJvb2tJbWFnZSk7IC8vIGJvb2tJbWFnZSAtINGN0YLQviDRgdC/0YDQsNC50YIg0LTQu9GPINC60L3QuNCzXHJcbiAgfVxyXG5cclxuICBsb2dNYXBHcmlkKCkge1xyXG4gICAgaWYgKCF0aGlzLm1hcCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgW1Byb2NNYXAgRiR7dGhpcy5mbG9vck51bWJlcn1dIE1hcCBncmlkIG5vdCBhdmFpbGFibGUuYCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGAtLS0gTWFwIEdyaWQgRmxvb3IgJHt0aGlzLmZsb29yTnVtYmVyfSAoJHt0aGlzLmNvbHN9eCR7dGhpcy5yb3dzfSkgLS0tYCk7XHJcbiAgICBsZXQgaGVhZGVyID0gJyAgICc7IC8vINCU0LvRjyDQvdC+0LzQtdGA0L7QsiDRgdGC0L7Qu9Cx0YbQvtCyXHJcbiAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY29sczsgYysrKSBoZWFkZXIgKz0gYyAlIDEwID09PSAwID8gTWF0aC5mbG9vcihjIC8gMTApIDogJyAnO1xyXG4gICAgY29uc29sZS5sb2coaGVhZGVyKTtcclxuICAgIGhlYWRlciA9ICcgICAnO1xyXG4gICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmNvbHM7IGMrKykgaGVhZGVyICs9IGMgJSAxMDtcclxuICAgIGNvbnNvbGUubG9nKGhlYWRlcik7XHJcblxyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLnJvd3M7IHkrKykge1xyXG4gICAgICBjb25zdCByb3dOdW0gPSB5LnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJyAnKTtcclxuICAgICAgY29uc3Qgcm93U3RyaW5nID0gdGhpcy5tYXBbeV1cclxuICAgICAgICAubWFwKCh0aWxlKSA9PiB7XHJcbiAgICAgICAgICBzd2l0Y2ggKHRpbGUpIHtcclxuICAgICAgICAgICAgY2FzZSBUSUxFX1dBTEw6XHJcbiAgICAgICAgICAgICAgcmV0dXJuICcjJzsgLy8g0KHRgtC10L3QsFxyXG4gICAgICAgICAgICBjYXNlIFRJTEVfQ09SUklET1I6XHJcbiAgICAgICAgICAgICAgcmV0dXJuICcuJzsgLy8g0JrQvtGA0LjQtNC+0YBcclxuICAgICAgICAgICAgY2FzZSBUSUxFX1JPT01fRkxPT1I6XHJcbiAgICAgICAgICAgICAgcmV0dXJuICcgJzsgLy8g0J/QvtC7INC60L7QvNC90LDRgtGLXHJcbiAgICAgICAgICAgIGNhc2UgVElMRV9MSUZUOlxyXG4gICAgICAgICAgICAgIHJldHVybiAnTCc7IC8vINCb0LjRhNGCICjRhdC+0YLRjyDQvtC9INC80L7QttC10YIg0LHRi9GC0Ywg0L/QtdGA0LXQt9Cw0L/QuNGB0LDQvSDQutC+0YDQuNC00L7RgNC+0Lwg0LIgdGhpcy5tYXApXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgcmV0dXJuICc/JzsgLy8g0J3QtdC40LfQstC10YHRgtC90YvQuSDRgtCw0LnQu1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmpvaW4oJycpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgJHtyb3dOdW19ICR7cm93U3RyaW5nfWApO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubGlmdFBvc2l0aW9uKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGBMaWZ0IGFjdHVhbCB0aWxlIHR5cGUgaW4gbWFwWyR7dGhpcy5saWZ0UG9zaXRpb24udGlsZVl9XVske3RoaXMubGlmdFBvc2l0aW9uLnRpbGVYfV06ICR7XHJcbiAgICAgICAgICB0aGlzLm1hcFt0aGlzLmxpZnRQb3NpdGlvbi50aWxlWV0/Llt0aGlzLmxpZnRQb3NpdGlvbi50aWxlWF1cclxuICAgICAgICB9YFxyXG4gICAgICApO1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBgTGlmdCByZXBvcnRlZCBhdCB0aWxlOiAoJHt0aGlzLmxpZnRQb3NpdGlvbi50aWxlWH0sICR7dGhpcy5saWZ0UG9zaXRpb24udGlsZVl9KWBcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdMaWZ0IHBvc2l0aW9uIG5vdCBzZXQuJyk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhgLS0tIEVuZCBNYXAgR3JpZCBGbG9vciAke3RoaXMuZmxvb3JOdW1iZXJ9IC0tLWApO1xyXG4gIH1cclxufVxyXG4iLCIvLyBzcmMvY29yZS9MZXZlbC5qc1xyXG5pbXBvcnQgeyBQcm9jZWR1cmFsTWFwIH0gZnJvbSAnLi4vbWFwL1Byb2NlZHVyYWxNYXAuanMnO1xyXG4vLyBSZW1vdmVkIFRSQU5TSVRJT05fWk9ORV9SQURJVVNfTVVMVElQTElFUiBpbXBvcnRcclxuXHJcbi8qKlxyXG4gKiDQmtC70LDRgdGBIExldmVsINGD0L/RgNCw0LLQu9GP0LXRgiDRgtC10LrRg9GJ0LjQvCDRjdGC0LDQttC+0Lwg0Lgg0LfQsNCz0YDRg9C30LrQvtC5INC60LDRgNGCLlxyXG4gKiDQm9C+0LPQuNC60LAg0LfQvtC9INC/0LXRgNC10YXQvtC00LAgKHRyYW5zaXRpb24gem9uZXMpINGD0LTQsNC70LXQvdCwLCDRgi7Qui4g0LvQuNGE0YIg0YDQsNCx0L7RgtCw0LXRgiDQuNC90LDRh9C1LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExldmVsIHtcclxuICAvKipcclxuICAgKiDQodC+0LfQtNCw0LXRgiDRjdC60LfQtdC80L/Qu9GP0YAgTGV2ZWwuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaW5GbG9vcj0xXSAtINCd0L7QvNC10YAg0YHQsNC80L7Qs9C+INC90LjQttC90LXQs9C+INGN0YLQsNC20LAuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttYXhGbG9vcj0zXSAtINCd0L7QvNC10YAg0YHQsNC80L7Qs9C+INCy0LXRgNGF0L3QtdCz0L4g0Y3RgtCw0LbQsC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihtaW5GbG9vciA9IDEsIG1heEZsb29yID0gMykge1xyXG4gICAgaWYgKG1pbkZsb29yID49IG1heEZsb29yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICBgTGV2ZWwgY29uc3RydWN0b3I6IG1pbkZsb29yICgke21pbkZsb29yfSkgbXVzdCBiZSBsZXNzIHRoYW4gbWF4Rmxvb3IgKCR7bWF4Rmxvb3J9KS4gVXNpbmcgZGVmYXVsdHMgMSBhbmQgMy5gXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMubWluRmxvb3IgPSAxO1xyXG4gICAgICB0aGlzLm1heEZsb29yID0gMztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMubWluRmxvb3IgPSBtaW5GbG9vcjtcclxuICAgICAgdGhpcy5tYXhGbG9vciA9IG1heEZsb29yO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY3VycmVudEZsb29yID0gdGhpcy5taW5GbG9vcjtcclxuICAgIHRoaXMuY3VycmVudE1hcCA9IG51bGw7IC8vIEluc3RhbmNlIG9mIFByb2NlZHVyYWxNYXBcclxuICAgIC8vIHRoaXMudHJhbnNpdGlvblpvbmVzID0gW107IC8vIFJFTU9WRUQgLSBObyBsb25nZXIgbmVlZGVkIGZvciBsaWZ0c1xyXG4gICAgdGhpcy50aWxlU2l6ZSA9IDMyOyAvLyBEZWZhdWx0LCB3aWxsIGJlIHVwZGF0ZWQgZnJvbSBtYXBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqINCQ0YHQuNC90YXRgNC+0L3QvdC+INC30LDQs9GA0YPQttCw0LXRgiAo0LPQtdC90LXRgNC40YDRg9C10YIpINC60LDRgNGC0YMg0LTQu9GPINGD0LrQsNC30LDQvdC90L7Qs9C+INGN0YLQsNC20LAuXHJcbiAgICogQXNzdW1lcyBQcm9jZWR1cmFsTWFwIGNvbnN0cnVjdG9yIGhhbmRsZXMgZ2VuZXJhdGlvbiwgbGlmdCBwbGFjZW1lbnQsXHJcbiAgICogYW5kIHRocm93cyBvbiBjcml0aWNhbCBmYWlsdXJlIChlLmcuLCB1bnJlYWNoYWJsZSBsaWZ0KS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gZmxvb3JOdW1iZXIgLSDQndC+0LzQtdGAINGN0YLQsNC20LAg0LTQu9GPINC30LDQs9GA0YPQt9C60LguXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNhbnZhc1dpZHRoIC0g0KjQuNGA0LjQvdCwINC60LDQvdCy0LDRgdCwLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjYW52YXNIZWlnaHQgLSDQktGL0YHQvtGC0LAg0LrQsNC90LLQsNGB0LAuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59INCf0YDQvtC80LjRgSwg0LrQvtGC0L7RgNGL0Lkg0YDQsNC30YDQtdGI0LDQtdGC0YHRjyDQv9C+0YHQu9C1INC30LDQs9GA0YPQt9C60Lgg0Y3RgtCw0LbQsC5cclxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgUHJvY2VkdXJhbE1hcCBnZW5lcmF0aW9uIG9yIHZhbGlkYXRpb24gZmFpbHMuXHJcbiAgICovXHJcbiAgYXN5bmMgbG9hZEZsb29yKGZsb29yTnVtYmVyLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KSB7XHJcbiAgICBpZiAoZmxvb3JOdW1iZXIgPCB0aGlzLm1pbkZsb29yIHx8IGZsb29yTnVtYmVyID4gdGhpcy5tYXhGbG9vcikge1xyXG4gICAgICBjb25zdCBlcnJvck1zZyA9IGBBdHRlbXB0ZWQgdG8gbG9hZCBpbnZhbGlkIGZsb29yOiAke2Zsb29yTnVtYmVyfS4gQWxsb3dlZCByYW5nZTogWyR7dGhpcy5taW5GbG9vcn0tJHt0aGlzLm1heEZsb29yfV1gO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBbTGV2ZWxdICR7ZXJyb3JNc2d9YCk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coYFtMZXZlbF0gTG9hZGluZyBmbG9vciAke2Zsb29yTnVtYmVyfS4uLmApO1xyXG4gICAgdGhpcy5jdXJyZW50Rmxvb3IgPSBmbG9vck51bWJlcjtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBQcm9jZWR1cmFsTWFwIGNvbnN0cnVjdG9yIG5vdyBoYW5kbGVzIGdlbmVyYXRpb24gQU5EIHZhbGlkYXRpb24gKGxpa2UgbGlmdCByZWFjaGFiaWxpdHkpLlxyXG4gICAgICAvLyBJdCB3aWxsIHRocm93IGFuIGVycm9yIGlmIGdlbmVyYXRpb24gZmFpbHMgY3JpdGljYWxseS5cclxuICAgICAgdGhpcy5jdXJyZW50TWFwID0gbmV3IFByb2NlZHVyYWxNYXAoXHJcbiAgICAgICAgY2FudmFzV2lkdGgsXHJcbiAgICAgICAgY2FudmFzSGVpZ2h0LFxyXG4gICAgICAgIHRoaXMuY3VycmVudEZsb29yLFxyXG4gICAgICAgIHRoaXMubWluRmxvb3IsXHJcbiAgICAgICAgdGhpcy5tYXhGbG9vclxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gQmFzaWMgdmFsaWRhdGlvbiBhZnRlciBjcmVhdGlvbiAoZW5zdXJlIG1hcCBvYmplY3QgbG9va3MgcmVhc29uYWJsZSlcclxuICAgICAgaWYgKFxyXG4gICAgICAgICF0aGlzLmN1cnJlbnRNYXAudGlsZVNpemUgfHxcclxuICAgICAgICAhdGhpcy5jdXJyZW50TWFwLm1hcCB8fFxyXG4gICAgICAgICF0aGlzLmN1cnJlbnRNYXAuYm9va3MgfHwgLy8gYm9va3Mgc2hvdWxkIGV4aXN0IChldmVuIGlmIGVtcHR5KVxyXG4gICAgICAgICF0aGlzLmN1cnJlbnRNYXAuZ2V0TGlmdFBvc2l0aW9uKCkgLy8gTGlmdCBwb3NpdGlvbiBNVVNUIGV4aXN0IGFmdGVyIHN1Y2Nlc3NmdWwgZ2VuZXJhdGlvblxyXG4gICAgICApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAnW0xldmVsXSBQcm9jZWR1cmFsTWFwIGluc3RhbmNlIGlzIG1pc3NpbmcgZXNzZW50aWFsIHByb3BlcnRpZXMgYWZ0ZXIgY3JlYXRpb24gKHRpbGVTaXplLCBtYXAsIGJvb2tzLCBvciBsaWZ0UG9zaXRpb24pLidcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnRpbGVTaXplID0gdGhpcy5jdXJyZW50TWFwLnRpbGVTaXplO1xyXG4gICAgICBjb25zdCBsaWZ0UG9zID0gdGhpcy5jdXJyZW50TWFwLmdldExpZnRQb3NpdGlvbigpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBgICBbTGV2ZWxdIE1hcCBnZW5lcmF0ZWQgZm9yIGZsb29yICR7dGhpcy5jdXJyZW50Rmxvb3J9LiBUaWxlU2l6ZTogJHt0aGlzLnRpbGVTaXplfS4gTGlmdCBhdCB0aWxlKCR7bGlmdFBvcy50aWxlWH0sICR7bGlmdFBvcy50aWxlWX0pLmBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIFJFTU9WRUQ6IGNyZWF0ZVRyYW5zaXRpb25ab25lcygpIGNhbGwgaXMgbm8gbG9uZ2VyIG5lZWRlZC5cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGBbTGV2ZWxdIEZsb29yICR7Zmxvb3JOdW1iZXJ9IGxvYWRlZCBzdWNjZXNzZnVsbHkuIE1hcCBzaXplOiAke3RoaXMuY3VycmVudE1hcC5jb2xzfXgke3RoaXMuY3VycmVudE1hcC5yb3dzfS4gJHt0aGlzLmN1cnJlbnRNYXAuYm9va3MubGVuZ3RofSBib29rcyBwbGFjZWQuYFxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBgW0xldmVsXSBDUklUSUNBTCBGQUlMVVJFIGxvYWRpbmcgZmxvb3IgJHtmbG9vck51bWJlcn06IEZhaWxlZCB0byBjcmVhdGUgb3IgdmFsaWRhdGUgUHJvY2VkdXJhbE1hcDpgLFxyXG4gICAgICAgIGVycm9yXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuY3VycmVudE1hcCA9IG51bGw7IC8vIEVuc3VyZSBzdGF0ZSBpcyBjbGVhbiBvbiBmYWlsdXJlXHJcbiAgICAgIC8vIFJldGhyb3cgdGhlIGVycm9yIGZvciBHYW1lLmpzIHRvIGhhbmRsZSAobGlrZWx5IHNob3cgZXJyb3IgbWVzc2FnZSBhbmQgc3RvcClcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIGBNYXAgZ2VuZXJhdGlvbi92YWxpZGF0aW9uIGZhaWxlZCBmb3IgZmxvb3IgJHtmbG9vck51bWJlcn0uICR7ZXJyb3IubWVzc2FnZSB8fCBlcnJvcn1gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIGEgcmVzb2x2ZWQgcHJvbWlzZSAoZ2VuZXJhdGlvbiBpdHNlbGYgaXMgc3luY2hyb25vdXMgd2l0aGluIHRoZSBjb25zdHJ1Y3RvcilcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICB9XHJcblxyXG4gIC8vIFJFTU9WRUQ6IGNyZWF0ZVRyYW5zaXRpb25ab25lcygpIG1ldGhvZCBpcyBvYnNvbGV0ZS5cclxuXHJcbiAgLy8gUkVNT1ZFRDogZ2V0Q3VycmVudFRyYW5zaXRpb25ab25lKCkgbWV0aG9kIGlzIG9ic29sZXRlLiBMaWZ0IGludGVyYWN0aW9uIGNoZWNrZWQgZGlmZmVyZW50bHkuXHJcblxyXG4gIC8qKlxyXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC80LDRgdGB0LjQsiDQvtCx0YrQtdC60YLQvtCyINC60L3QuNCzINC90LAg0YLQtdC60YPRidC10Lkg0LrQsNGA0YLQtS5cclxuICAgKiBAcmV0dXJucyB7QXJyYXk8b2JqZWN0Pn0g0JzQsNGB0YHQuNCyINC+0LHRitC10LrRgtC+0LIg0LrQvdC40LMuXHJcbiAgICovXHJcbiAgZ2V0Q3VycmVudEJvb2tzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudE1hcCA/IHRoaXMuY3VycmVudE1hcC5ib29rcyA6IFtdO1xyXG4gIH1cclxufVxyXG4iLCIvLyBzcmMvY29yZS9HYW1lUmVuZGVyZXIuanNcclxuLy8gKE5vIGNoYW5nZXMgbmVlZGVkIGZyb20gcHJldmlvdXMgcHJvdmlkZWQgdmVyc2lvbiwgYXNzdW1pbmcgaXQgd2FzIGNvcnJlY3QpXHJcbmltcG9ydCB7IENoYXJhY3RlciB9IGZyb20gJy4vQ2hhcmFjdGVyLmpzJzsgLy8gT3B0aW9uYWwgZm9yIHR5cGUgY2hlY2tzXHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZVJlbmRlcmVyIHtcclxuICBjb25zdHJ1Y3RvcihnYW1lKSB7XHJcbiAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgdGhpcy5jYW52YXMgPSBudWxsO1xyXG4gICAgdGhpcy5jdHggPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZUNhbnZhcygpIHtcclxuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUtY2FudmFzJyk7XHJcbiAgICBpZiAoIXRoaXMuY2FudmFzKSB0aHJvdyBuZXcgRXJyb3IoXCJbUmVuZGVyZXJdIENhbnZhcyAnZ2FtZS1jYW52YXMnIG5vdCBmb3VuZCFcIik7XHJcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBpZiAoIXRoaXMuY3R4KSB0aHJvdyBuZXcgRXJyb3IoJ1tSZW5kZXJlcl0gRmFpbGVkIHRvIGdldCAyRCBjb250ZXh0LicpO1xyXG4gICAgdGhpcy5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnJlc2l6ZUNhbnZhcygpO1xyXG4gICAgY29uc29sZS5sb2coJ1tSZW5kZXJlcl0gQ2FudmFzIGluaXRpYWxpemVkLicpO1xyXG4gICAgcmV0dXJuIHsgY2FudmFzOiB0aGlzLmNhbnZhcywgY3R4OiB0aGlzLmN0eCB9O1xyXG4gIH1cclxuXHJcbiAgcmVzaXplQ2FudmFzKCkge1xyXG4gICAgaWYgKCF0aGlzLmNhbnZhcykgcmV0dXJuO1xyXG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgIGlmICh0aGlzLmdhbWUuY2hhcmFjdGVyICYmIHRoaXMuZ2FtZS5sZXZlbD8uY3VycmVudE1hcCkge1xyXG4gICAgICB0aGlzLmNlbnRlckNhbWVyYU9uQ2hhcmFjdGVyKCk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhgW1JlbmRlcmVyXSBDYW52YXMgcmVzaXplZCB0byAke3RoaXMuY2FudmFzLndpZHRofXgke3RoaXMuY2FudmFzLmhlaWdodH1gKTtcclxuICB9XHJcblxyXG4gIGNlbnRlckNhbWVyYU9uQ2hhcmFjdGVyKCkge1xyXG4gICAgY29uc3QgeyBjaGFyYWN0ZXIsIGxldmVsLCBjYW52YXMgfSA9IHRoaXMuZ2FtZTtcclxuICAgIGlmIChjaGFyYWN0ZXIgJiYgbGV2ZWw/LmN1cnJlbnRNYXAgJiYgY2FudmFzKSB7XHJcbiAgICAgIGxldmVsLmN1cnJlbnRNYXAub2Zmc2V0WCA9IE1hdGguZmxvb3IoY2FudmFzLndpZHRoIC8gMiAtIGNoYXJhY3Rlci54KTtcclxuICAgICAgbGV2ZWwuY3VycmVudE1hcC5vZmZzZXRZID0gTWF0aC5mbG9vcihjYW52YXMuaGVpZ2h0IC8gMiAtIGNoYXJhY3Rlci55KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRyYXdGcmFtZSgpIHtcclxuICAgIGlmICghdGhpcy5jdHggfHwgIXRoaXMuY2FudmFzKSByZXR1cm47XHJcbiAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICBjb25zdCBtYXAgPSB0aGlzLmdhbWUubGV2ZWw/LmN1cnJlbnRNYXA7XHJcbiAgICBjb25zdCBjaGFyID0gdGhpcy5nYW1lLmNoYXJhY3RlcjtcclxuICAgIGlmIChtYXApIHtcclxuICAgICAgbWFwLmRyYXcodGhpcy5jdHgsIHRoaXMuZ2FtZS5ib29rSW1hZ2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNoYXIgJiYgbWFwKSB7XHJcbiAgICAgIGNoYXIuZHJhdyhtYXAub2Zmc2V0WCwgbWFwLm9mZnNldFkpO1xyXG4gICAgfVxyXG4gICAgLy8gdGhpcy5kcmF3RGVidWdJbmZvKCk7IC8vIE9wdGlvbmFsXHJcbiAgfVxyXG5cclxuICBkcmF3V2luU2NyZWVuKCkge1xyXG4gICAgaWYgKCF0aGlzLmN0eCB8fCAhdGhpcy5jYW52YXMpIHJldHVybjtcclxuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuOCknO1xyXG4gICAgdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICB0aGlzLmN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIHRoaXMuY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xyXG4gICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2xpbWUnO1xyXG4gICAgLy8gQ29uc2lkZXIgdXNpbmcgYSBmb250IGF2YWlsYWJsZSBvbiBtb3N0IHN5c3RlbXMgb3IgaW5jbHVkZSBvbmUgdmlhIENTUyBAZm9udC1mYWNlXHJcbiAgICB0aGlzLmN0eC5mb250ID0gJ2NsYW1wKDMycHgsIDh2dywgNDhweCkgXCJQcmVzcyBTdGFydCAyUFwiLCBjdXJzaXZlLCBBcmlhbCwgc2Fucy1zZXJpZic7XHJcbiAgICB0aGlzLmN0eC5maWxsVGV4dCgnWldZQ0nEmFNUV08hJywgdGhpcy5jYW52YXMud2lkdGggLyAyLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyIC0gODApOyAvLyBUcmFuc2xhdGVkXHJcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xyXG4gICAgdGhpcy5jdHguZm9udCA9ICdjbGFtcCgyNHB4LCA1dncsIDMycHgpIEFyaWFsLCBzYW5zLXNlcmlmJztcclxuICAgIHRoaXMuY3R4LmZpbGxUZXh0KFxyXG4gICAgICBgWmVicmFubyB3c3p5c3RraWUgJHt0aGlzLmdhbWUudGFyZ2V0Qm9va3NUb1dpbn0ga3NpxIXFvGtpIWAsIC8vIFRyYW5zbGF0ZWRcclxuICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAyLFxyXG4gICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyXHJcbiAgICApO1xyXG4gICAgdGhpcy5jdHguZm9udCA9ICdjbGFtcCgxOHB4LCA0dncsIDI0cHgpIEFyaWFsLCBzYW5zLXNlcmlmJztcclxuICAgIHRoaXMuY3R4LmZpbGxUZXh0KCdVbml3ZXJzeXRldCB1cmF0b3dhbnkhJywgdGhpcy5jYW52YXMud2lkdGggLyAyLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyICsgNjApOyAvLyBUcmFuc2xhdGVkXHJcbiAgICB0aGlzLmN0eC5mb250ID0gJ2NsYW1wKDE0cHgsIDN2dywgMThweCkgQXJpYWwsIHNhbnMtc2VyaWYnO1xyXG4gICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJyNjY2MnO1xyXG4gICAgdGhpcy5jdHguZmlsbFRleHQoXHJcbiAgICAgICcoT2TFm3dpZcW8IHN0cm9uxJksIGFieSB6YWdyYcSHIHBvbm93bmllKScsIC8vIFRyYW5zbGF0ZWRcclxuICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAyLFxyXG4gICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLSA1MFxyXG4gICAgKTtcclxuICB9XHJcbiAgLy8gZHJhd0RlYnVnSW5mbygpIHsgLi4uIH0gLy8gT3B0aW9uYWwgZGVidWcgZHJhd2luZ1xyXG59XHJcbiIsIi8vIHNyYy9jb3JlL0dhbWVwbGF5TWFuYWdlci5qc1xyXG5pbXBvcnQge1xyXG4gIEdhbWVTdGF0ZSxcclxuICBMSUZUX0NPT0xET1dOX01TLFxyXG4gIFRJTEVfV0FMTCxcclxuICBUSUxFX0NPUlJJRE9SLFxyXG4gIFRJTEVfUk9PTV9GTE9PUixcclxuICBUSUxFX0xJRlQsXHJcbiAgcXVlc3Rpb25zLFxyXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IFVJTWFuYWdlciB9IGZyb20gJy4uL1VJL1VJTWFuYWdlci5qcyc7XHJcbmltcG9ydCB7IENoYXJhY3RlciB9IGZyb20gJy4vQ2hhcmFjdGVyLmpzJzsgLy8g0KPQsdC10LTQuNGC0LXRgdGMLCDRh9GC0L4gQ2hhcmFjdGVyINC40LzQv9C+0YDRgtC40YDQvtCy0LDQvVxyXG5cclxuY29uc3QgREVCVUdfRkxPT1JfR00gPSAzOyAvLyDQlNC70Y8g0LvQvtCz0L7QsiBHYW1lcGxheU1hbmFnZXJcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lcGxheU1hbmFnZXIge1xyXG4gIGNvbnN0cnVjdG9yKGdhbWUpIHtcclxuICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICB0aGlzLmhhbmRsZUFuc3dlciA9IHRoaXMuaGFuZGxlQW5zd2VyLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmhhbmRsZUZsb29yU2VsZWN0aW9uID0gdGhpcy5oYW5kbGVGbG9vclNlbGVjdGlvbi5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKHRpbWVzdGFtcCkge1xyXG4gICAgaWYgKHRoaXMuZ2FtZS5nYW1lU3RhdGUgPT09IEdhbWVTdGF0ZS5QTEFZSU5HKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlUGxheWluZ1N0YXRlKHRpbWVzdGFtcCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGVQbGF5aW5nU3RhdGUodGltZXN0YW1wKSB7XHJcbiAgICBjb25zdCBjaGFyID0gdGhpcy5nYW1lLmNoYXJhY3RlcjtcclxuICAgIGlmICghdGhpcy5nYW1lLmxldmVsPy5jdXJyZW50TWFwIHx8ICFjaGFyIHx8ICF0aGlzLmdhbWUuaW5wdXRNYW5hZ2VyKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgeyBtb3ZlZCB9ID0gdGhpcy5oYW5kbGVNb3ZlbWVudCgpO1xyXG5cclxuICAgIGlmIChjaGFyICYmIHR5cGVvZiBjaGFyLnVwZGF0ZUFuaW1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBjaGFyLnVwZGF0ZUFuaW1hdGlvbih0aW1lc3RhbXApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghbW92ZWQgJiYgdGhpcy5nYW1lLmdhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLlBMQVlJTkcpIHtcclxuICAgICAgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbnMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZU1vdmVtZW50KCkge1xyXG4gICAgY29uc3QgY2hhciA9IHRoaXMuZ2FtZS5jaGFyYWN0ZXI7XHJcbiAgICBjb25zdCBtYXAgPSB0aGlzLmdhbWUubGV2ZWwuY3VycmVudE1hcDtcclxuICAgIGNvbnN0IGlucHV0ID0gdGhpcy5nYW1lLmlucHV0TWFuYWdlcjtcclxuICAgIGlmICghY2hhciB8fCAhbWFwIHx8ICFpbnB1dCkgcmV0dXJuIHsgbW92ZWQ6IGZhbHNlIH07XHJcblxyXG4gICAgY29uc3QgZGlyZWN0aW9uID0gaW5wdXQuZ2V0SW5wdXREaXJlY3Rpb24oKTtcclxuICAgIGxldCBkeCA9IGRpcmVjdGlvbi54ICogY2hhci5zcGVlZDtcclxuICAgIGxldCBkeSA9IGRpcmVjdGlvbi55ICogY2hhci5zcGVlZDtcclxuXHJcbiAgICBjb25zdCBpbnRlbmRlZE1vdmUgPSBkeCAhPT0gMCB8fCBkeSAhPT0gMDtcclxuICAgIGxldCBhY3R1YWxNb3ZlWCA9IDA7XHJcbiAgICBsZXQgYWN0dWFsTW92ZVkgPSAwO1xyXG4gICAgbGV0IG1vdmVkID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKGludGVuZGVkTW92ZSkge1xyXG4gICAgICBjb25zdCBjYW5Nb3ZlWCA9IGR4ICE9PSAwICYmICF0aGlzLmNoZWNrQ29sbGlzaW9uKGNoYXIueCArIGR4LCBjaGFyLnkpO1xyXG4gICAgICBjb25zdCBjYW5Nb3ZlWSA9IGR5ICE9PSAwICYmICF0aGlzLmNoZWNrQ29sbGlzaW9uKGNoYXIueCwgY2hhci55ICsgZHkpO1xyXG5cclxuICAgICAgaWYgKGNhbk1vdmVYKSBhY3R1YWxNb3ZlWCA9IGR4O1xyXG4gICAgICBpZiAoY2FuTW92ZVkpIGFjdHVhbE1vdmVZID0gZHk7XHJcblxyXG4gICAgICAvLyDQo9C70YPRh9GI0LXQvdC90LDRjyDQvtCx0YDQsNCx0L7RgtC60LAg0LTQuNCw0LPQvtC90LDQu9GM0L3QvtC5INC60L7Qu9C70LjQt9C40LggKNGB0LrQvtC70YzQttC10L3QuNC1KVxyXG4gICAgICBpZiAoZHggIT09IDAgJiYgZHkgIT09IDApIHtcclxuICAgICAgICAvLyDQldGB0LvQuCDQv9GL0YLQsNC70LjRgdGMINC00LLQuNCz0LDRgtGM0YHRjyDQv9C+INC00LjQsNCz0L7QvdCw0LvQuFxyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ29sbGlzaW9uKGNoYXIueCArIGR4LCBjaGFyLnkgKyBkeSkpIHtcclxuICAgICAgICAgIC8vINCYINC00LjQsNCz0L7QvdCw0LvRjCDQt9Cw0LHQu9C+0LrQuNGA0L7QstCw0L3QsFxyXG4gICAgICAgICAgaWYgKGNhbk1vdmVYICYmICFjYW5Nb3ZlWSkge1xyXG4gICAgICAgICAgICAvLyDQnNC+0LbQtdC8INC/0L4gWCwg0L3QviDQvdC1INC/0L4gWSAo0LXRgdC70Lgg0LHRiyDQtNCy0LjQs9Cw0LvQuNGB0Ywg0YLQvtC70YzQutC+INC/0L4gWSlcclxuICAgICAgICAgICAgYWN0dWFsTW92ZVkgPSAwOyAvLyDQlNCy0LjQs9Cw0LXQvNGB0Y8g0YLQvtC70YzQutC+INC/0L4gWFxyXG4gICAgICAgICAgfSBlbHNlIGlmIChjYW5Nb3ZlWSAmJiAhY2FuTW92ZVgpIHtcclxuICAgICAgICAgICAgLy8g0JzQvtC20LXQvCDQv9C+IFksINC90L4g0L3QtSDQv9C+IFhcclxuICAgICAgICAgICAgYWN0dWFsTW92ZVggPSAwOyAvLyDQlNCy0LjQs9Cw0LXQvNGB0Y8g0YLQvtC70YzQutC+INC/0L4gWVxyXG4gICAgICAgICAgfSBlbHNlIGlmICghY2FuTW92ZVggJiYgIWNhbk1vdmVZKSB7XHJcbiAgICAgICAgICAgIC8vINCd0LUg0LzQvtC20LXQvCDQvdC4INC/0L4gWCwg0L3QuCDQv9C+IFkg0L/QviDQvtGC0LTQtdC70YzQvdC+0YHRgtC4XHJcbiAgICAgICAgICAgIGFjdHVhbE1vdmVYID0gMDtcclxuICAgICAgICAgICAgYWN0dWFsTW92ZVkgPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8g0JXRgdC70Lgg0LzQvtC20LXQvCDQuCDQv9C+IFgg0Lgg0L/QviBZINC+0YLQtNC10LvRjNC90L4sINC90L4g0L3QtSDQv9C+INC00LjQsNCz0L7QvdCw0LvQuCwg0YLQviBhY3R1YWxNb3ZlWCDQuCBhY3R1YWxNb3ZlWSDRg9C20LUg0YPRgdGC0LDQvdC+0LLQu9C10L3RiyDQv9GA0LDQstC40LvRjNC90L5cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChhY3R1YWxNb3ZlWCAhPT0gMCB8fCBhY3R1YWxNb3ZlWSAhPT0gMCkge1xyXG4gICAgICAgIGNoYXIueCArPSBhY3R1YWxNb3ZlWDtcclxuICAgICAgICBjaGFyLnkgKz0gYWN0dWFsTW92ZVk7XHJcbiAgICAgICAgbW92ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoTWF0aC5hYnMoYWN0dWFsTW92ZVgpID49IE1hdGguYWJzKGFjdHVhbE1vdmVZKSkge1xyXG4gICAgICAgICAgaWYgKGFjdHVhbE1vdmVYICE9PSAwKVxyXG4gICAgICAgICAgICBjaGFyLmN1cnJlbnREaXJlY3Rpb24gPVxyXG4gICAgICAgICAgICAgIGFjdHVhbE1vdmVYID4gMCA/IENoYXJhY3Rlci5EaXJlY3Rpb24uUklHSFQgOiBDaGFyYWN0ZXIuRGlyZWN0aW9uLkxFRlQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChhY3R1YWxNb3ZlWSAhPT0gMClcclxuICAgICAgICAgICAgY2hhci5jdXJyZW50RGlyZWN0aW9uID1cclxuICAgICAgICAgICAgICBhY3R1YWxNb3ZlWSA+IDAgPyBDaGFyYWN0ZXIuRGlyZWN0aW9uLkRPV04gOiBDaGFyYWN0ZXIuRGlyZWN0aW9uLlVQO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2hhci5pc01vdmluZyA9IG1vdmVkO1xyXG4gICAgcmV0dXJuIHsgbW92ZWQgfTtcclxuICB9XHJcblxyXG4gIGNoZWNrQ29sbGlzaW9uKHRhcmdldFgsIHRhcmdldFkpIHtcclxuICAgIGNvbnN0IG1hcCA9IHRoaXMuZ2FtZS5sZXZlbD8uY3VycmVudE1hcDtcclxuICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdhbWUuY2hhcmFjdGVyO1xyXG4gICAgaWYgKCFtYXAgfHwgIWNoYXIpIHJldHVybiB0cnVlO1xyXG5cclxuICAgIGNvbnN0IGNvbGxpc2lvbkJveCA9IGNoYXIuZ2V0Q29sbGlzaW9uQm94KHRhcmdldFgsIHRhcmdldFkpO1xyXG4gICAgLy8g0JrQu9GO0YfQtdCy0YvQtSDRgtC+0YfQutC4INC60L7Qu9C70LDQudC00LXRgNCwINC00LvRjyDQv9GA0L7QstC10YDQutC4XHJcbiAgICBjb25zdCBwb2ludHNUb0NoZWNrID0gW1xyXG4gICAgICB7IHg6IGNvbGxpc2lvbkJveC5sZWZ0LCB5OiBjb2xsaXNpb25Cb3gudG9wIH0sIC8vINCb0LXQstGL0Lkg0LLQtdGA0YXQvdC40LlcclxuICAgICAgeyB4OiBjb2xsaXNpb25Cb3gucmlnaHQsIHk6IGNvbGxpc2lvbkJveC50b3AgfSwgLy8g0J/RgNCw0LLRi9C5INCy0LXRgNGF0L3QuNC5XHJcbiAgICAgIHsgeDogY29sbGlzaW9uQm94LmxlZnQsIHk6IGNvbGxpc2lvbkJveC5ib3R0b20gfSwgLy8g0JvQtdCy0YvQuSDQvdC40LbQvdC40LlcclxuICAgICAgeyB4OiBjb2xsaXNpb25Cb3gucmlnaHQsIHk6IGNvbGxpc2lvbkJveC5ib3R0b20gfSwgLy8g0J/RgNCw0LLRi9C5INC90LjQttC90LjQuVxyXG4gICAgICAvLyDQlNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C1INGC0L7Rh9C60Lgg0LTQu9GPINCx0L7Qu9C10LUg0YLQvtGH0L3QvtC5INC/0YDQvtCy0LXRgNC60LgsINC+0YHQvtCx0LXQvdC90L4g0LTQu9GPINGD0LfQutC40YUg0L/RgNC+0YXQvtC00L7QslxyXG4gICAgICB7IHg6IHRhcmdldFgsIHk6IGNvbGxpc2lvbkJveC50b3AgfSwgLy8g0KbQtdC90YLRgCDQstC10YDRhdC90LjQuVxyXG4gICAgICB7IHg6IHRhcmdldFgsIHk6IGNvbGxpc2lvbkJveC5ib3R0b20gfSwgLy8g0KbQtdC90YLRgCDQvdC40LbQvdC40LlcclxuICAgICAgeyB4OiBjb2xsaXNpb25Cb3gubGVmdCwgeTogdGFyZ2V0WSArIGNoYXIucmVuZGVyU2l6ZSAqIGNoYXIuY29sbGlzaW9uQm94RmVldE9mZnNldFJhdGlvIH0sIC8vINCh0LXRgNC10LTQuNC90LAg0LvQtdCy0L7QuSDRgdGC0L7RgNC+0L3RiyAo0L3QsCDRg9GA0L7QstC90LUg0L3QvtCzKVxyXG4gICAgICB7IHg6IGNvbGxpc2lvbkJveC5yaWdodCwgeTogdGFyZ2V0WSArIGNoYXIucmVuZGVyU2l6ZSAqIGNoYXIuY29sbGlzaW9uQm94RmVldE9mZnNldFJhdGlvIH0sIC8vINCh0LXRgNC10LTQuNC90LAg0L/RgNCw0LLQvtC5INGB0YLQvtGA0L7QvdGLICjQvdCwINGD0YDQvtCy0L3QtSDQvdC+0LMpXHJcbiAgICBdO1xyXG5cclxuICAgIGZvciAoY29uc3QgcG9pbnQgb2YgcG9pbnRzVG9DaGVjaykge1xyXG4gICAgICBpZiAoIW1hcC5pc1dhbGthYmxlKHBvaW50LngsIHBvaW50LnkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYENvbGxpc2lvbiBhdCB3b3JsZCAoJHtwb2ludC54LnRvRml4ZWQoMSl9LCAke3BvaW50LnkudG9GaXhlZCgxKX0pIC0+IHRpbGUgbm90IHdhbGthYmxlLmApO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVJbnRlcmFjdGlvbnMoKSB7XHJcbiAgICBjb25zdCBtYXAgPSB0aGlzLmdhbWUubGV2ZWw/LmN1cnJlbnRNYXA7XHJcbiAgICBjb25zdCBjaGFyID0gdGhpcy5nYW1lLmNoYXJhY3RlcjtcclxuICAgIGlmICghbWFwIHx8ICFjaGFyIHx8IHRoaXMuZ2FtZS5nYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5QTEFZSU5HKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbmVhcmJ5Qm9vayA9IG1hcC5maW5kTmVhcmJ5VW5hbnN3ZXJlZEJvb2soY2hhci54LCBjaGFyLnkpO1xyXG4gICAgaWYgKG5lYXJieUJvb2spIHtcclxuICAgICAgdGhpcy5pbml0aWF0ZVF1ZXN0aW9uKG5lYXJieUJvb2spO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLmdhbWUubGlmdENvb2xkb3duQWN0aXZlKSB7XHJcbiAgICAgIGNvbnN0IG5lYXJieUxpZnQgPSBtYXAuZmluZE5lYXJieUxpZnQoY2hhci54LCBjaGFyLnkpO1xyXG4gICAgICBpZiAobmVhcmJ5TGlmdCkge1xyXG4gICAgICAgIHRoaXMuaW5pdGlhdGVGbG9vclNlbGVjdGlvbigpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0aWF0ZVF1ZXN0aW9uKGJvb2spIHtcclxuICAgIGlmICh0aGlzLmdhbWUuZ2FtZVN0YXRlICE9PSBHYW1lU3RhdGUuUExBWUlORykgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMuZ2FtZS5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLkFTS0lOR19RVUVTVElPTik7XHJcbiAgICBpZiAodGhpcy5nYW1lLmNoYXJhY3RlcikgdGhpcy5nYW1lLmNoYXJhY3Rlci5pc01vdmluZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5nYW1lLmN1cnJlbnRCb29rVGFyZ2V0ID0gYm9vaztcclxuXHJcbiAgICBpZiAodGhpcy5nYW1lLmF2YWlsYWJsZVF1ZXN0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5nYW1lLmF2YWlsYWJsZVF1ZXN0aW9ucyA9IFsuLi5xdWVzdGlvbnNdO1xyXG4gICAgICBpZiAodGhpcy5nYW1lLmF2YWlsYWJsZVF1ZXN0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBVSU1hbmFnZXIuZmxhc2hNZXNzYWdlKCdCxYLEhWQ6IEJyYWsgZG9zdMSZcG55Y2ggcHl0YcWEIScsICdlcnJvcicpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLlBMQVlJTkcpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5jdXJyZW50Qm9va1RhcmdldCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5nYW1lLmF2YWlsYWJsZVF1ZXN0aW9ucy5sZW5ndGgpO1xyXG4gICAgdGhpcy5nYW1lLmN1cnJlbnRRdWVzdGlvbkRhdGEgPSB0aGlzLmdhbWUuYXZhaWxhYmxlUXVlc3Rpb25zLnNwbGljZShxSW5kZXgsIDEpWzBdO1xyXG4gICAgVUlNYW5hZ2VyLnNob3dRdWVzdGlvbih0aGlzLmdhbWUuY3VycmVudFF1ZXN0aW9uRGF0YSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVBbnN3ZXIoc2VsZWN0ZWRPcHRpb25JbmRleCkge1xyXG4gICAgY29uc3QgeyBnYW1lU3RhdGUsIGN1cnJlbnRRdWVzdGlvbkRhdGEsIGN1cnJlbnRCb29rVGFyZ2V0LCBsZXZlbCB9ID0gdGhpcy5nYW1lO1xyXG5cclxuICAgIGlmIChnYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5BU0tJTkdfUVVFU1RJT04gfHwgIWN1cnJlbnRRdWVzdGlvbkRhdGEgfHwgIWN1cnJlbnRCb29rVGFyZ2V0KSB7XHJcbiAgICAgIFVJTWFuYWdlci5oaWRlUXVlc3Rpb24oKTtcclxuICAgICAgdGhpcy5nYW1lLmN1cnJlbnRCb29rVGFyZ2V0ID0gbnVsbDtcclxuICAgICAgdGhpcy5nYW1lLmN1cnJlbnRRdWVzdGlvbkRhdGEgPSBudWxsO1xyXG4gICAgICBpZiAodGhpcy5nYW1lLmdhbWVTdGF0ZSAhPT0gR2FtZVN0YXRlLkdBTUVfT1ZFUikgdGhpcy5nYW1lLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuUExBWUlORyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpc0NvcnJlY3QgPSBzZWxlY3RlZE9wdGlvbkluZGV4ID09PSBjdXJyZW50UXVlc3Rpb25EYXRhLmNvcnJlY3RBbnN3ZXI7XHJcbiAgICBpZiAoaXNDb3JyZWN0KSB7XHJcbiAgICAgIFVJTWFuYWdlci5mbGFzaE1lc3NhZ2UoJ1ByYXdpZMWCb3dvIScsICdzdWNjZXNzJywgMTUwMCk7XHJcbiAgICAgIGNvbnN0IGNvbGxlY3RlZCA9IGxldmVsPy5jdXJyZW50TWFwPy5tYXJrQm9va0FzQ29sbGVjdGVkKGN1cnJlbnRCb29rVGFyZ2V0KTtcclxuICAgICAgaWYgKGNvbGxlY3RlZCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZS50b3RhbEJvb2tzQ29sbGVjdGVkR2xvYmFsbHkrKztcclxuICAgICAgICBVSU1hbmFnZXIudXBkYXRlU2NvcmUodGhpcy5nYW1lLnRvdGFsQm9va3NDb2xsZWN0ZWRHbG9iYWxseSwgdGhpcy5nYW1lLnRhcmdldEJvb2tzVG9XaW4pO1xyXG4gICAgICAgIGlmICh0aGlzLmdhbWUudG90YWxCb29rc0NvbGxlY3RlZEdsb2JhbGx5ID49IHRoaXMuZ2FtZS50YXJnZXRCb29rc1RvV2luKSB7XHJcbiAgICAgICAgICBVSU1hbmFnZXIuaGlkZVF1ZXN0aW9uKCk7XHJcbiAgICAgICAgICB0aGlzLmdhbWUuX3NldEdhbWVPdmVyKHRydWUpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBVSU1hbmFnZXIuZmxhc2hNZXNzYWdlKCdCxYLEhWQgemJpZXJhbmlhIGtzacSFxbxraSEnLCAnZXJyb3InKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgVUlNYW5hZ2VyLmZsYXNoTWVzc2FnZSgnTmllcHJhd2lkxYJvd2Egb2Rwb3dpZWTFuiEnLCAnZXJyb3InKTtcclxuICAgICAgdGhpcy5nYW1lLmF2YWlsYWJsZVF1ZXN0aW9ucy5wdXNoKGN1cnJlbnRRdWVzdGlvbkRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIFVJTWFuYWdlci5oaWRlUXVlc3Rpb24oKTtcclxuICAgIHRoaXMuZ2FtZS5jdXJyZW50Qm9va1RhcmdldCA9IG51bGw7XHJcbiAgICB0aGlzLmdhbWUuY3VycmVudFF1ZXN0aW9uRGF0YSA9IG51bGw7XHJcbiAgICBpZiAodGhpcy5nYW1lLmdhbWVTdGF0ZSAhPT0gR2FtZVN0YXRlLkdBTUVfT1ZFUikgdGhpcy5nYW1lLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuUExBWUlORyk7XHJcbiAgfVxyXG5cclxuICBpbml0aWF0ZUZsb29yU2VsZWN0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMuZ2FtZS5nYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5QTEFZSU5HIHx8IHRoaXMuZ2FtZS5saWZ0Q29vbGRvd25BY3RpdmUpIHJldHVybjtcclxuICAgIHRoaXMuZ2FtZS5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLlNFTEVDVElOR19GTE9PUik7XHJcbiAgICBpZiAodGhpcy5nYW1lLmNoYXJhY3RlcikgdGhpcy5nYW1lLmNoYXJhY3Rlci5pc01vdmluZyA9IGZhbHNlO1xyXG4gICAgVUlNYW5hZ2VyLnNob3dGbG9vclNlbGVjdGlvblVJKFxyXG4gICAgICB0aGlzLmdhbWUubGV2ZWwubWluRmxvb3IsXHJcbiAgICAgIHRoaXMuZ2FtZS5sZXZlbC5tYXhGbG9vcixcclxuICAgICAgdGhpcy5nYW1lLmxldmVsLmN1cnJlbnRGbG9vclxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUZsb29yU2VsZWN0aW9uKHNlbGVjdGVkRmxvb3IpIHtcclxuICAgIGlmICh0aGlzLmdhbWUuZ2FtZVN0YXRlICE9PSBHYW1lU3RhdGUuU0VMRUNUSU5HX0ZMT09SKSB7XHJcbiAgICAgIFVJTWFuYWdlci5oaWRlRmxvb3JTZWxlY3Rpb25VSSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBVSU1hbmFnZXIuaGlkZUZsb29yU2VsZWN0aW9uVUkoKTtcclxuICAgIGlmIChcclxuICAgICAgc2VsZWN0ZWRGbG9vciA9PT0gdGhpcy5nYW1lLmxldmVsLmN1cnJlbnRGbG9vciB8fFxyXG4gICAgICBzZWxlY3RlZEZsb29yIDwgdGhpcy5nYW1lLmxldmVsLm1pbkZsb29yIHx8XHJcbiAgICAgIHNlbGVjdGVkRmxvb3IgPiB0aGlzLmdhbWUubGV2ZWwubWF4Rmxvb3JcclxuICAgICkge1xyXG4gICAgICB0aGlzLmdhbWUuc2V0R2FtZVN0YXRlKEdhbWVTdGF0ZS5QTEFZSU5HKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5oYW5kbGVMaWZ0VHJhbnNpdGlvbihzZWxlY3RlZEZsb29yKS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIHRoaXMuZ2FtZS5faGFuZGxlRmF0YWxFcnJvcihgQsWCxIVkIHByemVqxZtjaWEgbmEgcGnEmXRybzogJHtlcnIubWVzc2FnZX1gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgaGFuZGxlTGlmdFRyYW5zaXRpb24odGFyZ2V0Rmxvb3IpIHtcclxuICAgIGNvbnN0IGdhbWUgPSB0aGlzLmdhbWU7XHJcbiAgICBjb25zdCBpc0RlYnVnID0gZ2FtZS5sZXZlbD8uY3VycmVudEZsb29yID09PSBERUJVR19GTE9PUl9HTSB8fCB0YXJnZXRGbG9vciA9PT0gREVCVUdfRkxPT1JfR007XHJcblxyXG4gICAgaWYgKGlzRGVidWcpXHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGBbR2FtZXBsYXlNYW5hZ2VyIEYke3RhcmdldEZsb29yfSBoYW5kbGVMaWZ0VHJhbnNpdGlvbl0gU3RhcnRpbmcgdHJhbnNpdGlvbi4gQ29vbGRvd246ICR7Z2FtZS5saWZ0Q29vbGRvd25BY3RpdmV9YFxyXG4gICAgICApO1xyXG4gICAgaWYgKGdhbWUuZ2FtZVN0YXRlICE9PSBHYW1lU3RhdGUuU0VMRUNUSU5HX0ZMT09SIHx8IGdhbWUubGlmdENvb2xkb3duQWN0aXZlKSByZXR1cm47XHJcblxyXG4gICAgZ2FtZS5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLlRSQU5TSVRJT05JTkcpO1xyXG4gICAgaWYgKGdhbWUuY2hhcmFjdGVyKSBnYW1lLmNoYXJhY3Rlci5pc01vdmluZyA9IGZhbHNlO1xyXG4gICAgVUlNYW5hZ2VyLmhpZGVRdWVzdGlvbigpO1xyXG4gICAgVUlNYW5hZ2VyLmhpZGVGbG9vclNlbGVjdGlvblVJKCk7XHJcbiAgICBnYW1lLmxpZnRDb29sZG93bkFjdGl2ZSA9IHRydWU7XHJcbiAgICBVSU1hbmFnZXIuZmxhc2hNZXNzYWdlKGBQcnplasWbY2llIG5hIHBpxJl0cm8gJHt0YXJnZXRGbG9vcn0uLi5gLCAnaW5mbycsIExJRlRfQ09PTERPV05fTVMgLSAyMDApO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IGdhbWUubGV2ZWwubG9hZEZsb29yKHRhcmdldEZsb29yLCBnYW1lLmNhbnZhcy53aWR0aCwgZ2FtZS5jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgY29uc3QgbmV3TWFwID0gZ2FtZS5sZXZlbC5jdXJyZW50TWFwO1xyXG4gICAgICBpZiAoIW5ld01hcCkgdGhyb3cgbmV3IEVycm9yKGBNYXAgb2JqZWN0IGlzIG51bGwgZm9yIGZsb29yICR7dGFyZ2V0Rmxvb3J9LmApO1xyXG5cclxuICAgICAgY29uc3QgbGlmdFBvc0RhdGEgPSBuZXdNYXAuZ2V0TGlmdFBvc2l0aW9uKCk7XHJcbiAgICAgIGlmICghbGlmdFBvc0RhdGEpIHRocm93IG5ldyBFcnJvcihgTm8gbGlmdCBwb3NpdGlvbiBkYXRhIG9uIGxvYWRlZCBmbG9vciAke3RhcmdldEZsb29yfSFgKTtcclxuICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICBgICBbR00gRiR7dGFyZ2V0Rmxvb3J9IExpZnRUcmFuc2l0aW9uXSBMaWZ0IHRpbGU6ICgke2xpZnRQb3NEYXRhLnRpbGVYfSwke1xyXG4gICAgICAgICAgICBsaWZ0UG9zRGF0YS50aWxlWVxyXG4gICAgICAgICAgfSksIFdvcmxkOigke2xpZnRQb3NEYXRhLngudG9GaXhlZCgxKX0sJHtsaWZ0UG9zRGF0YS55LnRvRml4ZWQoMSl9KWBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgbGV0IGZpbmFsU3Bhd25Qb3MgPSBudWxsO1xyXG5cclxuICAgICAgZmluYWxTcGF3blBvcyA9IG5ld01hcC5nZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0KGxpZnRQb3NEYXRhLnRpbGVYLCBsaWZ0UG9zRGF0YS50aWxlWSwgMik7XHJcbiAgICAgIGlmIChpc0RlYnVnKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYCAgW0dNIEYke3RhcmdldEZsb29yfSBMaWZ0VHJhbnNpdGlvbl0gRnJvbSBnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0OmAsXHJcbiAgICAgICAgICBmaW5hbFNwYXduUG9zID8geyB4OiBmaW5hbFNwYXduUG9zLngudG9GaXhlZCgxKSwgeTogZmluYWxTcGF3blBvcy55LnRvRml4ZWQoMSkgfSA6IG51bGxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgaWYgKCFmaW5hbFNwYXduUG9zKSB7XHJcbiAgICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICAgIGAgIFtHTSBGJHt0YXJnZXRGbG9vcn0gTGlmdFRyYW5zaXRpb25dIGdldFNwYXduUG9pbnRJblJvb21PZkxpZnQgZmFpbGVkLiBVc2luZyBmaW5kTmVhcmVzdFdhbGthYmxlVGlsZS4uLmBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgZmluYWxTcGF3blBvcyA9IG5ld01hcC5maW5kTmVhcmVzdFdhbGthYmxlVGlsZShsaWZ0UG9zRGF0YS54LCBsaWZ0UG9zRGF0YS55LCA1LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICBgICBbR00gRiR7dGFyZ2V0Rmxvb3J9IExpZnRUcmFuc2l0aW9uXSBGcm9tIGZpbmROZWFyZXN0V2Fsa2FibGVUaWxlOmAsXHJcbiAgICAgICAgICAgIGZpbmFsU3Bhd25Qb3MgPyB7IHg6IGZpbmFsU3Bhd25Qb3MueC50b0ZpeGVkKDEpLCB5OiBmaW5hbFNwYXduUG9zLnkudG9GaXhlZCgxKSB9IDogbnVsbFxyXG4gICAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFmaW5hbFNwYXduUG9zKSB7XHJcbiAgICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICBgICBbR00gRiR7dGFyZ2V0Rmxvb3J9IExpZnRUcmFuc2l0aW9uXSBBbGwgc3Bhd24gbWV0aG9kcyBmYWlsZWQuIFVzaW5nIHJhbmRvbSBzcGF3bi4uLmBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgZW1lcmdlbmN5U3Bhd24gPSBuZXdNYXAuZmluZFJhbmRvbUluaXRpYWxTcGF3blBvc2l0aW9uKCk7XHJcbiAgICAgICAgaWYgKCFlbWVyZ2VuY3lTcGF3bikgdGhyb3cgbmV3IEVycm9yKGBFTUVSR0VOQ1kgU1BBV04gRkFJTEVEIG9uIGZsb29yICR7dGFyZ2V0Rmxvb3J9IWApO1xyXG4gICAgICAgIGZpbmFsU3Bhd25Qb3MgPSBlbWVyZ2VuY3lTcGF3bjtcclxuICAgICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICBgICBbR00gRiR7dGFyZ2V0Rmxvb3J9IExpZnRUcmFuc2l0aW9uXSBGcm9tIGVtZXJnZW5jeVNwYXduOmAsXHJcbiAgICAgICAgICAgIGZpbmFsU3Bhd25Qb3MgPyB7IHg6IGZpbmFsU3Bhd25Qb3MueC50b0ZpeGVkKDEpLCB5OiBmaW5hbFNwYXduUG9zLnkudG9GaXhlZCgxKSB9IDogbnVsbFxyXG4gICAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZ2FtZS5jaGFyYWN0ZXIueCA9IGZpbmFsU3Bhd25Qb3MueDtcclxuICAgICAgZ2FtZS5jaGFyYWN0ZXIueSA9IGZpbmFsU3Bhd25Qb3MueTtcclxuICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICBgICBbR00gRiR7dGFyZ2V0Rmxvb3J9IExpZnRUcmFuc2l0aW9uXSBGaW5hbCBsYW5kaW5nOiAoJHtnYW1lLmNoYXJhY3Rlci54LnRvRml4ZWQoXHJcbiAgICAgICAgICAgIDFcclxuICAgICAgICAgICl9LCAke2dhbWUuY2hhcmFjdGVyLnkudG9GaXhlZCgxKX0pYFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICBnYW1lLmNoYXJhY3Rlci5jdXJyZW50RGlyZWN0aW9uID0gQ2hhcmFjdGVyLkRpcmVjdGlvbi5ET1dOO1xyXG4gICAgICBnYW1lLmNoYXJhY3Rlci5pc01vdmluZyA9IGZhbHNlO1xyXG4gICAgICBnYW1lLnJlbmRlcmVyPy5jZW50ZXJDYW1lcmFPbkNoYXJhY3RlcigpO1xyXG4gICAgICB0aGlzLmVuc3VyZUNoYXJhY3RlcklzT25XYWxrYWJsZVRpbGUoZmFsc2UpOyAvLyA8LS0tINCU0J7QkdCQ0JLQm9CV0J3Qnjog0J/RgNC+0LLQtdGA0LrQsCDQv9C+0YHQu9C1INGC0LXQu9C10L/QvtGA0YLQsNGG0LjQuFxyXG4gICAgICBnYW1lLnN0YXJ0TGlmdENvb2xkb3duVGltZXIoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtHTSBGJHt0YXJnZXRGbG9vcn0gTGlmdFRyYW5zaXRpb25dIEVycm9yIGR1cmluZyB0cmFuc2l0aW9uOmAsIGVycm9yKTtcclxuICAgICAgZ2FtZS5saWZ0Q29vbGRvd25BY3RpdmUgPSBmYWxzZTtcclxuICAgICAgaWYgKGdhbWUuZ2FtZVN0YXRlICE9PSBHYW1lU3RhdGUuR0FNRV9PVkVSKSBnYW1lLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuUExBWUlORyk7XHJcbiAgICAgIGdhbWUuX2hhbmRsZUZhdGFsRXJyb3IoYFRyYW5zaXRpb24gZXJyb3IgdG8gZmxvb3IgJHt0YXJnZXRGbG9vcn06ICR7ZXJyb3IubWVzc2FnZSB8fCBlcnJvcn1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVuc3VyZUNoYXJhY3RlcklzT25XYWxrYWJsZVRpbGUoYWxsb3dTdGFuZGluZ09uTGlmdCA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBjaGFyID0gdGhpcy5nYW1lLmNoYXJhY3RlcjtcclxuICAgIGNvbnN0IG1hcCA9IHRoaXMuZ2FtZS5sZXZlbD8uY3VycmVudE1hcDtcclxuICAgIGlmICghY2hhciB8fCAhbWFwKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgY3VycmVudFRpbGVYID0gTWF0aC5mbG9vcihjaGFyLnggLyBtYXAudGlsZVNpemUpO1xyXG4gICAgY29uc3QgY3VycmVudFRpbGVZID0gTWF0aC5mbG9vcihjaGFyLnkgLyBtYXAudGlsZVNpemUpO1xyXG4gICAgY29uc3QgY3VycmVudFRpbGVWYWx1ZSA9XHJcbiAgICAgIGN1cnJlbnRUaWxlWCA+PSAwICYmIGN1cnJlbnRUaWxlWCA8IG1hcC5jb2xzICYmIGN1cnJlbnRUaWxlWSA+PSAwICYmIGN1cnJlbnRUaWxlWSA8IG1hcC5yb3dzXHJcbiAgICAgICAgPyBtYXAubWFwW2N1cnJlbnRUaWxlWV0/LltjdXJyZW50VGlsZVhdXHJcbiAgICAgICAgOiBUSUxFX1dBTEw7XHJcblxyXG4gICAgY29uc3QgaXNDZW50ZXJUaWxlV2Fsa2FibGVCeU1hcCA9IG1hcC5pc1dhbGthYmxlKGNoYXIueCwgY2hhci55KTtcclxuICAgIGNvbnN0IGlzTGlmdCA9IGN1cnJlbnRUaWxlVmFsdWUgPT09IFRJTEVfTElGVDtcclxuICAgIGNvbnN0IGlzU2FmZVRvU3RhbmRIZXJlID0gaXNDZW50ZXJUaWxlV2Fsa2FibGVCeU1hcCAmJiAoIWlzTGlmdCB8fCBhbGxvd1N0YW5kaW5nT25MaWZ0KTtcclxuICAgIGNvbnN0IGlzQ29sbGlkaW5nV2l0aFdhbGwgPSB0aGlzLmNoZWNrQ29sbGlzaW9uKGNoYXIueCwgY2hhci55KTsgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INGC0LXQutGD0YnRg9GOINC/0L7Qt9C40YbQuNGOXHJcbiAgICBjb25zdCBuZWVkc051ZGdlID0gaXNDb2xsaWRpbmdXaXRoV2FsbCB8fCAhaXNTYWZlVG9TdGFuZEhlcmU7XHJcblxyXG4gICAgaWYgKG5lZWRzTnVkZ2UpIHtcclxuICAgICAgY29uc3QgaXNEZWJ1ZyA9IHRoaXMuZ2FtZS5sZXZlbD8uY3VycmVudEZsb29yID09PSBERUJVR19GTE9PUl9HTTtcclxuICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgYFtHYW1lcGxheU1hbmFnZXIgRiR7dGhpcy5nYW1lLmxldmVsLmN1cnJlbnRGbG9vcn0gQW50aVN0dWNrXSBDaGFyIGF0ICgke2NoYXIueC50b0ZpeGVkKFxyXG4gICAgICAgICAgICAxXHJcbiAgICAgICAgICApfSwke2NoYXIueS50b0ZpeGVkKFxyXG4gICAgICAgICAgICAxXHJcbiAgICAgICAgICApfSkgLT4gdGlsZSAoJHtjdXJyZW50VGlsZVh9LCR7Y3VycmVudFRpbGVZfSkgbmVlZHMgbnVkZ2UuIENvbGxpZGluZzoke2lzQ29sbGlkaW5nV2l0aFdhbGx9LCBTYWZlU3RhbmQ6JHtpc1NhZmVUb1N0YW5kSGVyZX1gXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IHNhZmVTcG90ID0gbWFwLmZpbmROZWFyZXN0V2Fsa2FibGVUaWxlKGNoYXIueCwgY2hhci55LCA4LCB0cnVlLCB0cnVlKTsgLy8gZXhjbHVkZUxpZnQ9dHJ1ZSwgYXZvaWROYXJyb3c9dHJ1ZVxyXG5cclxuICAgICAgaWYgKHNhZmVTcG90KSB7XHJcbiAgICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgYCAgW0FudGlTdHVja10gTnVkZ2luZyB0byBzYWZlIHNwb3Q6ICgke3NhZmVTcG90LngudG9GaXhlZCgxKX0sJHtzYWZlU3BvdC55LnRvRml4ZWQoXHJcbiAgICAgICAgICAgICAgMVxyXG4gICAgICAgICAgICApfSlgXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIGNoYXIueCA9IHNhZmVTcG90Lng7XHJcbiAgICAgICAgY2hhci55ID0gc2FmZVNwb3QueTtcclxuICAgICAgICB0aGlzLmdhbWUucmVuZGVyZXI/LmNlbnRlckNhbWVyYU9uQ2hhcmFjdGVyKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICBgICBbQW50aVN0dWNrXSBDUklUSUNBTDogQ291bGQgbm90IGZpbmQgYW55IHNhZmUgc3BvdCB0byBudWRnZS4gVHJ5aW5nIHJhbmRvbS5gXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGVtZXJnZW5jeVNwb3QgPSBtYXAuZmluZFJhbmRvbUluaXRpYWxTcGF3blBvc2l0aW9uKCk7XHJcbiAgICAgICAgaWYgKGVtZXJnZW5jeVNwb3QpIHtcclxuICAgICAgICAgIGlmIChpc0RlYnVnKVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICAgICAgYCAgW0FudGlTdHVja10gRW1lcmdlbmN5IG51ZGdlIHRvIHJhbmRvbTogKCR7ZW1lcmdlbmN5U3BvdC54LnRvRml4ZWQoXHJcbiAgICAgICAgICAgICAgICAxXHJcbiAgICAgICAgICAgICAgKX0sJHtlbWVyZ2VuY3lTcG90LnkudG9GaXhlZCgxKX0pYFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgY2hhci54ID0gZW1lcmdlbmN5U3BvdC54O1xyXG4gICAgICAgICAgY2hhci55ID0gZW1lcmdlbmN5U3BvdC55O1xyXG4gICAgICAgICAgdGhpcy5nYW1lLnJlbmRlcmVyPy5jZW50ZXJDYW1lcmFPbkNoYXJhY3RlcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignICBbQW50aVN0dWNrXSBFVkVOIFJBTkRPTSBTUEFXTiBGQUlMRUQhIEdhbWUgbWlnaHQgYmUgYnJva2VuLicpO1xyXG4gICAgICAgICAgdGhpcy5nYW1lLl9oYW5kbGVGYXRhbEVycm9yKCdBbnRpLVN0dWNrIHN5c3RlbSBmYWlsZWQgY3JpdGljYWxseS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gc3JjL2F1ZGlvL0F1ZGlvTWFuYWdlci5qc1xyXG5cclxuaW1wb3J0IHRyYWNrMVNyYyBmcm9tICcuLi8uLi9hc3NldHMvYXVkaW8vYmFjazEubXAzJzsgLy8g0J/RgNC40LzQtdGAINC/0YPRgtC4LCDQvdCw0YHRgtGA0L7QudGC0LUg0L/QvtC0INCy0LDRiNGDINGB0YLRgNGD0LrRgtGD0YDRg1xyXG5pbXBvcnQgdHJhY2syU3JjIGZyb20gJy4uLy4uL2Fzc2V0cy9hdWRpby9iYWNrMi5tcDMnO1xyXG5pbXBvcnQgdHJhY2szU3JjIGZyb20gJy4uLy4uL2Fzc2V0cy9hdWRpby9iYWNrMy5tcDMnO1xyXG5cclxuY29uc3QgREVGQVVMVF9NVVNJQ19WT0xVTUUgPSAwLjU7XHJcblxyXG4vLyDQmNGB0L/QvtC70YzQt9GD0LXQvCDQuNC80L/QvtGA0YLQuNGA0L7QstCw0L3QvdGL0LUg0LjRgdGF0L7QtNC90LjQutC4XHJcbmNvbnN0IE1VU0lDX1NPVVJDRVMgPSB7XHJcbiAgLy8g0J/QtdGA0LXQuNC80LXQvdC+0LLQsNC90L4g0LTQu9GPINGP0YHQvdC+0YHRgtC4XHJcbiAgdHJhY2sxOiB0cmFjazFTcmMsXHJcbiAgdHJhY2syOiB0cmFjazJTcmMsXHJcbiAgdHJhY2szOiB0cmFjazNTcmMsXHJcbn07XHJcblxyXG4vLyDQn9C+0YDRj9C00L7Quiwg0LIg0LrQvtGC0L7RgNC+0Lwg0YLRgNC10LrQuCDQsdGD0LTRg9GCINC80LXQvdGP0YLRjNGB0Y8gKNC80L7QttC90L4g0LjQt9C80LXQvdC40YLRjCDQvdCwINC00YDRg9Cz0YPRjiDQu9C+0LPQuNC60YMpXHJcbmNvbnN0IFRSQUNLX0NZQ0xFX09SREVSID0gWyd0cmFjazEnLCAndHJhY2syJywgJ3RyYWNrMyddO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF1ZGlvTWFuYWdlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLm11c2ljVm9sdW1lID0gREVGQVVMVF9NVVNJQ19WT0xVTUU7XHJcbiAgICB0aGlzLmN1cnJlbnRNdXNpY0VsZW1lbnQgPSBudWxsO1xyXG4gICAgdGhpcy5jdXJyZW50VHJhY2tLZXkgPSBudWxsO1xyXG4gICAgdGhpcy5pc011c2ljUGxheWluZyA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0IHNhdmVkVm9sdW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ211c2ljVm9sdW1lJyk7XHJcbiAgICBpZiAoc2F2ZWRWb2x1bWUgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5tdXNpY1ZvbHVtZSA9IHBhcnNlRmxvYXQoc2F2ZWRWb2x1bWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYXVkaW9FbGVtZW50cyA9IHt9O1xyXG4gICAgdGhpcy5fcHJlbG9hZFRyYWNrcygpO1xyXG4gIH1cclxuXHJcbiAgX3ByZWxvYWRUcmFja3MoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnW0F1ZGlvTWFuYWdlcl0gUHJlbG9hZGluZyB0cmFja3MgZnJvbSBpbXBvcnRlZCBzb3VyY2VzLi4uJyk7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBNVVNJQ19TT1VSQ0VTKSB7XHJcbiAgICAgIGlmIChNVVNJQ19TT1VSQ0VTLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICBjb25zdCBhdWRpb1BhdGggPSBNVVNJQ19TT1VSQ0VTW2tleV07IC8vINCY0YHQv9C+0LvRjNC30YPQtdC8INC40LzQv9C+0YDRgtC40YDQvtCy0LDQvdC90YvQuSDQv9GD0YLRjFxyXG4gICAgICAgIGNvbnN0IGF1ZGlvID0gbmV3IEF1ZGlvKGF1ZGlvUGF0aCk7XHJcbiAgICAgICAgYXVkaW8ucHJlbG9hZCA9ICdhdXRvJztcclxuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudHNba2V5XSA9IGF1ZGlvO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAgIFByZWxvYWRlZCAke2tleX0gZnJvbSAke2F1ZGlvUGF0aH1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0TXVzaWNWb2x1bWUodm9sdW1lKSB7XHJcbiAgICB0aGlzLm11c2ljVm9sdW1lID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdm9sdW1lKSk7IC8vINCe0LPRgNCw0L3QuNGH0LjQstCw0LXQvCDQvtGCIDAg0LTQviAxXHJcbiAgICBpZiAodGhpcy5jdXJyZW50TXVzaWNFbGVtZW50KSB7XHJcbiAgICAgIHRoaXMuY3VycmVudE11c2ljRWxlbWVudC52b2x1bWUgPSB0aGlzLm11c2ljVm9sdW1lO1xyXG4gICAgfVxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ211c2ljVm9sdW1lJywgdGhpcy5tdXNpY1ZvbHVtZS50b1N0cmluZygpKTsgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INCz0YDQvtC80LrQvtGB0YLRjFxyXG4gICAgY29uc29sZS5sb2coYFtBdWRpb01hbmFnZXJdIE11c2ljIHZvbHVtZSBzZXQgdG86ICR7dGhpcy5tdXNpY1ZvbHVtZX1gKTtcclxuICB9XHJcblxyXG4gIGdldE11c2ljVm9sdW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubXVzaWNWb2x1bWU7XHJcbiAgfVxyXG5cclxuICBwbGF5TXVzaWModHJhY2tLZXksIGxvb3AgPSB0cnVlKSB7XHJcbiAgICBpZiAoIXRoaXMuYXVkaW9FbGVtZW50c1t0cmFja0tleV0pIHtcclxuICAgICAgY29uc29sZS53YXJuKGBbQXVkaW9NYW5hZ2VyXSBUcmFjayBcIiR7dHJhY2tLZXl9XCIgbm90IGZvdW5kIG9yIG5vdCBwcmVsb2FkZWQuYCk7XHJcbiAgICAgIGlmIChNVVNJQ19TT1VSQ0VTW3RyYWNrS2V5XSkge1xyXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQvdCw0LvQuNGH0LjQtSDQsiBNVVNJQ19TT1VSQ0VTXHJcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnRzW3RyYWNrS2V5XSA9IG5ldyBBdWRpbyhNVVNJQ19TT1VSQ0VTW3RyYWNrS2V5XSk7IC8vINCY0YHQv9C+0LvRjNC30YPQtdC8INC40LzQv9C+0YDRgtC40YDQvtCy0LDQvdC90YvQuSDQv9GD0YLRjFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICBgW0F1ZGlvTWFuYWdlcl0gU291cmNlIGZvciB0cmFjayBcIiR7dHJhY2tLZXl9XCIgbm90IGRlZmluZWQgaW4gTVVTSUNfU09VUkNFUy5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pc011c2ljUGxheWluZyAmJiB0aGlzLmN1cnJlbnRUcmFja0tleSA9PT0gdHJhY2tLZXkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdG9wTXVzaWMoKTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRNdXNpY0VsZW1lbnQgPSB0aGlzLmF1ZGlvRWxlbWVudHNbdHJhY2tLZXldO1xyXG4gICAgdGhpcy5jdXJyZW50TXVzaWNFbGVtZW50LnZvbHVtZSA9IHRoaXMubXVzaWNWb2x1bWU7XHJcbiAgICB0aGlzLmN1cnJlbnRNdXNpY0VsZW1lbnQubG9vcCA9IGxvb3A7XHJcbiAgICB0aGlzLmN1cnJlbnRUcmFja0tleSA9IHRyYWNrS2V5O1xyXG5cclxuICAgIHRoaXMuY3VycmVudE11c2ljRWxlbWVudFxyXG4gICAgICAucGxheSgpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLmlzTXVzaWNQbGF5aW5nID0gdHJ1ZTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGBbQXVkaW9NYW5hZ2VyXSBQbGF5aW5nIG11c2ljOiAke3RyYWNrS2V5fSAoVm9sdW1lOiAke3RoaXMuY3VycmVudE11c2ljRWxlbWVudC52b2x1bWV9KWBcclxuICAgICAgICApO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgW0F1ZGlvTWFuYWdlcl0gRXJyb3IgcGxheWluZyBcIiR7dHJhY2tLZXl9XCI6YCwgZXJyb3IpO1xyXG4gICAgICAgIC8vINCU0L7QsdCw0LLRjNGC0LUg0LHQvtC70YzRiNC1INC00LXRgtCw0LvQtdC5INC00LvRjyDQvtGC0LvQsNC00LrQuCDQv9C+0LvQuNGC0LjQutC4INCw0LLRgtC+0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNGPXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgIGAgIFBsYXliYWNrIGZhaWx1cmUgZGV0YWlsczogdXNlckludGVyYWN0ZWQgKGNoZWNrIE1lbnUuanMpLCBkb2N1bWVudC5oYXNGb2N1cygpOiAke2RvY3VtZW50Lmhhc0ZvY3VzKCl9YFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5pc011c2ljUGxheWluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudE11c2ljRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VHJhY2tLZXkgPSBudWxsO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0b3BNdXNpYygpIHtcclxuICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpY0VsZW1lbnQpIHtcclxuICAgICAgdGhpcy5jdXJyZW50TXVzaWNFbGVtZW50LnBhdXNlKCk7XHJcbiAgICAgIHRoaXMuY3VycmVudE11c2ljRWxlbWVudC5jdXJyZW50VGltZSA9IDA7IC8vINCh0LHRgNC+0YEg0L3QsCDQvdCw0YfQsNC70L5cclxuICAgICAgdGhpcy5pc011c2ljUGxheWluZyA9IGZhbHNlO1xyXG4gICAgICBjb25zb2xlLmxvZyhgW0F1ZGlvTWFuYWdlcl0gU3RvcHBlZCBtdXNpYzogJHt0aGlzLmN1cnJlbnRUcmFja0tleX1gKTtcclxuICAgICAgLy8g0J3QtSDQvtGH0LjRidCw0LXQvCBjdXJyZW50TXVzaWNFbGVtZW50INC4IGN1cnJlbnRUcmFja0tleSDQt9C00LXRgdGMINC/0L7Qu9C90L7RgdGC0YzRjixcclxuICAgICAgLy8g0YfRgtC+0LHRiyDQvNC+0LbQvdC+INCx0YvQu9C+INCy0L7Qt9C+0LHQvdC+0LLQuNGC0YwsINC10YHQu9C4INC90YPQttC90L4sINC90L4g0LTQu9GPINGB0LzQtdC90Ysg0YLRgNC10LrQsCDRjdGC0L4g0J7Qmi5cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vINCS0YvQt9GL0LLQsNC10YLRgdGPINC/0YDQuCDRgdC80LXQvdC1INGN0YLQsNC20LBcclxuICBjaGFuZ2VUcmFja0ZvckZsb29yKGZsb29yTnVtYmVyKSB7XHJcbiAgICAvLyDQn9GA0L7RgdGC0L4g0YbQuNC60LvQuNGH0LXRgdC60Lgg0LzQtdC90Y/QtdC8INGC0YDQtdC60LguINCt0YLQsNC20Lgg0L7QsdGL0YfQvdC+IDEt0LjQvdC00LXQutGB0LjRgNC+0LLQsNC90L3Ri9C1LlxyXG4gICAgLy8gZmxvb3JOdW1iZXIg0LzQvtC20LXRgiDQsdGL0YLRjCDQu9GO0LHRi9C8LCDQv9C+0Y3RgtC+0LzRgyDQsdC10YDQtdC8INC/0L4g0LzQvtC00YPQu9GOLlxyXG4gICAgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10LwgKGZsb29yTnVtYmVyIC0gMSkg0LXRgdC70Lgg0LLQsNGI0Lgg0Y3RgtCw0LbQuCDQvdCw0YfQuNC90LDRjtGC0YHRjyDRgSAxLCDRh9GC0L7QsdGLINC40L3QtNC10LrRgSDQsdGL0Lsg0YEgMC5cclxuICAgIC8vINCV0YHQu9C4INGN0YLQsNC20Lgg0LzQvtCz0YPRgiDQsdGL0YLRjCAwINC40LvQuCDQvtGC0YDQuNGG0LDRgtC10LvRjNC90YvQvNC4LCDQvdGD0LbQvdCwINC00YDRg9Cz0LDRjyDQu9C+0LPQuNC60LAuXHJcbiAgICAvLyDQn9GA0LXQtNC/0L7Qu9C+0LbQuNC8LCDRjdGC0LDQttC4ID4gMC5cclxuICAgIGNvbnN0IGFkanVzdGVkRmxvb3JJbmRleCA9IE1hdGgubWF4KDAsIGZsb29yTnVtYmVyIC0gMSk7XHJcbiAgICBjb25zdCB0cmFja0luZGV4ID0gYWRqdXN0ZWRGbG9vckluZGV4ICUgVFJBQ0tfQ1lDTEVfT1JERVIubGVuZ3RoO1xyXG4gICAgY29uc3QgbmV3VHJhY2tLZXkgPSBUUkFDS19DWUNMRV9PUkRFUlt0cmFja0luZGV4XTtcclxuXHJcbiAgICBpZiAobmV3VHJhY2tLZXkpIHtcclxuICAgICAgY29uc29sZS5sb2coYFtBdWRpb01hbmFnZXJdIEZsb29yICR7Zmxvb3JOdW1iZXJ9IC0+IE11c2ljIHRyYWNrOiAke25ld1RyYWNrS2V5fWApO1xyXG4gICAgICB0aGlzLnBsYXlNdXNpYyhuZXdUcmFja0tleSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLndhcm4oYFtBdWRpb01hbmFnZXJdIE5vIHRyYWNrIGZvdW5kIGZvciBmbG9vciBpbmRleCAke3RyYWNrSW5kZXh9LmApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g0JzQtdGC0L7QtCDQtNC70Y8g0L/QtdGA0LLQvtC90LDRh9Cw0LvRjNC90L7Qs9C+INC30LDQv9GD0YHQutCwINC80YPQt9GL0LrQuCwg0L3QsNC/0YDQuNC80LXRgCwg0L/RgNC4INGB0YLQsNGA0YLQtSDQuNCz0YDRi1xyXG4gIHN0YXJ0SW5pdGlhbE11c2ljKGluaXRpYWxGbG9vciA9IDEpIHtcclxuICAgIC8vINCj0LHQtdC00LjQvNGB0Y8sINGH0YLQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0LLQt9Cw0LjQvNC+0LTQtdC50YHRgtCy0L7QstCw0Lsg0YHQviDRgdGC0YDQsNC90LjRhtC10LksXHJcbiAgICAvLyDQv9GA0LXQttC00LUg0YfQtdC8INC/0YvRgtCw0YLRjNGB0Y8g0LLQvtGB0L/RgNC+0LjQt9Cy0LXRgdGC0Lgg0LfQstGD0LogKNCx0YDQsNGD0LfQtdGA0Ysg0LHQu9C+0LrQuNGA0YPRjtGCINCw0LLRgtC+0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNC1KS5cclxuICAgIC8vINCt0YLQvtGCINC80LXRgtC+0LQg0LTQvtC70LbQtdC9INCy0YvQt9GL0LLQsNGC0YzRgdGPINC/0L7RgdC70LUg0LrQu9C40LrQsCBcIlBsYXlcIiDQsiDQs9C70LDQstC90L7QvCDQvNC10L3Rji5cclxuICAgIGNvbnNvbGUubG9nKCdbQXVkaW9NYW5hZ2VyXSBBdHRlbXB0aW5nIHRvIHN0YXJ0IGluaXRpYWwgbXVzaWMuLi4nKTtcclxuICAgIHRoaXMuY2hhbmdlVHJhY2tGb3JGbG9vcihpbml0aWFsRmxvb3IpO1xyXG4gIH1cclxufVxyXG4iLCIvLyBzcmMvY29yZS9HYW1lLmpzXHJcbmltcG9ydCB7IElucHV0TWFuYWdlciB9IGZyb20gJy4vSW5wdXRNYW5hZ2VyLmpzJztcclxuaW1wb3J0IHsgVUlNYW5hZ2VyIH0gZnJvbSAnLi4vVUkvVUlNYW5hZ2VyLmpzJztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyIH0gZnJvbSAnLi9DaGFyYWN0ZXIuanMnO1xyXG5pbXBvcnQgeyBMZXZlbCB9IGZyb20gJy4vTGV2ZWwuanMnO1xyXG5pbXBvcnQge1xyXG4gIEdhbWVTdGF0ZSxcclxuICBxdWVzdGlvbnMsXHJcbiAgVEFSR0VUX0JPT0tTX1RPX1dJTixcclxuICBMSUZUX0NPT0xET1dOX01TLFxyXG4gIC8vIFRJTEVfV0FMTCwgLy8gTm90IHVzZWQgZGlyZWN0bHkgaGVyZSwgY2FuIGJlIHJlbW92ZWQgaWYgdGhlcmUgYXJlIG5vIG90aGVyIHVzZXNcclxufSBmcm9tICcuLi91dGlscy9jb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBHYW1lUmVuZGVyZXIgfSBmcm9tICcuL0dhbWVSZW5kZXJlci5qcyc7XHJcbmltcG9ydCB7IEdhbWVwbGF5TWFuYWdlciB9IGZyb20gJy4vR2FtZXBsYXlNYW5hZ2VyLmpzJztcclxuaW1wb3J0IHsgQXVkaW9NYW5hZ2VyIH0gZnJvbSAnLi4vYXVkaW8vQXVkaW9NYW5hZ2VyLmpzJztcclxuXHJcbi8vIEltcG9ydHkgemFzb2LDs3dcclxuaW1wb3J0IHJlZFNwcml0ZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL2NoYXJhY3Rlcl9yZWQucG5nJztcclxuaW1wb3J0IGJsdWVTcHJpdGUgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9jaGFyYWN0ZXJfYmx1ZS5wbmcnO1xyXG5pbXBvcnQgeWVsbG93U3ByaXRlIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvY2hhcmFjdGVyX3llbGxvdy5wbmcnO1xyXG5pbXBvcnQgZ3JlZW5TcHJpdGUgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9jaGFyYWN0ZXJfZ3JlZW4ucG5nJztcclxuaW1wb3J0IGJvb2tTcHJpdGUgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9ib29rLnBuZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZSB7XHJcbiAgLy8gU3RhdGljIHByb3BlcnRpZXMgZm9yIEdhbWUgT3ZlciBzY3JlZW4gaW5mb3JtYXRpb25cclxuXHJcbiAgc3RhdGljIENSRUFUT1JfTkFNRVMgPSBbJ1JhZmHFgicsICdEaW1hJywgJ1ZlbmlhJywgJ0thY3BlciddO1xyXG4gIHN0YXRpYyBDTEFTU19BVFRFTkRJTkdfSU5GTyA9ICdLbGFzYSAyUDJUIC8gUHJvamVrdG93YW5pZSBzdHJvbiBpbnRlcm5ldG93eWNoJztcclxuXHJcbiAgY29uc3RydWN0b3IoY2hhcmFjdGVyQ29sb3IpIHtcclxuICAgIGNvbnNvbGUubG9nKGBbR2FtZV0gSW5pdGlhbGl6aW5nIHdpdGggY2hhcmFjdGVyOiAke2NoYXJhY3RlckNvbG9yfWApO1xyXG4gICAgdGhpcy5jaGFyYWN0ZXJDb2xvciA9IGNoYXJhY3RlckNvbG9yO1xyXG4gICAgdGhpcy5fZ2FtZVN0YXRlID0gR2FtZVN0YXRlLkxPQURJTkc7XHJcbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMudG90YWxCb29rc0NvbGxlY3RlZEdsb2JhbGx5ID0gMDtcclxuICAgIHRoaXMudGFyZ2V0Qm9va3NUb1dpbiA9IFRBUkdFVF9CT09LU19UT19XSU47XHJcbiAgICB0aGlzLmF2YWlsYWJsZVF1ZXN0aW9ucyA9IFtdO1xyXG4gICAgdGhpcy5jdXJyZW50Qm9va1RhcmdldCA9IG51bGw7XHJcbiAgICB0aGlzLmN1cnJlbnRRdWVzdGlvbkRhdGEgPSBudWxsO1xyXG4gICAgdGhpcy5saWZ0Q29vbGRvd25BY3RpdmUgPSBmYWxzZTtcclxuICAgIHRoaXMubGlmdENvb2xkb3duVGltZXIgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuY2FudmFzID0gbnVsbDtcclxuICAgIHRoaXMuY3R4ID0gbnVsbDtcclxuICAgIHRoaXMuY2hhcmFjdGVyID0gbnVsbDtcclxuICAgIHRoaXMubGV2ZWwgPSBudWxsO1xyXG4gICAgdGhpcy5pbnB1dE1hbmFnZXIgPSBudWxsO1xyXG4gICAgdGhpcy5yZW5kZXJlciA9IG51bGw7XHJcbiAgICB0aGlzLmdhbWVwbGF5TWFuYWdlciA9IG51bGw7XHJcbiAgICB0aGlzLmF1ZGlvTWFuYWdlciA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5zcHJpdGVzID0geyByZWQ6IHJlZFNwcml0ZSwgYmx1ZTogYmx1ZVNwcml0ZSwgeWVsbG93OiB5ZWxsb3dTcHJpdGUsIGdyZWVuOiBncmVlblNwcml0ZSB9O1xyXG4gICAgdGhpcy5ib29rSW1hZ2UgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuZ2FtZUxvb3AgPSB0aGlzLmdhbWVMb29wLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9oYW5kbGVGYXRhbEVycm9yID0gdGhpcy5faGFuZGxlRmF0YWxFcnJvci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fYm91bmRLZXlEb3duSGFuZGxlciA9IG51bGw7XHJcbiAgICB0aGlzLl9ib3VuZEtleVVwSGFuZGxlciA9IG51bGw7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5faW5pdGlhbGl6ZUNvcmVDb21wb25lbnRzKCk7XHJcblxyXG4gICAgICB0aGlzLmF1ZGlvTWFuYWdlciA9IG5ldyBBdWRpb01hbmFnZXIoKTtcclxuICAgICAgY29uc29sZS5sb2coJ1tHYW1lXSBBdWRpb01hbmFnZXIgY3JlYXRlZC4nKTtcclxuICAgICAgdGhpcy5nYW1lcGxheU1hbmFnZXIgPSBuZXcgR2FtZXBsYXlNYW5hZ2VyKHRoaXMpO1xyXG4gICAgICBjb25zb2xlLmxvZygnW0dhbWVdIEdhbWVwbGF5TWFuYWdlciBjcmVhdGVkLicpO1xyXG5cclxuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBHYW1lUmVuZGVyZXIodGhpcyk7XHJcbiAgICAgIGNvbnN0IHsgY2FudmFzLCBjdHggfSA9IHRoaXMucmVuZGVyZXIuaW5pdGlhbGl6ZUNhbnZhcygpO1xyXG4gICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbR2FtZV0gUmVuZGVyZXIgYW5kIENhbnZhcyBpbml0aWFsaXplZC4nKTtcclxuXHJcbiAgICAgIHRoaXMuX2luaXRpYWxpemVVSU1hbmFnZXIoKTtcclxuICAgICAgY29uc29sZS5sb2coJ1tHYW1lXSBVSU1hbmFnZXIgc2V0dXAgaW5pdGlhdGVkLicpO1xyXG5cclxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICAgIHRoaXMuX2xvYWRBc3NldHNBbmRUaGVuU3RhcnRMb2dpYygpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1tHYW1lXSBBc3luYyBsb2FkaW5nIGFuZCBnYW1lIGxvZ2ljIHN0YXJ0IHNlcXVlbmNlIGNvbXBsZXRlZC4nKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICdbR2FtZV0gVW5oYW5kbGVkIGVycm9yIGZyb20gX2xvYWRBc3NldHNBbmRUaGVuU3RhcnRMb2dpYyBpbiBjb25zdHJ1Y3RvcjonLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGNvbnN0IGxvYWRpbmdPdmVybGF5ID0gVUlNYW5hZ2VyLmdldExvYWRpbmdPdmVybGF5KCk7IC8vIFXFvHl3YW15IFVJTWFuYWdlcmFcclxuICAgICAgICAgIGlmIChsb2FkaW5nT3ZlcmxheSkgbG9hZGluZ092ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgVUlNYW5hZ2VyLmluaXRpYWxpemVUaW1lcigpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW0dhbWVdIFN5bmNocm9ub3VzIGNvcmUgaW5pdGlhbGl6YXRpb24gZmFpbGVkOicsIGVycm9yKTtcclxuICAgICAgYWxlcnQoYENyaXRpY2FsIGluaXRpYWxpemF0aW9uIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9LiBHYW1lIGNhbm5vdCBzdGFydC5gKTtcclxuICAgICAgdGhpcy5faGFuZGxlRmF0YWxFcnJvcihgSW5pdGlhbGl6YXRpb24gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgZ2FtZVN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2dhbWVTdGF0ZTtcclxuICB9XHJcbiAgc2V0R2FtZVN0YXRlKG5ld1N0YXRlKSB7XHJcbiAgICBpZiAodGhpcy5fZ2FtZVN0YXRlICE9PSBuZXdTdGF0ZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgW0dhbWUgU3RhdGVdICR7dGhpcy5fZ2FtZVN0YXRlfSAtPiAke25ld1N0YXRlfWApO1xyXG4gICAgICB0aGlzLl9nYW1lU3RhdGUgPSBuZXdTdGF0ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9pbml0aWFsaXplQ29yZUNvbXBvbmVudHMoKSB7XHJcbiAgICB0aGlzLmlucHV0TWFuYWdlciA9IG5ldyBJbnB1dE1hbmFnZXIoKTtcclxuICAgIHRoaXMubGV2ZWwgPSBuZXcgTGV2ZWwoMSwgMyk7IC8vIFByenlrxYJhZDogcGnEmXRyYSBvZCAxIGRvIDNcclxuICB9XHJcblxyXG4gIF9pbml0aWFsaXplVUlNYW5hZ2VyKCkge1xyXG4gICAgaWYgKCF0aGlzLmdhbWVwbGF5TWFuYWdlcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tHYW1lXSBHYW1lcGxheU1hbmFnZXIgaXMgTk9UIGRlZmluZWQgd2hlbiBfaW5pdGlhbGl6ZVVJTWFuYWdlciBpcyBjYWxsZWQhJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMuaW5wdXRNYW5hZ2VyKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0dhbWVdIElucHV0TWFuYWdlciBpcyBOT1QgZGVmaW5lZCB3aGVuIF9pbml0aWFsaXplVUlNYW5hZ2VyIGlzIGNhbGxlZCEnKTtcclxuICAgIH1cclxuICAgIFVJTWFuYWdlci5zZXRHYW1lcGxheU1hbmFnZXIodGhpcy5nYW1lcGxheU1hbmFnZXIpO1xyXG4gICAgVUlNYW5hZ2VyLmluaXRpYWxpemVVSSh0aGlzLmlucHV0TWFuYWdlcik7XHJcbiAgfVxyXG5cclxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy5yZW5kZXJlcj8ucmVzaXplQ2FudmFzKCkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgX2xvYWRBc3NldHNBbmRUaGVuU3RhcnRMb2dpYygpIHtcclxuICAgIGNvbnN0IGxvYWRpbmdPdmVybGF5ID0gVUlNYW5hZ2VyLmdldExvYWRpbmdPdmVybGF5KCk7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuTE9BRElORyk7XHJcblxyXG4gICAgICBhd2FpdCB0aGlzLl9sb2FkQXNzZXRzKCk7XHJcbiAgICAgIGF3YWl0IHRoaXMuX3N0YXJ0R2FtZUxvZ2ljKCk7XHJcblxyXG4gICAgICBpZiAobG9hZGluZ092ZXJsYXkpIGxvYWRpbmdPdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tHYW1lXSBBc3NldCBsb2FkaW5nIG9yIGdhbWUgbG9naWMgc3RhcnQgZmFpbGVkOicsIGVycm9yKTtcclxuICAgICAgaWYgKGxvYWRpbmdPdmVybGF5KSBsb2FkaW5nT3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUZhdGFsRXJyb3IoYEFzc2V0L1N0YXJ0IExvZ2ljIEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgX2xvYWRBc3NldHMoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnW0dhbWVdIExvYWRpbmcgYXNzZXRzLi4uJyk7XHJcbiAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xyXG4gICAgY29uc3Qgc3ByaXRlUGF0aCA9IHRoaXMuc3ByaXRlc1t0aGlzLmNoYXJhY3RlckNvbG9yXSB8fCB0aGlzLnNwcml0ZXMucmVkO1xyXG5cclxuICAgIGlmICghdGhpcy5jdHgpIHRocm93IG5ldyBFcnJvcignQ2FudmFzIGNvbnRleHQgbm90IGF2YWlsYWJsZSBmb3IgQ2hhcmFjdGVyIGNyZWF0aW9uLicpO1xyXG4gICAgdGhpcy5jaGFyYWN0ZXIgPSBuZXcgQ2hhcmFjdGVyKHRoaXMuY3R4LCBzcHJpdGVQYXRoLCB7XHJcbiAgICAgIHNwZWVkOiAzLFxyXG4gICAgICBmcmFtZVNpemU6IDMyLFxyXG4gICAgICBzY2FsZTogMixcclxuICAgICAgYW5pbWF0aW9uU3BlZWQ6IDE1MCxcclxuICAgICAgZnJhbWVDb3VudDogNCxcclxuICAgIH0pO1xyXG4gICAgcHJvbWlzZXMucHVzaChcclxuICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNwcml0ZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICBbQXNzZXRzXSBDaGFyYWN0ZXIgc3ByaXRlIGxvYWRlZDogJHtzcHJpdGVQYXRofWApO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIuc3ByaXRlLm9uZXJyb3IgPSAoZXJyKSA9PlxyXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgY2hhcmFjdGVyIHNwcml0ZTogJHtzcHJpdGVQYXRofS4gRGV0YWlsczogJHtlcnJ9YCkpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoYm9va1Nwcml0ZSkge1xyXG4gICAgICB0aGlzLmJvb2tJbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICB0aGlzLmJvb2tJbWFnZS5zcmMgPSBib29rU3ByaXRlO1xyXG4gICAgICBwcm9taXNlcy5wdXNoKFxyXG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmJvb2tJbWFnZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgIFtBc3NldHNdIEJvb2sgaW1hZ2UgbG9hZGVkOiAke2Jvb2tTcHJpdGV9YCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICB0aGlzLmJvb2tJbWFnZS5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICAgICAgYCBbQXNzZXRzXSBGYWlsZWQgdG8gbG9hZCBib29rIGltYWdlOiAke2Jvb2tTcHJpdGV9LiBVc2luZyBmYWxsYmFjayByZW5kZXJpbmcuYFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmJvb2tJbWFnZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignW0Fzc2V0c10gTm8gYm9vayBzcHJpdGUgcGF0aCBwcm92aWRlZC4gQm9vayB3aWxsIHVzZSBmYWxsYmFjayByZW5kZXJpbmcuJyk7XHJcbiAgICAgIHRoaXMuYm9va0ltYWdlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcbiAgICBjb25zb2xlLmxvZygnW0dhbWVdIEFsbCBhc3NldHMgbG9hZGVkIHN1Y2Nlc3NmdWxseS4nKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIF9zdGFydEdhbWVMb2dpYygpIHtcclxuICAgIGNvbnNvbGUubG9nKCdbR2FtZV0gU3RhcnRpbmcgY29yZSBnYW1lIGxvZ2ljLi4uJyk7XHJcbiAgICBVSU1hbmFnZXIuc3RhcnRUaW1lcigpO1xyXG4gICAgaWYgKFxyXG4gICAgICAhdGhpcy5sZXZlbCB8fFxyXG4gICAgICAhdGhpcy5jaGFyYWN0ZXIgfHxcclxuICAgICAgIXRoaXMuY2FudmFzIHx8XHJcbiAgICAgICF0aGlzLnJlbmRlcmVyIHx8XHJcbiAgICAgICF0aGlzLmdhbWVwbGF5TWFuYWdlciB8fFxyXG4gICAgICAhdGhpcy5hdWRpb01hbmFnZXJcclxuICAgICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzdGFydCBnYW1lIC0gZXNzZW50aWFsIGNvbXBvbmVudHMgYXJlIG1pc3NpbmcuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLkxPQURJTkdfTEVWRUwpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IHRoaXMubGV2ZWwubG9hZEZsb29yKHRoaXMubGV2ZWwubWluRmxvb3IsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICBjb25zdCBjdXJyZW50TWFwID0gdGhpcy5sZXZlbC5jdXJyZW50TWFwO1xyXG4gICAgICBpZiAoIWN1cnJlbnRNYXApIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgaW5pdGlhbCBtYXAuIE1hcCBvYmplY3QgaXMgbnVsbC4nKTtcclxuXHJcbiAgICAgIGNvbnN0IHN0YXJ0UG9zID0gY3VycmVudE1hcC5maW5kUmFuZG9tSW5pdGlhbFNwYXduUG9zaXRpb24oKTtcclxuICAgICAgaWYgKCFzdGFydFBvcykgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmluZCBhIHZhbGlkIHN0YXJ0aW5nIHBvc2l0aW9uIG9uIHRoZSBtYXAhJyk7XHJcbiAgICAgIHRoaXMuY2hhcmFjdGVyLnggPSBzdGFydFBvcy54O1xyXG4gICAgICB0aGlzLmNoYXJhY3Rlci55ID0gc3RhcnRQb3MueTtcclxuICAgICAgdGhpcy5jaGFyYWN0ZXIuY3VycmVudERpcmVjdGlvbiA9IENoYXJhY3Rlci5EaXJlY3Rpb24uRE9XTjtcclxuICAgICAgdGhpcy5jaGFyYWN0ZXIuaXNNb3ZpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgIHRoaXMuZ2FtZXBsYXlNYW5hZ2VyLmVuc3VyZUNoYXJhY3RlcklzT25XYWxrYWJsZVRpbGUoZmFsc2UpO1xyXG5cclxuICAgICAgdGhpcy50b3RhbEJvb2tzQ29sbGVjdGVkR2xvYmFsbHkgPSAwO1xyXG4gICAgICB0aGlzLmF2YWlsYWJsZVF1ZXN0aW9ucyA9IFsuLi5xdWVzdGlvbnNdO1xyXG4gICAgICB0aGlzLmxpZnRDb29sZG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5saWZ0Q29vbGRvd25UaW1lcik7XHJcbiAgICAgIHRoaXMubGlmdENvb2xkb3duVGltZXIgPSBudWxsO1xyXG4gICAgICB0aGlzLmN1cnJlbnRCb29rVGFyZ2V0ID0gbnVsbDtcclxuICAgICAgdGhpcy5jdXJyZW50UXVlc3Rpb25EYXRhID0gbnVsbDtcclxuXHJcbiAgICAgIHRoaXMucmVuZGVyZXIuY2VudGVyQ2FtZXJhT25DaGFyYWN0ZXIoKTtcclxuXHJcbiAgICAgIFVJTWFuYWdlci51cGRhdGVTY29yZSh0aGlzLnRvdGFsQm9va3NDb2xsZWN0ZWRHbG9iYWxseSwgdGhpcy50YXJnZXRCb29rc1RvV2luKTtcclxuICAgICAgVUlNYW5hZ2VyLnNob3dHYW1lVUkoKTtcclxuXHJcbiAgICAgIHRoaXMuX2JvdW5kS2V5RG93bkhhbmRsZXIgPSB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKTtcclxuICAgICAgdGhpcy5fYm91bmRLZXlVcEhhbmRsZXIgPSB0aGlzLmhhbmRsZUtleVVwLmJpbmQodGhpcyk7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fYm91bmRLZXlEb3duSGFuZGxlcik7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuX2JvdW5kS2V5VXBIYW5kbGVyKTtcclxuXHJcbiAgICAgIHRoaXMuYXVkaW9NYW5hZ2VyLnN0YXJ0SW5pdGlhbE11c2ljKHRoaXMubGV2ZWwuY3VycmVudEZsb29yKTtcclxuICAgICAgY29uc29sZS5sb2coYFtHYW1lXSBJbml0aWFsIG11c2ljIHN0YXJ0ZWQgZm9yIGZsb29yICR7dGhpcy5sZXZlbC5jdXJyZW50Rmxvb3J9YCk7XHJcblxyXG4gICAgICBVSU1hbmFnZXIuc3RhcnRUaW1lcigpO1xyXG5cclxuICAgICAgdGhpcy5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLlBMQVlJTkcpO1xyXG4gICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmdhbWVMb29wKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnW0dhbWVdIEdhbWUgbG9naWMgc3RhcnRlZC4gTG9vcCBpcyBydW5uaW5nLicpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbR2FtZV0gRXJyb3IgZHVyaW5nIF9zdGFydEdhbWVMb2dpYzonLCBlcnJvcik7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUZhdGFsRXJyb3IoYExldmVsIHN0YXJ0IHByb2Nlc3MgZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2V0R2FtZU92ZXIod2luID0gdHJ1ZSkge1xyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuR0FNRV9PVkVSKSByZXR1cm47XHJcblxyXG4gICAgdGhpcy5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLkdBTUVfT1ZFUik7XHJcbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgaWYgKHRoaXMuY2hhcmFjdGVyKSB0aGlzLmNoYXJhY3Rlci5pc01vdmluZyA9IGZhbHNlO1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubGlmdENvb2xkb3duVGltZXIpO1xyXG5cclxuICAgIGlmICh0aGlzLmF1ZGlvTWFuYWdlcikge1xyXG4gICAgICB0aGlzLmF1ZGlvTWFuYWdlci5zdG9wTXVzaWMoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fYm91bmRLZXlEb3duSGFuZGxlcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9ib3VuZEtleURvd25IYW5kbGVyKTtcclxuICAgIGlmICh0aGlzLl9ib3VuZEtleVVwSGFuZGxlcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fYm91bmRLZXlVcEhhbmRsZXIpO1xyXG4gICAgdGhpcy5fYm91bmRLZXlEb3duSGFuZGxlciA9IG51bGw7XHJcbiAgICB0aGlzLl9ib3VuZEtleVVwSGFuZGxlciA9IG51bGw7XHJcblxyXG4gICAgVUlNYW5hZ2VyLnN0b3BUaW1lcih3aW4pO1xyXG5cclxuICAgIC8vIFd5d2/Fgnl3YW5lIHdld27EhXRyeiBzaG93R2FtZU92ZXJTY3JlZW5cclxuICAgIC8vIFd5d2/Fgnl3YW5lIHdld27EhXRyeiBzaG93R2FtZU92ZXJTY3JlZW5cclxuICAgIC8vIFd5d2/Fgnl3YW5lIHdld27EhXRyeiBzaG93R2FtZU92ZXJTY3JlZW5cclxuXHJcbiAgICBVSU1hbmFnZXIuc2hvd0dhbWVPdmVyU2NyZWVuKHdpbiwgR2FtZS5DUkVBVE9SX05BTUVTLCBHYW1lLkNMQVNTX0FUVEVORElOR19JTkZPKTtcclxuXHJcbiAgICBVSU1hbmFnZXIuc3RvcFRpbWVyKHdpbik7XHJcblxyXG4gICAgY29uc29sZS5sb2coYFtHYW1lXSBHYW1lIE92ZXIuIFdpbjogJHt3aW59YCk7XHJcbiAgfVxyXG5cclxuICBzdG9wR2FtZSgpIHtcclxuICAgIGNvbnNvbGUubG9nKCdbR2FtZV0gRXhwbGljaXQgc3RvcEdhbWUgcmVxdWVzdGVkLicpO1xyXG4gICAgdGhpcy5fc2V0R2FtZU92ZXIoZmFsc2UpO1xyXG4gICAgY29uc29sZS5sb2coJ1tHYW1lXSBHYW1lIHN0b3BwZWQuJyk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRmF0YWxFcnJvcihtZXNzYWdlLCBzaG93QWxlcnQgPSB0cnVlKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdbR2FtZV0gRkFUQUwgRVJST1I6JywgbWVzc2FnZSk7XHJcbiAgICBpZiAoc2hvd0FsZXJ0ICYmIHRoaXMuZ2FtZVN0YXRlICE9PSBHYW1lU3RhdGUuR0FNRV9PVkVSKSB7XHJcbiAgICAgIGlmIChVSU1hbmFnZXIuZmxhc2hNZXNzYWdlQ29udGFpbmVyICYmIFVJTWFuYWdlci5mbGFzaE1lc3NhZ2UpIHtcclxuICAgICAgICBVSU1hbmFnZXIuZmxhc2hNZXNzYWdlKGBGQVRBTCBFUlJPUjogJHttZXNzYWdlfWAsICdlcnJvcicsIDE1MDAwKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhbGVydChgRkFUQUwgRVJST1I6ICR7bWVzc2FnZX1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gVXBld25pam15IHNpxJksIMW8ZSBncmEgcHJ6ZWNob2R6aSB3IHN0YW4gR0FNRV9PVkVSIGkgcG9rYXp1amUgb2Rwb3dpZWRuaSBla3Jhbi5cclxuICAgIGlmICh0aGlzLmdhbWVTdGF0ZSAhPT0gR2FtZVN0YXRlLkdBTUVfT1ZFUikge1xyXG4gICAgICB0aGlzLl9zZXRHYW1lT3ZlcihmYWxzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVLZXlEb3duKGUpIHtcclxuICAgIGlmICh0aGlzLmdhbWVTdGF0ZSAhPT0gR2FtZVN0YXRlLlBMQVlJTkcgfHwgIXRoaXMuaW5wdXRNYW5hZ2VyKSByZXR1cm47XHJcbiAgICBsZXQga2V5SGFuZGxlZCA9IGZhbHNlO1xyXG4gICAgY29uc3Qga2V5ID0gZS5rZXkudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmIChbJ2Fycm93dXAnLCAndyddLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgdGhpcy5pbnB1dE1hbmFnZXIuc2V0S2V5KCd1cCcsIHRydWUpO1xyXG4gICAgICBrZXlIYW5kbGVkID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoWydhcnJvd2Rvd24nLCAncyddLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgdGhpcy5pbnB1dE1hbmFnZXIuc2V0S2V5KCdkb3duJywgdHJ1ZSk7XHJcbiAgICAgIGtleUhhbmRsZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmIChbJ2Fycm93bGVmdCcsICdhJ10uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICB0aGlzLmlucHV0TWFuYWdlci5zZXRLZXkoJ2xlZnQnLCB0cnVlKTtcclxuICAgICAga2V5SGFuZGxlZCA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYgKFsnYXJyb3dyaWdodCcsICdkJ10uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICB0aGlzLmlucHV0TWFuYWdlci5zZXRLZXkoJ3JpZ2h0JywgdHJ1ZSk7XHJcbiAgICAgIGtleUhhbmRsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGtleUhhbmRsZWQpIGUucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUtleVVwKGUpIHtcclxuICAgIGlmICghdGhpcy5pbnB1dE1hbmFnZXIpIHJldHVybjtcclxuICAgIGNvbnN0IGtleSA9IGUua2V5LnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAoWydhcnJvd3VwJywgJ3cnXS5pbmNsdWRlcyhrZXkpKSB0aGlzLmlucHV0TWFuYWdlci5zZXRLZXkoJ3VwJywgZmFsc2UpO1xyXG4gICAgZWxzZSBpZiAoWydhcnJvd2Rvd24nLCAncyddLmluY2x1ZGVzKGtleSkpIHRoaXMuaW5wdXRNYW5hZ2VyLnNldEtleSgnZG93bicsIGZhbHNlKTtcclxuICAgIGVsc2UgaWYgKFsnYXJyb3dsZWZ0JywgJ2EnXS5pbmNsdWRlcyhrZXkpKSB0aGlzLmlucHV0TWFuYWdlci5zZXRLZXkoJ2xlZnQnLCBmYWxzZSk7XHJcbiAgICBlbHNlIGlmIChbJ2Fycm93cmlnaHQnLCAnZCddLmluY2x1ZGVzKGtleSkpIHRoaXMuaW5wdXRNYW5hZ2VyLnNldEtleSgncmlnaHQnLCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBnYW1lTG9vcCh0aW1lc3RhbXApIHtcclxuICAgIGlmICghdGhpcy5pc1J1bm5pbmcgfHwgdGhpcy5nYW1lU3RhdGUgPT09IEdhbWVTdGF0ZS5HQU1FX09WRVIpIHJldHVybjtcclxuICAgIHRoaXMuZ2FtZXBsYXlNYW5hZ2VyPy51cGRhdGUodGltZXN0YW1wKTtcclxuICAgIHRoaXMucmVuZGVyZXI/LmNlbnRlckNhbWVyYU9uQ2hhcmFjdGVyKCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyPy5kcmF3RnJhbWUoKTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmdhbWVMb29wKTtcclxuICB9XHJcblxyXG4gIHN0YXJ0TGlmdENvb2xkb3duVGltZXIoKSB7XHJcbiAgICBjbGVhclRpbWVvdXQodGhpcy5saWZ0Q29vbGRvd25UaW1lcik7XHJcbiAgICBjb25zb2xlLmxvZyhgW0dhbWVdIFN0YXJ0aW5nIGxpZnQgY29vbGRvd24gdGltZXI6ICR7TElGVF9DT09MRE9XTl9NU31tcy5gKTtcclxuICAgIHRoaXMubGlmdENvb2xkb3duVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5saWZ0Q29vbGRvd25BY3RpdmUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5saWZ0Q29vbGRvd25UaW1lciA9IG51bGw7XHJcbiAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLlRSQU5TSVRJT05JTkcpIHtcclxuICAgICAgICB0aGlzLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuUExBWUlORyk7XHJcbiAgICAgICAgVUlNYW5hZ2VyLmZsYXNoTWVzc2FnZShgQXJyaXZlZCBhdCBmbG9vciAke3RoaXMubGV2ZWw/LmN1cnJlbnRGbG9vcn1gLCAnc3VjY2VzcycsIDE1MDApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgIGBbR2FtZVRpbWVyXSBMaWZ0IGNvb2xkb3duIGVuZGVkLCBidXQgZ2FtZSBzdGF0ZSBpcyAke3RoaXMuZ2FtZVN0YXRlfS4gTm8gc3RhdGUgY2hhbmdlIGFwcGxpZWQuYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0sIExJRlRfQ09PTERPV05fTVMpO1xyXG4gIH1cclxufVxyXG4iLCIvLyBzcmMvVUkvTWVudS5qc1xyXG5pbXBvcnQgeyBHYW1lIH0gZnJvbSAnLi4vQ29yZS9HYW1lLmpzJztcclxuaW1wb3J0IHsgVUlNYW5hZ2VyIH0gZnJvbSAnLi9VSU1hbmFnZXIuanMnO1xyXG5cclxubGV0IGN1cnJlbnRHYW1lSW5zdGFuY2UgPSBudWxsO1xyXG5cclxuY2xhc3MgTWVudSB7XHJcbiAgY29uc3RydWN0b3IoY2hhcmFjdGVySW1hZ2VTb3VyY2VzKSB7XHJcbiAgICB0aGlzLmNoYXJhY3RlckltYWdlU291cmNlcyA9IGNoYXJhY3RlckltYWdlU291cmNlcztcclxuICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIgPSBudWxsO1xyXG4gICAgdGhpcy51c2VySW50ZXJhY3RlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5vdmVybGF5ID0gbnVsbDtcclxuICAgIHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UgPSBudWxsOyAvLyBUbyBzdG9yZSBBdWRpb01hbmFnZXJcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW01lbnVdIENvbnN0cnVjdG9yIGNhbGxlZC4gSW5pdGlhbGl6aW5nIGVsZW1lbnRzLi4uJyk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVFbGVtZW50cygpO1xyXG5cclxuICAgIGlmICh0aGlzLmNoYXJhY3RlclBhbmVsKSB7XHJcbiAgICAgIHRoaXMuc2V0dXBDaGFyYWN0ZXJJbWFnZXMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgJ1tNZW51IENvbnN0cnVjdG9yXSBDUklUSUNBTDogdGhpcy5jaGFyYWN0ZXJQYW5lbCBpcyBudWxsIEFGVEVSIGluaXRpYWxpemVFbGVtZW50cy4gQ2Fubm90IHNldHVwIGltYWdlcy4nXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tNZW51XSBBZGRpbmcgZXZlbnQgbGlzdGVuZXJzLi4uJyk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICBjb25zb2xlLmxvZygnW01lbnVdIEluc3RhbmNlIGNyZWF0ZWQuJyk7XHJcbiAgfVxyXG5cclxuICAvLyBNZXRob2QgdG8gYmUgY2FsbGVkIGZyb20gR2FtZS5qcyB0byBwYXNzIEF1ZGlvTWFuYWdlclxyXG4gIHNldEF1ZGlvTWFuYWdlcihhdWRpb01hbmFnZXIpIHtcclxuICAgIHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UgPSBhdWRpb01hbmFnZXI7XHJcbiAgICBjb25zb2xlLmxvZygnW01lbnVdIEF1ZGlvTWFuYWdlciBpbnN0YW5jZSByZWNlaXZlZC4nKTtcclxuICAgIC8vIEluaXRpYWxpemUgdm9sdW1lIHNsaWRlciB2YWx1ZSBpZiBBdWRpb01hbmFnZXIgaXMgbm93IGF2YWlsYWJsZVxyXG4gICAgaWYgKHRoaXMubXVzaWNWb2x1bWUgJiYgdGhpcy5hdWRpb01hbmFnZXJJbnN0YW5jZSkge1xyXG4gICAgICAvLyBWb2x1bWUgZnJvbSBBdWRpb01hbmFnZXIgaXMgMC0xLCBzbGlkZXIgaXMgMC0xMDBcclxuICAgICAgdGhpcy5tdXNpY1ZvbHVtZS52YWx1ZSA9IHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UuZ2V0TXVzaWNWb2x1bWUoKSAqIDEwMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluaXRpYWxpemVFbGVtZW50cygpIHtcclxuICAgIHRoaXMubWVudUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51LWNvbnRhaW5lcicpO1xyXG4gICAgaWYgKCF0aGlzLm1lbnVDb250YWluZXIpIGNvbnNvbGUuZXJyb3IoJ1tNZW51IEluaXRdIENSSVRJQ0FMOiAubWVudS1jb250YWluZXIgbm90IGZvdW5kIScpO1xyXG5cclxuICAgIHRoaXMuc2V0dGluZ3NCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MtYnV0dG9uJyk7XHJcbiAgICB0aGlzLnBsYXlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGxheS1idXR0b24nKTtcclxuICAgIHRoaXMuY2hhcmFjdGVyQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYXJhY3Rlci1idXR0b24nKTtcclxuXHJcbiAgICBpZiAoIXRoaXMucGxheUJ1dHRvbikgY29uc29sZS53YXJuKCdbTWVudSBJbml0XSAucGxheS1idXR0b24gbm90IGZvdW5kLicpO1xyXG4gICAgZWxzZSB0aGlzLnBsYXlCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIGlmICghdGhpcy5jaGFyYWN0ZXJCdXR0b24pIGNvbnNvbGUud2FybignW01lbnUgSW5pdF0gLmNoYXJhY3Rlci1idXR0b24gbm90IGZvdW5kLicpO1xyXG5cclxuICAgIHRoaXMuc2V0dGluZ3NQYW5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5ncy1wYW5lbCcpO1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NQYW5lbCkge1xyXG4gICAgICBpZiAodGhpcy5zZXR0aW5nc1BhbmVsLnBhcmVudE5vZGUgIT09IGRvY3VtZW50LmJvZHkpIHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuc2V0dGluZ3NQYW5lbCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5tdXNpY1ZvbHVtZSA9IHRoaXMuc2V0dGluZ3NQYW5lbC5xdWVyeVNlbGVjdG9yKCcjbXVzaWMtdm9sdW1lJyk7IC8vIFRoaXMgaXMgdGhlIHNsaWRlclxyXG4gICAgICB0aGlzLnNmeFZvbHVtZSA9IHRoaXMuc2V0dGluZ3NQYW5lbC5xdWVyeVNlbGVjdG9yKCcjc2Z4LXZvbHVtZScpO1xyXG4gICAgICB0aGlzLmNsb3NlU2V0dGluZ3NCdXR0b24gPSB0aGlzLnNldHRpbmdzUGFuZWwucXVlcnlTZWxlY3RvcignLnBhbmVsLWNsb3NlLWJ1dHRvbicpO1xyXG5cclxuICAgICAgLy8gSW5pdGlhbGl6ZSBzbGlkZXIgdmFsdWUgaWYgYXVkaW9NYW5hZ2VySW5zdGFuY2UgaXMgYWxyZWFkeSBzb21laG93IHNldFxyXG4gICAgICAvLyAodGhvdWdoIHR5cGljYWxseSBpdCB3b24ndCBiZSBhdCB0aGlzIGV4YWN0IHBvaW50KVxyXG4gICAgICBpZiAodGhpcy5tdXNpY1ZvbHVtZSAmJiB0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5tdXNpY1ZvbHVtZS52YWx1ZSA9IHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UuZ2V0TXVzaWNWb2x1bWUoKSAqIDEwMDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS53YXJuKCdbTWVudSBJbml0XSAuc2V0dGluZ3MtcGFuZWwgbm90IGZvdW5kLicpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2hhcmFjdGVyUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhcmFjdGVyLXBhbmVsJyk7XHJcbiAgICBpZiAodGhpcy5jaGFyYWN0ZXJQYW5lbCkge1xyXG4gICAgICBpZiAodGhpcy5jaGFyYWN0ZXJQYW5lbC5wYXJlbnROb2RlICE9PSBkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNoYXJhY3RlclBhbmVsKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmNoYXJhY3RlckdyaWQgPSB0aGlzLmNoYXJhY3RlclBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5jaGFyYWN0ZXItZ3JpZCcpO1xyXG4gICAgICB0aGlzLmNsb3NlQ2hhcmFjdGVyUGFuZWxCdXR0b24gPSB0aGlzLmNoYXJhY3RlclBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5wYW5lbC1jbG9zZS1idXR0b24nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tNZW51IEluaXRdIENSSVRJQ0FMOiAuY2hhcmFjdGVyLXBhbmVsIG5vdCBmb3VuZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24hJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZWxlY3RlZENoYXJhY3RlckRpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5LmNsYXNzTmFtZSA9ICdzZWxlY3RlZC1jaGFyYWN0ZXItZGlzcGxheSc7XHJcblxyXG4gICAgY29uc3QgbWFpbk1lbnVCdXR0b25zQ29udGFpbmVyID0gdGhpcy5tZW51Q29udGFpbmVyXHJcbiAgICAgID8gdGhpcy5tZW51Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5tYWluLW1lbnUtYnV0dG9ucycpXHJcbiAgICAgIDogbnVsbDtcclxuXHJcbiAgICBpZiAodGhpcy5wbGF5QnV0dG9uICYmIHRoaXMucGxheUJ1dHRvbi5wYXJlbnROb2RlKSB7XHJcbiAgICAgIHRoaXMucGxheUJ1dHRvbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheSwgdGhpcy5wbGF5QnV0dG9uKTtcclxuICAgIH0gZWxzZSBpZiAobWFpbk1lbnVCdXR0b25zQ29udGFpbmVyKSB7XHJcbiAgICAgIG1haW5NZW51QnV0dG9uc0NvbnRhaW5lci5pbnNlcnRCZWZvcmUoXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZENoYXJhY3RlckRpc3BsYXksXHJcbiAgICAgICAgbWFpbk1lbnVCdXR0b25zQ29udGFpbmVyLmNoaWxkcmVuWzFdIHx8IG51bGxcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5tZW51Q29udGFpbmVyKSB7XHJcbiAgICAgIHRoaXMubWVudUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdbTWVudSBJbml0XSBDYW5ub3QgYXBwZW5kIHNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheTogbm8gc3VpdGFibGUgcGFyZW50IGZvdW5kLidcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5KCk7XHJcbiAgfVxyXG5cclxuICBzZXR1cENoYXJhY3RlckltYWdlcygpIHtcclxuICAgIGlmICghdGhpcy5jaGFyYWN0ZXJQYW5lbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMuY2hhcmFjdGVySW1hZ2VTb3VyY2VzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGFyYWN0ZXJDYXJkcyA9IHRoaXMuY2hhcmFjdGVyUGFuZWwucXVlcnlTZWxlY3RvckFsbCgnLmNoYXJhY3Rlci1jYXJkJyk7XHJcbiAgICBpZiAoY2hhcmFjdGVyQ2FyZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjaGFyYWN0ZXJDYXJkcy5mb3JFYWNoKChjYXJkKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNoYXJhY3RlcktleSA9IGNhcmQuZGF0YXNldC5jaGFyYWN0ZXI7XHJcbiAgICAgIGNvbnN0IGltZ0VsZW1lbnQgPSBjYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jaGFyYWN0ZXItcHJldmlldyBpbWcnKTtcclxuXHJcbiAgICAgIGlmIChpbWdFbGVtZW50ICYmIHRoaXMuY2hhcmFjdGVySW1hZ2VTb3VyY2VzW2NoYXJhY3RlcktleV0pIHtcclxuICAgICAgICBpbWdFbGVtZW50LnNyYyA9IHRoaXMuY2hhcmFjdGVySW1hZ2VTb3VyY2VzW2NoYXJhY3RlcktleV07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlRmlyc3RJbnRlcmFjdGlvbigpIHtcclxuICAgIGlmICghdGhpcy51c2VySW50ZXJhY3RlZCkge1xyXG4gICAgICB0aGlzLnVzZXJJbnRlcmFjdGVkID0gdHJ1ZTtcclxuICAgICAgY29uc29sZS5sb2coJ1tNZW51XSBGaXJzdCB1c2VyIGludGVyYWN0aW9uIGRldGVjdGVkLicpO1xyXG4gICAgICAvLyBObyBuZWVkIHRvIGV4cGxpY2l0bHkgaW5pdCBBdWRpb01hbmFnZXIgaGVyZSwgR2FtZS5qcyB3aWxsIGhhbmRsZSBpdFxyXG4gICAgICAvLyB3aGVuIHN0YXJ0R2FtZSBpcyBjYWxsZWQuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgIGNvbnN0IGFkZEludGVyYWN0aXZlTGlzdGVuZXIgPSAoZWxlbWVudCwgZXZlbnRUeXBlLCBoYW5kbGVyRm4pID0+IHtcclxuICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgIHRoaXMuaGFuZGxlRmlyc3RJbnRlcmFjdGlvbigpO1xyXG4gICAgICAgICAgaGFuZGxlckZuLmNhbGwodGhpcywgZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFkZEludGVyYWN0aXZlTGlzdGVuZXIodGhpcy5zZXR0aW5nc0J1dHRvbiwgJ2NsaWNrJywgdGhpcy50b2dnbGVTZXR0aW5ncyk7XHJcbiAgICBhZGRJbnRlcmFjdGl2ZUxpc3RlbmVyKHRoaXMucGxheUJ1dHRvbiwgJ2NsaWNrJywgdGhpcy5zdGFydEdhbWUpO1xyXG4gICAgYWRkSW50ZXJhY3RpdmVMaXN0ZW5lcih0aGlzLmNoYXJhY3RlckJ1dHRvbiwgJ2NsaWNrJywgdGhpcy5vcGVuQ2hhcmFjdGVyTW9kYWwpO1xyXG5cclxuICAgIGlmICh0aGlzLmNsb3NlU2V0dGluZ3NCdXR0b24pIHtcclxuICAgICAgdGhpcy5jbG9zZVNldHRpbmdzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jbG9zZVNldHRpbmdzKCkpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuY2xvc2VDaGFyYWN0ZXJQYW5lbEJ1dHRvbikge1xyXG4gICAgICB0aGlzLmNsb3NlQ2hhcmFjdGVyUGFuZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmNsb3NlQ2hhcmFjdGVyTW9kYWwoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubXVzaWNWb2x1bWUpIHtcclxuICAgICAgdGhpcy5tdXNpY1ZvbHVtZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UpIHtcclxuICAgICAgICAgIC8vIFNsaWRlciB2YWx1ZSBpcyAwLTEwMCwgQXVkaW9NYW5hZ2VyIGV4cGVjdHMgMC0xXHJcbiAgICAgICAgICBjb25zdCBuZXdWb2x1bWUgPSBwYXJzZUZsb2F0KGUudGFyZ2V0LnZhbHVlKSAvIDEwMDtcclxuICAgICAgICAgIHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2Uuc2V0TXVzaWNWb2x1bWUobmV3Vm9sdW1lKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBbTWVudV0gTXVzaWMgdm9sdW1lIGNoYW5nZWQgdmlhIHNsaWRlciB0bzogJHtuZXdWb2x1bWV9YCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybignW01lbnVdIE11c2ljIHZvbHVtZSBzbGlkZXIgY2hhbmdlZCwgYnV0IEF1ZGlvTWFuYWdlciBub3QgYXZhaWxhYmxlLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5zZnhWb2x1bWUpIHtcclxuICAgICAgLy8gU0ZYIHZvbHVtZSBsaXN0ZW5lciAoaWYgeW91IGltcGxlbWVudCBTRlggbGF0ZXIpXHJcbiAgICAgIC8vIHRoaXMuc2Z4Vm9sdW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcclxuICAgICAgLy8gICBpZiAodGhpcy5hdWRpb01hbmFnZXJJbnN0YW5jZSAmJiB0eXBlb2YgdGhpcy5hdWRpb01hbmFnZXJJbnN0YW5jZS5zZXRTZnhWb2x1bWUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgLy8gICAgIHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2Uuc2V0U2Z4Vm9sdW1lKHBhcnNlRmxvYXQoZS50YXJnZXQudmFsdWUpIC8gMTAwKTtcclxuICAgICAgLy8gICB9XHJcbiAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmNoYXJhY3RlckdyaWQpIHtcclxuICAgICAgdGhpcy5jaGFyYWN0ZXJHcmlkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2xpY2tlZENhcmQgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLmNoYXJhY3Rlci1jYXJkJyk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgY2xpY2tlZENhcmQgJiZcclxuICAgICAgICAgIHRoaXMuY2hhcmFjdGVyUGFuZWwgJiZcclxuICAgICAgICAgIHRoaXMuY2hhcmFjdGVyUGFuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJylcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHRoaXMuaGFuZGxlRmlyc3RJbnRlcmFjdGlvbigpO1xyXG4gICAgICAgICAgdGhpcy5zZWxlY3RDaGFyYWN0ZXIoY2xpY2tlZENhcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvcGVuQ2hhcmFjdGVyTW9kYWwoKSB7XHJcbiAgICBpZiAoIXRoaXMuY2hhcmFjdGVyUGFuZWwgfHwgIXRoaXMuY2hhcmFjdGVyR3JpZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmNoYXJhY3RlclBhbmVsLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuXHJcbiAgICBpZiAodGhpcy5zZXR0aW5nc1BhbmVsPy5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKSkge1xyXG4gICAgICB0aGlzLmNsb3NlU2V0dGluZ3MoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMub3ZlcmxheSkge1xyXG4gICAgICB0aGlzLm92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5vdmVybGF5LmNsYXNzTmFtZSA9ICdjaGFyYWN0ZXItbW9kYWwtb3ZlcmxheSc7XHJcbiAgICAgIHRoaXMub3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLm92ZXJsYXkpIHtcclxuICAgICAgICAgIHRoaXMuY2xvc2VDaGFyYWN0ZXJNb2RhbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5vdmVybGF5KTtcclxuICAgIH1cclxuICAgIHRoaXMub3ZlcmxheS5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgfVxyXG5cclxuICBjbG9zZUNoYXJhY3Rlck1vZGFsKCkge1xyXG4gICAgaWYgKHRoaXMuY2hhcmFjdGVyUGFuZWwpIHtcclxuICAgICAgdGhpcy5jaGFyYWN0ZXJQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5vdmVybGF5KSB7XHJcbiAgICAgIHRoaXMub3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZWxlY3RDaGFyYWN0ZXIoY2FyZEVsZW1lbnQpIHtcclxuICAgIGlmICghdGhpcy5jaGFyYWN0ZXJHcmlkIHx8ICFjYXJkRWxlbWVudD8uZGF0YXNldD8uY2hhcmFjdGVyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHNlbGVjdGVkQ2hhcktleSA9IGNhcmRFbGVtZW50LmRhdGFzZXQuY2hhcmFjdGVyO1xyXG5cclxuICAgIHRoaXMuY2hhcmFjdGVyR3JpZFxyXG4gICAgICAucXVlcnlTZWxlY3RvckFsbCgnLmNoYXJhY3Rlci1jYXJkJylcclxuICAgICAgLmZvckVhY2goKGMpID0+IGMuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKSk7XHJcbiAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgdGhpcy5zZWxlY3RlZENoYXJhY3RlciA9IHNlbGVjdGVkQ2hhcktleTtcclxuXHJcbiAgICBpZiAodGhpcy5wbGF5QnV0dG9uKSB7XHJcbiAgICAgIHRoaXMucGxheUJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5KCk7XHJcbiAgICB0aGlzLmNsb3NlQ2hhcmFjdGVyTW9kYWwoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheSgpIHtcclxuICAgIGlmICghdGhpcy5zZWxlY3RlZENoYXJhY3RlckRpc3BsYXkpIHJldHVybjtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIgJiZcclxuICAgICAgdGhpcy5jaGFyYWN0ZXJJbWFnZVNvdXJjZXMgJiZcclxuICAgICAgdGhpcy5jaGFyYWN0ZXJJbWFnZVNvdXJjZXNbdGhpcy5zZWxlY3RlZENoYXJhY3Rlcl1cclxuICAgICkge1xyXG4gICAgICBjb25zdCBjaGFyYWN0ZXJLZXkgPSB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyO1xyXG4gICAgICBjb25zdCBpbWdTcmMgPSB0aGlzLmNoYXJhY3RlckltYWdlU291cmNlc1tjaGFyYWN0ZXJLZXldO1xyXG4gICAgICBsZXQgZGlzcGxheWVkTmFtZSA9IGNoYXJhY3RlcktleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNoYXJhY3RlcktleS5zbGljZSgxKSArICcgU3R1ZGVudCc7XHJcblxyXG4gICAgICBpZiAodGhpcy5jaGFyYWN0ZXJHcmlkKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRDYXJkRWxlbWVudEgzID0gdGhpcy5jaGFyYWN0ZXJHcmlkLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgICBgLmNoYXJhY3Rlci1jYXJkW2RhdGEtY2hhcmFjdGVyPVwiJHtjaGFyYWN0ZXJLZXl9XCJdIGgzYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkQ2FyZEVsZW1lbnRIMykge1xyXG4gICAgICAgICAgZGlzcGxheWVkTmFtZSA9IHNlbGVjdGVkQ2FyZEVsZW1lbnRIMy50ZXh0Q29udGVudDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zZWxlY3RlZENoYXJhY3RlckRpc3BsYXkuaW5uZXJIVE1MID0gYDxpbWcgc3JjPVwiJHtpbWdTcmN9XCIgYWx0PVwiJHtkaXNwbGF5ZWROYW1lfVwiIHN0eWxlPVwid2lkdGg6MzJweDtoZWlnaHQ6MzJweDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7bWFyZ2luLXJpZ2h0OjhweDsgYm9yZGVyLXJhZGl1czo1MCU7IG9iamVjdC1maXQ6Y292ZXI7IGJhY2tncm91bmQtY29sb3I6ICM0NDQ7XCI+IDxzcGFuIHN0eWxlPVwiZm9udC13ZWlnaHQ6Ym9sZDtcIj4ke2Rpc3BsYXllZE5hbWV9PC9zcGFuPmA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheS5pbm5lckhUTUwgPVxyXG4gICAgICAgICc8c3BhbiBzdHlsZT1cImNvbG9yOiNhYWE7XCI+Tm8gY2hhcmFjdGVyIHNlbGVjdGVkPC9zcGFuPic7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0b2dnbGVTZXR0aW5ncygpIHtcclxuICAgIGlmICghdGhpcy5zZXR0aW5nc1BhbmVsKSByZXR1cm47XHJcbiAgICBjb25zdCBpc1Zpc2libGUgPSB0aGlzLnNldHRpbmdzUGFuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJyk7XHJcbiAgICBpZiAoaXNWaXNpYmxlKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VTZXR0aW5ncygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5vcGVuU2V0dGluZ3MoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9wZW5TZXR0aW5ncygpIHtcclxuICAgIGlmICh0aGlzLnNldHRpbmdzUGFuZWwpIHtcclxuICAgICAgdGhpcy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyUGFuZWw/LmNsYXNzTGlzdC5jb250YWlucygndmlzaWJsZScpKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZUNoYXJhY3Rlck1vZGFsKCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gRW5zdXJlIHNsaWRlciByZWZsZWN0cyBjdXJyZW50IHZvbHVtZSB3aGVuIHBhbmVsIG9wZW5zXHJcbiAgICAgIGlmICh0aGlzLm11c2ljVm9sdW1lICYmIHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLm11c2ljVm9sdW1lLnZhbHVlID0gdGhpcy5hdWRpb01hbmFnZXJJbnN0YW5jZS5nZXRNdXNpY1ZvbHVtZSgpICogMTAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbG9zZVNldHRpbmdzKCkge1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NQYW5lbCAmJiB0aGlzLnNldHRpbmdzUGFuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJykpIHtcclxuICAgICAgdGhpcy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIHN0YXJ0R2FtZSgpIHtcclxuICAgIGlmICghdGhpcy5zZWxlY3RlZENoYXJhY3Rlcikge1xyXG4gICAgICBVSU1hbmFnZXIuZmxhc2hNZXNzYWdlKCdQbGVhc2Ugc2VsZWN0IGEgY2hhcmFjdGVyIGZpcnN0IScsICd3YXJuaW5nJywgMjUwMCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsb2FkaW5nT3ZlcmxheSA9IFVJTWFuYWdlci5nZXRMb2FkaW5nT3ZlcmxheSgpO1xyXG4gICAgaWYgKGxvYWRpbmdPdmVybGF5KSBsb2FkaW5nT3ZlcmxheS5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgaWYgKHRoaXMubWVudUNvbnRhaW5lcikge1xyXG4gICAgICB0aGlzLm1lbnVDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChsb2FkaW5nT3ZlcmxheSkgbG9hZGluZ092ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZ2FtZUNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWNhbnZhcycpO1xyXG4gICAgaWYgKGdhbWVDYW52YXMpIHtcclxuICAgICAgZ2FtZUNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tNZW51XSBDUklUSUNBTDogI2dhbWUtY2FudmFzIG5vdCBmb3VuZCEnKTtcclxuICAgICAgaWYgKHRoaXMubWVudUNvbnRhaW5lcikgdGhpcy5tZW51Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgIGlmIChsb2FkaW5nT3ZlcmxheSkgbG9hZGluZ092ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKGN1cnJlbnRHYW1lSW5zdGFuY2UgJiYgdHlwZW9mIGN1cnJlbnRHYW1lSW5zdGFuY2Uuc3RvcEdhbWUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBjdXJyZW50R2FtZUluc3RhbmNlLnN0b3BHYW1lKCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gR2FtZSBjb25zdHJ1Y3RvciB3aWxsIGNyZWF0ZSBBdWRpb01hbmFnZXJcclxuICAgICAgY3VycmVudEdhbWVJbnN0YW5jZSA9IG5ldyBHYW1lKHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIpO1xyXG5cclxuICAgICAgLy8gUGFzcyB0aGUgQXVkaW9NYW5hZ2VyIGZyb20gdGhlIG5ldyBnYW1lIGluc3RhbmNlIHRvIHRoaXMgTWVudSBpbnN0YW5jZVxyXG4gICAgICBpZiAoY3VycmVudEdhbWVJbnN0YW5jZSAmJiBjdXJyZW50R2FtZUluc3RhbmNlLmF1ZGlvTWFuYWdlcikge1xyXG4gICAgICAgIHRoaXMuc2V0QXVkaW9NYW5hZ2VyKGN1cnJlbnRHYW1lSW5zdGFuY2UuYXVkaW9NYW5hZ2VyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICAnW01lbnUgc3RhcnRHYW1lXSBGYWlsZWQgdG8gZ2V0IEF1ZGlvTWFuYWdlciBmcm9tIG5ldyBHYW1lIGluc3RhbmNlIHRvIHNldCBpdCBpbiBNZW51LidcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbTWVudV0gQ3JpdGljYWwgZXJyb3IgZHVyaW5nIGdhbWUgaW5pdGlhbGl6YXRpb246JywgZXJyb3IpO1xyXG4gICAgICBVSU1hbmFnZXIuZmxhc2hNZXNzYWdlKGBHYW1lIFN0YXJ0IEZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWAsICdlcnJvcicsIDEwMDAwKTtcclxuICAgICAgaWYgKHRoaXMubWVudUNvbnRhaW5lcikgdGhpcy5tZW51Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgIGlmIChnYW1lQ2FudmFzKSBnYW1lQ2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGlmIChsb2FkaW5nT3ZlcmxheSkgbG9hZGluZ092ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgICBjdXJyZW50R2FtZUluc3RhbmNlID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuZXhwb3J0IHsgTWVudSwgY3VycmVudEdhbWVJbnN0YW5jZSB9OyAvLyBFeHBvcnQgY3VycmVudEdhbWVJbnN0YW5jZSBpZiBuZWVkZWQgZXh0ZXJuYWxseVxyXG4iLCIvLyDQn9Cg0JXQlNCf0J7Qm9CQ0JPQkNCV0JzQntCVINCg0JDQodCf0J7Qm9Ce0JbQldCd0JjQlToganMvbWFpbi5qcyAo0LXRgdC70LggZW50cnkg0LIgd2VicGFjay5jb25maWcuanMgJy4vanMvbWFpbi5qcycpXHJcbi8vINCY0JvQmCBzcmMvbWFpbi5qcyAo0LXRgdC70LggZW50cnkgJy4vc3JjL21haW4uanMnKVxyXG5cclxuLy8g0JXRgdC70Lgg0Y3RgtC+0YIg0YTQsNC50Lsg0L3QsNGF0L7QtNC40YLRgdGPINCyIC9qcywg0LAg0L/QsNC/0LrQsCAvc3JjINC90LAg0YLQvtC8INC20LUg0YPRgNC+0LLQvdC1OlxyXG5pbXBvcnQgeyBNZW51IH0gZnJvbSAnLi9VSS9NZW51LmpzJztcclxuaW1wb3J0ICcuLi9jc3Mvc3R5bGVzLmNzcyc7XHJcbmltcG9ydCByZWRTdHVkZW50SW1nIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvcmVkLnBuZyc7XHJcbmltcG9ydCBibHVlU3R1ZGVudEltZyBmcm9tICcuLi9hc3NldHMvaW1hZ2VzL2JsdWUucG5nJztcclxuaW1wb3J0IHllbGxvd1N0dWRlbnRJbWcgZnJvbSAnLi4vYXNzZXRzL2ltYWdlcy95ZWxsb3cucG5nJztcclxuaW1wb3J0IGdyZWVuU3R1ZGVudEltZyBmcm9tICcuLi9hc3NldHMvaW1hZ2VzL2dyZWVuLnBuZyc7XHJcblxyXG4vLyDQldGB0LvQuCDRjdGC0L7RgiDRhNCw0LnQuyDQvdCw0YXQvtC00LjRgtGB0Y8g0LIgL3NyYyAo0Lggd2VicGFjayBlbnRyeSDQsdGL0Lsg0LjQt9C80LXQvdC10L0pOlxyXG4vKlxyXG5pbXBvcnQgeyBNZW51IH0gZnJvbSAnLi9VSS9NZW51LmpzJztcclxuaW1wb3J0ICcuLi9jc3Mvc3R5bGVzLmNzcyc7IC8vINCS0L7Qt9C80L7QttC90L4sINC/0YPRgtGMINC6IENTUyDRgtC+0LbQtSDQvdGD0LbQvdC+INCx0YPQtNC10YIg0LjQt9C80LXQvdC40YLRjCwg0L3QsNC/0YDQuNC80LXRgCwgJy4vY3NzL3N0eWxlcy5jc3MnINC10YHQu9C4IENTUyDQsiBzcmMvY3NzXHJcbmltcG9ydCByZWRTdHVkZW50SW1nIGZyb20gJy4vYXNzZXRzL2ltYWdlcy9jaGFyYWN0ZXJfcmVkLnBuZyc7XHJcbmltcG9ydCBibHVlU3R1ZGVudEltZyBmcm9tICcuL2Fzc2V0cy9pbWFnZXMvY2hhcmFjdGVyX2JsdWUucG5nJztcclxuaW1wb3J0IHllbGxvd1N0dWRlbnRJbWcgZnJvbSAnLi9hc3NldHMvaW1hZ2VzL2NoYXJhY3Rlcl95ZWxsb3cucG5nJztcclxuaW1wb3J0IGdyZWVuU3R1ZGVudEltZyBmcm9tICcuL2Fzc2V0cy9pbWFnZXMvY2hhcmFjdGVyX2dyZWVuLnBuZyc7XHJcbiovXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdbbWFpbi5qc10gRE9NQ29udGVudExvYWRlZC4gSW5pdGlhbGl6aW5nIE1lbnUuLi4nKTtcclxuXHJcbiAgY29uc3QgY2hhcmFjdGVySW1hZ2VTb3VyY2VzID0ge1xyXG4gICAgcmVkOiByZWRTdHVkZW50SW1nLFxyXG4gICAgYmx1ZTogYmx1ZVN0dWRlbnRJbWcsXHJcbiAgICB5ZWxsb3c6IHllbGxvd1N0dWRlbnRJbWcsXHJcbiAgICBncmVlbjogZ3JlZW5TdHVkZW50SW1nLFxyXG4gIH07XHJcblxyXG4gIG5ldyBNZW51KGNoYXJhY3RlckltYWdlU291cmNlcyk7XHJcbn0pO1xyXG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImRvY3VtZW50IiwiY3VycmVudFNjcmlwdCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlbmd0aCIsImkiLCJ0ZXN0IiwiRXJyb3IiLCJyZXBsYWNlIiwicCIsIklucHV0TWFuYWdlciIsImNvbnN0cnVjdG9yIiwia2V5cyIsInVwIiwiZG93biIsImxlZnQiLCJyaWdodCIsInNldEtleSIsImtleSIsImlzUHJlc3NlZCIsImhhc093blByb3BlcnR5IiwiZ2V0SW5wdXREaXJlY3Rpb24iLCJ4IiwieSIsIkdhbWVTdGF0ZSIsIkxPQURJTkciLCJNRU5VIiwiUExBWUlORyIsIkFTS0lOR19RVUVTVElPTiIsIlNFTEVDVElOR19GTE9PUiIsIlRSQU5TSVRJT05JTkciLCJHQU1FX09WRVIiLCJxdWVzdGlvbnMiLCJxdWVzdGlvbiIsIm9wdGlvbnMiLCJjb3JyZWN0QW5zd2VyIiwiVUlNYW5hZ2VyIiwic3RhdGljIiwic2V0R2FtZXBsYXlNYW5hZ2VyIiwibWFuYWdlciIsImdhbWVwbGF5TWFuYWdlckluc3RhbmNlIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiaW5pdGlhbGl6ZVVJIiwiaW5wdXRNYW5hZ2VyIiwiY3JlYXRlQ29udHJvbHMiLCJjcmVhdGVRdWVzdGlvblVJIiwiY3JlYXRlRmxvb3JTZWxlY3Rpb25VSSIsImVuc3VyZUZsYXNoTWVzc2FnZUNvbnRhaW5lciIsImNyZWF0ZUdhbWVPdmVyU2NyZWVuIiwiaW5pdGlhbGl6ZVRpbWVyIiwidXBkYXRlTGVhZGVyYm9hcmQiLCJ3YXJuIiwiY29udHJvbHNDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImNsYXNzTGlzdCIsImFkZCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImlubmVySFRNTCIsImRpcmVjdGlvbiIsImljb24iLCJncmlkQXJlYSIsImZvckVhY2giLCJidG4iLCJjbGFzc05hbWUiLCJ0ZXh0Q29udGVudCIsInN0eWxlIiwiZGF0YXNldCIsInN0YXJ0UHJlc3MiLCJwcmV2ZW50RGVmYXVsdCIsImVuZFByZXNzIiwicmVtb3ZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJzY29yZURpc3BsYXlDb250YWluZXIiLCJzY29yZUVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGFyZ2V0RWxlbWVudCIsInNjb3JlRGl2IiwicXVlc3Rpb25PdmVybGF5IiwicXVlc3Rpb25UZXh0RWxlbWVudCIsImFuc3dlckJ1dHRvbnNDb250YWluZXIiLCJmbG9vclNlbGVjdGlvblBhbmVsIiwiZmxvb3JCdXR0b25zQ29udGFpbmVyIiwiZmxhc2hNZXNzYWdlQ29udGFpbmVyIiwiZmxhc2hNZXNzYWdlIiwibWVzc2FnZSIsInR5cGUiLCJkdXJhdGlvbiIsImNvbnRhaW5lciIsIm1lc3NhZ2VFbGVtZW50IiwibWVzc2FnZUlkIiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImZsYXNoTWVzc2FnZVRpbWVvdXRzIiwic2V0VGltZW91dCIsImhhbmRsZVRyYW5zaXRpb25FbmQiLCJldmVudCIsInByb3BlcnR5TmFtZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIm9uY2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0TG9hZGluZ092ZXJsYXkiLCJsb2FkaW5nT3ZlcmxheUVsZW1lbnQiLCJsb2FkaW5nVGV4dCIsImdhbWVPdmVyU2NyZWVuRWxlbWVudCIsImdhbWVPdmVyVGl0bGVFbGVtZW50IiwiY3JlYXRvck5hbWVzTGlzdEVsZW1lbnQiLCJjbGFzc0luZm9FbGVtZW50IiwicmV0dXJuVG9NZW51QnV0dG9uRWxlbWVudCIsInJlbG9hZCIsInNob3dHYW1lT3ZlclNjcmVlbiIsImlzV2luIiwiY3JlYXRvcnMiLCJjbGFzc0luZm9UZXh0IiwibmFtZSIsImxpIiwiaGlkZUdhbWVVSSIsImhpZGVRdWVzdGlvbiIsImhpZGVGbG9vclNlbGVjdGlvblVJIiwiaGlkZUdhbWVPdmVyU2NyZWVuIiwic2hvd1F1ZXN0aW9uIiwicXVlc3Rpb25EYXRhIiwiaGFuZGxlQW5zd2VyIiwib3B0aW9uVGV4dCIsImluZGV4IiwiYnV0dG9uIiwic2VsZWN0ZWRJbmRleCIsInBhcnNlSW50IiwidGFyZ2V0Iiwic2hvd0Zsb29yU2VsZWN0aW9uVUkiLCJtaW5GbG9vciIsIm1heEZsb29yIiwiY3VycmVudEZsb29yIiwiaGFuZGxlRmxvb3JTZWxlY3Rpb24iLCJmbG9vciIsImRpc2FibGVkIiwidXBkYXRlU2NvcmUiLCJzY29yZSIsInNob3dHYW1lVUkiLCJjYW52YXMiLCJtZW51Q29udGFpbmVyIiwic2NvcmVEaXNwbGF5IiwiZGlzcGxheSIsImNvbnRhaW5zIiwidGltZXJFbGVtZW50Iiwic2F2ZWREYXRhIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImxlYWRlcmJvYXJkRGF0YSIsIkpTT04iLCJwYXJzZSIsInN0YXJ0VGltZXIiLCJnYW1lU3RhcnRUaW1lIiwidXBkYXRlVGltZXIiLCJlbGFwc2VkIiwibWludXRlcyIsInNlY29uZHMiLCJwYWRTdGFydCIsInN0b3BUaW1lciIsIndhc1dpbiIsInRvdGFsVGltZSIsInJ1bk51bWJlciIsInB1c2giLCJ0aW1lIiwiZGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInNvcnQiLCJhIiwiYiIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJsZWFkZXJib2FyZEJvZHkiLCJzbGljZSIsInJ1biIsInJvdyIsIkNoYXJhY3RlciIsIkRPV04iLCJSSUdIVCIsIlVQIiwiTEVGVCIsImN0eCIsInNwcml0ZVVybCIsInNwcml0ZSIsIkltYWdlIiwiZnJhbWVTaXplIiwiZnJhbWVDb3VudCIsInNjYWxlIiwicmVuZGVyU2l6ZSIsInNwZWVkIiwiYW5pbWF0aW9uU3BlZWQiLCJjb2xsaXNpb25Cb3hXaWR0aFJhdGlvIiwiY29sbGlzaW9uQm94SGVpZ2h0UmF0aW8iLCJjb2xsaXNpb25Cb3hGZWV0T2Zmc2V0UmF0aW8iLCJjdXJyZW50RGlyZWN0aW9uIiwiRGlyZWN0aW9uIiwiY3VycmVudEZyYW1lIiwiaXNNb3ZpbmciLCJsYXN0RnJhbWVUaW1lIiwib25sb2FkIiwib25lcnJvciIsInVwZGF0ZUFuaW1hdGlvbiIsInRpbWVzdGFtcCIsImdldENvbGxpc2lvbkJveCIsInBvc1giLCJwb3NZIiwid2lkdGgiLCJoZWlnaHQiLCJoYWxmV2lkdGgiLCJmZWV0T2Zmc2V0WSIsInRvcCIsImJvdHRvbSIsImRyYXciLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNvbXBsZXRlIiwibmF0dXJhbEhlaWdodCIsImZyYW1lWCIsImZyYW1lWSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiZHJhd0ltYWdlIiwiQm9vayIsInRpbGVTaXplIiwic2l6ZSIsImNvbGxlY3RlZCIsImlzQ29sbGVjdGVkIiwiYm9va0ltYWdlIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJzdHJva2VTdHlsZSIsInN0cm9rZVJlY3QiLCJmb250IiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwiZmlsbFRleHQiLCJyYW5kb21JbnQiLCJtaW4iLCJtYXgiLCJjZWlsIiwic2ltcGxlSGFzaCIsInNlZWQiLCJoIiwiaW11bCIsImFkanVzdENvbG9yQnJpZ2h0bmVzcyIsImhleENvbG9yIiwiZmFjdG9yIiwiciIsInJvdW5kIiwiTWFwUmVuZGVyZXIiLCJ0aWxlQ29sb3JzIiwiYmFzZVdhbGxDb2xvciIsImJhc2VDb3JyaWRvckNvbG9yIiwiYmFzZVJvb21GbG9vckNvbG9yIiwibGlmdENvbG9yIiwiZXJyb3JDb2xvciIsInJlc2V0Q29sb3JDYWNoZSIsImdldFRpbGVDb2xvciIsImMiLCJ0aWxlVmFsdWUiLCJyb29tcyIsImNvbG9yIiwibWFwRGF0YSIsIm1hcCIsImJvb2tzIiwibGlmdFBvc2l0aW9uIiwiY29scyIsInJvd3MiLCJjdXJyZW50T2Zmc2V0WCIsImN1cnJlbnRPZmZzZXRZIiwic3RhcnRDb2wiLCJlbmRDb2wiLCJzdGFydFJvdyIsImVuZFJvdyIsInNhdmUiLCJkcmF3QmFzZVRpbGVzIiwiZHJhd1Jvb21EZXRhaWxzIiwiZHJhd0xpZnREZXRhaWxzIiwiZHJhd0Jvb2tzIiwicmVzdG9yZSIsInNoYWRvd0NvbG9yIiwid2FsbEVkZ2VDb2xvckRhcmsiLCJ3YWxsRWRnZUNvbG9yTGlnaHQiLCJ3YWxsVG9wRWRnZUNvbG9yIiwidW5kZWZpbmVkIiwiZWRnZVNpemUiLCJyb29tIiwiY29sIiwicm9vbVNjcmVlblgiLCJyb29tU2NyZWVuWSIsInJvb21TY3JlZW5XIiwicm9vbVNjcmVlbkgiLCJmbG9vckNvbG9yIiwiZmxvb3JOdW0iLCJmbG9vck51bWJlciIsInJvb21TZWVkIiwiYnJpZ2h0bmVzc0ZhY3RvciIsImxpbmVXaWR0aCIsImRyYXdSb29tRGVjb3JhdGlvbnMiLCJ0aWxlWCIsInRpbGVZIiwiYnV0dG9uUmFkaXVzIiwiYnV0dG9uWCIsImJ1dHRvblkiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGwiLCJ3IiwidHMiLCJtYXJnaW4iLCJvYmpNYXJnaW4iLCJkcmF3UmVjdCIsInJ4IiwicnkiLCJydyIsInJoIiwib3V0bGluZSIsInNjcmVlblciLCJzY3JlZW5IIiwiZHJhd0NpcmNsZSIsImN4IiwiY3kiLCJyYWRpdXMiLCJzdHJva2UiLCJkZXNrVyIsImRlc2tIIiwiY2hhaXJIIiwic3BhY2VYIiwic3BhY2VZIiwicm93WSIsImNvbFgiLCJ0YWJsZVciLCJ0YWJsZUgiLCJjYWJpbmV0VyIsInNoZWxmVyIsInNoZWxmU3BhY2luZyIsInN4Iiwic2hlbGZZIiwibW92ZVRvIiwibGluZVRvIiwidGFibGVMaWJYIiwibGFiVGFibGVIIiwibWV0YWxTaGVsZlciLCJtZXRhbFNoZWxmSCIsImJveFNpemUiLCJkZWZhdWx0Qm9va1NpemUiLCJib29rIiwiYm9va1NpemUiLCJjb25zaXN0ZW50TGlmdENvb3JkcyIsIkRFRkFVTFRfR0VOX1BBUkFNUyIsIm1pblJvb21TaXplIiwibWF4Um9vbVNpemUiLCJjb3JyaWRvclRoaWNrbmVzcyIsIm51bVJvb21zIiwibWF4Um9vbUF0dGVtcHRzIiwicm9vbVR5cGVXZWlnaHRzIiwiY2xhc3Nyb29tIiwib2ZmaWNlIiwibGlicmFyeSIsImd5bSIsInV0aWxpdHkiLCJfY2FydmVDb3JyaWRvckJldHdlZW4iLCJyb29tQSIsInJvb21CIiwiY2VudGVyVGlsZVgiLCJheCIsImNlbnRlclRpbGVZIiwiYXkiLCJieCIsImJ5IiwiX2NhcnZlSG9yaXpvbnRhbENvcnJpZG9yIiwiX2NhcnZlVmVydGljYWxDb3JyaWRvciIsImMxIiwiYzIiLCJyMSIsInIyIiwiX2dldFRpbGVPcGVubmVzc0RldGFpbHMiLCJpc1RpbGVXYWxrYWJsZSIsImN1cnJlbnRNYXAiLCJtYXBDb2xzIiwibWFwUm93cyIsInRpbGVWYWwiLCJvcGVuU2lkZXMiLCJuZWlnaGJvckRlbHRhcyIsImR4IiwiZHkiLCJ3YWxrYWJsZU5laWdoYm9yRmxhZ3MiLCJpc0Nob2tlcG9pbnQiLCJOIiwiUyIsIlciLCJFIiwiX2ZvcmNlQ29ubmVjdGlvblRvUG9pbnQiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsImRpcmVjdGlvbnMiLCJpc0FkamFjZW50VG9XYWxrYWJsZSIsImFkamFjZW50V2Fsa2FibGVDb29yZCIsIm54IiwibnkiLCJuZWlnaGJvclRpbGUiLCJxdWV1ZSIsInZpc2l0ZWQiLCJTZXQiLCJiZnNQYXRoYWJsZSIsInRhcmdldFdhbGthYmxlIiwiY2xvc2VzdFdhbGthYmxlIiwibWluRm91bmREaXN0IiwiSW5maW5pdHkiLCJjdXJyWCIsImN1cnJZIiwiZGlzdCIsInNoaWZ0IiwibmV4dFgiLCJuZXh0WSIsImhhcyIsImluY2x1ZGVzIiwiX2lzTGlmdFJlYWNoYWJsZSIsInJlYWNoYWJsZSIsIm1hcEdyaWQiLCJzdGFydFgiLCJzdGFydFkiLCJ3YWxrYWJsZVRpbGVWYWx1ZXMiLCJwZXJmb3JtQkZTIiwiUHJvY2VkdXJhbE1hcCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwicmVuZGVyZXIiLCJnZW5lcmF0aW9uUGFyYW1zIiwiYm9va3NQZXJNYXAiLCJsYWIiLCJzdG9yYWdlIiwiZ2VuZXJhdGlvbkNvbmZpZyIsImNvbmZpZyIsInVzZXJQYXJhbXMiLCJnZW5QYXJhbXMiLCJHWU1fQ0hBTkNFX09OX0ZJUlNUX0ZMT09SIiwiQXJyYXkiLCJmcm9tIiwicm9vbUF0dGVtcHRzIiwid2VpZ2h0ZWRUeXBlcyIsInRvdGFsV2VpZ2h0Iiwid2VpZ2h0Iiwicm9vbVdpZHRoIiwicm9vbUhlaWdodCIsInJvb21Db2wiLCJyb29tUm93IiwibmV3Um9vbSIsImNvbm5lY3RlZCIsIm92ZXJsYXBzIiwiYnVmZmVyIiwiZXhpc3RpbmdSb29tIiwiX3BsYWNlUm9vbXMiLCJjb25uZWN0ZWRTZXQiLCJ1bmNvbm5lY3RlZFJvb21zIiwiYmVzdERpc3RhbmNlU3EiLCJiZXN0VW5jb25uZWN0ZWRSb29tIiwiYmVzdENvbm5lY3RlZFJvb21JZCIsImJlc3RVbmNvbm5lY3RlZEluZGV4Iiwicm9vbVUiLCJyb29tQyIsImRpc3RTcSIsImJlc3RDb25uZWN0ZWRSb29tIiwiZmluZCIsInNwbGljZSIsIl9jb25uZWN0Um9vbXNCZXR0ZXIiLCJwbGFjZWRMaWZ0RGF0YSIsImN1cnJlbnRDb25zaXN0ZW50Q29vcmRzIiwicm9vbXNMaXN0IiwiY29vcmRzVG9Vc2UiLCJuZXdseUZvdW5kQ29vcmRzIiwiY2VudGVyWCIsImNlbnRlclkiLCJiZXN0U3BvdENhbmRpZGF0ZSIsInN0YXJ0SW50ZXJuYWxDb2wiLCJlbmRJbnRlcm5hbENvbCIsInN0YXJ0SW50ZXJuYWxSb3ciLCJlbmRJbnRlcm5hbFJvdyIsImN1cnJlbnRTY29yZSIsImRldGFpbHNTZWxmIiwid29yc3RBY2Nlc3NQZW5hbHR5RnJvbU5laWdoYm9ycyIsIm51bUFjdHVhbEFjY2Vzc1BvaW50cyIsImRlbHRhIiwibmNBY2Nlc3MiLCJuckFjY2VzcyIsImFjY2Vzc1RpbGVUeXBlIiwiZGV0YWlsc0FjY2Vzc1RpbGUiLCJkZWJ1Z19yb29tIiwidG9GaXhlZCIsIl9maW5kTGlmdFBsYWNlbWVudExvY2F0aW9uIiwic2FmZUZhbGxiYWNrWCIsInNhZmVGYWxsYmFja1kiLCJsaWZ0V29ybGRQb3MiLCJwb3NpdGlvbiIsImNvb3JkcyIsIl9wbGFjZUxpZnQiLCJfZW5zdXJlTWFwQm9yZGVycyIsImVycm9yTXNnIiwiZ2VuZXJhdGVMZXZlbERhdGEiLCJwbGFjZUJvb2tzUmVsaWFibHkiLCJwb3RlbnRpYWxMb2NhdGlvbnMiLCJwbGFjZWRDb29yZHMiLCJpc0xpZnRUaWxlIiwiYm9va3NQbGFjZWQiLCJyYW5kb21JbmRleCIsImNvb3JkS2V5IiwiYm9va1dvcmxkWCIsImJvb2tXb3JsZFkiLCJib29rSWQiLCJpc1dhbGthYmxlIiwid29ybGRYIiwid29ybGRZIiwiZmluZFJhbmRvbUluaXRpYWxTcGF3blBvc2l0aW9uIiwic3VpdGFibGVUaWxlcyIsImlzTGlmdCIsImlzVGlsZU9wZW5Fbm91Z2giLCJtaW5PcGVuU2lkZXMiLCJhdm9pZE9uZVRpbGVXaWRlUGFzc2FnZXMiLCJvcGVuU2lkZXNDb3VudCIsImlzT3BlblNpZGUiLCJkaXJMYWJlbCIsIm5laWdoYm9yWCIsIm5laWdoYm9yWSIsIm5laWdoYm9yVGlsZVZhbHVlIiwiZmluZE5lYXJlc3RXYWxrYWJsZVRpbGUiLCJ0YXJnZXRXb3JsZFgiLCJ0YXJnZXRXb3JsZFkiLCJtYXhSYWRpdXMiLCJleGNsdWRlTGlmdCIsInRhcmdldFRpbGVYIiwidGFyZ2V0VGlsZVkiLCJ0YXJnZXRTYWZlVGlsZXMiLCJzdGFydFRpbGVWYWx1ZSIsIm1pblNpZGVzRm9ySW5pdGlhbCIsImN1cnJlbnRSYWRpdXNNaW5PcGVuU2lkZXMiLCJhYnMiLCJjaGVja1giLCJjaGVja1kiLCJiZnNXYWxrYWJsZVBhdGhUaWxlcyIsImdldFNwYXduUG9pbnRJblJvb21PZkxpZnQiLCJsaWZ0VGlsZVgiLCJsaWZ0VGlsZVkiLCJwcmVmZXJyZWREaXN0YW5jZSIsImFzc29jaWF0ZWRSb29tIiwiZW50cnlQb2ludFRvUm9vbSIsImRpcmVjdGlvbkZyb21Tb3VyY2VUb0VudHJ5UG9pbnQiLCJjaGVja05laWdoYm9ycyIsIm4iLCJhZGpYIiwiYWRqWSIsIm5PdXRlciIsImNvcnJpZG9yWCIsImNvcnJpZG9yWSIsIm5Jbm5lciIsInBvdGVudGlhbFJvb21YIiwicG90ZW50aWFsUm9vbVkiLCJpbndhcmREeCIsImlud2FyZER5IiwiZGlzdE9mZnNldCIsInNwYXduQ2FuZGlkYXRlVGlsZVgiLCJzcGF3bkNhbmRpZGF0ZVRpbGVZIiwiZnVydGhlckluWCIsImZ1cnRoZXJJblkiLCJoYXNTcGFjZUJlaGluZCIsImZpbmROZWFyYnlVbmFuc3dlcmVkQm9vayIsImNsb3Nlc3RCb29rIiwibWluRGlzdGFuY2VTcSIsImRpc3RhbmNlU3EiLCJtYXJrQm9va0FzQ29sbGVjdGVkIiwiYm9va1RvQ29sbGVjdCIsImZpbmROZWFyYnlMaWZ0IiwiZ2V0TGlmdFBvc2l0aW9uIiwibG9nTWFwR3JpZCIsImhlYWRlciIsInJvd051bSIsInJvd1N0cmluZyIsInRpbGUiLCJqb2luIiwiTGV2ZWwiLCJsb2FkRmxvb3IiLCJsaWZ0UG9zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRDdXJyZW50Qm9va3MiLCJHYW1lUmVuZGVyZXIiLCJnYW1lIiwiaW5pdGlhbGl6ZUNhbnZhcyIsImdldENvbnRleHQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJyZXNpemVDYW52YXMiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjaGFyYWN0ZXIiLCJsZXZlbCIsImNlbnRlckNhbWVyYU9uQ2hhcmFjdGVyIiwiZHJhd0ZyYW1lIiwiY2xlYXJSZWN0IiwiY2hhciIsImRyYXdXaW5TY3JlZW4iLCJ0YXJnZXRCb29rc1RvV2luIiwiR2FtZXBsYXlNYW5hZ2VyIiwiYmluZCIsInVwZGF0ZSIsImdhbWVTdGF0ZSIsInVwZGF0ZVBsYXlpbmdTdGF0ZSIsIm1vdmVkIiwiaGFuZGxlTW92ZW1lbnQiLCJoYW5kbGVJbnRlcmFjdGlvbnMiLCJpbnB1dCIsImFjdHVhbE1vdmVYIiwiYWN0dWFsTW92ZVkiLCJjYW5Nb3ZlWCIsImNoZWNrQ29sbGlzaW9uIiwiY2FuTW92ZVkiLCJjb2xsaXNpb25Cb3giLCJwb2ludHNUb0NoZWNrIiwicG9pbnQiLCJuZWFyYnlCb29rIiwiaW5pdGlhdGVRdWVzdGlvbiIsImxpZnRDb29sZG93bkFjdGl2ZSIsImluaXRpYXRlRmxvb3JTZWxlY3Rpb24iLCJzZXRHYW1lU3RhdGUiLCJjdXJyZW50Qm9va1RhcmdldCIsImF2YWlsYWJsZVF1ZXN0aW9ucyIsInFJbmRleCIsImN1cnJlbnRRdWVzdGlvbkRhdGEiLCJzZWxlY3RlZE9wdGlvbkluZGV4IiwidG90YWxCb29rc0NvbGxlY3RlZEdsb2JhbGx5IiwiX3NldEdhbWVPdmVyIiwic2VsZWN0ZWRGbG9vciIsImhhbmRsZUxpZnRUcmFuc2l0aW9uIiwiY2F0Y2giLCJlcnIiLCJfaGFuZGxlRmF0YWxFcnJvciIsInRhcmdldEZsb29yIiwiaXNEZWJ1ZyIsIkxJRlRfQ09PTERPV05fTVMiLCJuZXdNYXAiLCJsaWZ0UG9zRGF0YSIsImZpbmFsU3Bhd25Qb3MiLCJlbWVyZ2VuY3lTcGF3biIsImVuc3VyZUNoYXJhY3RlcklzT25XYWxrYWJsZVRpbGUiLCJzdGFydExpZnRDb29sZG93blRpbWVyIiwiYWxsb3dTdGFuZGluZ09uTGlmdCIsImN1cnJlbnRUaWxlWCIsImN1cnJlbnRUaWxlWSIsImN1cnJlbnRUaWxlVmFsdWUiLCJpc1NhZmVUb1N0YW5kSGVyZSIsImlzQ29sbGlkaW5nV2l0aFdhbGwiLCJzYWZlU3BvdCIsImVtZXJnZW5jeVNwb3QiLCJNVVNJQ19TT1VSQ0VTIiwidHJhY2sxIiwidHJhY2syIiwidHJhY2szIiwiVFJBQ0tfQ1lDTEVfT1JERVIiLCJBdWRpb01hbmFnZXIiLCJtdXNpY1ZvbHVtZSIsImN1cnJlbnRNdXNpY0VsZW1lbnQiLCJjdXJyZW50VHJhY2tLZXkiLCJpc011c2ljUGxheWluZyIsInNhdmVkVm9sdW1lIiwicGFyc2VGbG9hdCIsImF1ZGlvRWxlbWVudHMiLCJfcHJlbG9hZFRyYWNrcyIsImF1ZGlvUGF0aCIsImF1ZGlvIiwiQXVkaW8iLCJwcmVsb2FkIiwic2V0TXVzaWNWb2x1bWUiLCJ2b2x1bWUiLCJnZXRNdXNpY1ZvbHVtZSIsInBsYXlNdXNpYyIsInRyYWNrS2V5IiwibG9vcCIsInN0b3BNdXNpYyIsInBsYXkiLCJ0aGVuIiwiaGFzRm9jdXMiLCJwYXVzZSIsImN1cnJlbnRUaW1lIiwiY2hhbmdlVHJhY2tGb3JGbG9vciIsInRyYWNrSW5kZXgiLCJuZXdUcmFja0tleSIsInN0YXJ0SW5pdGlhbE11c2ljIiwiaW5pdGlhbEZsb29yIiwiR2FtZSIsImNoYXJhY3RlckNvbG9yIiwiX2dhbWVTdGF0ZSIsImlzUnVubmluZyIsImxpZnRDb29sZG93blRpbWVyIiwiZ2FtZXBsYXlNYW5hZ2VyIiwiYXVkaW9NYW5hZ2VyIiwic3ByaXRlcyIsInJlZCIsImJsdWUiLCJ5ZWxsb3ciLCJncmVlbiIsImdhbWVMb29wIiwiX2JvdW5kS2V5RG93bkhhbmRsZXIiLCJfYm91bmRLZXlVcEhhbmRsZXIiLCJfaW5pdGlhbGl6ZUNvcmVDb21wb25lbnRzIiwiX2luaXRpYWxpemVVSU1hbmFnZXIiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJfbG9hZEFzc2V0c0FuZFRoZW5TdGFydExvZ2ljIiwibG9hZGluZ092ZXJsYXkiLCJhbGVydCIsIm5ld1N0YXRlIiwiX2xvYWRBc3NldHMiLCJfc3RhcnRHYW1lTG9naWMiLCJwcm9taXNlcyIsInNwcml0ZVBhdGgiLCJyZWplY3QiLCJhbGwiLCJMT0FESU5HX0xFVkVMIiwic3RhcnRQb3MiLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlS2V5VXAiLCJ3aW4iLCJDUkVBVE9SX05BTUVTIiwiQ0xBU1NfQVRURU5ESU5HX0lORk8iLCJzdG9wR2FtZSIsInNob3dBbGVydCIsImtleUhhbmRsZWQiLCJ0b0xvd2VyQ2FzZSIsImN1cnJlbnRHYW1lSW5zdGFuY2UiLCJNZW51IiwiY2hhcmFjdGVySW1hZ2VTb3VyY2VzIiwic2VsZWN0ZWRDaGFyYWN0ZXIiLCJ1c2VySW50ZXJhY3RlZCIsIm92ZXJsYXkiLCJhdWRpb01hbmFnZXJJbnN0YW5jZSIsImluaXRpYWxpemVFbGVtZW50cyIsImNoYXJhY3RlclBhbmVsIiwic2V0dXBDaGFyYWN0ZXJJbWFnZXMiLCJhZGRFdmVudExpc3RlbmVycyIsInNldEF1ZGlvTWFuYWdlciIsInZhbHVlIiwic2V0dGluZ3NCdXR0b24iLCJwbGF5QnV0dG9uIiwiY2hhcmFjdGVyQnV0dG9uIiwic2V0dGluZ3NQYW5lbCIsInNmeFZvbHVtZSIsImNsb3NlU2V0dGluZ3NCdXR0b24iLCJjaGFyYWN0ZXJHcmlkIiwiY2xvc2VDaGFyYWN0ZXJQYW5lbEJ1dHRvbiIsInNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheSIsIm1haW5NZW51QnV0dG9uc0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsImNoaWxkcmVuIiwidXBkYXRlU2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5IiwiY2hhcmFjdGVyQ2FyZHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2FyZCIsImNoYXJhY3RlcktleSIsImltZ0VsZW1lbnQiLCJoYW5kbGVGaXJzdEludGVyYWN0aW9uIiwiYWRkSW50ZXJhY3RpdmVMaXN0ZW5lciIsImVsZW1lbnQiLCJldmVudFR5cGUiLCJoYW5kbGVyRm4iLCJjYWxsIiwidG9nZ2xlU2V0dGluZ3MiLCJzdGFydEdhbWUiLCJvcGVuQ2hhcmFjdGVyTW9kYWwiLCJjbG9zZVNldHRpbmdzIiwiY2xvc2VDaGFyYWN0ZXJNb2RhbCIsIm5ld1ZvbHVtZSIsImNsaWNrZWRDYXJkIiwiY2xvc2VzdCIsInNlbGVjdENoYXJhY3RlciIsImNhcmRFbGVtZW50Iiwic2VsZWN0ZWRDaGFyS2V5IiwiaW1nU3JjIiwiZGlzcGxheWVkTmFtZSIsImNoYXJBdCIsInNlbGVjdGVkQ2FyZEVsZW1lbnRIMyIsIm9wZW5TZXR0aW5ncyIsImdhbWVDYW52YXMiXSwic291cmNlUm9vdCI6IiJ9