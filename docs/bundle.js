(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var i=e.g.document;if(!t&&i&&(i.currentScript&&"SCRIPT"===i.currentScript.tagName.toUpperCase()&&(t=i.currentScript.src),!t)){var o=i.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&(!t||!/^http(s?):/.test(t));)t=o[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();class t{constructor(){this.keys={up:!1,down:!1,left:!1,right:!1}}setKey(e,t){this.keys.hasOwnProperty(e)&&(this.keys[e]=t)}getInputDirection(){let e=0,t=0;return this.keys.up&&(t-=1),this.keys.down&&(t+=1),this.keys.left&&(e-=1),this.keys.right&&(e+=1),{x:e,y:t}}}const i={LOADING:"LOADING",MENU:"MENU",PLAYING:"PLAYING",ASKING_QUESTION:"ASKING_QUESTION",SELECTING_FLOOR:"SELECTING_FLOOR",TRANSITIONING:"TRANSITIONING",GAME_OVER:"GAME_OVER"},o=[{question:"Który język programowania jest znany ze swojej wszechstronności i używany zarówno w backendzie (Node.js), jak i frontendzie?",options:["Python","Java","JavaScript","C#"],correctAnswer:2},{question:"Co oznacza skrót HTML?",options:["HyperText Markup Language","High Transfer Machine Language","Hyperlink and Text Management Language","Home Tool Markup Language"],correctAnswer:0},{question:"Która struktura danych działa na zasadzie LIFO (Last-In, First-Out)?",options:["Kolejka (Queue)","Stos (Stack)","Lista (List)","Drzewo (Tree)"],correctAnswer:1},{question:"Jak nazywa się proces znajdowania i naprawiania błędów w kodzie?",options:["Kompilacja","Testowanie","Debugowanie","Refaktoryzacja"],correctAnswer:2},{question:"Który paradygmat programowania opiera się na koncepcji 'obiektów', które mogą zawierać dane i kod?",options:["Programowanie funkcyjne","Programowanie proceduralne","Programowanie obiektowe","Programowanie logiczne"],correctAnswer:2},{question:"Co oznacza CSS?",options:["Cascading Style Sheets","Computer Style Syntax","Creative Styling System","Colorful Style Scripts"],correctAnswer:0},{question:"Który operator w JavaScript służy do ścisłego porównania (wartość i typ)?",options:["==","=","===","!="],correctAnswer:2},{question:"Jak nazywa się popularny system kontroli wersji używany przez programistów?",options:["Subversion (SVN)","Git","Mercurial","CVS"],correctAnswer:1},{question:"Który typ pętli w większości języków programowania jest najbardziej odpowiedni do iteracji po elementach tablicy, gdy nie znamy ich liczby?",options:["for","while","do...while","foreach (lub for...of)"],correctAnswer:3},{question:"Co to jest API?",options:["Advanced Programming Interface","Application Programming Interface","Automated Program Interaction","Algorithmic Processing Input"],correctAnswer:1},{question:"Co to jest PLC i do czego najczęściej służy w automatyce?",options:["Programowalny Logic Controller, do sterowania procesami przemysłowymi","Personal Learning Computer, do nauki programowania","Power Line Communication, do przesyłu danych przez sieć elektryczną","Project Lifecycle Cost, do zarządzania kosztami projektu"],correctAnswer:0},{question:"Za co odpowiada przysłona (apertura) w aparacie fotograficznym?",options:["Kontrolę czasu naświetlania","Regulację głębi ostrości i ilości wpadającego światła","Ustawienie balansu bieli","Stabilizację obrazu"],correctAnswer:1},{question:"Który element komputera jest odpowiedzialny za tymczasowe przechowywanie danych używanych przez procesor?",options:["Dysk twardy (HDD/SSD)","Karta graficzna (GPU)","Pamięć RAM","Płyta główna"],correctAnswer:2},{question:"W jakim języku programowania najczęściej pisane są skrypty po stronie serwera (backend)?",options:["HTML","CSS","SQL","PHP, Python lub Node.js (JavaScript)"],correctAnswer:3},{question:"Jaki typ sygnału charakteryzuje się płynną zmianą wartości w czasie, w przeciwieństwie do sygnału cyfrowego?",options:["Binarny","Analogowy","Zero-jedynkowy","Impulsowy"],correctAnswer:1},{question:"Który parametr ustawia czułość matrycy aparatu na światło i wpływa na poziom szumów na zdjęciu?",options:["Czas naświetlania","Przysłona","ISO","Ogniskowa"],correctAnswer:2},{question:"Co to jest adres IP w sieci komputerowej?",options:["Unikalny identyfikator urządzenia w sieci","Nazwa użytkownika do logowania","Adres strony internetowej","Typ kabla sieciowego"],correctAnswer:0},{question:"Czym różni się instrukcja warunkowa `if` od pętli `while` w programowaniu?",options:["`if` powtarza blok kodu, `while` sprawdza warunek jednokrotnie","`if` sprawdza warunek jednokrotnie, `while` powtarza blok kodu dopóki warunek jest prawdziwy","Nie ma między nimi różnicy","`if` służy tylko do deklarowania zmiennych, `while` do operacji matematycznych"],correctAnswer:1},{question:"Do czego najczęściej służy czujnik ciśnienia w systemie automatyki?",options:["Pomiaru temperatury","Pomiaru odległości","Pomiaru siły","Pomiaru ciśnienia"],correctAnswer:3},{question:"Co oznacza zasada trójpodziału w kompozycji fotograficznej?",options:["Dzielenie obrazu na 3 równe części pionowo i poziomo i umieszczanie kluczowych elementów na liniach lub ich przecięciach","Używanie tylko 3 głównych kolorów w kadrze","Robienie zawsze 3 zdjęć tej samej sceny","Balansowanie 3 głównych obiektów w kadrze"],correctAnswer:0},{question:"Jaka jest podstawowa rola systemu operacyjnego?",options:["Tworzenie grafiki komputerowej","Zarządzanie zasobami sprzętowymi i programowymi komputera","Pisanie kodu programów","Przeglądanie Internetu"],correctAnswer:1},{question:"Jakiego typu danych najczęściej użyjesz do przechowywania wieku osoby (liczba całkowita)?",options:["String (ciąg znaków)","Boolean (wartość logiczna)","Float (liczba zmiennoprzecinkowa)","Integer (liczba całkowita)"],correctAnswer:3},{question:"Element wykonawczy (aktuator) w systemie automatyki to urządzenie, które...",options:["Odczytuje dane z czujników","Wykonuje komendy ze sterownika, aby wykonać fizyczne działanie (np. ruch)","Przechowuje dane historyczne","Służy do komunikacji z operatorem"],correctAnswer:1},{question:"Który format pliku graficznego jest bezstratny i często używany w profesjonalnej edycji, zachowując maksymalną jakość kosztem rozmiaru?",options:["JPEG","GIF","PNG","RAW"],correctAnswer:3},{question:"Co chroni sieć komputerową przed nieautoryzowanym dostępem z zewnątrz?",options:["Router","Switch","Modem","Firewall (zapora sieciowa)"],correctAnswer:3},{question:"Co to jest IDE (Integrated Development Environment) w kontekście programowania?",options:["System operacyjny","Narzędzie do zarządzania bazą danych","Zintegrowane środowisko programistyczne (edytor kodu, kompilator, debugger w jednym)","Protokół sieciowy"],correctAnswer:2},{question:"Przykładem czujnika zbliżeniowego, wykrywającego obecność obiektu bez fizycznego kontaktu, może być:",options:["Termometr","Fotokomórka","Manometr (czujnik ciśnienia)","Akcelerometr"],correctAnswer:1},{question:"Do czego służy balans bieli (white balance) w aparacie fotograficznym?",options:["Do regulacji ostrości","Do korekcji kolorów, aby biały wyglądał na biały niezależnie od źródła światła","Do ustawiania czasu naświetlania","Do dodawania efektów specjalnych"],correctAnswer:1},{question:"Który protokół jest używany do bezpiecznego (szyfrowanego) przesyłania stron internetowych?",options:["HTTP","FTP","SMTP","HTTPS"],correctAnswer:3},{question:"Co to jest zmienna w programowaniu?",options:["Funkcja wykonująca określone zadanie","Typ pętli","Nazwane miejsce w pamięci komputera służące do przechowywania danych","Polecenie wyświetlające tekst na ekranie"],correctAnswer:2}];class a{static scoreElement=null;static targetElement=null;static controlsContainer=null;static questionOverlay=null;static questionTextElement=null;static answerButtonsContainer=null;static floorSelectionPanel=null;static floorButtonsContainer=null;static flashMessageContainer=null;static loadingOverlayElement=null;static gameOverScreenElement=null;static gameOverTitleElement=null;static creatorNamesListElement=null;static classInfoElement=null;static returnToMenuButtonElement=null;static gameplayManagerInstance=null;static flashMessageTimeouts={};static setGameplayManager(e){e?(this.gameplayManagerInstance=e,console.log("[UIManager] GameplayManager instance registered successfully with UIManager.")):console.error("[UIManager] Attempted to set GameplayManager instance to null or undefined!")}static initializeUI(e){console.log("[UIManager] Initializing base UI elements (controls, panels)..."),e||console.error("[UIManager] InputManager is required for initializeUI to create controls."),this.createControls(e),this.createQuestionUI(),this.createFloorSelectionUI(),this.ensureFlashMessageContainer(),this.createGameOverScreen(),this.gameplayManagerInstance||console.warn("[UIManager] WARNING: GameplayManager instance is NOT SET at the end of initializeUI. Ensure Game.js calls UIManager.setGameplayManager() *before* UIManager.initializeUI()."),console.log("[UIManager] Base UI element initialization complete.")}static createControls(e){this.controlsContainer=document.getElementById("controls-container"),this.controlsContainer||(this.controlsContainer=document.createElement("div"),this.controlsContainer.id="controls-container",this.controlsContainer.classList.add("controls-container"),document.body.appendChild(this.controlsContainer)),this.controlsContainer.innerHTML="",[{direction:"up",icon:"↑",gridArea:"up"},{direction:"left",icon:"←",gridArea:"left"},{direction:"right",icon:"→",gridArea:"right"},{direction:"down",icon:"↓",gridArea:"down"}].forEach((({direction:t,icon:i,gridArea:o})=>{const a=document.createElement("button");if(a.className=`control-btn ${t}`,a.textContent=i,a.style.gridArea=o,a.dataset.direction=t,e){const i=i=>{e.setKey(t,!0),a.classList.add("active"),i.preventDefault()},o=i=>{e.keys[t]&&e.setKey(t,!1),a.classList.remove("active"),i.preventDefault()};a.addEventListener("touchstart",i,{passive:!1}),a.addEventListener("touchend",o,{passive:!1}),a.addEventListener("touchcancel",o,{passive:!1}),a.addEventListener("mousedown",i),a.addEventListener("mouseup",o),a.addEventListener("mouseleave",o)}this.controlsContainer.appendChild(a)}));const t=document.getElementById("score-display");if(t)this.scoreElement=t.querySelector("#score-value"),this.targetElement=t.querySelector("#score-target"),this.scoreElement&&(this.scoreElement.textContent="0"),this.targetElement&&(this.targetElement.textContent="?");else{const e=document.createElement("div");e.id="score-display",e.classList.add("score-display"),e.innerHTML='Books: <span id="score-value">0</span> / <span id="score-target">?</span>',document.body.appendChild(e),this.scoreElement=e.querySelector("#score-value"),this.targetElement=e.querySelector("#score-target")}}static createQuestionUI(){this.questionOverlay=document.getElementById("question-overlay"),this.questionOverlay||(this.questionOverlay=document.createElement("div"),this.questionOverlay.id="question-overlay",this.questionOverlay.classList.add("ui-panel"),this.questionOverlay.innerHTML='\n        <div id="blackboard-content">\n          <h2>Question</h2>\n          <div id="question-box">\n            <p id="question-text"></p>\n            <div id="answer-buttons"></div>\n          </div>\n        </div>',document.body.appendChild(this.questionOverlay)),this.questionTextElement=this.questionOverlay.querySelector("#question-text"),this.answerButtonsContainer=this.questionOverlay.querySelector("#answer-buttons"),this.questionTextElement&&this.answerButtonsContainer||console.error("[UIManager] Failed to find/create child elements of question UI!")}static createFloorSelectionUI(){this.floorSelectionPanel=document.getElementById("floor-selection-ui"),this.floorSelectionPanel||(this.floorSelectionPanel=document.createElement("div"),this.floorSelectionPanel.id="floor-selection-ui",this.floorSelectionPanel.classList.add("ui-panel"),this.floorSelectionPanel.innerHTML='\n        <h2>Select Floor</h2>\n        <div id="floor-buttons-container"></div>',document.body.appendChild(this.floorSelectionPanel)),this.floorButtonsContainer=this.floorSelectionPanel.querySelector("#floor-buttons-container"),this.floorButtonsContainer||console.error("[UIManager] Failed to find/create floor buttons container!")}static ensureFlashMessageContainer(){return this.flashMessageContainer=document.getElementById("flash-message-container"),this.flashMessageContainer||(this.flashMessageContainer=document.createElement("div"),this.flashMessageContainer.id="flash-message-container",document.body.appendChild(this.flashMessageContainer)),this.flashMessageContainer}static flashMessage(e,t="info",i=3e3){const o=this.ensureFlashMessageContainer();if(!o)return void console.error("[UIManager] Flash message container not found or creatable.");const a=document.createElement("div");a.textContent=e,a.className="flash-message",a.classList.add(`flash-${t}`);const s=`flash-${Date.now()}-${Math.random().toString(36).substr(2,5)}`;a.id=s,o.appendChild(a),requestAnimationFrame((()=>{a.classList.add("visible")})),clearTimeout(this.flashMessageTimeouts[s]),this.flashMessageTimeouts[s]=setTimeout((()=>{a.classList.remove("visible");const e=e=>{"opacity"!==e.propertyName&&"transform"!==e.propertyName||(a.parentNode&&a.parentNode.removeChild(a),delete this.flashMessageTimeouts[s])};a.addEventListener("transitionend",e,{once:!0}),setTimeout((()=>{a.parentNode&&(a.removeEventListener("transitionend",e),a.parentNode.removeChild(a)),delete this.flashMessageTimeouts[s]}),500)}),i)}static getLoadingOverlay(){if(!this.loadingOverlayElement&&(this.loadingOverlayElement=document.getElementById("loading-overlay"),!this.loadingOverlayElement)){this.loadingOverlayElement=document.createElement("div"),this.loadingOverlayElement.id="loading-overlay",this.loadingOverlayElement.className="loading-overlay";const e=document.createElement("p");e.textContent="Loading...",this.loadingOverlayElement.appendChild(e),document.body.appendChild(this.loadingOverlayElement),console.log("[UIManager] Loading overlay created and appended to body.")}return this.loadingOverlayElement}static createGameOverScreen(){this.gameOverScreenElement=document.getElementById("game-over-screen"),this.gameOverScreenElement?(this.gameOverTitleElement=this.gameOverScreenElement.querySelector("#game-over-title"),this.creatorNamesListElement=this.gameOverScreenElement.querySelector("#creator-names"),this.classInfoElement=this.gameOverScreenElement.querySelector("#class-info"),this.returnToMenuButtonElement=this.gameOverScreenElement.querySelector("#return-to-menu-button"),this.gameOverTitleElement&&this.creatorNamesListElement&&this.classInfoElement&&this.returnToMenuButtonElement?(this.returnToMenuButtonElement.addEventListener("click",(()=>{window.location.reload()})),console.log("[UIManager] Game Over screen elements initialized.")):console.error("[UIManager] Failed to find one or more child elements of the game over screen!")):console.error("[UIManager] CRITICAL: #game-over-screen element not found in HTML!")}static showGameOverScreen(e,t=[],i=""){(this.gameOverScreenElement&&this.gameOverTitleElement&&this.creatorNamesListElement&&this.classInfoElement||(console.error("[UIManager] Game Over Screen not fully initialized. Cannot show."),this.createGameOverScreen(),this.gameOverScreenElement))&&(e?(this.gameOverTitleElement.textContent="Congratulations! You Escaped!",this.gameOverTitleElement.className="win-title"):(this.gameOverTitleElement.textContent="Game Over",this.gameOverTitleElement.className="lose-title"),this.creatorNamesListElement.innerHTML="",t.forEach((e=>{const t=document.createElement("li");t.textContent=e,this.creatorNamesListElement.appendChild(t)})),this.classInfoElement.textContent=i,this.gameOverScreenElement.classList.add("visible"),this.hideGameUI(),this.hideQuestion(),this.hideFloorSelectionUI())}static hideGameOverScreen(){this.gameOverScreenElement&&this.gameOverScreenElement.classList.remove("visible")}static showQuestion(e){if(this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer||(console.error("[UIManager] Question UI not ready."),this.createQuestionUI(),this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer))if(e){if(!this.gameplayManagerInstance||"function"!=typeof this.gameplayManagerInstance.handleAnswer)return console.error("[UIManager] CRITICAL: GameplayManager or its handleAnswer method is not set or invalid!"),this.flashMessage("Error: Game interaction system failed (Q).","error",5e3),void this.hideQuestion();this.questionTextElement.textContent=e.question,this.answerButtonsContainer.innerHTML="",e.options.forEach(((e,t)=>{const i=document.createElement("button");i.textContent=e,i.dataset.index=t,i.classList.add("answer-button"),i.addEventListener("click",(e=>{const t=parseInt(e.target.dataset.index,10);this.gameplayManagerInstance.handleAnswer(t)})),this.answerButtonsContainer.appendChild(i)})),this.questionOverlay.classList.add("visible")}else console.error("[UIManager] Cannot show question - no questionData provided.")}static hideQuestion(){this.questionOverlay&&(this.questionOverlay.classList.remove("visible"),this.questionTextElement&&(this.questionTextElement.textContent=""),this.answerButtonsContainer&&(this.answerButtonsContainer.innerHTML=""))}static showFloorSelectionUI(e,t,i){if(this.floorSelectionPanel&&this.floorButtonsContainer||(console.error("[UIManager] Floor selection UI not ready."),this.createFloorSelectionUI(),this.floorSelectionPanel&&this.floorButtonsContainer)){if(!this.gameplayManagerInstance||"function"!=typeof this.gameplayManagerInstance.handleFloorSelection)return console.error("[UIManager] CRITICAL: GameplayManager or its handleFloorSelection method is not set or invalid!"),this.flashMessage("Error: Game interaction system failed (F).","error",5e3),void this.hideFloorSelectionUI();this.floorButtonsContainer.innerHTML="";for(let o=e;o<=t;o++){const e=document.createElement("button");e.textContent=`Floor ${o}`,e.classList.add("floor-button"),e.dataset.floor=o,o===i?(e.disabled=!0,e.classList.add("current")):e.addEventListener("click",(()=>{this.gameplayManagerInstance.handleFloorSelection(o)})),this.floorButtonsContainer.appendChild(e)}this.floorSelectionPanel.classList.add("visible")}}static hideFloorSelectionUI(){this.floorSelectionPanel&&this.floorSelectionPanel.classList.remove("visible")}static updateScore(e,t){this.scoreElement||(this.scoreElement=document.getElementById("score-value")),this.targetElement||(this.targetElement=document.getElementById("score-target")),this.scoreElement&&(this.scoreElement.textContent=e),this.targetElement&&(this.targetElement.textContent=t)}static showGameUI(){const e=document.getElementById("game-canvas")||document.getElementById("gameCanvas"),t=document.getElementById("menu-container"),i=document.getElementById("score-display");e?e.style.display="block":console.warn("[UIManager] Canvas element not found to show."),t&&!t.classList.contains("hidden")&&"none"!==t.style.display&&(console.warn("[UIManager] Menu container was not hidden. Hiding it now via style.display."),t.style.display="none"),this.controlsContainer?this.controlsContainer.classList.add("visible"):console.warn("[UIManager] Controls container not found to show."),i?i.classList.add("visible"):console.warn("[UIManager] Score display not found to show."),this.hideQuestion(),this.hideFloorSelectionUI(),this.hideGameOverScreen()}static hideGameUI(){const e=document.getElementById("game-canvas")||document.getElementById("gameCanvas"),t=document.getElementById("score-display");e&&(e.style.display="none"),this.controlsContainer&&this.controlsContainer.classList.remove("visible"),t&&t.classList.remove("visible")}}class s{static Direction={DOWN:0,RIGHT:1,UP:2,LEFT:3};constructor(e,t,i={}){this.ctx=e,this.sprite=new Image,this.frameSize=i.frameSize||32,this.frameCount=i.frameCount||4,this.scale=i.scale||2,this.renderSize=this.frameSize*this.scale,this.speed=i.speed||3,this.animationSpeed=i.animationSpeed||150,this.collisionBoxWidthRatio=i.collisionBoxWidthRatio||.4,this.collisionBoxHeightRatio=i.collisionBoxHeightRatio||.2,this.collisionBoxFeetOffsetRatio=i.collisionBoxFeetOffsetRatio||.4,this.x=0,this.y=0,this.currentDirection=s.Direction.DOWN,this.currentFrame=0,this.isMoving=!1,this.lastFrameTime=0,this.sprite.onload=()=>{console.log(`[Character] Sprite loaded successfully: ${t}`)},this.sprite.onerror=()=>{console.error(`[Character] Failed to load sprite: ${t}`)},this.sprite.src=t}updateAnimation(e){if(!this.isMoving)return this.currentFrame=0,void(this.lastFrameTime=e);this.lastFrameTime||(this.lastFrameTime=e),e-this.lastFrameTime>this.animationSpeed&&(this.currentFrame=(this.currentFrame+1)%this.frameCount,this.lastFrameTime=e)}getCollisionBox(e,t){const i=this.renderSize*this.collisionBoxWidthRatio,o=this.renderSize*this.collisionBoxHeightRatio,a=i/2,s=this.renderSize*this.collisionBoxFeetOffsetRatio;return{top:t+s-o/2,bottom:t+s+o/2,left:e-a,right:e+a,width:i,height:o}}draw(e,t){if(!this.sprite.complete||0===this.sprite.naturalHeight)return;const i=this.currentFrame*this.frameSize,o=this.currentDirection*this.frameSize,a=Math.floor(this.x-this.renderSize/2+e),s=Math.floor(this.y-this.renderSize/2+t);try{this.ctx.drawImage(this.sprite,i,o,this.frameSize,this.frameSize,a,s,this.renderSize,this.renderSize)}catch(e){console.error("[Character] Error drawing sprite:",e)}}}class n{constructor(e,t,i,o){this.x=e,this.y=t,this.id=i,this.tileSize=o,this.size=.6*o,this.collected=!1,this.isCollected=!1}draw(e,t,i,o){const a=Math.floor(this.x+t-this.size/2),s=Math.floor(this.y+i-this.size/2);o?e.drawImage(o,a,s,this.size,this.size):(e.fillStyle="#8d6e63",e.fillRect(a,s,this.size,this.size),e.strokeStyle="#5d4037",e.strokeRect(a,s,this.size,this.size),e.fillStyle="#eee",e.font=.6*this.size+"px Arial",e.textAlign="center",e.textBaseline="middle",e.fillText("?",a+this.size/2,s+this.size/2+2))}}function r(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e}function l(e){let t=3735928559^e;return t=Math.imul(t^t>>>16,2246822507),t=Math.imul(t^t>>>13,3266489909),(t^=t>>>16)>>>0}function c(e,t){if(!e||"string"!=typeof e||e.length<7)return e;let i=parseInt(e.slice(1,3),16),o=parseInt(e.slice(3,5),16),a=parseInt(e.slice(5,7),16);return i=Math.min(255,Math.max(0,Math.round(i*t))),o=Math.min(255,Math.max(0,Math.round(o*t))),a=Math.min(255,Math.max(0,Math.round(a*t))),`#${i.toString(16).padStart(2,"0")}${o.toString(16).padStart(2,"0")}${a.toString(16).padStart(2,"0")}`}class h{constructor(e){this.tileSize=e,this.tileColors={},this.baseWallColor="#1c1e22",this.baseCorridorColor="#a0a0a0",this.baseRoomFloorColor="#c0c0c0",this.liftColor="#707080",this.errorColor="#ff00ff"}resetColorCache(){this.tileColors={}}getTileColor(e,t,i,o){const a=`${e},${t}`;if(this.tileColors[a])return this.tileColors[a];let s;switch(i){case 0:s=this.baseWallColor;break;case 1:s=this.baseCorridorColor;break;case 2:s=this.baseRoomFloorColor;break;case 3:s=this.liftColor;break;default:s=this.errorColor}return this.tileColors[a]=s,s}draw(e,t,i=null){const{map:o,rooms:a,books:s,liftPosition:n,offsetX:r,offsetY:l,cols:c,rows:h}=t,d=Math.floor(r),u=Math.floor(l),m=Math.max(0,Math.floor(-d/this.tileSize)-1),g=Math.min(c,Math.ceil((-d+e.canvas.width)/this.tileSize)+1),f=Math.max(0,Math.floor(-u/this.tileSize)-1),p=Math.min(h,Math.ceil((-u+e.canvas.height)/this.tileSize)+1);e.save(),this.drawBaseTiles(e,o,a,d,u,c,h,f,p,m,g),this.drawRoomDetails(e,o,a,n,d,u,c,h,f,p,m,g),this.drawLiftDetails(e,n,d,u),this.drawBooks(e,s,d,u,i),e.restore()}drawBaseTiles(e,t,i,o,a,s,n,r,l,c,h){e.save(),e.shadowColor="transparent";const d="#383838",u="#606060",m="#757575";for(let g=r;g<l;g++)for(let r=c;r<h;r++){const l=t[g]?.[r];if(void 0===l)continue;const c=Math.floor(r*this.tileSize+o),h=Math.floor(g*this.tileSize+a),f=this.getTileColor(g,r,l,i);if(e.fillStyle=f,e.fillRect(c,h,this.tileSize,this.tileSize),0===l){e.fillStyle="rgba(0,0,0,0.06)";for(let t=0;t<5;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1);const i=2;g>0&&0!==t[g-1]?.[r]&&(e.fillStyle=m,e.fillRect(c,h,this.tileSize,i)),g<n-1&&0!==t[g+1]?.[r]&&(e.fillStyle=d,e.fillRect(c,h+this.tileSize-i,this.tileSize,i)),r>0&&0!==t[g]?.[r-1]&&(e.fillStyle=u,e.fillRect(c,h+i,i,this.tileSize-i)),r<s-1&&0!==t[g]?.[r+1]&&(e.fillStyle=d,e.fillRect(c+this.tileSize-i,h+i,i,this.tileSize-i)),g>0&&r>0&&0!==t[g-1]?.[r]&&0!==t[g]?.[r-1]&&0!==t[g-1]?.[r-1]&&(e.fillStyle=u,e.fillRect(c,h,i,i)),g>0&&r<s-1&&0!==t[g-1]?.[r]&&0!==t[g]?.[r+1]&&0!==t[g-1]?.[r+1]&&(e.fillStyle=m,e.fillRect(c+this.tileSize-i,h,i,i))}else if(1===l){e.fillStyle="rgba(255,255,255,0.03)";for(let t=0;t<3;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1)}}e.restore()}drawRoomDetails(e,t,i,o,a,s,n,r,h,d,u,m){e.save(),e.shadowColor="transparent";for(const o of i){if(o.col+o.width<u||o.col>m||o.row+o.height<h||o.row>d)continue;const i=Math.floor(o.col*this.tileSize+a),n=Math.floor(o.row*this.tileSize+s),r=o.width*this.tileSize,g=o.height*this.tileSize;let f=this.baseRoomFloorColor;const p="number"==typeof this.floorNumber?this.floorNumber:0;let y=l(o.id)+100*p;switch(o.type){case"classroom":f=c("#a0c8e0",.9+l(y)%11/100);break;case"office":f=c("#f0e8c0",.9+l(y+1)%11/100);break;case"library":f=c("#d8c0a8",.9+l(y+2)%11/100);break;case"gym":f=c("#b0d0b0",.9+l(y+3)%11/100);break;case"lab":f=c("#e0e0ff",.9+l(y+4)%11/100);break;case"storage":f=c("#b0a090",.9+l(y+5)%11/100);break;case"utility":f=c("#b0b0b0",.9+l(y+6)%11/100)}for(let i=Math.max(o.row,h);i<Math.min(o.row+o.height,d);i++)for(let n=Math.max(o.col,u);n<Math.min(o.col+o.width,m);n++){const r=t[i]?.[n];if(2===r){const t=Math.floor(n*this.tileSize+a),r=Math.floor(i*this.tileSize+s),h=.98+(l(5e3*i+3*n+y)%11-5)/100;e.fillStyle=c(f,h),e.fillRect(t,r,this.tileSize,this.tileSize),"lab"===o.type&&(e.strokeStyle="rgba(0,0,0,0.08)",e.lineWidth=1,e.strokeRect(t+.5,r+.5,this.tileSize-1,this.tileSize-1))}}this.drawRoomDecorations(e,o,i,n,r,g)}e.restore()}drawLiftDetails(e,t,i,o){if(!t)return;const a=Math.floor(t.tileX*this.tileSize+i),s=Math.floor(t.tileY*this.tileSize+o);if(a+this.tileSize<0||a>e.canvas.width||s+this.tileSize<0||s>e.canvas.height)return;e.save(),e.shadowColor="transparent",e.strokeStyle="#d0d0d0",e.lineWidth=1,e.strokeRect(a+.5,s+.5,this.tileSize-1,this.tileSize-1),e.strokeStyle="#404040",e.strokeRect(a+1.5,s+1.5,this.tileSize-3,this.tileSize-3);const n=.15*this.tileSize,r=a+.8*this.tileSize,l=s+.5*this.tileSize;e.fillStyle="#444",e.beginPath(),e.arc(r,l,n,0,2*Math.PI),e.fill(),e.fillStyle="#ff4444",e.beginPath(),e.arc(r,l,.8*n,0,2*Math.PI),e.fill(),e.fillStyle="rgba(255, 255, 255, 0.5)",e.beginPath(),e.arc(r-.2*n,l-.2*n,.3*n,0,2*Math.PI),e.fill(),e.restore()}drawRoomDecorations(e,t,i,o,a,s){const n=this.tileSize,r=.2*n,l=.1*n;e.lineWidth=1,e.strokeStyle="#444";const c=(t,a,s,n,r,l=!0)=>{e.fillStyle=r;const c=Math.floor(i+t),h=Math.floor(o+a),d=Math.floor(s),u=Math.floor(n);e.fillRect(c,h,d,u),l&&e.strokeRect(c+.5,h+.5,d-1,u-1)},h=(t,a,s,n,r=!0)=>{e.fillStyle=n;const l=Math.floor(i+t),c=Math.floor(o+a);e.beginPath(),e.arc(l,c,Math.floor(s),0,2*Math.PI),e.fill(),r&&e.stroke()};switch(t.type){case"classroom":e.strokeStyle="#5d4037";const t=.6*n,d=.4*n,u=.25*n,m=1*n,g=.9*n;c(.25*a,r,.5*a,.2*n,"#333",!0),c(.25*a+2,r+2,.5*a-4,.2*n-4,"#4CAF50",!1);for(let e=0;;e++){const i=r+.5*n+e*g;if(i+d+u>s-r)break;for(let e=0;;e++){const o=r+e*m;if(o+t>a-r)break;c(o,i,t,d,"#8B4513"),c(o+.1*t,i+d+l,.8*t,u,"#6a4a3a")}}break;case"office":e.strokeStyle="#5d4037";const f=Math.min(.6*a,2.5*n),p=Math.min(.4*s,1.2*n);c(r,r,f,p,"#a0522d"),c(r+f+l,r+.1*p,.6*n,.6*n,"#444");const y=.8*n;c(a-r-y,r,y,s-2*r,"#6B4F41"),c(r+l,r+l,.5*n,.4*n,"#333"),c(r+l+.1*n,r+l+.4*n+2,.3*n,.1*n,"#555");break;case"library":e.strokeStyle="#402a10";const w=.6*n,M=1.5*n;for(let t=r;t<a-r-w;t+=M){c(t,r,w,s-2*r,"#654321"),e.strokeStyle="rgba(0,0,0,0.3)";for(let a=r+.5*n;a<s-r;a+=.7*n)e.beginPath(),e.moveTo(i+t,o+a),e.lineTo(i+t+w,o+a),e.stroke();e.strokeStyle="#402a10"}if(a>1.5*M){const e=w+r+(a-2*w-2*r-1.5*n)/2;e>w+r&&(c(e,.3*s,1.5*n,.4*s,"#966F33"),c(e+.2*n,.3*s-.3*n,.5*n,.25*n,"#6a4a3a"),c(e+.2*n,.3*s+.4*s+l,.5*n,.25*n,"#6a4a3a"))}break;case"gym":e.strokeStyle="#555",c(r,r,.4*a,.3*s,"#778899"),c(a-r-.3*a,s-r-.4*s,.3*a,.4*s,"#778899"),c(.6*a,r,.8*n,1.8*n,"#333"),c(.6*a+.1*n,r+.1*n,.6*n,1.6*n,"#555",!1),c(r,.5*s,1.5*n,.4*n,"#8B4513"),c(a-r-.5*n,r,.5*n,1.5*n,"#444"),h(a-r-.25*n,r+.3*n,.15*n,"#666"),h(a-r-.25*n,r+.7*n,.15*n,"#666"),h(a-r-.25*n,r+1.1*n,.15*n,"#666");break;case"lab":e.strokeStyle="#668";const S=.8*n;c(r,r,a-2*r,S,"#d0d0d8"),c(r,s-r-S,a-2*r,S,"#d0d0d8"),c(r+.2*n,r+.1*n,.5*n,.5*n,"#4a90e2"),c(r+1*n,r+.1*n,.3*n,.6*n,"#f5a623"),h(a-2*r-.4*n,r+.5*S,.2*n,"#e04040",!0),c(.4*a,r+S+l,n,s-2*r-2*S-2*l,"#a0a0b0");break;case"storage":e.strokeStyle="#4d4030";const v=a-2*r,b=.5*n;c(r,r,v,b,"#9e9e9e"),c(r,s-r-b,v,b,"#9e9e9e");const C=.6*n;c(r+.2*n,r+b+l,C,C,"#bf8f6f"),c(r+1*n,r+b+l,C,C,"#bf8f6f"),c(a-r-1.5*C,r+b+3*l,1.2*C,.8*C,"#bf8f6f"),c(a-r-n,s-r-n,.8*n,.8*n,"#6a4a3a");break;default:e.strokeStyle="#5d4037",c(.1*a,.15*s,.3*a,.25*s,"#A0522D"),c(.6*a,.5*s,.3*a,.4*s,"#A0522D"),c(a-r-.5*n,r,.5*n,s-2*r,"#777"),e.strokeStyle="#555",e.lineWidth=3,e.beginPath(),e.moveTo(i+r,o+.8*s),e.lineTo(i+a-r,o+.8*s),e.stroke(),e.beginPath(),e.moveTo(i+.7*a,o+r),e.lineTo(i+.7*a,o+s-r),e.stroke(),e.lineWidth=1}}drawBooks(e,t,i,o,a){if(!t||0===t.length)return;const s=.6*this.tileSize;for(const n of t)if(!n.isCollected&&!n.collected){const t=n.size||s,r=Math.floor(n.x+i-t/2),l=Math.floor(n.y+o-t/2);r+t>0&&r<e.canvas.width&&l+t>0&&l<e.canvas.height&&("function"==typeof n.draw?n.draw(e,i,o,a):a?e.drawImage(a,r,l,t,t):(e.fillStyle="#8d6e63",e.fillRect(r,l,t,t),e.strokeStyle="#5d4037",e.lineWidth=1,e.strokeRect(r+.5,l+.5,t-1,t-1)))}}}let d=null;const u={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,roomTypeWeights:{classroom:50,office:25,library:15,gym:0,utility:10}};function m(e,t,i,o,a){const{centerTileX:s,centerTileY:n}=t,{centerTileX:r,centerTileY:l}=i;Math.random()<.5?(g(e,n,s,r,o,a),f(e,r,n,l,o,a)):(f(e,s,n,l,o,a),g(e,l,s,r,o,a))}function g(e,t,i,o,a,s){if(t<0||t>=s)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(a-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[t]?.[i]&&(e[t][i]=1)}function f(e,t,i,o,a,s){if(t<0||t>=a)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(s-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[i]?.[t]&&(e[i][t]=1)}function p(e,t,i,o,a){const s=(e,t,i,o,a)=>{if(e<0||e>=o||t<0||t>=a)return!1;const s=i[t]?.[e];return 1===s||2===s||3===s};let n=0;const r=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];let l=[!1,!1,!1,!1];for(let c=0;c<r.length;c++)s(e+r[c].dx,t+r[c].dy,i,o,a)&&(n++,l[c]=!0);let c=!1;if(2===n){const[e,t,i,o]=l;(e&&t&&!i&&!o||i&&o&&!e&&!t)&&(c=!0)}return{openSides:n,isChokepoint:c}}function y(e,t,i,o,a){console.log(`  [MapGen Connect] Trying to connect wall at tile(${t}, ${i}) to walkable area...`);const s=[[0,-1],[0,1],[-1,0],[1,0]];let n=!1,r=null;for(const[o,a]of s){const s=t+o,l=i+a,c=e[l]?.[s];if(1===c||2===c||3===c){n=!0,r={x:s,y:l};break}}if(n)return console.log(`  [MapGen Connect] Target(${t}, ${i}) is adjacent to walkable at (${r.x}, ${r.y}). Setting target to Corridor.`),e[i][t]=1,!0;console.log("  [MapGen Connect] Target not adjacent. Searching nearest walkable (Corridor/Floor) via BFS...");const l=[[t,i,0]],c=new Set([`${t},${i}`]),h=[0,1,2,3],d=[1,2];let u=null,m=1/0;for(;l.length>0;){const[t,i,n]=l.shift();if(!(n>=m))for(const[r,g]of s){const s=t+r,f=i+g,p=`${s},${f}`;if(s>=0&&s<o&&f>=0&&f<a&&!c.has(p)){const t=e[f]?.[s];c.add(p),d.includes(t)?n+1<m&&(m=n+1,u={x:s,y:f,dist:m},console.log(`    [BFS] Found potential target at (${s}, ${f}), dist ${m}`)):h.includes(t)&&n+1<m&&l.push([s,f,n+1])}}}return u?(console.log(`  [MapGen Connect] Found closest walkable at tile(${u.x}, ${u.y}) distance ${u.dist}. Carving path...`),g(e,i,t,u.x,o,a),f(e,u.x,i,u.y,o,a),console.log("  [MapGen Connect] Carved path attempt finished."),1===e[i][t]||2===e[i][t]?(console.log(`    [Verify] Target tile (${t},${i}) is now walkable (Type: ${e[i][t]})`),!0):(console.warn(`  [MapGen Connect] Carving done, but target tile(${t}, ${i}) is still WALL (Value: ${e[i][t]}). Setting manually.`),e[i][t]=1,!0)):(console.error(`  [MapGen Connect] FAILED to find ANY nearby walkable (Corridor/Floor) via BFS from wall at tile(${t}, ${i}). Cannot connect.`),!1)}function w(e,t,i,o){if(!t)return!1;const{tileX:a,tileY:s}=t;if(s<0||s>=o||a<0||a>=i||3!==e[s]?.[a])return console.error(`[MapValidation Reachability] Invalid lift position provided: (${a}, ${s})`),!1;const{reachable:n}=function(e,t,i,o,a,s){const n=[[t,i]],r=new Set([`${t},${i}`]),l=[[0,-1],[0,1],[-1,0],[1,0]];let c=!1;for(e[i];n.length>0;){const[t,i]=n.shift();for(const[h,d]of l){const l=t+h,u=i+d,m=`${l},${u}`;if(l>=0&&l<o&&u>=0&&u<a&&!r.has(m)){const t=e[u]?.[l];r.add(m),s.includes(t)&&(n.push([l,u]),1!==t&&2!==t||(c=!0))}}}return{reachable:c}}(e,a,s,i,o,[1,2,3]);return n||console.error(`[MapValidation Reachability] FAILED. Lift at tile(${a}, ${s}) is isolated from corridors/rooms.`),n}class M{constructor(e,t,i,o,a){this.tileSize=32,this.cols=40,this.rows=30,this.width=this.cols*this.tileSize,this.height=this.rows*this.tileSize,this.offsetX=0,this.offsetY=0,this.floorNumber=i,this.minFloor=o,this.maxFloor=a,this.map=null,this.rooms=[],this.books=[],this.liftPosition=null,this.renderer=new h(this.tileSize);const s={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,booksPerMap:5,roomTypeWeights:{classroom:50,office:25,library:15,lab:10,storage:5,utility:10}};try{const e={cols:this.cols,rows:this.rows,floorNumber:this.floorNumber,minFloor:this.minFloor,maxFloor:this.maxFloor,tileSize:this.tileSize,generationParams:s},{map:t,rooms:i,liftPosition:o}=function(e){const{cols:t,rows:i,floorNumber:o,minFloor:a,tileSize:s,generationParams:n}=e,l={...u,...n};l.roomTypeWeights.gym=o===a?60:0,o===a&&(d=null,console.log(`[MapGen Floor ${o}] Reset consistent lift coords for the first floor.`)),console.log(`[MapGen Floor ${o}] Starting map generation (${t}x${i})...`);const c=Array.from({length:i},(()=>Array(t).fill(0))),h=[];let g=null;!function(e,t,i,o,a){const{minRoomSize:s,maxRoomSize:n,numRooms:l,maxRoomAttempts:c,roomTypeWeights:h}=a;let d=0;const u=[];let m=0;for(const e in h){const t=h[e];if(t>0){m+=t;for(let i=0;i<t;i++)u.push(e)}}for(0===u.length&&(u.push("utility"),console.warn("[MapGen Rooms] No room type weights provided or all are zero. Defaulting to 'utility'."));t.length<l&&d<c;){d++;const a=r(s,n),l=r(s,n),c=r(1,i-a-1),h=r(1,o-l-1),m={col:c,row:h,width:a,height:l,type:u[r(0,u.length-1)],id:`room_${t.length+1}`,centerTileX:Math.floor(c+a/2),centerTileY:Math.floor(h+l/2),connected:!1};let g=!1;const f=2;for(const e of t)if(m.col<e.col+e.width+f&&m.col+m.width+f>e.col&&m.row<e.row+e.height+f&&m.row+m.height+f>e.row){g=!0;break}if(!g){t.push(m);for(let t=m.row;t<m.row+m.height;t++)for(let a=m.col;a<m.col+m.width;a++)t>=0&&t<o&&a>=0&&a<i&&(e[t][a]=2)}}t.length<l?console.warn(`[MapGen Rooms] Placed only ${t.length}/${l} rooms after ${d} attempts.`):console.log(`[MapGen Rooms] Placed ${t.length} rooms after ${d} attempts.`)}(c,h,t,i,l),h.length<2&&o!==a?console.warn(`[MapGen Floor ${o}] Placed only ${h.length} rooms. Expect limited connectivity.`):h.length>=2&&function(e,t,i,o){if(t.length<2)return;console.log(`[MapGen Connect] Connecting ${t.length} rooms (improved)...`);const a=new Set([t[0].id]);let s=t.slice(1);for(;s.length>0;){let n=1/0,r=null,l=null,c=-1;for(let e=0;e<s.length;e++){const i=s[e];for(const o of t)if(a.has(o.id)){const t=i.centerTileX-o.centerTileX,a=i.centerTileY-o.centerTileY,s=t*t+a*a;s<n&&(n=s,r=i,l=o.id,c=e)}}if(!r||null===l){console.error("[MapGen Connect] Could not find next pair of rooms to connect. Breaking loop. Remaining unconnected:",s.map((e=>e.id)));break}{const n=t.find((e=>e.id===l));if(!n){console.error(`[MapGen Connect] Error: Could not find connected room with ID ${l}. Skipping connection.`),s.splice(c,1);continue}m(e,n,r,i,o),a.add(r.id),s.splice(c,1)}}console.log(`[MapGen Connect] Finished connecting rooms. Connected count: ${a.size}`)}(c,h,t,i);try{const e=function(e,t,i,o,a,s,n,r){let l=n,c=null;if(o!==a||l){if(!l&&o>a)throw new Error(`[MapGen Lift] Missing consistent coordinates for floor ${o}.`)}else console.log(`[MapGen Floor ${o}] Finding initial lift placement location...`),l=function(e,t,i,o){const a=Math.floor(t/2),s=Math.floor(i/2);let n=null;if(console.log("  [MapGen FindLift V3] Searching for optimal lift spot INSIDE a room..."),!o||0===o.length)return console.warn("  [MapGen FindLift V3] No rooms available to place a lift in. Fallback will be used by caller."),null;for(const r of o){const o=r.col+1,l=r.col+r.width-2,c=r.row+1,h=r.row+r.height-2;if(!(o>l||c>h))for(let d=c;d<=h;d++)for(let c=o;c<=l;c++){let o=0;o-=((c-a)*(c-a)+(d-s)*(d-s))/30;const l=p(c,d,e,t,i);if(l.openSides<1)continue;l.isChokepoint&&(o-=700),o+=120*l.openSides;let h=0,u=0;const m=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];for(const o of m){const a=c+o.dx,s=d+o.dy;if(s>=0&&s<i&&a>=0&&a<t){const o=e[s]?.[a];if(1===o||2===o){u++;const o=p(a,s,e,t,i);1===o.openSides&&(h=Math.max(h,3e4)),o.isChokepoint&&(h=Math.max(h,500))}}}0===u&&l.openSides<2||(o-=h,(null===n||o>n.score)&&(n={tileX:c,tileY:d,score:o,debug_room:r.id}))}}return n?(console.log(`  [MapGen FindLift V3] Selected best spot IN ROOM (${n.debug_room}) at tile(${n.tileX}, ${n.tileY}). Score: ${n.score.toFixed(0)}.`),{tileX:n.tileX,tileY:n.tileY}):(console.warn("[MapGen FindLift V3] No suitable IN-ROOM location found with internal tiles. Fallback will be used by caller."),null)}(e,t,i,r),l||(console.warn(`[MapGen Floor ${o}] No ideal IN-ROOM lift location found. Forcing placement near center.`),l={tileX:Math.floor(t/2),tileY:Math.floor(i/2)}),console.log(`[MapGen Floor ${o}] Established consistent lift coords at tile(${l.tileX}, ${l.tileY})`),c=l;const{tileX:h,tileY:d}=l;if(d<0||d>=i||h<0||h>=t){const e=Math.max(1,Math.min(t-2,h)),a=Math.max(1,Math.min(i-2,d));throw console.error(`[MapGen Lift] Coords (${h}, ${d}) are outside map bounds on floor ${o}. Adjusted to (${e},${a})`),l={tileX:e,tileY:a},new Error(`[MapGen Lift] Coords (${l.tileX}, ${l.tileY}) are outside map bounds on floor ${o}.`)}0===e[d][h]?(console.warn(`[MapGen Floor ${o}] Lift location tile(${h}, ${d}) is a wall (likely fallback). Forcing connection...`),y(e,h,d,t,i)?(console.log("  [MapGen Lift Connect] Connection attempt finished for wall at lift location."),0===e[d][h]&&(console.warn(`  [MapGen Lift Connect] Force connection completed, but target tile (${h},${d}) remained WALL. Setting to CORRIDOR.`),e[d][h]=1)):console.error(`[MapGen Lift Connect] FAILED to connect wall at lift location tile(${h}, ${d}). Lift might be isolated.`)):console.log(`  [MapGen Lift] Lift location tile(${h}, ${d}) is already walkable (Type: ${e[d][h]}).`),e[d][h]=3;const u={x:(h+.5)*s,y:(d+.5)*s,tileX:h,tileY:d};return console.log(`[MapGen Floor ${o}] Placed/Confirmed lift at tile(${h}, ${d}). World: (${u.x.toFixed(1)}, ${u.y.toFixed(1)})`),{position:u,coords:c||l}}(c,t,i,o,a,s,d,h);g=e.position,e.coords&&(d=e.coords)}catch(e){throw console.error(`[MapGen Floor ${o}] CRITICAL: Lift placement failed:`,e),new Error(`Lift placement failed on floor ${o}: ${e.message}`)}if(function(e,t,i){console.log("  [MapGen] Ensuring map borders are walls.");for(let o=0;o<t;o++)void 0!==e[0]?.[o]&&(e[0][o]=0),void 0!==e[i-1]?.[o]&&(e[i-1][o]=0);for(let o=0;o<i;o++)void 0!==e[o]?.[0]&&(e[o][0]=0),void 0!==e[o]?.[t-1]&&(e[o][t-1]=0)}(c,t,i),g&&!w(c,g,t,i)){if(console.warn(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) initially unreachable. Attempting final force connection.`),!y(c,g.tileX,g.tileY,t,i)||!w(c,g,t,i)){const e=`CRITICAL: Placed lift at tile(${g.tileX}, ${g.tileY}) is UNREACHABLE even after force connect! Generation failed.`;throw console.error(`[MapGen Floor ${o}] ${e}`),new Error(`Lift is unreachable on floor ${o}. Cannot proceed.`)}console.log(`[MapValidation Floor ${o}] Lift connection successful after second attempt.`)}else{if(!g)throw new Error(`Map generated without a valid lift position on floor ${o}.`);console.log(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) is reachable.`)}return console.log(`[MapGen Floor ${o}] Map generation completed successfully.`),{map:c,rooms:h,liftPosition:g}}(e);this.map=t,this.rooms=i,this.liftPosition=o,this.renderer.resetColorCache(),this.placeBooksReliably(s.booksPerMap),3===this.floorNumber&&console.log(`[ProcMap F${this.floorNumber}] Init complete. Lift at tile (${o?.tileX}, ${o?.tileY}).`)}catch(e){throw console.error(`[ProcMap F${this.floorNumber}] CRITICAL ERROR during map generation or setup:`,e),e}}placeBooksReliably(e){this.books=[];const t=[],i=new Set;for(let e=0;e<this.rows;e++)for(let i=0;i<this.cols;i++){const o=this.map[e]?.[i],a=this.liftPosition&&e===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||t.push({r:e,c:i})}let o=0;for(;o<e&&t.length>0;){const e=Math.floor(Math.random()*t.length),{r:a,c:s}=t.splice(e,1)[0],r=`${s},${a}`;if((1===this.map[a]?.[s]||2===this.map[a]?.[s])&&!i.has(r)){const e=(s+.5)*this.tileSize,t=(a+.5)*this.tileSize,l=`book_f${this.floorNumber}_${o+1}`;this.books.push(new n(e,t,l,this.tileSize)),i.add(r),o++}}}isWalkable(e,t){if(!this.map)return!1;const i=Math.floor(e/this.tileSize),o=Math.floor(t/this.tileSize);if(i<0||i>=this.cols||o<0||o>=this.rows)return!1;const a=this.map[o]?.[i];return 1===a||2===a||3===a}findRandomInitialSpawnPosition(){if(!this.map)return;const e=[];for(let t=1;t<this.rows-1;t++)for(let i=1;i<this.cols-1;i++){const o=this.map[t]?.[i],a=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||this.isTileOpenEnough(i,t,3,!0)&&e.push({r:t,c:i})}if(0===e.length)for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++){const o=this.map[t]?.[i],a=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||this.isTileOpenEnough(i,t,2,!0)&&e.push({r:t,c:i})}if(0===e.length)for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++){const o=this.map[t]?.[i],a=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||e.push({r:t,c:i})}if(0===e.length)return void console.error(`[ProcMap F${this.floorNumber} RandomSpawn] CRITICAL: No suitable spawn tiles found!`);const{r:t,c:i}=e[Math.floor(Math.random()*e.length)];return{x:(i+.5)*this.tileSize,y:(t+.5)*this.tileSize}}isTileOpenEnough(e,t,i=2,o=!1){if(this.floorNumber,!this.map)return!1;let a=0;const s=[[0,-1,"N"],[0,1,"S"],[-1,0,"W"],[1,0,"E"]],n=[!1,!1,!1,!1];for(let i=0;i<s.length;i++){const[o,r,l]=s[i],c=e+o,h=t+r;let d=0;c>=0&&c<this.cols&&h>=0&&h<this.rows&&(d=this.map[h]?.[c],1!==d&&2!==d&&3!==d||(a++,n[i]=!0))}if(a<i)return!1;if(o&&2===a){if(n[0]&&n[1]&&!n[2]&&!n[3])return!1;if(n[2]&&n[3]&&!n[0]&&!n[1])return!1}return!0}findNearestWalkableTile(e,t,i=8,o=!1,a=!1){if(this.floorNumber,!this.map)return null;const s=Math.floor(e/this.tileSize),n=Math.floor(t/this.tileSize),r=[1,2];if(s>=0&&s<this.cols&&n>=0&&n<this.rows){const e=this.map[n][s];if(r.includes(e)&&(!o||3!==e)){const e=2;if(this.isTileOpenEnough(s,n,e,a))return{x:(s+.5)*this.tileSize,y:(n+.5)*this.tileSize}}}for(let e=1;e<=i;e++){const t=2;for(let i=-e;i<=e;i++)for(let l=-e;l<=e;l++){if(Math.abs(l)<e&&Math.abs(i)<e)continue;const c=s+l,h=n+i;if(c<0||c>=this.cols||h<0||h>=this.rows)continue;const d=this.map[h]?.[c];if(r.includes(d)&&(!o||3!==d)&&this.isTileOpenEnough(c,h,t,a))return{x:(c+.5)*this.tileSize,y:(h+.5)*this.tileSize}}}const l=[[s,n]],c=new Set([`${s},${n}`]),h=[[0,-1],[0,1],[-1,0],[1,0]],d=[1,2,3];for(;l.length>0;){const[e,t]=l.shift();for(const[i,s]of h){const n=e+i,h=t+s,u=`${n},${h}`;if(n>=0&&n<this.cols&&h>=0&&h<this.rows&&!c.has(u)){const e=this.map[h]?.[n];if(c.add(u),r.includes(e)&&(!o||3!==e)&&this.isTileOpenEnough(n,h,2,a))return{x:(n+.5)*this.tileSize,y:(h+.5)*this.tileSize};d.includes(e)&&l.push([n,h])}}}return null}getSpawnPointInRoomOfLift(e,t,i=2){this.floorNumber;let o=null,a=null,s=null;const n=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];for(const i of n){const n=e+i.dx,r=t+i.dy;if(n>=0&&n<this.cols&&r>=0&&r<this.rows&&2===this.map[r]?.[n])for(const e of this.rooms)if(n>=e.x&&n<e.x+e.width&&r>=e.y&&r<e.y+e.height){o=e,a={x:n,y:r},s={dx:i.dx,dy:i.dy};break}if(o)break}if(!o)for(const i of n){const r=e+i.dx,l=t+i.dy;if(!(r<0||r>=this.cols||l<0||l>=this.rows||1!==this.map[l]?.[r])){for(const e of n){if(e.dx===-i.dx&&e.dy===-i.dy)continue;const t=r+e.dx,n=l+e.dy;if(t>=0&&t<this.cols&&n>=0&&n<this.rows&&2===this.map[n]?.[t])for(const i of this.rooms)if(t>=i.x&&t<i.x+i.width&&n>=i.y&&n<i.y+i.height){o=i,a={x:t,y:n},s={dx:e.dx,dy:e.dy};break}if(o)break}if(o)break}}if(!o||!a||!s)return null;const r=s.dx,l=s.dy;for(let e=i-1;e>=0;e--){const t=a.x+r*e,i=a.y+l*e;if(t>=o.x&&t<o.x+o.width&&i>=o.y&&i<o.y+o.height&&2===this.map[i]?.[t]){const e=t+r,a=i+l,s=e>=o.x&&e<o.x+o.width&&a>=o.y&&a<o.y+o.height&&2===this.map[a]?.[e];if(this.isTileOpenEnough(t,i,2,!0)&&s)return{x:(t+.5)*this.tileSize,y:(i+.5)*this.tileSize}}}return this.isTileOpenEnough(a.x,a.y,2,!0)?{x:(a.x+.5)*this.tileSize,y:(a.y+.5)*this.tileSize}:null}findNearbyUnansweredBook(e,t,i=.8*this.tileSize){if(!this.books||0===this.books.length)return null;let o=null,a=i*i;for(const i of this.books)if(!i.isCollected){const s=i.x-e,n=i.y-t,r=s*s+n*n;r<a&&(a=r,o=i)}return o}markBookAsCollected(e){if(!e||!this.books)return!1;const t=this.books.find((t=>t.id===e.id));return!(!t||t.isCollected||(t.isCollected=!0,0))}findNearbyLift(e,t,i=.7*this.tileSize){if(!this.liftPosition)return null;const o=e-this.liftPosition.x,a=t-this.liftPosition.y;return o*o+a*a<i*i?this.liftPosition:null}getLiftPosition(){return this.liftPosition}draw(e,t=null){if(!this.map||!this.renderer)return;const i={map:this.map,rooms:this.rooms,books:this.books,liftPosition:this.liftPosition,offsetX:this.offsetX,offsetY:this.offsetY,cols:this.cols,rows:this.rows,tileSize:this.tileSize};this.renderer.draw(e,i,t)}logMapGrid(){if(!this.map)return void console.log(`[ProcMap F${this.floorNumber}] Map grid not available.`);console.log(`--- Map Grid Floor ${this.floorNumber} (${this.cols}x${this.rows}) ---`);let e="   ";for(let t=0;t<this.cols;t++)e+=t%10==0?Math.floor(t/10):" ";console.log(e),e="   ";for(let t=0;t<this.cols;t++)e+=t%10;console.log(e);for(let e=0;e<this.rows;e++){const t=e.toString().padStart(2," "),i=this.map[e].map((e=>{switch(e){case 0:return"#";case 1:return".";case 2:return" ";case 3:return"L";default:return"?"}})).join("");console.log(`${t} ${i}`)}this.liftPosition?(console.log(`Lift actual tile type in map[${this.liftPosition.tileY}][${this.liftPosition.tileX}]: ${this.map[this.liftPosition.tileY]?.[this.liftPosition.tileX]}`),console.log(`Lift reported at tile: (${this.liftPosition.tileX}, ${this.liftPosition.tileY})`)):console.log("Lift position not set."),console.log(`--- End Map Grid Floor ${this.floorNumber} ---`)}}class S{constructor(e=1,t=3){e>=t?(console.warn(`Level constructor: minFloor (${e}) must be less than maxFloor (${t}). Using defaults 1 and 3.`),this.minFloor=1,this.maxFloor=3):(this.minFloor=e,this.maxFloor=t),this.currentFloor=this.minFloor,this.currentMap=null,this.tileSize=32}async loadFloor(e,t,i){if(e<this.minFloor||e>this.maxFloor){const t=`Attempted to load invalid floor: ${e}. Allowed range: [${this.minFloor}-${this.maxFloor}]`;throw console.error(`[Level] ${t}`),new Error(t)}console.log(`[Level] Loading floor ${e}...`),this.currentFloor=e;try{if(this.currentMap=new M(t,i,this.currentFloor,this.minFloor,this.maxFloor),!(this.currentMap.tileSize&&this.currentMap.map&&this.currentMap.books&&this.currentMap.getLiftPosition()))throw new Error("[Level] ProceduralMap instance is missing essential properties after creation (tileSize, map, books, or liftPosition).");this.tileSize=this.currentMap.tileSize;const o=this.currentMap.getLiftPosition();console.log(`  [Level] Map generated for floor ${this.currentFloor}. TileSize: ${this.tileSize}. Lift at tile(${o.tileX}, ${o.tileY}).`),console.log(`[Level] Floor ${e} loaded successfully. Map size: ${this.currentMap.cols}x${this.currentMap.rows}. ${this.currentMap.books.length} books placed.`)}catch(t){throw console.error(`[Level] CRITICAL FAILURE loading floor ${e}: Failed to create or validate ProceduralMap:`,t),this.currentMap=null,new Error(`Map generation/validation failed for floor ${e}. ${t.message||t}`)}return Promise.resolve()}getCurrentBooks(){return this.currentMap?this.currentMap.books:[]}}class v{constructor(e){this.game=e,this.canvas=null,this.ctx=null}initializeCanvas(){if(this.canvas=document.getElementById("game-canvas"),!this.canvas)throw new Error("[Renderer] Canvas 'game-canvas' not found!");if(this.ctx=this.canvas.getContext("2d"),!this.ctx)throw new Error("[Renderer] Failed to get 2D context.");return this.ctx.imageSmoothingEnabled=!1,this.resizeCanvas(),console.log("[Renderer] Canvas initialized."),{canvas:this.canvas,ctx:this.ctx}}resizeCanvas(){this.canvas&&(this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.game.character&&this.game.level?.currentMap&&this.centerCameraOnCharacter(),console.log(`[Renderer] Canvas resized to ${this.canvas.width}x${this.canvas.height}`))}centerCameraOnCharacter(){const{character:e,level:t,canvas:i}=this.game;e&&t?.currentMap&&i&&(t.currentMap.offsetX=Math.floor(i.width/2-e.x),t.currentMap.offsetY=Math.floor(i.height/2-e.y))}drawFrame(){if(!this.ctx||!this.canvas)return;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const e=this.game.level?.currentMap,t=this.game.character;e&&e.draw(this.ctx,this.game.bookImage),t&&e&&t.draw(e.offsetX,e.offsetY)}drawWinScreen(){this.ctx&&this.canvas&&(this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle="lime",this.ctx.font='clamp(32px, 8vw, 48px) "Press Start 2P", cursive, Arial, sans-serif',this.ctx.fillText("ZWYCIĘSTWO!",this.canvas.width/2,this.canvas.height/2-80),this.ctx.fillStyle="white",this.ctx.font="clamp(24px, 5vw, 32px) Arial, sans-serif",this.ctx.fillText(`Zebrano wszystkie ${this.game.targetBooksToWin} książki!`,this.canvas.width/2,this.canvas.height/2),this.ctx.font="clamp(18px, 4vw, 24px) Arial, sans-serif",this.ctx.fillText("Uniwersytet uratowany!",this.canvas.width/2,this.canvas.height/2+60),this.ctx.font="clamp(14px, 3vw, 18px) Arial, sans-serif",this.ctx.fillStyle="#ccc",this.ctx.fillText("(Odśwież stronę, aby zagrać ponownie)",this.canvas.width/2,this.canvas.height-50))}}class b{constructor(e){this.game=e,this.handleAnswer=this.handleAnswer.bind(this),this.handleFloorSelection=this.handleFloorSelection.bind(this)}update(e){this.game.gameState===i.PLAYING&&this.updatePlayingState(e)}updatePlayingState(e){const t=this.game.character;if(!this.game.level?.currentMap||!t||!this.game.inputManager)return;const{moved:o}=this.handleMovement();t&&"function"==typeof t.updateAnimation&&t.updateAnimation(e),o||this.game.gameState!==i.PLAYING||this.handleInteractions()}handleMovement(){const e=this.game.character,t=this.game.level.currentMap,i=this.game.inputManager;if(!e||!t||!i)return{moved:!1};const o=i.getInputDirection();let a=o.x*e.speed,n=o.y*e.speed,r=0,l=0,c=!1;if(0!==a||0!==n){const t=0!==a&&!this.checkCollision(e.x+a,e.y),i=0!==n&&!this.checkCollision(e.x,e.y+n);t&&(r=a),i&&(l=n),0!==a&&0!==n&&this.checkCollision(e.x+a,e.y+n)&&(t&&!i?l=0:i&&!t?r=0:t||i||(r=0,l=0)),0===r&&0===l||(e.x+=r,e.y+=l,c=!0,Math.abs(r)>=Math.abs(l)?0!==r&&(e.currentDirection=r>0?s.Direction.RIGHT:s.Direction.LEFT):0!==l&&(e.currentDirection=l>0?s.Direction.DOWN:s.Direction.UP))}return e.isMoving=c,{moved:c}}checkCollision(e,t){const i=this.game.level?.currentMap,o=this.game.character;if(!i||!o)return!0;const a=o.getCollisionBox(e,t),s=[{x:a.left,y:a.top},{x:a.right,y:a.top},{x:a.left,y:a.bottom},{x:a.right,y:a.bottom},{x:e,y:a.top},{x:e,y:a.bottom},{x:a.left,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio},{x:a.right,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio}];for(const e of s)if(!i.isWalkable(e.x,e.y))return!0;return!1}handleInteractions(){const e=this.game.level?.currentMap,t=this.game.character;if(!e||!t||this.game.gameState!==i.PLAYING)return;const o=e.findNearbyUnansweredBook(t.x,t.y);o?this.initiateQuestion(o):this.game.liftCooldownActive||e.findNearbyLift(t.x,t.y)&&this.initiateFloorSelection()}initiateQuestion(e){if(this.game.gameState!==i.PLAYING)return;if(this.game.setGameState(i.ASKING_QUESTION),this.game.character&&(this.game.character.isMoving=!1),this.game.currentBookTarget=e,0===this.game.availableQuestions.length&&(this.game.availableQuestions=[...o],0===this.game.availableQuestions.length))return a.flashMessage("Błąd: Brak dostępnych pytań!","error"),this.game.setGameState(i.PLAYING),void(this.game.currentBookTarget=null);const t=Math.floor(Math.random()*this.game.availableQuestions.length);this.game.currentQuestionData=this.game.availableQuestions.splice(t,1)[0],a.showQuestion(this.game.currentQuestionData)}handleAnswer(e){const{gameState:t,currentQuestionData:o,currentBookTarget:s,level:n}=this.game;if(t!==i.ASKING_QUESTION||!o||!s)return a.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,void(this.game.gameState!==i.GAME_OVER&&this.game.setGameState(i.PLAYING));if(e===o.correctAnswer){a.flashMessage("Prawidłowo!","success",1500);const e=n?.currentMap?.markBookAsCollected(s);if(e){if(this.game.totalBooksCollectedGlobally++,a.updateScore(this.game.totalBooksCollectedGlobally,this.game.targetBooksToWin),this.game.totalBooksCollectedGlobally>=this.game.targetBooksToWin)return a.hideQuestion(),void this.game._setGameOver(!0)}else a.flashMessage("Błąd zbierania książki!","error")}else a.flashMessage("Nieprawidłowa odpowiedź!","error"),this.game.availableQuestions.push(o);a.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,this.game.gameState!==i.GAME_OVER&&this.game.setGameState(i.PLAYING)}initiateFloorSelection(){this.game.gameState!==i.PLAYING||this.game.liftCooldownActive||(this.game.setGameState(i.SELECTING_FLOOR),this.game.character&&(this.game.character.isMoving=!1),a.showFloorSelectionUI(this.game.level.minFloor,this.game.level.maxFloor,this.game.level.currentFloor))}handleFloorSelection(e){this.game.gameState===i.SELECTING_FLOOR?(a.hideFloorSelectionUI(),e===this.game.level.currentFloor||e<this.game.level.minFloor||e>this.game.level.maxFloor?this.game.setGameState(i.PLAYING):this.handleLiftTransition(e).catch((e=>{this.game._handleFatalError(`Błąd przejścia na piętro: ${e.message}`)}))):a.hideFloorSelectionUI()}async handleLiftTransition(e){const t=this.game,o=3===t.level?.currentFloor||3===e;if(o&&console.log(`[GameplayManager F${e} handleLiftTransition] Starting transition. Cooldown: ${t.liftCooldownActive}`),t.gameState===i.SELECTING_FLOOR&&!t.liftCooldownActive){t.setGameState(i.TRANSITIONING),t.character&&(t.character.isMoving=!1),a.hideQuestion(),a.hideFloorSelectionUI(),t.liftCooldownActive=!0,a.flashMessage(`Przejście na piętro ${e}...`,"info",1800);try{await t.level.loadFloor(e,t.canvas.width,t.canvas.height);const i=t.level.currentMap;if(!i)throw new Error(`Map object is null for floor ${e}.`);const a=i.getLiftPosition();if(!a)throw new Error(`No lift position data on loaded floor ${e}!`);o&&console.log(`  [GM F${e} LiftTransition] Lift tile: (${a.tileX},${a.tileY}), World:(${a.x.toFixed(1)},${a.y.toFixed(1)})`);let n=null;if(n=i.getSpawnPointInRoomOfLift(a.tileX,a.tileY,2),o&&console.log(`  [GM F${e} LiftTransition] From getSpawnPointInRoomOfLift:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null),n||(o&&console.warn(`  [GM F${e} LiftTransition] getSpawnPointInRoomOfLift failed. Using findNearestWalkableTile...`),n=i.findNearestWalkableTile(a.x,a.y,5,!0,!0),o&&console.log(`  [GM F${e} LiftTransition] From findNearestWalkableTile:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null)),!n){o&&console.error(`  [GM F${e} LiftTransition] All spawn methods failed. Using random spawn...`);const t=i.findRandomInitialSpawnPosition();if(!t)throw new Error(`EMERGENCY SPAWN FAILED on floor ${e}!`);n=t,o&&console.log(`  [GM F${e} LiftTransition] From emergencySpawn:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null)}t.character.x=n.x,t.character.y=n.y,o&&console.log(`  [GM F${e} LiftTransition] Final landing: (${t.character.x.toFixed(1)}, ${t.character.y.toFixed(1)})`),t.character.currentDirection=s.Direction.DOWN,t.character.isMoving=!1,t.renderer?.centerCameraOnCharacter(),this.ensureCharacterIsOnWalkableTile(!1),t.startLiftCooldownTimer()}catch(o){console.error(`[GM F${e} LiftTransition] Error during transition:`,o),t.liftCooldownActive=!1,t.gameState!==i.GAME_OVER&&t.setGameState(i.PLAYING),t._handleFatalError(`Transition error to floor ${e}: ${o.message||o}`)}}}ensureCharacterIsOnWalkableTile(e=!1){const t=this.game.character,i=this.game.level?.currentMap;if(!t||!i)return;const o=Math.floor(t.x/i.tileSize),a=Math.floor(t.y/i.tileSize),s=o>=0&&o<i.cols&&a>=0&&a<i.rows?i.map[a]?.[o]:0,n=i.isWalkable(t.x,t.y)&&(!(3===s)||e),r=this.checkCollision(t.x,t.y);if(r||!n){const e=3===this.game.level?.currentFloor;e&&console.warn(`[GameplayManager F${this.game.level.currentFloor} AntiStuck] Char at (${t.x.toFixed(1)},${t.y.toFixed(1)}) -> tile (${o},${a}) needs nudge. Colliding:${r}, SafeStand:${n}`);const s=i.findNearestWalkableTile(t.x,t.y,8,!0,!0);if(s)e&&console.log(`  [AntiStuck] Nudging to safe spot: (${s.x.toFixed(1)},${s.y.toFixed(1)})`),t.x=s.x,t.y=s.y,this.game.renderer?.centerCameraOnCharacter();else{e&&console.error("  [AntiStuck] CRITICAL: Could not find any safe spot to nudge. Trying random.");const o=i.findRandomInitialSpawnPosition();o?(e&&console.warn(`  [AntiStuck] Emergency nudge to random: (${o.x.toFixed(1)},${o.y.toFixed(1)})`),t.x=o.x,t.y=o.y,this.game.renderer?.centerCameraOnCharacter()):(e&&console.error("  [AntiStuck] EVEN RANDOM SPAWN FAILED! Game might be broken."),this.game._handleFatalError("Anti-Stuck system failed critically."))}}}}const C={track1:e.p+"assets/audio/back126c4c9e8849503fadb12.mp3",track2:e.p+"assets/audio/back2ddba92be3cd8ac98633a.mp3",track3:e.p+"assets/audio/back381530afe1194de9f2bb1.mp3"},k=["track1","track2","track3"];class z{constructor(){this.musicVolume=.5,this.currentMusicElement=null,this.currentTrackKey=null,this.isMusicPlaying=!1;const e=localStorage.getItem("musicVolume");null!==e&&(this.musicVolume=parseFloat(e)),this.audioElements={},this._preloadTracks()}_preloadTracks(){console.log("[AudioManager] Preloading tracks from imported sources...");for(const e in C)if(C.hasOwnProperty(e)){const t=C[e],i=new Audio(t);i.preload="auto",this.audioElements[e]=i,console.log(`  Preloaded ${e} from ${t}`)}}setMusicVolume(e){this.musicVolume=Math.max(0,Math.min(1,e)),this.currentMusicElement&&(this.currentMusicElement.volume=this.musicVolume),localStorage.setItem("musicVolume",this.musicVolume.toString()),console.log(`[AudioManager] Music volume set to: ${this.musicVolume}`)}getMusicVolume(){return this.musicVolume}playMusic(e,t=!0){if(!this.audioElements[e]){if(console.warn(`[AudioManager] Track "${e}" not found or not preloaded.`),!C[e])return void console.error(`[AudioManager] Source for track "${e}" not defined in MUSIC_SOURCES.`);this.audioElements[e]=new Audio(C[e])}this.isMusicPlaying&&this.currentTrackKey===e||(this.stopMusic(),this.currentMusicElement=this.audioElements[e],this.currentMusicElement.volume=this.musicVolume,this.currentMusicElement.loop=t,this.currentTrackKey=e,this.currentMusicElement.play().then((()=>{this.isMusicPlaying=!0,console.log(`[AudioManager] Playing music: ${e} (Volume: ${this.currentMusicElement.volume})`)})).catch((t=>{console.error(`[AudioManager] Error playing "${e}":`,t),console.error(`  Playback failure details: userInteracted (check Menu.js), document.hasFocus(): ${document.hasFocus()}`),this.isMusicPlaying=!1,this.currentMusicElement=null,this.currentTrackKey=null})))}stopMusic(){this.currentMusicElement&&(this.currentMusicElement.pause(),this.currentMusicElement.currentTime=0,this.isMusicPlaying=!1,console.log(`[AudioManager] Stopped music: ${this.currentTrackKey}`))}changeTrackForFloor(e){const t=Math.max(0,e-1)%k.length,i=k[t];i?(console.log(`[AudioManager] Floor ${e} -> Music track: ${i}`),this.playMusic(i)):console.warn(`[AudioManager] No track found for floor index ${t}.`)}startInitialMusic(e=1){console.log("[AudioManager] Attempting to start initial music..."),this.changeTrackForFloor(e)}}const I=e.p+"assets/images/character_red9229918d5325fcdf2e6e.png",E=e.p+"assets/images/character_blue7b9b140f7eb486e8a968.png",x=e.p+"assets/images/character_yellowff53afbc44f903d97313.png",L=e.p+"assets/images/character_green007c77c97eef8cbb1e94.png",F=e.p+"assets/images/booka54431ef16a38389c12e.png";class ${static CREATOR_NAMES=["Rafał","Dima","Venia","Kacper"];static CLASS_ATTENDING_INFO="Klasa 2P2T / Projektowanie stron internetowych";constructor(e){console.log(`[Game] Initializing with character: ${e}`),this.characterColor=e,this._gameState=i.LOADING,this.isRunning=!1,this.totalBooksCollectedGlobally=0,this.targetBooksToWin=15,this.availableQuestions=[],this.currentBookTarget=null,this.currentQuestionData=null,this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.canvas=null,this.ctx=null,this.character=null,this.level=null,this.inputManager=null,this.renderer=null,this.gameplayManager=null,this.audioManager=null,this.sprites={red:I,blue:E,yellow:x,green:L},this.bookImage=null,this.gameLoop=this.gameLoop.bind(this),this._handleFatalError=this._handleFatalError.bind(this),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null;try{this._initializeCoreComponents(),this.audioManager=new z,console.log("[Game] AudioManager created."),this.gameplayManager=new b(this),console.log("[Game] GameplayManager created."),this.renderer=new v(this);const{canvas:e,ctx:t}=this.renderer.initializeCanvas();this.canvas=e,this.ctx=t,console.log("[Game] Renderer and Canvas initialized."),this._initializeUIManager(),console.log("[Game] UIManager setup initiated."),this._addEventListeners(),this._loadAssetsAndThenStartLogic().then((()=>{console.log("[Game] Async loading and game logic start sequence completed.")})).catch((e=>{console.error("[Game] Unhandled error from _loadAssetsAndThenStartLogic in constructor:",e);const t=a.getLoadingOverlay();t&&t.classList.remove("visible")}))}catch(e){console.error("[Game] Synchronous core initialization failed:",e),alert(`Critical initialization error: ${e.message}. Game cannot start.`),this._handleFatalError(`Initialization error: ${e.message}`,!1)}}get gameState(){return this._gameState}setGameState(e){this._gameState!==e&&(console.log(`[Game State] ${this._gameState} -> ${e}`),this._gameState=e)}_initializeCoreComponents(){this.inputManager=new t,this.level=new S(1,3)}_initializeUIManager(){if(!this.gameplayManager)throw new Error("[Game] GameplayManager is NOT defined when _initializeUIManager is called!");if(!this.inputManager)throw new Error("[Game] InputManager is NOT defined when _initializeUIManager is called!");a.setGameplayManager(this.gameplayManager),a.initializeUI(this.inputManager)}_addEventListeners(){window.addEventListener("resize",(()=>this.renderer?.resizeCanvas()))}async _loadAssetsAndThenStartLogic(){const e=a.getLoadingOverlay();try{this.setGameState(i.LOADING),await this._loadAssets(),await this._startGameLogic(),e&&e.classList.remove("visible")}catch(t){throw console.error("[Game] Asset loading or game logic start failed:",t),e&&e.classList.remove("visible"),this._handleFatalError(`Asset/Start Logic Error: ${t.message}`),t}}async _loadAssets(){console.log("[Game] Loading assets...");const e=[],t=this.sprites[this.characterColor]||this.sprites.red;if(!this.ctx)throw new Error("Canvas context not available for Character creation.");this.character=new s(this.ctx,t,{speed:3,frameSize:32,scale:2,animationSpeed:150,frameCount:4}),e.push(new Promise(((e,i)=>{this.character.sprite.onload=()=>{console.log(`  [Assets] Character sprite loaded: ${t}`),e()},this.character.sprite.onerror=e=>i(new Error(`Failed to load character sprite: ${t}. Details: ${e}`))}))),F?(this.bookImage=new Image,this.bookImage.src=F,e.push(new Promise((e=>{this.bookImage.onload=()=>{console.log(`  [Assets] Book image loaded: ${F}`),e()},this.bookImage.onerror=()=>{console.warn(` [Assets] Failed to load book image: ${F}. Using fallback rendering.`),this.bookImage=null,e()}})))):(console.warn("[Assets] No book sprite path provided. Book will use fallback rendering."),this.bookImage=null),await Promise.all(e),console.log("[Game] All assets loaded successfully.")}async _startGameLogic(){if(console.log("[Game] Starting core game logic..."),!(this.level&&this.character&&this.canvas&&this.renderer&&this.gameplayManager&&this.audioManager))throw new Error("Cannot start game - essential components are missing.");this.setGameState(i.LOADING_LEVEL);try{await this.level.loadFloor(this.level.minFloor,this.canvas.width,this.canvas.height);const e=this.level.currentMap;if(!e)throw new Error("Failed to load initial map. Map object is null.");const t=e.findRandomInitialSpawnPosition();if(!t)throw new Error("Failed to find a valid starting position on the map!");this.character.x=t.x,this.character.y=t.y,this.character.currentDirection=s.Direction.DOWN,this.character.isMoving=!1,this.gameplayManager.ensureCharacterIsOnWalkableTile(!1),this.totalBooksCollectedGlobally=0,this.availableQuestions=[...o],this.liftCooldownActive=!1,clearTimeout(this.liftCooldownTimer),this.liftCooldownTimer=null,this.currentBookTarget=null,this.currentQuestionData=null,this.renderer.centerCameraOnCharacter(),a.updateScore(this.totalBooksCollectedGlobally,this.targetBooksToWin),a.showGameUI(),this._boundKeyDownHandler=this.handleKeyDown.bind(this),this._boundKeyUpHandler=this.handleKeyUp.bind(this),window.addEventListener("keydown",this._boundKeyDownHandler),window.addEventListener("keyup",this._boundKeyUpHandler),this.audioManager.startInitialMusic(this.level.currentFloor),console.log(`[Game] Initial music started for floor ${this.level.currentFloor}`),this.setGameState(i.PLAYING),this.isRunning||(this.isRunning=!0,requestAnimationFrame(this.gameLoop),console.log("[Game] Game logic started. Loop is running."))}catch(e){throw console.error("[Game] Error during _startGameLogic:",e),this._handleFatalError(`Level start process error: ${e.message}`),e}}_setGameOver(e=!0){this.gameState!==i.GAME_OVER&&(this.setGameState(i.GAME_OVER),this.isRunning=!1,this.character&&(this.character.isMoving=!1),clearTimeout(this.liftCooldownTimer),this.audioManager&&this.audioManager.stopMusic(),this._boundKeyDownHandler&&window.removeEventListener("keydown",this._boundKeyDownHandler),this._boundKeyUpHandler&&window.removeEventListener("keyup",this._boundKeyUpHandler),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null,a.showGameOverScreen(e,$.CREATOR_NAMES,$.CLASS_ATTENDING_INFO),console.log(`[Game] Game Over. Win: ${e}`))}stopGame(){console.log("[Game] Explicit stopGame requested."),this._setGameOver(!1),console.log("[Game] Game stopped.")}_handleFatalError(e,t=!0){console.error("[Game] FATAL ERROR:",e),t&&this.gameState!==i.GAME_OVER&&(a.flashMessageContainer&&a.flashMessage?a.flashMessage(`FATAL ERROR: ${e}`,"error",15e3):alert(`FATAL ERROR: ${e}`)),this.gameState!==i.GAME_OVER&&this._setGameOver(!1)}handleKeyDown(e){if(this.gameState!==i.PLAYING||!this.inputManager)return;let t=!1;const o=e.key.toLowerCase();["arrowup","w"].includes(o)?(this.inputManager.setKey("up",!0),t=!0):["arrowdown","s"].includes(o)?(this.inputManager.setKey("down",!0),t=!0):["arrowleft","a"].includes(o)?(this.inputManager.setKey("left",!0),t=!0):["arrowright","d"].includes(o)&&(this.inputManager.setKey("right",!0),t=!0),t&&e.preventDefault()}handleKeyUp(e){if(!this.inputManager)return;const t=e.key.toLowerCase();["arrowup","w"].includes(t)?this.inputManager.setKey("up",!1):["arrowdown","s"].includes(t)?this.inputManager.setKey("down",!1):["arrowleft","a"].includes(t)?this.inputManager.setKey("left",!1):["arrowright","d"].includes(t)&&this.inputManager.setKey("right",!1)}gameLoop(e){this.isRunning&&this.gameState!==i.GAME_OVER&&(this.gameplayManager?.update(e),this.renderer?.centerCameraOnCharacter(),this.renderer?.drawFrame(),requestAnimationFrame(this.gameLoop))}startLiftCooldownTimer(){clearTimeout(this.liftCooldownTimer),console.log("[Game] Starting lift cooldown timer: 2000ms."),this.liftCooldownTimer=setTimeout((()=>{this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.gameState===i.TRANSITIONING?(this.setGameState(i.PLAYING),a.flashMessage(`Arrived at floor ${this.level?.currentFloor}`,"success",1500)):console.warn(`[GameTimer] Lift cooldown ended, but game state is ${this.gameState}. No state change applied.`)}),2e3)}}let T=null;class A{constructor(e){this.characterImageSources=e,this.selectedCharacter=null,this.userInteracted=!1,this.overlay=null,this.audioManagerInstance=null,console.log("[Menu] Constructor called. Initializing elements..."),this.initializeElements(),this.characterPanel?this.setupCharacterImages():console.error("[Menu Constructor] CRITICAL: this.characterPanel is null AFTER initializeElements. Cannot setup images."),console.log("[Menu] Adding event listeners..."),this.addEventListeners(),console.log("[Menu] Instance created.")}setAudioManager(e){this.audioManagerInstance=e,console.log("[Menu] AudioManager instance received."),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume())}initializeElements(){this.menuContainer=document.querySelector(".menu-container"),this.menuContainer||console.error("[Menu Init] CRITICAL: .menu-container not found!"),this.settingsButton=document.querySelector(".settings-button"),this.playButton=document.querySelector(".play-button"),this.characterButton=document.querySelector(".character-button"),this.playButton?this.playButton.disabled=!0:console.warn("[Menu Init] .play-button not found."),this.characterButton||console.warn("[Menu Init] .character-button not found."),this.settingsPanel=document.querySelector(".settings-panel"),this.settingsPanel?(this.settingsPanel.parentNode!==document.body&&document.body.appendChild(this.settingsPanel),this.musicVolume=this.settingsPanel.querySelector("#music-volume"),this.sfxVolume=this.settingsPanel.querySelector("#sfx-volume"),this.closeSettingsButton=this.settingsPanel.querySelector(".panel-close-button"),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume())):console.warn("[Menu Init] .settings-panel not found."),this.characterPanel=document.querySelector(".character-panel"),this.characterPanel?(this.characterPanel.parentNode!==document.body&&document.body.appendChild(this.characterPanel),this.characterGrid=this.characterPanel.querySelector(".character-grid"),this.closeCharacterPanelButton=this.characterPanel.querySelector(".panel-close-button")):console.error("[Menu Init] CRITICAL: .character-panel not found during initialization!"),this.selectedCharacterDisplay=document.createElement("div"),this.selectedCharacterDisplay.className="selected-character-display";const e=this.menuContainer?this.menuContainer.querySelector(".main-menu-buttons"):null;this.playButton&&this.playButton.parentNode?this.playButton.parentNode.insertBefore(this.selectedCharacterDisplay,this.playButton):e?e.insertBefore(this.selectedCharacterDisplay,e.children[1]||null):this.menuContainer?this.menuContainer.appendChild(this.selectedCharacterDisplay):console.error("[Menu Init] Cannot append selectedCharacterDisplay: no suitable parent found."),this.updateSelectedCharacterDisplay()}setupCharacterImages(){if(!this.characterPanel)return;if(!this.characterImageSources)return;const e=this.characterPanel.querySelectorAll(".character-card");0!==e.length&&e.forEach((e=>{const t=e.dataset.character,i=e.querySelector(".character-preview img");i&&this.characterImageSources[t]&&(i.src=this.characterImageSources[t])}))}handleFirstInteraction(){this.userInteracted||(this.userInteracted=!0,console.log("[Menu] First user interaction detected."))}addEventListeners(){const e=(e,t,i)=>{e&&e.addEventListener(t,(e=>{this.handleFirstInteraction(),i.call(this,e)}))};e(this.settingsButton,"click",this.toggleSettings),e(this.playButton,"click",this.startGame),e(this.characterButton,"click",this.openCharacterModal),this.closeSettingsButton&&this.closeSettingsButton.addEventListener("click",(()=>this.closeSettings())),this.closeCharacterPanelButton&&this.closeCharacterPanelButton.addEventListener("click",(()=>this.closeCharacterModal())),this.musicVolume&&this.musicVolume.addEventListener("input",(e=>{if(this.audioManagerInstance){const t=parseFloat(e.target.value)/100;this.audioManagerInstance.setMusicVolume(t),console.log(`[Menu] Music volume changed via slider to: ${t}`)}else console.warn("[Menu] Music volume slider changed, but AudioManager not available.")})),this.sfxVolume,this.characterGrid&&this.characterGrid.addEventListener("click",(e=>{const t=e.target.closest(".character-card");t&&this.characterPanel&&this.characterPanel.classList.contains("visible")&&(this.handleFirstInteraction(),this.selectCharacter(t))}))}openCharacterModal(){this.characterPanel&&this.characterGrid&&(this.characterPanel.classList.add("visible"),this.settingsPanel?.classList.contains("visible")&&this.closeSettings(),this.overlay||(this.overlay=document.createElement("div"),this.overlay.className="character-modal-overlay",this.overlay.addEventListener("click",(e=>{e.target===this.overlay&&this.closeCharacterModal()})),document.body.appendChild(this.overlay)),this.overlay.classList.add("visible"))}closeCharacterModal(){this.characterPanel&&this.characterPanel.classList.remove("visible"),this.overlay&&this.overlay.classList.remove("visible")}selectCharacter(e){if(!this.characterGrid||!e?.dataset?.character)return;const t=e.dataset.character;this.characterGrid.querySelectorAll(".character-card").forEach((e=>e.classList.remove("selected"))),e.classList.add("selected"),this.selectedCharacter=t,this.playButton&&(this.playButton.disabled=!1),this.updateSelectedCharacterDisplay(),this.closeCharacterModal()}updateSelectedCharacterDisplay(){if(this.selectedCharacterDisplay)if(this.selectedCharacter&&this.characterImageSources&&this.characterImageSources[this.selectedCharacter]){const e=this.selectedCharacter,t=this.characterImageSources[e];let i=e.charAt(0).toUpperCase()+e.slice(1)+" Student";if(this.characterGrid){const t=this.characterGrid.querySelector(`.character-card[data-character="${e}"] h3`);t&&(i=t.textContent)}this.selectedCharacterDisplay.innerHTML=`<img src="${t}" alt="${i}" style="width:32px;height:32px;vertical-align:middle;margin-right:8px; border-radius:50%; object-fit:cover; background-color: #444;"> <span style="font-weight:bold;">${i}</span>`}else this.selectedCharacterDisplay.innerHTML='<span style="color:#aaa;">No character selected</span>'}toggleSettings(){this.settingsPanel&&(this.settingsPanel.classList.contains("visible")?this.closeSettings():this.openSettings())}openSettings(){this.settingsPanel&&(this.settingsPanel.classList.add("visible"),this.characterPanel?.classList.contains("visible")&&this.closeCharacterModal(),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume()))}closeSettings(){this.settingsPanel&&this.settingsPanel.classList.contains("visible")&&this.settingsPanel.classList.remove("visible")}async startGame(){if(!this.selectedCharacter)return void a.flashMessage("Please select a character first!","warning",2500);const e=a.getLoadingOverlay();if(e&&e.classList.add("visible"),!this.menuContainer)return void(e&&e.classList.remove("visible"));this.menuContainer.style.display="none";const t=document.getElementById("game-canvas");if(!t)return console.error("[Menu] CRITICAL: #game-canvas not found!"),this.menuContainer&&(this.menuContainer.style.display="flex"),void(e&&e.classList.remove("visible"));t.style.display="block";try{T&&"function"==typeof T.stopGame&&T.stopGame(),T=new $(this.selectedCharacter),T&&T.audioManager?this.setAudioManager(T.audioManager):console.warn("[Menu startGame] Failed to get AudioManager from new Game instance to set it in Menu.")}catch(i){console.error("[Menu] Critical error during game initialization:",i),a.flashMessage(`Game Start Failed: ${i.message}`,"error",1e4),this.menuContainer&&(this.menuContainer.style.display="flex"),t&&(t.style.display="none"),e&&e.classList.remove("visible"),T=null}}}const G=e.p+"assets/images/redc0823efecc8ece1a10c4.png",P=e.p+"assets/images/bluea60b5a2890283d3db0d0.png",O=e.p+"assets/images/yellowe7fd8d3003d4e49a0ad5.png",R=e.p+"assets/images/green1ba3e373f73ba58a2658.png";document.addEventListener("DOMContentLoaded",(()=>{console.log("[main.js] DOMContentLoaded. Initializing Menu..."),new A({red:G,blue:P,yellow:O,green:R})}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFVLFFBUTdCLElBQ01nakIsR0FBK0QsbUJBQWpDQSxFQUFvQkosVUFDcERJLEVBQW9CSixXQUd0QkksRUFBc0IsSUFBSXZDLEVBQUszcUIsS0FBS3F0QixtQkFHaENILEdBQXVCQSxFQUFvQmpDLGFBQzdDanJCLEtBQUs2dEIsZ0JBQWdCWCxFQUFvQmpDLGNBRXpDOW5CLFFBQVFVLEtBQ04sd0ZBR04sQ0FBRSxNQUFPUixHQUNQRixRQUFRRSxNQUFNLG9EQUFxREEsR0FDbkVQLEVBQVVtRCxhQUFhLHNCQUFzQjVDLEVBQU02QyxVQUFXLFFBQVMsS0FDbkVsRyxLQUFLZ0ssZ0JBQWVoSyxLQUFLZ0ssY0FBY2xGLE1BQU1vRixRQUFVLFFBQ3ZEcW1CLElBQVlBLEVBQVd6ckIsTUFBTW9GLFFBQVUsUUFDdkM0aEIsR0FBZ0JBLEVBQWU1bkIsVUFBVWlCLE9BQU8sV0FDcEQrbkIsRUFBc0IsSUFDeEIsQ0FDRixFLG9OQzVVRjNzQixTQUFTNkUsaUJBQWlCLG9CQUFvQixLQUM1Q2pDLFFBQVFDLElBQUksb0RBU1osSUFBSStwQixFQVAwQixDQUM1QmhDLElBQUssRUFDTEMsS0FBTSxFQUNOQyxPQUFRLEVBQ1JDLE1BQU8sR0FHc0IsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRlbnQtZ2FtZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvQ29yZS9JbnB1dE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3N0dWRlbnQtZ2FtZS8uL2pzL1VJL1VJTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9Db3JlL0NoYXJhY3Rlci5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9tYXAvQm9vay5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy91dGlscy9tYXAuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvbWFwL01hcFJlbmRlcmVyLmpzIiwid2VicGFjazovL3N0dWRlbnQtZ2FtZS8uL2pzL21hcC9NYXBHZW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvbWFwL1Byb2NlZHVyYWxNYXAuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvQ29yZS9MZXZlbC5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9Db3JlL0dhbWVSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9Db3JlL0dhbWVwbGF5TWFuYWdlci5qcyIsIndlYnBhY2s6Ly9zdHVkZW50LWdhbWUvLi9qcy9hdWRpby9BdWRpb01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvQ29yZS9HYW1lLmpzIiwid2VicGFjazovL3N0dWRlbnQtZ2FtZS8uL2pzL1VJL01lbnUuanMiLCJ3ZWJwYWNrOi8vc3R1ZGVudC1nYW1lLy4vanMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdTQ1JJUFQnKVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAoIXNjcmlwdFVybCB8fCAhL15odHRwKHM/KTovLnRlc3Qoc2NyaXB0VXJsKSkpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoL15ibG9iOi8sIFwiXCIpLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBzcmMvY29yZS9JbnB1dE1hbmFnZXIuanNcclxuZXhwb3J0IGNsYXNzIElucHV0TWFuYWdlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmtleXMgPSB7XHJcbiAgICAgIHVwOiBmYWxzZSxcclxuICAgICAgZG93bjogZmFsc2UsXHJcbiAgICAgIGxlZnQ6IGZhbHNlLFxyXG4gICAgICByaWdodDogZmFsc2UsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0S2V5KGtleSwgaXNQcmVzc2VkKSB7XHJcbiAgICBpZiAodGhpcy5rZXlzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgdGhpcy5rZXlzW2tleV0gPSBpc1ByZXNzZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRJbnB1dERpcmVjdGlvbigpIHtcclxuICAgIGxldCB4ID0gMDtcclxuICAgIGxldCB5ID0gMDtcclxuICAgIGlmICh0aGlzLmtleXMudXApIHkgLT0gMTtcclxuICAgIGlmICh0aGlzLmtleXMuZG93bikgeSArPSAxO1xyXG4gICAgaWYgKHRoaXMua2V5cy5sZWZ0KSB4IC09IDE7XHJcbiAgICBpZiAodGhpcy5rZXlzLnJpZ2h0KSB4ICs9IDE7XHJcbiAgICByZXR1cm4geyB4LCB5IH07XHJcbiAgfVxyXG59XHJcbiIsIi8vIHNyYy91dGlscy9jb25zdGFudHMuanNcclxuXHJcbi8vIERlZmluaWNqZSB0eXDDs3cga2FmZWxrw7N3IG1hcHlcclxuZXhwb3J0IGNvbnN0IFRJTEVfV0FMTCA9IDA7IC8vIMWaY2lhbmFcclxuZXhwb3J0IGNvbnN0IFRJTEVfQ09SUklET1IgPSAxOyAvLyBLb3J5dGFyelxyXG5leHBvcnQgY29uc3QgVElMRV9ST09NX0ZMT09SID0gMjsgLy8gUG9kxYJvZ2EgcG9rb2p1XHJcbmV4cG9ydCBjb25zdCBUSUxFX0xJRlQgPSAzOyAvLyBXaW5kYVxyXG4vLyBNb8W8bmEgZG9kYcSHIHdpxJljZWogdHlww7N3LCBucC4gVElMRV9ET09SLCBUSUxFX1dJTkRPVyBpdHAuXHJcblxyXG4vLyBTdGFueSBncnlcclxuZXhwb3J0IGNvbnN0IEdhbWVTdGF0ZSA9IHtcclxuICBMT0FESU5HOiAnTE9BRElORycsIC8vIMWBYWRvd2FuaWUgemFzb2LDs3csIGdlbmVyb3dhbmllIHBvemlvbXVcclxuICBNRU5VOiAnTUVOVScsIC8vIE1lbnUgZ8WCw7N3bmUgKHd5YsOzciBwb3N0YWNpKVxyXG4gIFBMQVlJTkc6ICdQTEFZSU5HJywgLy8gR8WCw7N3bmEgcm96Z3J5d2thXHJcbiAgQVNLSU5HX1FVRVNUSU9OOiAnQVNLSU5HX1FVRVNUSU9OJywgLy8gV3nFm3dpZXRsYW5pZSBweXRhbmlhXHJcbiAgU0VMRUNUSU5HX0ZMT09SOiAnU0VMRUNUSU5HX0ZMT09SJywgLy8gV3nFm3dpZXRsYW5pZSBVSSB3eWJvcnUgcGnEmXRyYVxyXG4gIFRSQU5TSVRJT05JTkc6ICdUUkFOU0lUSU9OSU5HJywgLy8gQW5pbWFjamEvb2N6ZWtpd2FuaWUgbmEgcHJ6ZWrFm2NpZSB3aW5keVxyXG4gIEdBTUVfT1ZFUjogJ0dBTUVfT1ZFUicsIC8vIEtvbmllYyBncnkgKHd5Z3JhbmEgbHViIHByemVncmFuYSlcclxufTtcclxuXHJcbi8vIFBhcmFtZXRyeSByb3pncnl3a2lcclxuZXhwb3J0IGNvbnN0IFRBUkdFVF9CT09LU19UT19XSU4gPSAxNTsgLy8gTGljemJhIGtzacSFxbxlayBkbyB6ZWJyYW5pYSwgYWJ5IHd5Z3JhxIcgKGdsb2JhbG5pZSlcclxuZXhwb3J0IGNvbnN0IExJRlRfQ09PTERPV05fTVMgPSAyMDAwOyAvLyBDemFzIG9kbm93aWVuaWEgd2luZHkgdyBtaWxpc2VrdW5kYWNoICgyIHNla3VuZHkpXHJcbmV4cG9ydCBjb25zdCBMSUZUX0lOVEVSQUNUSU9OX1JBRElVU19NVUxUSVBMSUVSID0gMC43OyAvLyBNbm/FvG5payBwcm9taWVuaWEgaW50ZXJha2NqaSB6IHdpbmTEhSAod3pnbMSZZGVtIHRpbGVTaXplKVxyXG5cclxuLy8gU3phbnNhIG5hIHBvamF3aWVuaWUgc2nEmSBzacWCb3duaSBuYSBwaWVyd3N6eW0gcGnEmXRyemUgKDAuMCBkbyAxLjApXHJcbmV4cG9ydCBjb25zdCBHWU1fQ0hBTkNFX09OX0ZJUlNUX0ZMT09SID0gMC42OyAvLyA2MCUgc3phbnN5XHJcblxyXG4vLyBQeXRhbmlhIGkgb2Rwb3dpZWR6aVxyXG5leHBvcnQgY29uc3QgcXVlc3Rpb25zID0gW1xyXG4gIHtcclxuICAgIHF1ZXN0aW9uOlxyXG4gICAgICAnS3TDs3J5IGrEmXp5ayBwcm9ncmFtb3dhbmlhIGplc3Qgem5hbnkgemUgc3dvamVqIHdzemVjaHN0cm9ubm/Fm2NpIGkgdcW8eXdhbnkgemFyw7N3bm8gdyBiYWNrZW5kemllIChOb2RlLmpzKSwgamFrIGkgZnJvbnRlbmR6aWU/JyxcclxuICAgIG9wdGlvbnM6IFsnUHl0aG9uJywgJ0phdmEnLCAnSmF2YVNjcmlwdCcsICdDIyddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMiwgLy8gSW5kZWtzIHBvcHJhd25laiBvZHBvd2llZHppIChKYXZhU2NyaXB0KVxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDbyBvem5hY3phIHNrcsOzdCBIVE1MPycsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdIeXBlclRleHQgTWFya3VwIExhbmd1YWdlJyxcclxuICAgICAgJ0hpZ2ggVHJhbnNmZXIgTWFjaGluZSBMYW5ndWFnZScsXHJcbiAgICAgICdIeXBlcmxpbmsgYW5kIFRleHQgTWFuYWdlbWVudCBMYW5ndWFnZScsXHJcbiAgICAgICdIb21lIFRvb2wgTWFya3VwIExhbmd1YWdlJyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAwLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdLdMOzcmEgc3RydWt0dXJhIGRhbnljaCBkemlhxYJhIG5hIHphc2FkemllIExJRk8gKExhc3QtSW4sIEZpcnN0LU91dCk/JyxcclxuICAgIG9wdGlvbnM6IFsnS29sZWprYSAoUXVldWUpJywgJ1N0b3MgKFN0YWNrKScsICdMaXN0YSAoTGlzdCknLCAnRHJ6ZXdvIChUcmVlKSddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMSxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOiAnSmFrIG5henl3YSBzacSZIHByb2NlcyB6bmFqZG93YW5pYSBpIG5hcHJhd2lhbmlhIGLFgsSZZMOzdyB3IGtvZHppZT8nLFxyXG4gICAgb3B0aW9uczogWydLb21waWxhY2phJywgJ1Rlc3Rvd2FuaWUnLCAnRGVidWdvd2FuaWUnLCAnUmVmYWt0b3J5emFjamEnXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjpcclxuICAgICAgXCJLdMOzcnkgcGFyYWR5Z21hdCBwcm9ncmFtb3dhbmlhIG9waWVyYSBzacSZIG5hIGtvbmNlcGNqaSAnb2JpZWt0w7N3Jywga3TDs3JlIG1vZ8SFIHphd2llcmHEhyBkYW5lIGkga29kP1wiLFxyXG4gICAgb3B0aW9uczogW1xyXG4gICAgICAnUHJvZ3JhbW93YW5pZSBmdW5rY3lqbmUnLFxyXG4gICAgICAnUHJvZ3JhbW93YW5pZSBwcm9jZWR1cmFsbmUnLFxyXG4gICAgICAnUHJvZ3JhbW93YW5pZSBvYmlla3Rvd2UnLFxyXG4gICAgICAnUHJvZ3JhbW93YW5pZSBsb2dpY3puZScsXHJcbiAgICBdLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMixcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOiAnQ28gb3puYWN6YSBDU1M/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0Nhc2NhZGluZyBTdHlsZSBTaGVldHMnLFxyXG4gICAgICAnQ29tcHV0ZXIgU3R5bGUgU3ludGF4JyxcclxuICAgICAgJ0NyZWF0aXZlIFN0eWxpbmcgU3lzdGVtJyxcclxuICAgICAgJ0NvbG9yZnVsIFN0eWxlIFNjcmlwdHMnLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDAsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0t0w7NyeSBvcGVyYXRvciB3IEphdmFTY3JpcHQgc8WCdcW8eSBkbyDFm2Npc8WCZWdvIHBvcsOzd25hbmlhICh3YXJ0b8WbxIcgaSB0eXApPycsXHJcbiAgICBvcHRpb25zOiBbJz09JywgJz0nLCAnPT09JywgJyE9J10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAyLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdKYWsgbmF6eXdhIHNpxJkgcG9wdWxhcm55IHN5c3RlbSBrb250cm9saSB3ZXJzamkgdcW8eXdhbnkgcHJ6ZXogcHJvZ3JhbWlzdMOzdz8nLFxyXG4gICAgb3B0aW9uczogWydTdWJ2ZXJzaW9uIChTVk4pJywgJ0dpdCcsICdNZXJjdXJpYWwnLCAnQ1ZTJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAxLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246XHJcbiAgICAgICdLdMOzcnkgdHlwIHDEmXRsaSB3IHdpxJlrc3pvxZtjaSBqxJl6eWvDs3cgcHJvZ3JhbW93YW5pYSBqZXN0IG5hamJhcmR6aWVqIG9kcG93aWVkbmkgZG8gaXRlcmFjamkgcG8gZWxlbWVudGFjaCB0YWJsaWN5LCBnZHkgbmllIHpuYW15IGljaCBsaWN6Ynk/JyxcclxuICAgIG9wdGlvbnM6IFsnZm9yJywgJ3doaWxlJywgJ2RvLi4ud2hpbGUnLCAnZm9yZWFjaCAobHViIGZvci4uLm9mKSddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMyxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOiAnQ28gdG8gamVzdCBBUEk/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0FkdmFuY2VkIFByb2dyYW1taW5nIEludGVyZmFjZScsXHJcbiAgICAgICdBcHBsaWNhdGlvbiBQcm9ncmFtbWluZyBJbnRlcmZhY2UnLFxyXG4gICAgICAnQXV0b21hdGVkIFByb2dyYW0gSW50ZXJhY3Rpb24nLFxyXG4gICAgICAnQWxnb3JpdGhtaWMgUHJvY2Vzc2luZyBJbnB1dCcsXHJcbiAgICBdLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMSxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOiAnQ28gdG8gamVzdCBQTEMgaSBkbyBjemVnbyBuYWpjesSZxZtjaWVqIHPFgnXFvHkgdyBhdXRvbWF0eWNlPycsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdQcm9ncmFtb3dhbG55IExvZ2ljIENvbnRyb2xsZXIsIGRvIHN0ZXJvd2FuaWEgcHJvY2VzYW1pIHByemVteXPFgm93eW1pJyxcclxuICAgICAgJ1BlcnNvbmFsIExlYXJuaW5nIENvbXB1dGVyLCBkbyBuYXVraSBwcm9ncmFtb3dhbmlhJyxcclxuICAgICAgJ1Bvd2VyIExpbmUgQ29tbXVuaWNhdGlvbiwgZG8gcHJ6ZXN5xYJ1IGRhbnljaCBwcnpleiBzaWXEhyBlbGVrdHJ5Y3puxIUnLFxyXG4gICAgICAnUHJvamVjdCBMaWZlY3ljbGUgQ29zdCwgZG8gemFyesSFZHphbmlhIGtvc3p0YW1pIHByb2pla3R1JyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAwLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdaYSBjbyBvZHBvd2lhZGEgcHJ6eXPFgm9uYSAoYXBlcnR1cmEpIHcgYXBhcmFjaWUgZm90b2dyYWZpY3pueW0/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0tvbnRyb2zEmSBjemFzdSBuYcWbd2lldGxhbmlhJyxcclxuICAgICAgJ1JlZ3VsYWNqxJkgZ8WCxJliaSBvc3Ryb8WbY2kgaSBpbG/Fm2NpIHdwYWRhasSFY2VnbyDFm3dpYXTFgmEnLFxyXG4gICAgICAnVXN0YXdpZW5pZSBiYWxhbnN1IGJpZWxpJyxcclxuICAgICAgJ1N0YWJpbGl6YWNqxJkgb2JyYXp1JyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAxLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246XHJcbiAgICAgICdLdMOzcnkgZWxlbWVudCBrb21wdXRlcmEgamVzdCBvZHBvd2llZHppYWxueSB6YSB0eW1jemFzb3dlIHByemVjaG93eXdhbmllIGRhbnljaCB1xbx5d2FueWNoIHByemV6IHByb2Nlc29yPycsXHJcbiAgICBvcHRpb25zOiBbJ0R5c2sgdHdhcmR5IChIREQvU1NEKScsICdLYXJ0YSBncmFmaWN6bmEgKEdQVSknLCAnUGFtacSZxIcgUkFNJywgJ1DFgnl0YSBnxYLDs3duYSddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMixcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOlxyXG4gICAgICAnVyBqYWtpbSBqxJl6eWt1IHByb2dyYW1vd2FuaWEgbmFqY3rEmcWbY2llaiBwaXNhbmUgc8SFIHNrcnlwdHkgcG8gc3Ryb25pZSBzZXJ3ZXJhIChiYWNrZW5kKT8nLFxyXG4gICAgb3B0aW9uczogWydIVE1MJywgJ0NTUycsICdTUUwnLCAnUEhQLCBQeXRob24gbHViIE5vZGUuanMgKEphdmFTY3JpcHQpJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246XHJcbiAgICAgICdKYWtpIHR5cCBzeWduYcWCdSBjaGFyYWt0ZXJ5enVqZSBzacSZIHDFgnlubsSFIHptaWFuxIUgd2FydG/Fm2NpIHcgY3phc2llLCB3IHByemVjaXdpZcWEc3R3aWUgZG8gc3lnbmHFgnUgY3lmcm93ZWdvPycsXHJcbiAgICBvcHRpb25zOiBbJ0JpbmFybnknLCAnQW5hbG9nb3d5JywgJ1plcm8tamVkeW5rb3d5JywgJ0ltcHVsc293eSddLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMSxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOlxyXG4gICAgICAnS3TDs3J5IHBhcmFtZXRyIHVzdGF3aWEgY3p1xYJvxZvEhyBtYXRyeWN5IGFwYXJhdHUgbmEgxZt3aWF0xYJvIGkgd3DFgnl3YSBuYSBwb3ppb20gc3p1bcOzdyBuYSB6ZGrEmWNpdT8nLFxyXG4gICAgb3B0aW9uczogWydDemFzIG5hxZt3aWV0bGFuaWEnLCAnUHJ6eXPFgm9uYScsICdJU08nLCAnT2duaXNrb3dhJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAyLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDbyB0byBqZXN0IGFkcmVzIElQIHcgc2llY2kga29tcHV0ZXJvd2VqPycsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdVbmlrYWxueSBpZGVudHlmaWthdG9yIHVyesSFZHplbmlhIHcgc2llY2knLFxyXG4gICAgICAnTmF6d2EgdcW8eXRrb3duaWthIGRvIGxvZ293YW5pYScsXHJcbiAgICAgICdBZHJlcyBzdHJvbnkgaW50ZXJuZXRvd2VqJyxcclxuICAgICAgJ1R5cCBrYWJsYSBzaWVjaW93ZWdvJyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAwLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDenltIHLDs8W8bmkgc2nEmSBpbnN0cnVrY2phIHdhcnVua293YSBgaWZgIG9kIHDEmXRsaSBgd2hpbGVgIHcgcHJvZ3JhbW93YW5pdT8nLFxyXG4gICAgb3B0aW9uczogW1xyXG4gICAgICAnYGlmYCBwb3d0YXJ6YSBibG9rIGtvZHUsIGB3aGlsZWAgc3ByYXdkemEgd2FydW5layBqZWRub2tyb3RuaWUnLFxyXG4gICAgICAnYGlmYCBzcHJhd2R6YSB3YXJ1bmVrIGplZG5va3JvdG5pZSwgYHdoaWxlYCBwb3d0YXJ6YSBibG9rIGtvZHUgZG9ww7NraSB3YXJ1bmVrIGplc3QgcHJhd2R6aXd5JyxcclxuICAgICAgJ05pZSBtYSBtacSZZHp5IG5pbWkgcsOzxbxuaWN5JyxcclxuICAgICAgJ2BpZmAgc8WCdcW8eSB0eWxrbyBkbyBkZWtsYXJvd2FuaWEgem1pZW5ueWNoLCBgd2hpbGVgIGRvIG9wZXJhY2ppIG1hdGVtYXR5Y3pueWNoJyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAxLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdEbyBjemVnbyBuYWpjesSZxZtjaWVqIHPFgnXFvHkgY3p1am5payBjacWbbmllbmlhIHcgc3lzdGVtaWUgYXV0b21hdHlraT8nLFxyXG4gICAgb3B0aW9uczogWydQb21pYXJ1IHRlbXBlcmF0dXJ5JywgJ1BvbWlhcnUgb2RsZWfFgm/Fm2NpJywgJ1BvbWlhcnUgc2nFgnknLCAnUG9taWFydSBjacWbbmllbmlhJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDbyBvem5hY3phIHphc2FkYSB0csOzanBvZHppYcWCdSB3IGtvbXBvenljamkgZm90b2dyYWZpY3puZWo/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0R6aWVsZW5pZSBvYnJhenUgbmEgMyByw7N3bmUgY3rEmcWbY2kgcGlvbm93byBpIHBvemlvbW8gaSB1bWllc3pjemFuaWUga2x1Y3pvd3ljaCBlbGVtZW50w7N3IG5hIGxpbmlhY2ggbHViIGljaCBwcnplY2nEmWNpYWNoJyxcclxuICAgICAgJ1XFvHl3YW5pZSB0eWxrbyAzIGfFgsOzd255Y2gga29sb3LDs3cgdyBrYWRyemUnLFxyXG4gICAgICAnUm9iaWVuaWUgemF3c3plIDMgemRqxJnEhyB0ZWogc2FtZWogc2NlbnknLFxyXG4gICAgICAnQmFsYW5zb3dhbmllIDMgZ8WCw7N3bnljaCBvYmlla3TDs3cgdyBrYWRyemUnLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDAsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0pha2EgamVzdCBwb2RzdGF3b3dhIHJvbGEgc3lzdGVtdSBvcGVyYWN5am5lZ28/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ1R3b3J6ZW5pZSBncmFmaWtpIGtvbXB1dGVyb3dlaicsXHJcbiAgICAgICdaYXJ6xIVkemFuaWUgemFzb2JhbWkgc3ByesSZdG93eW1pIGkgcHJvZ3JhbW93eW1pIGtvbXB1dGVyYScsXHJcbiAgICAgICdQaXNhbmllIGtvZHUgcHJvZ3JhbcOzdycsXHJcbiAgICAgICdQcnplZ2zEhWRhbmllIEludGVybmV0dScsXHJcbiAgICBdLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMSxcclxuICB9LFxyXG4gIHtcclxuICAgIHF1ZXN0aW9uOlxyXG4gICAgICAnSmFraWVnbyB0eXB1IGRhbnljaCBuYWpjesSZxZtjaWVqIHXFvHlqZXN6IGRvIHByemVjaG93eXdhbmlhIHdpZWt1IG9zb2J5IChsaWN6YmEgY2HFgmtvd2l0YSk/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ1N0cmluZyAoY2nEhWcgem5ha8OzdyknLFxyXG4gICAgICAnQm9vbGVhbiAod2FydG/Fm8SHIGxvZ2ljem5hKScsXHJcbiAgICAgICdGbG9hdCAobGljemJhIHptaWVubm9wcnplY2lua293YSknLFxyXG4gICAgICAnSW50ZWdlciAobGljemJhIGNhxYJrb3dpdGEpJyxcclxuICAgIF0sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdFbGVtZW50IHd5a29uYXdjenkgKGFrdHVhdG9yKSB3IHN5c3RlbWllIGF1dG9tYXR5a2kgdG8gdXJ6xIVkemVuaWUsIGt0w7NyZS4uLicsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdPZGN6eXR1amUgZGFuZSB6IGN6dWpuaWvDs3cnLFxyXG4gICAgICAnV3lrb251amUga29tZW5keSB6ZSBzdGVyb3duaWthLCBhYnkgd3lrb25hxIcgZml6eWN6bmUgZHppYcWCYW5pZSAobnAuIHJ1Y2gpJyxcclxuICAgICAgJ1ByemVjaG93dWplIGRhbmUgaGlzdG9yeWN6bmUnLFxyXG4gICAgICAnU8WCdcW8eSBkbyBrb211bmlrYWNqaSB6IG9wZXJhdG9yZW0nLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDEsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjpcclxuICAgICAgJ0t0w7NyeSBmb3JtYXQgcGxpa3UgZ3JhZmljem5lZ28gamVzdCBiZXpzdHJhdG55IGkgY3rEmXN0byB1xbx5d2FueSB3IHByb2Zlc2pvbmFsbmVqIGVkeWNqaSwgemFjaG93dWrEhWMgbWFrc3ltYWxuxIUgamFrb8WbxIcga29zenRlbSByb3ptaWFydT8nLFxyXG4gICAgb3B0aW9uczogWydKUEVHJywgJ0dJRicsICdQTkcnLCAnUkFXJ10sXHJcbiAgICBjb3JyZWN0QW5zd2VyOiAzLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcXVlc3Rpb246ICdDbyBjaHJvbmkgc2llxIcga29tcHV0ZXJvd8SFIHByemVkIG5pZWF1dG9yeXpvd2FueW0gZG9zdMSZcGVtIHogemV3bsSFdHJ6PycsXHJcbiAgICBvcHRpb25zOiBbJ1JvdXRlcicsICdTd2l0Y2gnLCAnTW9kZW0nLCAnRmlyZXdhbGwgKHphcG9yYSBzaWVjaW93YSknXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDMsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0NvIHRvIGplc3QgSURFIChJbnRlZ3JhdGVkIERldmVsb3BtZW50IEVudmlyb25tZW50KSB3IGtvbnRla8WbY2llIHByb2dyYW1vd2FuaWE/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ1N5c3RlbSBvcGVyYWN5am55JyxcclxuICAgICAgJ05hcnrEmWR6aWUgZG8gemFyesSFZHphbmlhIGJhesSFIGRhbnljaCcsXHJcbiAgICAgICdaaW50ZWdyb3dhbmUgxZtyb2Rvd2lza28gcHJvZ3JhbWlzdHljem5lIChlZHl0b3Iga29kdSwga29tcGlsYXRvciwgZGVidWdnZXIgdyBqZWRueW0pJyxcclxuICAgICAgJ1Byb3Rva8OzxYIgc2llY2lvd3knLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjpcclxuICAgICAgJ1ByenlrxYJhZGVtIGN6dWpuaWthIHpibGnFvGVuaW93ZWdvLCB3eWtyeXdhasSFY2VnbyBvYmVjbm/Fm8SHIG9iaWVrdHUgYmV6IGZpenljem5lZ28ga29udGFrdHUsIG1vxbxlIGJ5xIc6JyxcclxuICAgIG9wdGlvbnM6IFsnVGVybW9tZXRyJywgJ0ZvdG9rb23Ds3JrYScsICdNYW5vbWV0ciAoY3p1am5payBjacWbbmllbmlhKScsICdBa2NlbGVyb21ldHInXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDEsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0RvIGN6ZWdvIHPFgnXFvHkgYmFsYW5zIGJpZWxpICh3aGl0ZSBiYWxhbmNlKSB3IGFwYXJhY2llIGZvdG9ncmFmaWN6bnltPycsXHJcbiAgICBvcHRpb25zOiBbXHJcbiAgICAgICdEbyByZWd1bGFjamkgb3N0cm/Fm2NpJyxcclxuICAgICAgJ0RvIGtvcmVrY2ppIGtvbG9yw7N3LCBhYnkgYmlhxYJ5IHd5Z2zEhWRhxYIgbmEgYmlhxYJ5IG5pZXphbGXFvG5pZSBvZCDFunLDs2TFgmEgxZt3aWF0xYJhJyxcclxuICAgICAgJ0RvIHVzdGF3aWFuaWEgY3phc3UgbmHFm3dpZXRsYW5pYScsXHJcbiAgICAgICdEbyBkb2Rhd2FuaWEgZWZla3TDs3cgc3BlY2phbG55Y2gnLFxyXG4gICAgXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDEsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjpcclxuICAgICAgJ0t0w7NyeSBwcm90b2vDs8WCIGplc3QgdcW8eXdhbnkgZG8gYmV6cGllY3puZWdvIChzenlmcm93YW5lZ28pIHByemVzecWCYW5pYSBzdHJvbiBpbnRlcm5ldG93eWNoPycsXHJcbiAgICBvcHRpb25zOiBbJ0hUVFAnLCAnRlRQJywgJ1NNVFAnLCAnSFRUUFMnXSxcclxuICAgIGNvcnJlY3RBbnN3ZXI6IDMsXHJcbiAgfSxcclxuICB7XHJcbiAgICBxdWVzdGlvbjogJ0NvIHRvIGplc3Qgem1pZW5uYSB3IHByb2dyYW1vd2FuaXU/JyxcclxuICAgIG9wdGlvbnM6IFtcclxuICAgICAgJ0Z1bmtjamEgd3lrb251asSFY2Egb2tyZcWbbG9uZSB6YWRhbmllJyxcclxuICAgICAgJ1R5cCBwxJl0bGknLFxyXG4gICAgICAnTmF6d2FuZSBtaWVqc2NlIHcgcGFtacSZY2kga29tcHV0ZXJhIHPFgnXFvMSFY2UgZG8gcHJ6ZWNob3d5d2FuaWEgZGFueWNoJyxcclxuICAgICAgJ1BvbGVjZW5pZSB3ecWbd2lldGxhasSFY2UgdGVrc3QgbmEgZWtyYW5pZScsXHJcbiAgICBdLFxyXG4gICAgY29ycmVjdEFuc3dlcjogMixcclxuICB9LFxyXG4gIC8vIERvZGFqIHdpxJljZWogcHl0YcWEIHR1dGFqXHJcbl07XHJcbiIsIi8vIHNyYy9VSS9VSU1hbmFnZXIuanNcclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJzsgLy8g0KDQsNGB0LrQvtC80LzQtdC90YLQuNGA0YPQudGC0LUsINC10YHQu9C4INC90YPQttC90L4g0LTQu9GPINC70L7Qs9C40LrQuCDQstC90YPRgtGA0LggVUlNYW5hZ2VyXHJcblxyXG5leHBvcnQgY2xhc3MgVUlNYW5hZ2VyIHtcclxuICBzdGF0aWMgc2NvcmVFbGVtZW50ID0gbnVsbDtcclxuICBzdGF0aWMgdGFyZ2V0RWxlbWVudCA9IG51bGw7XHJcbiAgc3RhdGljIGNvbnRyb2xzQ29udGFpbmVyID0gbnVsbDtcclxuICBzdGF0aWMgcXVlc3Rpb25PdmVybGF5ID0gbnVsbDtcclxuICBzdGF0aWMgcXVlc3Rpb25UZXh0RWxlbWVudCA9IG51bGw7XHJcbiAgc3RhdGljIGFuc3dlckJ1dHRvbnNDb250YWluZXIgPSBudWxsO1xyXG4gIHN0YXRpYyBmbG9vclNlbGVjdGlvblBhbmVsID0gbnVsbDtcclxuICBzdGF0aWMgZmxvb3JCdXR0b25zQ29udGFpbmVyID0gbnVsbDtcclxuICBzdGF0aWMgZmxhc2hNZXNzYWdlQ29udGFpbmVyID0gbnVsbDtcclxuICBzdGF0aWMgbG9hZGluZ092ZXJsYXlFbGVtZW50ID0gbnVsbDsgLy8g0JTQu9GPINC60Y3RiNC40YDQvtCy0LDQvdC40Y8g0Y3Qu9C10LzQtdC90YLQsFxyXG5cclxuICAvLyDQrdC70LXQvNC10L3RgtGLINC00LvRjyDRjdC60YDQsNC90LAgR2FtZSBPdmVyXHJcbiAgc3RhdGljIGdhbWVPdmVyU2NyZWVuRWxlbWVudCA9IG51bGw7XHJcbiAgc3RhdGljIGdhbWVPdmVyVGl0bGVFbGVtZW50ID0gbnVsbDtcclxuICBzdGF0aWMgY3JlYXRvck5hbWVzTGlzdEVsZW1lbnQgPSBudWxsO1xyXG4gIHN0YXRpYyBjbGFzc0luZm9FbGVtZW50ID0gbnVsbDtcclxuICBzdGF0aWMgcmV0dXJuVG9NZW51QnV0dG9uRWxlbWVudCA9IG51bGw7XHJcblxyXG4gIHN0YXRpYyBnYW1lcGxheU1hbmFnZXJJbnN0YW5jZSA9IG51bGw7IC8vINCh0YHRi9C70LrQsCDQvdCwIEdhbWVwbGF5TWFuYWdlclxyXG4gIHN0YXRpYyBmbGFzaE1lc3NhZ2VUaW1lb3V0cyA9IHt9O1xyXG5cclxuICAvKipcclxuICAgKiDQktGL0LfRi9Cy0LDQtdGC0YHRjyDQuNC3IEdhbWUuanMg0LTQu9GPINGA0LXQs9C40YHRgtGA0LDRhtC40Lgg0Y3QutC30LXQvNC/0LvRj9GA0LAgR2FtZXBsYXlNYW5hZ2VyLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBzZXRHYW1lcGxheU1hbmFnZXIobWFuYWdlcikge1xyXG4gICAgaWYgKCFtYW5hZ2VyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tVSU1hbmFnZXJdIEF0dGVtcHRlZCB0byBzZXQgR2FtZXBsYXlNYW5hZ2VyIGluc3RhbmNlIHRvIG51bGwgb3IgdW5kZWZpbmVkIScpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmdhbWVwbGF5TWFuYWdlckluc3RhbmNlID0gbWFuYWdlcjtcclxuICAgIGNvbnNvbGUubG9nKCdbVUlNYW5hZ2VyXSBHYW1lcGxheU1hbmFnZXIgaW5zdGFuY2UgcmVnaXN0ZXJlZCBzdWNjZXNzZnVsbHkgd2l0aCBVSU1hbmFnZXIuJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDQmNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdGCINCx0LDQt9C+0LLRi9C1INGN0LvQtdC80LXQvdGC0YsgVUkuXHJcbiAgICogR2FtZS5qcyDQtNC+0LvQttC10L0g0LLRi9C30LLQsNGC0Ywgc2V0R2FtZXBsYXlNYW5hZ2VyINCf0JXQoNCV0JQg0Y3RgtC40Lwg0LzQtdGC0L7QtNC+0LwuXHJcbiAgICovXHJcbiAgc3RhdGljIGluaXRpYWxpemVVSShpbnB1dE1hbmFnZXIpIHtcclxuICAgIGNvbnNvbGUubG9nKCdbVUlNYW5hZ2VyXSBJbml0aWFsaXppbmcgYmFzZSBVSSBlbGVtZW50cyAoY29udHJvbHMsIHBhbmVscykuLi4nKTtcclxuICAgIGlmICghaW5wdXRNYW5hZ2VyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tVSU1hbmFnZXJdIElucHV0TWFuYWdlciBpcyByZXF1aXJlZCBmb3IgaW5pdGlhbGl6ZVVJIHRvIGNyZWF0ZSBjb250cm9scy4nKTtcclxuICAgIH1cclxuICAgIHRoaXMuY3JlYXRlQ29udHJvbHMoaW5wdXRNYW5hZ2VyKTtcclxuICAgIHRoaXMuY3JlYXRlUXVlc3Rpb25VSSgpO1xyXG4gICAgdGhpcy5jcmVhdGVGbG9vclNlbGVjdGlvblVJKCk7XHJcbiAgICB0aGlzLmVuc3VyZUZsYXNoTWVzc2FnZUNvbnRhaW5lcigpO1xyXG4gICAgdGhpcy5jcmVhdGVHYW1lT3ZlclNjcmVlbigpOyAvLyDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRjdC60YDQsNC90LAgR2FtZSBPdmVyXHJcblxyXG4gICAgaWYgKCF0aGlzLmdhbWVwbGF5TWFuYWdlckluc3RhbmNlKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAnW1VJTWFuYWdlcl0gV0FSTklORzogR2FtZXBsYXlNYW5hZ2VyIGluc3RhbmNlIGlzIE5PVCBTRVQgYXQgdGhlIGVuZCBvZiBpbml0aWFsaXplVUkuICcgK1xyXG4gICAgICAgICAgJ0Vuc3VyZSBHYW1lLmpzIGNhbGxzIFVJTWFuYWdlci5zZXRHYW1lcGxheU1hbmFnZXIoKSAqYmVmb3JlKiBVSU1hbmFnZXIuaW5pdGlhbGl6ZVVJKCkuJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coJ1tVSU1hbmFnZXJdIEJhc2UgVUkgZWxlbWVudCBpbml0aWFsaXphdGlvbiBjb21wbGV0ZS4nKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVDb250cm9scyhpbnB1dE1hbmFnZXIpIHtcclxuICAgIHRoaXMuY29udHJvbHNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbHMtY29udGFpbmVyJyk7XHJcbiAgICBpZiAoIXRoaXMuY29udHJvbHNDb250YWluZXIpIHtcclxuICAgICAgdGhpcy5jb250cm9sc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLmNvbnRyb2xzQ29udGFpbmVyLmlkID0gJ2NvbnRyb2xzLWNvbnRhaW5lcic7XHJcbiAgICAgIHRoaXMuY29udHJvbHNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnY29udHJvbHMtY29udGFpbmVyJyk7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jb250cm9sc0NvbnRhaW5lcik7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbnRyb2xzQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIGNvbnN0IGFycm93cyA9IFtcclxuICAgICAgeyBkaXJlY3Rpb246ICd1cCcsIGljb246ICfihpEnLCBncmlkQXJlYTogJ3VwJyB9LFxyXG4gICAgICB7IGRpcmVjdGlvbjogJ2xlZnQnLCBpY29uOiAn4oaQJywgZ3JpZEFyZWE6ICdsZWZ0JyB9LFxyXG4gICAgICB7IGRpcmVjdGlvbjogJ3JpZ2h0JywgaWNvbjogJ+KGkicsIGdyaWRBcmVhOiAncmlnaHQnIH0sXHJcbiAgICAgIHsgZGlyZWN0aW9uOiAnZG93bicsIGljb246ICfihpMnLCBncmlkQXJlYTogJ2Rvd24nIH0sXHJcbiAgICBdO1xyXG5cclxuICAgIGFycm93cy5mb3JFYWNoKCh7IGRpcmVjdGlvbiwgaWNvbiwgZ3JpZEFyZWEgfSkgPT4ge1xyXG4gICAgICBjb25zdCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgYnRuLmNsYXNzTmFtZSA9IGBjb250cm9sLWJ0biAke2RpcmVjdGlvbn1gO1xyXG4gICAgICBidG4udGV4dENvbnRlbnQgPSBpY29uO1xyXG4gICAgICBidG4uc3R5bGUuZ3JpZEFyZWEgPSBncmlkQXJlYTtcclxuICAgICAgYnRuLmRhdGFzZXQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG5cclxuICAgICAgaWYgKGlucHV0TWFuYWdlcikge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0UHJlc3MgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgaW5wdXRNYW5hZ2VyLnNldEtleShkaXJlY3Rpb24sIHRydWUpO1xyXG4gICAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZW5kUHJlc3MgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGlucHV0TWFuYWdlci5rZXlzW2RpcmVjdGlvbl0pIHtcclxuICAgICAgICAgICAgaW5wdXRNYW5hZ2VyLnNldEtleShkaXJlY3Rpb24sIGZhbHNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgc3RhcnRQcmVzcywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBlbmRQcmVzcywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBlbmRQcmVzcywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3RhcnRQcmVzcyk7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBlbmRQcmVzcyk7XHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBlbmRQcmVzcyk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5jb250cm9sc0NvbnRhaW5lci5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qgc2NvcmVEaXNwbGF5Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Njb3JlLWRpc3BsYXknKTtcclxuICAgIGlmICghc2NvcmVEaXNwbGF5Q29udGFpbmVyKSB7XHJcbiAgICAgIGNvbnN0IHNjb3JlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHNjb3JlRGl2LmlkID0gJ3Njb3JlLWRpc3BsYXknO1xyXG4gICAgICBzY29yZURpdi5jbGFzc0xpc3QuYWRkKCdzY29yZS1kaXNwbGF5Jyk7XHJcbiAgICAgIHNjb3JlRGl2LmlubmVySFRNTCA9IGBCb29rczogPHNwYW4gaWQ9XCJzY29yZS12YWx1ZVwiPjA8L3NwYW4+IC8gPHNwYW4gaWQ9XCJzY29yZS10YXJnZXRcIj4/PC9zcGFuPmA7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NvcmVEaXYpO1xyXG4gICAgICB0aGlzLnNjb3JlRWxlbWVudCA9IHNjb3JlRGl2LnF1ZXJ5U2VsZWN0b3IoJyNzY29yZS12YWx1ZScpO1xyXG4gICAgICB0aGlzLnRhcmdldEVsZW1lbnQgPSBzY29yZURpdi5xdWVyeVNlbGVjdG9yKCcjc2NvcmUtdGFyZ2V0Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNjb3JlRWxlbWVudCA9IHNjb3JlRGlzcGxheUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc2NvcmUtdmFsdWUnKTtcclxuICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gc2NvcmVEaXNwbGF5Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNzY29yZS10YXJnZXQnKTtcclxuICAgICAgaWYgKHRoaXMuc2NvcmVFbGVtZW50KSB0aGlzLnNjb3JlRWxlbWVudC50ZXh0Q29udGVudCA9ICcwJztcclxuICAgICAgaWYgKHRoaXMudGFyZ2V0RWxlbWVudCkgdGhpcy50YXJnZXRFbGVtZW50LnRleHRDb250ZW50ID0gJz8nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZVF1ZXN0aW9uVUkoKSB7XHJcbiAgICB0aGlzLnF1ZXN0aW9uT3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWVzdGlvbi1vdmVybGF5Jyk7XHJcbiAgICBpZiAoIXRoaXMucXVlc3Rpb25PdmVybGF5KSB7XHJcbiAgICAgIHRoaXMucXVlc3Rpb25PdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRoaXMucXVlc3Rpb25PdmVybGF5LmlkID0gJ3F1ZXN0aW9uLW92ZXJsYXknO1xyXG4gICAgICB0aGlzLnF1ZXN0aW9uT3ZlcmxheS5jbGFzc0xpc3QuYWRkKCd1aS1wYW5lbCcpO1xyXG4gICAgICB0aGlzLnF1ZXN0aW9uT3ZlcmxheS5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGRpdiBpZD1cImJsYWNrYm9hcmQtY29udGVudFwiPlxyXG4gICAgICAgICAgPGgyPlF1ZXN0aW9uPC9oMj5cclxuICAgICAgICAgIDxkaXYgaWQ9XCJxdWVzdGlvbi1ib3hcIj5cclxuICAgICAgICAgICAgPHAgaWQ9XCJxdWVzdGlvbi10ZXh0XCI+PC9wPlxyXG4gICAgICAgICAgICA8ZGl2IGlkPVwiYW5zd2VyLWJ1dHRvbnNcIj48L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PmA7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5xdWVzdGlvbk92ZXJsYXkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5xdWVzdGlvblRleHRFbGVtZW50ID0gdGhpcy5xdWVzdGlvbk92ZXJsYXkucXVlcnlTZWxlY3RvcignI3F1ZXN0aW9uLXRleHQnKTtcclxuICAgIHRoaXMuYW5zd2VyQnV0dG9uc0NvbnRhaW5lciA9IHRoaXMucXVlc3Rpb25PdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJyNhbnN3ZXItYnV0dG9ucycpO1xyXG4gICAgaWYgKCF0aGlzLnF1ZXN0aW9uVGV4dEVsZW1lbnQgfHwgIXRoaXMuYW5zd2VyQnV0dG9uc0NvbnRhaW5lcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbVUlNYW5hZ2VyXSBGYWlsZWQgdG8gZmluZC9jcmVhdGUgY2hpbGQgZWxlbWVudHMgb2YgcXVlc3Rpb24gVUkhJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY3JlYXRlRmxvb3JTZWxlY3Rpb25VSSgpIHtcclxuICAgIHRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbG9vci1zZWxlY3Rpb24tdWknKTtcclxuICAgIGlmICghdGhpcy5mbG9vclNlbGVjdGlvblBhbmVsKSB7XHJcbiAgICAgIHRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwuaWQgPSAnZmxvb3Itc2VsZWN0aW9uLXVpJztcclxuICAgICAgdGhpcy5mbG9vclNlbGVjdGlvblBhbmVsLmNsYXNzTGlzdC5hZGQoJ3VpLXBhbmVsJyk7XHJcbiAgICAgIHRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbC5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGgyPlNlbGVjdCBGbG9vcjwvaDI+XHJcbiAgICAgICAgPGRpdiBpZD1cImZsb29yLWJ1dHRvbnMtY29udGFpbmVyXCI+PC9kaXY+YDtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5mbG9vckJ1dHRvbnNDb250YWluZXIgPSB0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwucXVlcnlTZWxlY3RvcignI2Zsb29yLWJ1dHRvbnMtY29udGFpbmVyJyk7XHJcbiAgICBpZiAoIXRoaXMuZmxvb3JCdXR0b25zQ29udGFpbmVyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tVSU1hbmFnZXJdIEZhaWxlZCB0byBmaW5kL2NyZWF0ZSBmbG9vciBidXR0b25zIGNvbnRhaW5lciEnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBlbnN1cmVGbGFzaE1lc3NhZ2VDb250YWluZXIoKSB7XHJcbiAgICB0aGlzLmZsYXNoTWVzc2FnZUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbGFzaC1tZXNzYWdlLWNvbnRhaW5lcicpO1xyXG4gICAgaWYgKCF0aGlzLmZsYXNoTWVzc2FnZUNvbnRhaW5lcikge1xyXG4gICAgICB0aGlzLmZsYXNoTWVzc2FnZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLmZsYXNoTWVzc2FnZUNvbnRhaW5lci5pZCA9ICdmbGFzaC1tZXNzYWdlLWNvbnRhaW5lcic7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5mbGFzaE1lc3NhZ2VDb250YWluZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuZmxhc2hNZXNzYWdlQ29udGFpbmVyO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZsYXNoTWVzc2FnZShtZXNzYWdlLCB0eXBlID0gJ2luZm8nLCBkdXJhdGlvbiA9IDMwMDApIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZW5zdXJlRmxhc2hNZXNzYWdlQ29udGFpbmVyKCk7XHJcbiAgICBpZiAoIWNvbnRhaW5lcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbVUlNYW5hZ2VyXSBGbGFzaCBtZXNzYWdlIGNvbnRhaW5lciBub3QgZm91bmQgb3IgY3JlYXRhYmxlLicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBtZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbWVzc2FnZUVsZW1lbnQudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xyXG4gICAgbWVzc2FnZUVsZW1lbnQuY2xhc3NOYW1lID0gJ2ZsYXNoLW1lc3NhZ2UnO1xyXG4gICAgbWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChgZmxhc2gtJHt0eXBlfWApO1xyXG4gICAgY29uc3QgbWVzc2FnZUlkID0gYGZsYXNoLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgNSl9YDtcclxuICAgIG1lc3NhZ2VFbGVtZW50LmlkID0gbWVzc2FnZUlkO1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1lc3NhZ2VFbGVtZW50KTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgIG1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgIH0pO1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZmxhc2hNZXNzYWdlVGltZW91dHNbbWVzc2FnZUlkXSk7XHJcbiAgICBjb25zdCByZW1vdmVFbGVtZW50ID0gKCkgPT4ge1xyXG4gICAgICBtZXNzYWdlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICAgIGNvbnN0IGhhbmRsZVRyYW5zaXRpb25FbmQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQucHJvcGVydHlOYW1lID09PSAnb3BhY2l0eScgfHwgZXZlbnQucHJvcGVydHlOYW1lID09PSAndHJhbnNmb3JtJykge1xyXG4gICAgICAgICAgaWYgKG1lc3NhZ2VFbGVtZW50LnBhcmVudE5vZGUpIG1lc3NhZ2VFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobWVzc2FnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgZGVsZXRlIHRoaXMuZmxhc2hNZXNzYWdlVGltZW91dHNbbWVzc2FnZUlkXTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIG1lc3NhZ2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVUcmFuc2l0aW9uRW5kLCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlRWxlbWVudC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICBtZXNzYWdlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgaGFuZGxlVHJhbnNpdGlvbkVuZCk7XHJcbiAgICAgICAgICBtZXNzYWdlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG1lc3NhZ2VFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuZmxhc2hNZXNzYWdlVGltZW91dHNbbWVzc2FnZUlkXTtcclxuICAgICAgfSwgNTAwKTtcclxuICAgIH07XHJcbiAgICB0aGlzLmZsYXNoTWVzc2FnZVRpbWVvdXRzW21lc3NhZ2VJZF0gPSBzZXRUaW1lb3V0KHJlbW92ZUVsZW1lbnQsIGR1cmF0aW9uKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRMb2FkaW5nT3ZlcmxheSgpIHtcclxuICAgIGlmICghdGhpcy5sb2FkaW5nT3ZlcmxheUVsZW1lbnQpIHtcclxuICAgICAgdGhpcy5sb2FkaW5nT3ZlcmxheUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGluZy1vdmVybGF5Jyk7XHJcbiAgICAgIGlmICghdGhpcy5sb2FkaW5nT3ZlcmxheUVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdPdmVybGF5RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ092ZXJsYXlFbGVtZW50LmlkID0gJ2xvYWRpbmctb3ZlcmxheSc7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nT3ZlcmxheUVsZW1lbnQuY2xhc3NOYW1lID0gJ2xvYWRpbmctb3ZlcmxheSc7XHJcbiAgICAgICAgY29uc3QgbG9hZGluZ1RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgbG9hZGluZ1RleHQudGV4dENvbnRlbnQgPSAnTG9hZGluZy4uLic7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nT3ZlcmxheUVsZW1lbnQuYXBwZW5kQ2hpbGQobG9hZGluZ1RleHQpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5sb2FkaW5nT3ZlcmxheUVsZW1lbnQpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdbVUlNYW5hZ2VyXSBMb2FkaW5nIG92ZXJsYXkgY3JlYXRlZCBhbmQgYXBwZW5kZWQgdG8gYm9keS4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMubG9hZGluZ092ZXJsYXlFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZUdhbWVPdmVyU2NyZWVuKCkge1xyXG4gICAgdGhpcy5nYW1lT3ZlclNjcmVlbkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1vdmVyLXNjcmVlbicpO1xyXG4gICAgaWYgKCF0aGlzLmdhbWVPdmVyU2NyZWVuRWxlbWVudCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbVUlNYW5hZ2VyXSBDUklUSUNBTDogI2dhbWUtb3Zlci1zY3JlZW4gZWxlbWVudCBub3QgZm91bmQgaW4gSFRNTCEnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5nYW1lT3ZlclRpdGxlRWxlbWVudCA9IHRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYW1lLW92ZXItdGl0bGUnKTtcclxuICAgIHRoaXMuY3JlYXRvck5hbWVzTGlzdEVsZW1lbnQgPSB0aGlzLmdhbWVPdmVyU2NyZWVuRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjY3JlYXRvci1uYW1lcycpO1xyXG4gICAgdGhpcy5jbGFzc0luZm9FbGVtZW50ID0gdGhpcy5nYW1lT3ZlclNjcmVlbkVsZW1lbnQucXVlcnlTZWxlY3RvcignI2NsYXNzLWluZm8nKTtcclxuICAgIHRoaXMucmV0dXJuVG9NZW51QnV0dG9uRWxlbWVudCA9XHJcbiAgICAgIHRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXR1cm4tdG8tbWVudS1idXR0b24nKTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgICF0aGlzLmdhbWVPdmVyVGl0bGVFbGVtZW50IHx8XHJcbiAgICAgICF0aGlzLmNyZWF0b3JOYW1lc0xpc3RFbGVtZW50IHx8XHJcbiAgICAgICF0aGlzLmNsYXNzSW5mb0VsZW1lbnQgfHxcclxuICAgICAgIXRoaXMucmV0dXJuVG9NZW51QnV0dG9uRWxlbWVudFxyXG4gICAgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgJ1tVSU1hbmFnZXJdIEZhaWxlZCB0byBmaW5kIG9uZSBvciBtb3JlIGNoaWxkIGVsZW1lbnRzIG9mIHRoZSBnYW1lIG92ZXIgc2NyZWVuISdcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmV0dXJuVG9NZW51QnV0dG9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZygnW1VJTWFuYWdlcl0gR2FtZSBPdmVyIHNjcmVlbiBlbGVtZW50cyBpbml0aWFsaXplZC4nKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzaG93R2FtZU92ZXJTY3JlZW4oaXNXaW4sIGNyZWF0b3JzID0gW10sIGNsYXNzSW5mb1RleHQgPSAnJykge1xyXG4gICAgaWYgKFxyXG4gICAgICAhdGhpcy5nYW1lT3ZlclNjcmVlbkVsZW1lbnQgfHxcclxuICAgICAgIXRoaXMuZ2FtZU92ZXJUaXRsZUVsZW1lbnQgfHxcclxuICAgICAgIXRoaXMuY3JlYXRvck5hbWVzTGlzdEVsZW1lbnQgfHxcclxuICAgICAgIXRoaXMuY2xhc3NJbmZvRWxlbWVudFxyXG4gICAgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tVSU1hbmFnZXJdIEdhbWUgT3ZlciBTY3JlZW4gbm90IGZ1bGx5IGluaXRpYWxpemVkLiBDYW5ub3Qgc2hvdy4nKTtcclxuICAgICAgdGhpcy5jcmVhdGVHYW1lT3ZlclNjcmVlbigpO1xyXG4gICAgICBpZiAoIXRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50KSByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzV2luKSB7XHJcbiAgICAgIHRoaXMuZ2FtZU92ZXJUaXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSAnQ29uZ3JhdHVsYXRpb25zISBZb3UgRXNjYXBlZCEnO1xyXG4gICAgICB0aGlzLmdhbWVPdmVyVGl0bGVFbGVtZW50LmNsYXNzTmFtZSA9ICd3aW4tdGl0bGUnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5nYW1lT3ZlclRpdGxlRWxlbWVudC50ZXh0Q29udGVudCA9ICdHYW1lIE92ZXInO1xyXG4gICAgICB0aGlzLmdhbWVPdmVyVGl0bGVFbGVtZW50LmNsYXNzTmFtZSA9ICdsb3NlLXRpdGxlJztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNyZWF0b3JOYW1lc0xpc3RFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgY3JlYXRvcnMuZm9yRWFjaCgobmFtZSkgPT4ge1xyXG4gICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgIGxpLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgICAgdGhpcy5jcmVhdG9yTmFtZXNMaXN0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmNsYXNzSW5mb0VsZW1lbnQudGV4dENvbnRlbnQgPSBjbGFzc0luZm9UZXh0O1xyXG5cclxuICAgIHRoaXMuZ2FtZU92ZXJTY3JlZW5FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICAgIC8vINCt0YLQuCBVSSDRg9C20LUg0LTQvtC70LbQvdGLINCx0YvRgtGMINGB0LrRgNGL0YLRiyDRh9C10YDQtdC3IGhpZGVHYW1lVUksINC90L4g0LTQu9GPINC90LDQtNC10LbQvdC+0YHRgtC4OlxyXG4gICAgdGhpcy5oaWRlR2FtZVVJKCk7XHJcbiAgICB0aGlzLmhpZGVRdWVzdGlvbigpO1xyXG4gICAgdGhpcy5oaWRlRmxvb3JTZWxlY3Rpb25VSSgpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhpZGVHYW1lT3ZlclNjcmVlbigpIHtcclxuICAgIGlmICh0aGlzLmdhbWVPdmVyU2NyZWVuRWxlbWVudCkge1xyXG4gICAgICB0aGlzLmdhbWVPdmVyU2NyZWVuRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2hvd1F1ZXN0aW9uKHF1ZXN0aW9uRGF0YSkge1xyXG4gICAgaWYgKCF0aGlzLnF1ZXN0aW9uT3ZlcmxheSB8fCAhdGhpcy5xdWVzdGlvblRleHRFbGVtZW50IHx8ICF0aGlzLmFuc3dlckJ1dHRvbnNDb250YWluZXIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gUXVlc3Rpb24gVUkgbm90IHJlYWR5LicpO1xyXG4gICAgICB0aGlzLmNyZWF0ZVF1ZXN0aW9uVUkoKTtcclxuICAgICAgaWYgKCF0aGlzLnF1ZXN0aW9uT3ZlcmxheSB8fCAhdGhpcy5xdWVzdGlvblRleHRFbGVtZW50IHx8ICF0aGlzLmFuc3dlckJ1dHRvbnNDb250YWluZXIpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFxdWVzdGlvbkRhdGEpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1VJTWFuYWdlcl0gQ2Fubm90IHNob3cgcXVlc3Rpb24gLSBubyBxdWVzdGlvbkRhdGEgcHJvdmlkZWQuJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgIXRoaXMuZ2FtZXBsYXlNYW5hZ2VySW5zdGFuY2UgfHxcclxuICAgICAgdHlwZW9mIHRoaXMuZ2FtZXBsYXlNYW5hZ2VySW5zdGFuY2UuaGFuZGxlQW5zd2VyICE9PSAnZnVuY3Rpb24nXHJcbiAgICApIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAnW1VJTWFuYWdlcl0gQ1JJVElDQUw6IEdhbWVwbGF5TWFuYWdlciBvciBpdHMgaGFuZGxlQW5zd2VyIG1ldGhvZCBpcyBub3Qgc2V0IG9yIGludmFsaWQhJ1xyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmZsYXNoTWVzc2FnZSgnRXJyb3I6IEdhbWUgaW50ZXJhY3Rpb24gc3lzdGVtIGZhaWxlZCAoUSkuJywgJ2Vycm9yJywgNTAwMCk7XHJcbiAgICAgIHRoaXMuaGlkZVF1ZXN0aW9uKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnF1ZXN0aW9uVGV4dEVsZW1lbnQudGV4dENvbnRlbnQgPSBxdWVzdGlvbkRhdGEucXVlc3Rpb247XHJcbiAgICB0aGlzLmFuc3dlckJ1dHRvbnNDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgcXVlc3Rpb25EYXRhLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uVGV4dCwgaW5kZXgpID0+IHtcclxuICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IG9wdGlvblRleHQ7XHJcbiAgICAgIGJ1dHRvbi5kYXRhc2V0LmluZGV4ID0gaW5kZXg7XHJcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhbnN3ZXItYnV0dG9uJyk7XHJcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IHBhcnNlSW50KGUudGFyZ2V0LmRhdGFzZXQuaW5kZXgsIDEwKTtcclxuICAgICAgICB0aGlzLmdhbWVwbGF5TWFuYWdlckluc3RhbmNlLmhhbmRsZUFuc3dlcihzZWxlY3RlZEluZGV4KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuYW5zd2VyQnV0dG9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnF1ZXN0aW9uT3ZlcmxheS5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGlkZVF1ZXN0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMucXVlc3Rpb25PdmVybGF5KSB7XHJcbiAgICAgIHRoaXMucXVlc3Rpb25PdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgICAgaWYgKHRoaXMucXVlc3Rpb25UZXh0RWxlbWVudCkgdGhpcy5xdWVzdGlvblRleHRFbGVtZW50LnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgIGlmICh0aGlzLmFuc3dlckJ1dHRvbnNDb250YWluZXIpIHRoaXMuYW5zd2VyQnV0dG9uc0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBzaG93Rmxvb3JTZWxlY3Rpb25VSShtaW5GbG9vciwgbWF4Rmxvb3IsIGN1cnJlbnRGbG9vcikge1xyXG4gICAgaWYgKCF0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwgfHwgIXRoaXMuZmxvb3JCdXR0b25zQ29udGFpbmVyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tVSU1hbmFnZXJdIEZsb29yIHNlbGVjdGlvbiBVSSBub3QgcmVhZHkuJyk7XHJcbiAgICAgIHRoaXMuY3JlYXRlRmxvb3JTZWxlY3Rpb25VSSgpO1xyXG4gICAgICBpZiAoIXRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbCB8fCAhdGhpcy5mbG9vckJ1dHRvbnNDb250YWluZXIpIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgIXRoaXMuZ2FtZXBsYXlNYW5hZ2VySW5zdGFuY2UgfHxcclxuICAgICAgdHlwZW9mIHRoaXMuZ2FtZXBsYXlNYW5hZ2VySW5zdGFuY2UuaGFuZGxlRmxvb3JTZWxlY3Rpb24gIT09ICdmdW5jdGlvbidcclxuICAgICkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdbVUlNYW5hZ2VyXSBDUklUSUNBTDogR2FtZXBsYXlNYW5hZ2VyIG9yIGl0cyBoYW5kbGVGbG9vclNlbGVjdGlvbiBtZXRob2QgaXMgbm90IHNldCBvciBpbnZhbGlkISdcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5mbGFzaE1lc3NhZ2UoJ0Vycm9yOiBHYW1lIGludGVyYWN0aW9uIHN5c3RlbSBmYWlsZWQgKEYpLicsICdlcnJvcicsIDUwMDApO1xyXG4gICAgICB0aGlzLmhpZGVGbG9vclNlbGVjdGlvblVJKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZsb29yQnV0dG9uc0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgIGZvciAobGV0IGZsb29yID0gbWluRmxvb3I7IGZsb29yIDw9IG1heEZsb29yOyBmbG9vcisrKSB7XHJcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICBidXR0b24udGV4dENvbnRlbnQgPSBgRmxvb3IgJHtmbG9vcn1gO1xyXG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnZmxvb3ItYnV0dG9uJyk7XHJcbiAgICAgIGJ1dHRvbi5kYXRhc2V0LmZsb29yID0gZmxvb3I7XHJcbiAgICAgIGlmIChmbG9vciA9PT0gY3VycmVudEZsb29yKSB7XHJcbiAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnY3VycmVudCcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuZ2FtZXBsYXlNYW5hZ2VySW5zdGFuY2UuaGFuZGxlRmxvb3JTZWxlY3Rpb24oZmxvb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZmxvb3JCdXR0b25zQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhpZGVGbG9vclNlbGVjdGlvblVJKCkge1xyXG4gICAgaWYgKHRoaXMuZmxvb3JTZWxlY3Rpb25QYW5lbCkge1xyXG4gICAgICB0aGlzLmZsb29yU2VsZWN0aW9uUGFuZWwuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHVwZGF0ZVNjb3JlKHNjb3JlLCB0YXJnZXQpIHtcclxuICAgIGlmICghdGhpcy5zY29yZUVsZW1lbnQpIHRoaXMuc2NvcmVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Njb3JlLXZhbHVlJyk7XHJcbiAgICBpZiAoIXRoaXMudGFyZ2V0RWxlbWVudCkgdGhpcy50YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Njb3JlLXRhcmdldCcpO1xyXG4gICAgaWYgKHRoaXMuc2NvcmVFbGVtZW50KSB0aGlzLnNjb3JlRWxlbWVudC50ZXh0Q29udGVudCA9IHNjb3JlO1xyXG4gICAgaWYgKHRoaXMudGFyZ2V0RWxlbWVudCkgdGhpcy50YXJnZXRFbGVtZW50LnRleHRDb250ZW50ID0gdGFyZ2V0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNob3dHYW1lVUkoKSB7XHJcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKSB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZUNhbnZhcycpO1xyXG4gICAgY29uc3QgbWVudUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZW51LWNvbnRhaW5lcicpO1xyXG4gICAgY29uc3Qgc2NvcmVEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Njb3JlLWRpc3BsYXknKTtcclxuXHJcbiAgICBpZiAoY2FudmFzKSBjYW52YXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICBlbHNlIGNvbnNvbGUud2FybignW1VJTWFuYWdlcl0gQ2FudmFzIGVsZW1lbnQgbm90IGZvdW5kIHRvIHNob3cuJyk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBtZW51Q29udGFpbmVyICYmXHJcbiAgICAgICFtZW51Q29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykgJiZcclxuICAgICAgbWVudUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZSdcclxuICAgICkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ1tVSU1hbmFnZXJdIE1lbnUgY29udGFpbmVyIHdhcyBub3QgaGlkZGVuLiBIaWRpbmcgaXQgbm93IHZpYSBzdHlsZS5kaXNwbGF5LicpO1xyXG4gICAgICBtZW51Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vINCR0L7Qu9C10LUg0L3QsNC00LXQttC90YvQuSDRgdC/0L7RgdC+0LEg0YHQutGA0YvRgtGMXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29udHJvbHNDb250YWluZXIpIHRoaXMuY29udHJvbHNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gICAgZWxzZSBjb25zb2xlLndhcm4oJ1tVSU1hbmFnZXJdIENvbnRyb2xzIGNvbnRhaW5lciBub3QgZm91bmQgdG8gc2hvdy4nKTtcclxuXHJcbiAgICBpZiAoc2NvcmVEaXNwbGF5KSBzY29yZURpc3BsYXkuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gICAgZWxzZSBjb25zb2xlLndhcm4oJ1tVSU1hbmFnZXJdIFNjb3JlIGRpc3BsYXkgbm90IGZvdW5kIHRvIHNob3cuJyk7XHJcblxyXG4gICAgdGhpcy5oaWRlUXVlc3Rpb24oKTtcclxuICAgIHRoaXMuaGlkZUZsb29yU2VsZWN0aW9uVUkoKTtcclxuICAgIHRoaXMuaGlkZUdhbWVPdmVyU2NyZWVuKCk7IC8vINCj0LHQtdC00LjQvNGB0Y8sINGH0YLQviDRjdC60YDQsNC9IEdhbWUgT3ZlciDRgdC60YDRi9GCXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGlkZUdhbWVVSSgpIHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWNhbnZhcycpIHx8IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lQ2FudmFzJyk7XHJcbiAgICBjb25zdCBzY29yZURpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NvcmUtZGlzcGxheScpO1xyXG5cclxuICAgIGlmIChjYW52YXMpIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgaWYgKHRoaXMuY29udHJvbHNDb250YWluZXIpIHRoaXMuY29udHJvbHNDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgaWYgKHNjb3JlRGlzcGxheSkgc2NvcmVEaXNwbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAvLyDQndC1INGB0LrRgNGL0LLQsNC10Lwg0L7QstC10YDQu9C10Lgg0LLQvtC/0YDQvtGB0L7Qsi/RjdGC0LDQttC10LkvR2FtZSBPdmVyINC+0YLRgdGO0LTQsCxcclxuICAgIC8vINGCLtC6LiDQvtC90Lgg0LzQvtCz0YPRgiDQsdGL0YLRjCDQv9C+0LrQsNC30LDQvdGLICrQv9C+0YHQu9C1KiDRgdC60YDRi9GC0LjRjyDQvtGB0L3QvtCy0L3QvtCz0L4g0LjQs9GA0L7QstC+0LPQviBVSS5cclxuICAgIC8vINCY0YUg0YHQutGA0YvRgtC40LUg0LTQvtC70LbQvdC+INGD0L/RgNCw0LLQu9GP0YLRjNGB0Y8g0LrQvtC90LrRgNC10YLQvdGL0LzQuCDRgdC+0YHRgtC+0Y/QvdC40Y/QvNC4INC40LPRgNGLLlxyXG4gIH1cclxufVxyXG4iLCIvLyBzcmMvY29yZS9DaGFyYWN0ZXIuanNcclxuXHJcbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXIge1xyXG4gIC8qKiBTdGF0aWMgb2JqZWN0IGZvciBkaXJlY3Rpb24gY29uc3RhbnRzICovXHJcbiAgc3RhdGljIERpcmVjdGlvbiA9IHtcclxuICAgIERPV046IDAsXHJcbiAgICBSSUdIVDogMSxcclxuICAgIFVQOiAyLFxyXG4gICAgTEVGVDogMyxcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgbmV3IENoYXJhY3RlciBpbnN0YW5jZS5cclxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IC0gVGhlIHJlbmRlcmluZyBjb250ZXh0LlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcHJpdGVVcmwgLSBVUkwgb2YgdGhlIGNoYXJhY3RlcidzIHNwcml0ZSBzaGVldC5cclxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZnJhbWVTaXplPTMyXSAtIFNpemUgb2Ygb25lIGZyYW1lIGluIHRoZSBzcHJpdGUgc2hlZXQgKHBpeGVscykuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmZyYW1lQ291bnQ9NF0gLSBOdW1iZXIgb2YgZnJhbWVzIHBlciBhbmltYXRpb24gY3ljbGUgKHBlciBkaXJlY3Rpb24pLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zY2FsZT0yXSAtIFNjYWxpbmcgZmFjdG9yIGZvciByZW5kZXJpbmcuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNwZWVkPTNdIC0gTW92ZW1lbnQgc3BlZWQgaW4gcGl4ZWxzIHBlciB1cGRhdGUuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmFuaW1hdGlvblNwZWVkPTE1MF0gLSBNaWxsaXNlY29uZHMgcGVyIGFuaW1hdGlvbiBmcmFtZS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY29sbGlzaW9uQm94V2lkdGhSYXRpbz0wLjRdIC0gV2lkdGggb2YgY29sbGlzaW9uIGJveCByZWxhdGl2ZSB0byByZW5kZXJTaXplLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5jb2xsaXNpb25Cb3hIZWlnaHRSYXRpbz0wLjJdIC0gSGVpZ2h0IG9mIGNvbGxpc2lvbiBib3ggcmVsYXRpdmUgdG8gcmVuZGVyU2l6ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY29sbGlzaW9uQm94RmVldE9mZnNldFJhdGlvPTAuNF0gLSBWZXJ0aWNhbCBvZmZzZXQgb2YgY29sbGlzaW9uIGJveCBjZW50ZXIgZnJvbSBjaGFyYWN0ZXIgY2VudGVyICh0b3dhcmRzIGZlZXQpLCByZWxhdGl2ZSB0byByZW5kZXJTaXplLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGN0eCwgc3ByaXRlVXJsLCBvcHRpb25zID0ge30pIHtcclxuICAgIHRoaXMuY3R4ID0gY3R4O1xyXG4gICAgdGhpcy5zcHJpdGUgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICAvLyBDb25maWd1cmF0aW9uIHdpdGggZGVmYXVsdHNcclxuICAgIHRoaXMuZnJhbWVTaXplID0gb3B0aW9ucy5mcmFtZVNpemUgfHwgMzI7XHJcbiAgICB0aGlzLmZyYW1lQ291bnQgPSBvcHRpb25zLmZyYW1lQ291bnQgfHwgNDsgLy8gTnVtYmVyIG9mIGZyYW1lcyBwZXIgZGlyZWN0aW9uXHJcbiAgICB0aGlzLnNjYWxlID0gb3B0aW9ucy5zY2FsZSB8fCAyO1xyXG4gICAgdGhpcy5yZW5kZXJTaXplID0gdGhpcy5mcmFtZVNpemUgKiB0aGlzLnNjYWxlO1xyXG4gICAgdGhpcy5zcGVlZCA9IG9wdGlvbnMuc3BlZWQgfHwgMztcclxuICAgIHRoaXMuYW5pbWF0aW9uU3BlZWQgPSBvcHRpb25zLmFuaW1hdGlvblNwZWVkIHx8IDE1MDsgLy8gbXMgcGVyIGZyYW1lXHJcblxyXG4gICAgLy8gQ29sbGlzaW9uIEJveCBDb25maWd1cmF0aW9uXHJcbiAgICB0aGlzLmNvbGxpc2lvbkJveFdpZHRoUmF0aW8gPSBvcHRpb25zLmNvbGxpc2lvbkJveFdpZHRoUmF0aW8gfHwgMC40O1xyXG4gICAgdGhpcy5jb2xsaXNpb25Cb3hIZWlnaHRSYXRpbyA9IG9wdGlvbnMuY29sbGlzaW9uQm94SGVpZ2h0UmF0aW8gfHwgMC4yO1xyXG4gICAgdGhpcy5jb2xsaXNpb25Cb3hGZWV0T2Zmc2V0UmF0aW8gPSBvcHRpb25zLmNvbGxpc2lvbkJveEZlZXRPZmZzZXRSYXRpbyB8fCAwLjQ7XHJcblxyXG4gICAgLy8gU3RhdGVcclxuICAgIHRoaXMueCA9IDA7IC8vIFdvcmxkIFggY29vcmRpbmF0ZVxyXG4gICAgdGhpcy55ID0gMDsgLy8gV29ybGQgWSBjb29yZGluYXRlXHJcbiAgICB0aGlzLmN1cnJlbnREaXJlY3Rpb24gPSBDaGFyYWN0ZXIuRGlyZWN0aW9uLkRPV047IC8vIFN0YXJ0IGZhY2luZyBkb3duXHJcbiAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IDA7IC8vIEN1cnJlbnQgYW5pbWF0aW9uIGZyYW1lIGluZGV4XHJcbiAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7IC8vIElzIHRoZSBjaGFyYWN0ZXIgY3VycmVudGx5IG1vdmluZz9cclxuICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IDA7IC8vIFRpbWVzdGFtcCBvZiB0aGUgbGFzdCBmcmFtZSB1cGRhdGVcclxuXHJcbiAgICAvLyBMb2FkIHNwcml0ZSBhbmQgYWRkIGhhbmRsZXJzXHJcbiAgICB0aGlzLnNwcml0ZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbQ2hhcmFjdGVyXSBTcHJpdGUgbG9hZGVkIHN1Y2Nlc3NmdWxseTogJHtzcHJpdGVVcmx9YCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zcHJpdGUub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihgW0NoYXJhY3Rlcl0gRmFpbGVkIHRvIGxvYWQgc3ByaXRlOiAke3Nwcml0ZVVybH1gKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnNwcml0ZS5zcmMgPSBzcHJpdGVVcmw7IC8vIFN0YXJ0IGxvYWRpbmdcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGhlIGNoYXJhY3RlcidzIGFuaW1hdGlvbiBmcmFtZSBiYXNlZCBvbiBtb3ZlbWVudCBzdGF0ZSBhbmQgdGltZS5cclxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGluIHRoZSBnYW1lJ3MgdXBkYXRlIGxvb3AuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIFRoZSBjdXJyZW50IGhpZ2gtcmVzb2x1dGlvbiB0aW1lc3RhbXAgKGUuZy4sIGZyb20gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKS5cclxuICAgKi9cclxuICB1cGRhdGVBbmltYXRpb24odGltZXN0YW1wKSB7XHJcbiAgICBpZiAoIXRoaXMuaXNNb3ZpbmcpIHtcclxuICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSAwO1xyXG4gICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSB0aW1lc3RhbXA7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghdGhpcy5sYXN0RnJhbWVUaW1lKSB7XHJcbiAgICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IHRpbWVzdGFtcDtcclxuICAgIH1cclxuICAgIGNvbnN0IGVsYXBzZWQgPSB0aW1lc3RhbXAgLSB0aGlzLmxhc3RGcmFtZVRpbWU7XHJcbiAgICBpZiAoZWxhcHNlZCA+IHRoaXMuYW5pbWF0aW9uU3BlZWQpIHtcclxuICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSAodGhpcy5jdXJyZW50RnJhbWUgKyAxKSAlIHRoaXMuZnJhbWVDb3VudDtcclxuICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gdGltZXN0YW1wO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlcyB0aGUgY29sbGlzaW9uIGJvdW5kaW5nIGJveCBiYXNlZCBvbiBhIHBvdGVudGlhbCBwb3NpdGlvbi5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9zWCAtIFRoZSBwb3RlbnRpYWwgWCBjb29yZGluYXRlIGZvciB0aGUgY29sbGlzaW9uIGNoZWNrLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NZIC0gVGhlIHBvdGVudGlhbCBZIGNvb3JkaW5hdGUgZm9yIHRoZSBjb2xsaXNpb24gY2hlY2suXHJcbiAgICogQHJldHVybnMge3t0b3A6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXJ9fSBUaGUgY29sbGlzaW9uIGJveCBwcm9wZXJ0aWVzLlxyXG4gICAqL1xyXG4gIGdldENvbGxpc2lvbkJveChwb3NYLCBwb3NZKSB7XHJcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMucmVuZGVyU2l6ZSAqIHRoaXMuY29sbGlzaW9uQm94V2lkdGhSYXRpbztcclxuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMucmVuZGVyU2l6ZSAqIHRoaXMuY29sbGlzaW9uQm94SGVpZ2h0UmF0aW87XHJcbiAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XHJcbiAgICBjb25zdCBmZWV0T2Zmc2V0WSA9IHRoaXMucmVuZGVyU2l6ZSAqIHRoaXMuY29sbGlzaW9uQm94RmVldE9mZnNldFJhdGlvO1xyXG4gICAgY29uc3QgdG9wID0gcG9zWSArIGZlZXRPZmZzZXRZIC0gaGVpZ2h0IC8gMjtcclxuICAgIGNvbnN0IGJvdHRvbSA9IHBvc1kgKyBmZWV0T2Zmc2V0WSArIGhlaWdodCAvIDI7XHJcbiAgICBjb25zdCBsZWZ0ID0gcG9zWCAtIGhhbGZXaWR0aDtcclxuICAgIGNvbnN0IHJpZ2h0ID0gcG9zWCArIGhhbGZXaWR0aDtcclxuICAgIHJldHVybiB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCwgd2lkdGgsIGhlaWdodCB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd3MgdGhlIGNoYXJhY3RlciBvbnRvIHRoZSBjYW52YXMgYXQgaXRzIGN1cnJlbnQgcG9zaXRpb24sXHJcbiAgICogY29uc2lkZXJpbmcgdGhlIGNhbWVyYSBvZmZzZXQuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFggLSBUaGUgY2FtZXJhJ3MgWCBvZmZzZXQuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFkgLSBUaGUgY2FtZXJhJ3MgWSBvZmZzZXQuXHJcbiAgICovXHJcbiAgZHJhdyhvZmZzZXRYLCBvZmZzZXRZKSB7XHJcbiAgICBpZiAoIXRoaXMuc3ByaXRlLmNvbXBsZXRlIHx8IHRoaXMuc3ByaXRlLm5hdHVyYWxIZWlnaHQgPT09IDApIHtcclxuICAgICAgcmV0dXJuOyAvLyBEb24ndCBkcmF3IGlmIHNwcml0ZSBpc24ndCByZWFkeVxyXG4gICAgfVxyXG4gICAgY29uc3QgZnJhbWVYID0gdGhpcy5jdXJyZW50RnJhbWUgKiB0aGlzLmZyYW1lU2l6ZTtcclxuICAgIGNvbnN0IGZyYW1lWSA9IHRoaXMuY3VycmVudERpcmVjdGlvbiAqIHRoaXMuZnJhbWVTaXplO1xyXG4gICAgY29uc3Qgc2NyZWVuWCA9IE1hdGguZmxvb3IodGhpcy54IC0gdGhpcy5yZW5kZXJTaXplIC8gMiArIG9mZnNldFgpO1xyXG4gICAgY29uc3Qgc2NyZWVuWSA9IE1hdGguZmxvb3IodGhpcy55IC0gdGhpcy5yZW5kZXJTaXplIC8gMiArIG9mZnNldFkpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcclxuICAgICAgICB0aGlzLnNwcml0ZSxcclxuICAgICAgICBmcmFtZVgsXHJcbiAgICAgICAgZnJhbWVZLFxyXG4gICAgICAgIHRoaXMuZnJhbWVTaXplLFxyXG4gICAgICAgIHRoaXMuZnJhbWVTaXplLCAvLyBTb3VyY2UgcmVjdFxyXG4gICAgICAgIHNjcmVlblgsXHJcbiAgICAgICAgc2NyZWVuWSxcclxuICAgICAgICB0aGlzLnJlbmRlclNpemUsXHJcbiAgICAgICAgdGhpcy5yZW5kZXJTaXplIC8vIERlc3QgcmVjdFxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbQ2hhcmFjdGVyXSBFcnJvciBkcmF3aW5nIHNwcml0ZTonLCBlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gc3JjL21hcC9Cb29rLmpzXHJcbmV4cG9ydCBjbGFzcyBCb29rIHtcclxuICBjb25zdHJ1Y3Rvcih4LCB5LCBpZCwgdGlsZVNpemUpIHtcclxuICAgIHRoaXMueCA9IHg7XHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy50aWxlU2l6ZSA9IHRpbGVTaXplO1xyXG4gICAgdGhpcy5zaXplID0gdGlsZVNpemUgKiAwLjY7XHJcbiAgICB0aGlzLmNvbGxlY3RlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc0NvbGxlY3RlZCA9IGZhbHNlO1xyXG4gIH1cclxuICBkcmF3KGN0eCwgb2Zmc2V0WCwgb2Zmc2V0WSwgYm9va0ltYWdlKSB7XHJcbiAgICBjb25zdCBzY3JlZW5YID0gTWF0aC5mbG9vcih0aGlzLnggKyBvZmZzZXRYIC0gdGhpcy5zaXplIC8gMik7XHJcbiAgICBjb25zdCBzY3JlZW5ZID0gTWF0aC5mbG9vcih0aGlzLnkgKyBvZmZzZXRZIC0gdGhpcy5zaXplIC8gMik7XHJcbiAgICBpZiAoYm9va0ltYWdlKSB7XHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UoYm9va0ltYWdlLCBzY3JlZW5YLCBzY3JlZW5ZLCB0aGlzLnNpemUsIHRoaXMuc2l6ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gJyM4ZDZlNjMnO1xyXG4gICAgICBjdHguZmlsbFJlY3Qoc2NyZWVuWCwgc2NyZWVuWSwgdGhpcy5zaXplLCB0aGlzLnNpemUpO1xyXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzVkNDAzNyc7XHJcbiAgICAgIGN0eC5zdHJva2VSZWN0KHNjcmVlblgsIHNjcmVlblksIHRoaXMuc2l6ZSwgdGhpcy5zaXplKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjZWVlJztcclxuICAgICAgY3R4LmZvbnQgPSBgJHt0aGlzLnNpemUgKiAwLjZ9cHggQXJpYWxgO1xyXG4gICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgICAgY3R4LmZpbGxUZXh0KCc/Jywgc2NyZWVuWCArIHRoaXMuc2l6ZSAvIDIsIHNjcmVlblkgKyB0aGlzLnNpemUgLyAyICsgMik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8vIHNyYy91dGlscy9tYXAuanNcclxuaW1wb3J0IHsgVElMRV9DT1JSSURPUiwgVElMRV9ST09NX0ZMT09SLCBUSUxFX0xJRlQgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7IC8vIFBvdHJ6ZWJuZSBkbyBCRlNcclxuXHJcbi8qKlxyXG4gKiBHZW5lcnVqZSBsb3Nvd8SFIGxpY3pixJkgY2HFgmtvd2l0xIUgeiBwcnplZHppYcWCdSBbbWluLCBtYXhdICh3xYLEhWN6bmllKS5cclxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBEb2xuYSBncmFuaWNhLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IEfDs3JuYSBncmFuaWNhLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBMb3Nvd2EgbGljemJhIGNhxYJrb3dpdGEuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tSW50KG1pbiwgbWF4KSB7XHJcbiAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xyXG59XHJcblxyXG4vKipcclxuICogUHJvc3RhIChuaWVrcnlwdG9ncmFmaWN6bmEpIGZ1bmtjamEgaGFzaHVqxIVjYS5cclxuICogVcW8eXdhbmEgZG8gdXp5c2thbmlhIHBzZXVkb2xvc293ZWosIGFsZSBkZXRlcm1pbmlzdHljem5laiB3YXJ0b8WbY2kgeiBsaWN6YnkgKGtvb3JkeW5hdMOzdykuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzZWVkIFppYXJubyAobnAuIHNrb21iaW5vd2FuZSBrb29yZHluYXR5KS5cclxuICogQHJldHVybnMge251bWJlcn0gQmV6em5ha293YSAzMi1iaXRvd2EgbGljemJhIGNhxYJrb3dpdGEuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlSGFzaChzZWVkKSB7XHJcbiAgbGV0IGggPSBzZWVkIF4gMHhkZWFkYmVlZjsgLy8gWE9SIHogd2FydG/Fm2NpxIUgcG9jesSFdGtvd8SFXHJcbiAgaCA9IE1hdGguaW11bChoIF4gKGggPj4+IDE2KSwgMjI0NjgyMjUwNyk7XHJcbiAgaCA9IE1hdGguaW11bChoIF4gKGggPj4+IDEzKSwgMzI2NjQ4OTkwOSk7XHJcbiAgcmV0dXJuIChoIF49IGggPj4+IDE2KSA+Pj4gMDsgLy8gS29ud2Vyc2phIGRvIGxpY3pieSBiZXogem5ha3UgMzItYml0b3dlalxyXG59XHJcblxyXG4vLyAtLS0gRnVua2NqZSBrb2xvcsOzdyAtLS1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcnVqZSBsb3Nvd3kgb2RjaWXFhCBzemFyb8WbY2kgdyB6YWRhbnltIHpha3Jlc2llIGphc25vxZtjaSAoMC0yNTUpLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbWluQnJpZ2h0bmVzcyBNaW5pbWFsbmEgamFzbm/Fm8SHLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4QnJpZ2h0bmVzcyBNYWtzeW1hbG5hIGphc25vxZvEhy5cclxuICogQHJldHVybnMge3N0cmluZ30gS29sb3IgdyBmb3JtYWNpZSByZ2IoKS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21HcmF5KG1pbkJyaWdodG5lc3MsIG1heEJyaWdodG5lc3MpIHtcclxuICBjb25zdCBicmlnaHRuZXNzID0gcmFuZG9tSW50KG1pbkJyaWdodG5lc3MsIG1heEJyaWdodG5lc3MpO1xyXG4gIHJldHVybiBgcmdiKCR7YnJpZ2h0bmVzc30sJHticmlnaHRuZXNzfSwke2JyaWdodG5lc3N9KWA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcnVqZSBsb3Nvd3kgb2RjaWXFhCBzemFyb8WbY2kgZGxhIGtvcnl0YXJ6eS5cclxuICogQHBhcmFtIHtudW1iZXJ9IG1pbkJyaWdodG5lc3MgTWluaW1hbG5hIGphc25vxZvEhy5cclxuICogQHBhcmFtIHtudW1iZXJ9IG1heEJyaWdodG5lc3MgTWFrc3ltYWxuYSBqYXNub8WbxIcuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEtvbG9yIHcgZm9ybWFjaWUgcmdiKCkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tQ29ycmlkb3JHcmF5KG1pbkJyaWdodG5lc3MsIG1heEJyaWdodG5lc3MpIHtcclxuICAvLyBNb8W8bmEgdcW8ecSHIHRlaiBzYW1laiBsb2dpa2kgY28gcmFuZG9tR3JheSBsdWIgdWN6eW5pxIcgamUgbmllY28gY2llcGxlanN6eW1pL2NoxYJvZG5pZWpzenltaVxyXG4gIGNvbnN0IGJyaWdodG5lc3MgPSByYW5kb21JbnQobWluQnJpZ2h0bmVzcywgbWF4QnJpZ2h0bmVzcyk7XHJcbiAgcmV0dXJuIGByZ2IoJHticmlnaHRuZXNzfSwke2JyaWdodG5lc3N9LCR7YnJpZ2h0bmVzc30pYDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERvc3Rvc293dWplIGphc25vxZvEhyBrb2xvcnUgSEVYIChucC4gJyNSUkdHQkInKS5cclxuICogQHBhcmFtIHtzdHJpbmd9IGhleENvbG9yIEtvbG9yIHcgZm9ybWFjaWUgSEVYLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmFjdG9yIFdzcMOzxYJjenlubmlrIGphc25vxZtjaSAoMS4wID0gYmV6IHptaWFuLCA8MSBjaWVtbmllaiwgPjEgamHFm25pZWopLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBOb3d5IGtvbG9yIHcgZm9ybWFjaWUgSEVYLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkanVzdENvbG9yQnJpZ2h0bmVzcyhoZXhDb2xvciwgZmFjdG9yKSB7XHJcbiAgaWYgKCFoZXhDb2xvciB8fCB0eXBlb2YgaGV4Q29sb3IgIT09ICdzdHJpbmcnIHx8IGhleENvbG9yLmxlbmd0aCA8IDcpIHJldHVybiBoZXhDb2xvcjsgLy8gWndyw7PEhywgamXFm2xpIGtvbG9yIGplc3QgbmllcHJhd2lkxYJvd3lcclxuXHJcbiAgbGV0IHIgPSBwYXJzZUludChoZXhDb2xvci5zbGljZSgxLCAzKSwgMTYpO1xyXG4gIGxldCBnID0gcGFyc2VJbnQoaGV4Q29sb3Iuc2xpY2UoMywgNSksIDE2KTtcclxuICBsZXQgYiA9IHBhcnNlSW50KGhleENvbG9yLnNsaWNlKDUsIDcpLCAxNik7XHJcblxyXG4gIHIgPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIE1hdGgucm91bmQociAqIGZhY3RvcikpKTtcclxuICBnID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKGcgKiBmYWN0b3IpKSk7XHJcbiAgYiA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgTWF0aC5yb3VuZChiICogZmFjdG9yKSkpO1xyXG5cclxuICBjb25zdCBySGV4ID0gci50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKTtcclxuICBjb25zdCBnSGV4ID0gZy50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKTtcclxuICBjb25zdCBiSGV4ID0gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKTtcclxuXHJcbiAgcmV0dXJuIGAjJHtySGV4fSR7Z0hleH0ke2JIZXh9YDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFd5a29udWplIGFsZ29yeXRtIHByemVzenVraXdhbmlhIHdzemVyeiAoQkZTKSBuYSBzaWF0Y2UgbWFweS5cclxuICogTW/FvGUgYnnEhyB1xbx5d2FueSBkbyB6bmFqZG93YW5pYSDFm2NpZcW8a2kgbHViIHNwcmF3ZHphbmlhIG9zacSFZ2Fsbm/Fm2NpLlxyXG4gKiBAcGFyYW0ge251bWJlcltdW119IG1hcEdyaWQgU2lhdGthIG1hcHkgKDJEIGFycmF5IHogd2FydG/Fm2NpYW1pIGthZmVsa8OzdykuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFggUG9jesSFdGtvd2Egd3Nww7PFgnJ6xJlkbmEgWCBrYWZlbGthLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRZIFBvY3rEhXRrb3dhIHdzcMOzxYJyesSZZG5hIFkga2FmZWxrYS5cclxuICogQHBhcmFtIHtudW1iZXJ9IGNvbHMgTGljemJhIGtvbHVtbiB3IG1hcEdyaWQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByb3dzIExpY3piYSByesSZZMOzdyB3IG1hcEdyaWQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyW119IHdhbGthYmxlVGlsZVZhbHVlcyBUYWJsaWNhIHdhcnRvxZtjaSBrYWZlbGvDs3cgdXdhxbxhbnljaCB6YSBwcnplY2hvZG5pZSBkbGEgdGVnbyBCRlMuXHJcbiAqIEByZXR1cm5zIHt7cmVhY2hhYmxlOiBib29sZWFufX0gT2JpZWt0IHdza2F6dWrEhWN5LCBjenkgQkZTIG9zacSFZ27EhcWCIG9rcmXFm2xvbnkgY2VsICh3IHR5bSBwcnp5cGFka3UsIGN6eSB6IHB1bmt0dSBzdGFydG93ZWdvIG1vxbxuYSBkb2rFm8SHIGRvIGtvcnl0YXJ6YS9wb2tvanUpLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBlcmZvcm1CRlMobWFwR3JpZCwgc3RhcnRYLCBzdGFydFksIGNvbHMsIHJvd3MsIHdhbGthYmxlVGlsZVZhbHVlcykge1xyXG4gIGNvbnN0IHF1ZXVlID0gW1tzdGFydFgsIHN0YXJ0WV1dO1xyXG4gIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KFtgJHtzdGFydFh9LCR7c3RhcnRZfWBdKTtcclxuICBjb25zdCBkaXJlY3Rpb25zID0gW1xyXG4gICAgWzAsIC0xXSwgLy8gR8OzcmFcclxuICAgIFswLCAxXSwgLy8gRMOzxYJcclxuICAgIFstMSwgMF0sIC8vIExld29cclxuICAgIFsxLCAwXSwgLy8gUHJhd29cclxuICBdO1xyXG4gIGxldCByZWFjaGFibGUgPSBmYWxzZTsgLy8gRmxhZ2EsIGN6eSBCRlMgZG90YXLFgiBkbyBrYWZlbGvDs3cga29yeXRhcnphL3Bva29qdSAoamXFm2xpIHN6dWthbm8gb2Qgd2luZHkpXHJcblxyXG4gIC8vIFNwcmF3ZHplbmllIHB1bmt0dSBzdGFydG93ZWdvIChqZcWbbGkgc3p1a2FteSBvc2nEhWdhbG5vxZtjaSB6IHdpbmR5KVxyXG4gIGNvbnN0IHN0YXJ0VGlsZVZhbHVlID0gbWFwR3JpZFtzdGFydFldPy5bc3RhcnRYXTtcclxuICAvLyBDenkgcHVua3Qgc3RhcnRvd3kgKG5wLiB3aW5kYSkgamVzdCBqdcW8IG5hIGJlenBpZWN6bnltIHRlcmVuaWUgKGRsYSBjZWx1IHNwcmF3ZHplbmlhIG9zacSFZ2Fsbm/Fm2NpKT9cclxuICAvLyBXIHR5bSBrb25rcmV0bnltIHXFvHljaXUgKHNwcmF3ZHplbmllIHdpbmR5KSBpbnRlcmVzdWplIG5hcywgY3p5IHogd2luZHkgbW/FvG5hIGRvdHJ6ZcSHIGRvIEtPUllUQVJaQS9QT0tPSlUuXHJcbiAgLy8gU2FtbyBzdGFuaWUgbmEgd2luZHppZSBuaWUgb3puYWN6YSBvc2nEhWdhbG5vxZtjaSBiZXpwaWVjem5laiBzdHJlZnkuXHJcbiAgLy8gU3ByYXdkemlteSBzxIVzaWFkw7N3IHdpbmR5LlxyXG5cclxuICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgW2N1cnJYLCBjdXJyWV0gPSBxdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgIGZvciAoY29uc3QgW2R4LCBkeV0gb2YgZGlyZWN0aW9ucykge1xyXG4gICAgICBjb25zdCBuZXh0WCA9IGN1cnJYICsgZHg7XHJcbiAgICAgIGNvbnN0IG5leHRZID0gY3VyclkgKyBkeTtcclxuICAgICAgY29uc3Qga2V5ID0gYCR7bmV4dFh9LCR7bmV4dFl9YDtcclxuXHJcbiAgICAgIC8vIFNwcmF3ZHplbmllIGdyYW5pYyBpIGN6eSBqdcW8IG9kd2llZHpvbmVcclxuICAgICAgaWYgKG5leHRYID49IDAgJiYgbmV4dFggPCBjb2xzICYmIG5leHRZID49IDAgJiYgbmV4dFkgPCByb3dzICYmICF2aXNpdGVkLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgY29uc3QgdGlsZVZhbHVlID0gbWFwR3JpZFtuZXh0WV0/LltuZXh0WF07XHJcbiAgICAgICAgdmlzaXRlZC5hZGQoa2V5KTsgLy8gT2R3aWVkemFteSBuaWV6YWxlxbxuaWUgb2QgdHlwdVxyXG5cclxuICAgICAgICAvLyBDenkgdGVuIGthZmVsZWsgamVzdCBwcnplY2hvZG5pIERMQSBURUdPIEJGUz9cclxuICAgICAgICBpZiAod2Fsa2FibGVUaWxlVmFsdWVzLmluY2x1ZGVzKHRpbGVWYWx1ZSkpIHtcclxuICAgICAgICAgIHF1ZXVlLnB1c2goW25leHRYLCBuZXh0WV0pO1xyXG5cclxuICAgICAgICAgIC8vIEN6eSB0ZW4ga2FmZWxlayBqZXN0IEtPUllUQVJaRU0gbHViIFBPRMWBT0fEhCBQT0tPSlU/XHJcbiAgICAgICAgICAvLyBKZcWbbGkgdGFrLCB0byB6bmFsZcW6bGnFm215IGJlenBpZWN6bsSFIHN0cmVmxJkgb3NpxIVnYWxuxIUgeiBwdW5rdHUgc3RhcnRvd2Vnby5cclxuICAgICAgICAgIGlmICh0aWxlVmFsdWUgPT09IFRJTEVfQ09SUklET1IgfHwgdGlsZVZhbHVlID09PSBUSUxFX1JPT01fRkxPT1IpIHtcclxuICAgICAgICAgICAgcmVhY2hhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8gTW/FvG5hIGJ5IHR1IHpha2/FhGN6ecSHIHDEmXRsxJksIGplxZtsaSBpbnRlcmVzdWplIG5hcyB0eWxrbyBDWlkgamVzdCBvc2nEhWdhbG5lXHJcbiAgICAgICAgICAgIC8vIHJldHVybiB7IHJlYWNoYWJsZTogdHJ1ZSB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvLyBad3LDs8SHIHd5bmlrIEJGUyAtIHcgdHltIHByenlwYWRrdSwgZmxhZ8SZIG9zacSFZ2Fsbm/Fm2NpIGJlenBpZWN6bmVqIHN0cmVmeVxyXG4gIHJldHVybiB7IHJlYWNoYWJsZSB9O1xyXG59XHJcblxyXG4vLyAuLi4gKGlubmUgbmFyesSZZHppYSBtYXB5LCBqZcWbbGkgaXN0bmllasSFKVxyXG4iLCIvLyBzcmMvbWFwL21hcFJlbmRlcmVyLmpzXHJcblxyXG5pbXBvcnQgeyBUSUxFX1dBTEwsIFRJTEVfQ09SUklET1IsIFRJTEVfUk9PTV9GTE9PUiwgVElMRV9MSUZUIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcclxuLy8gUmVtb3ZlZCB1bnVzZWQgcmFuZG9tR3JheSwgcmFuZG9tQ29ycmlkb3JHcmF5IGltcG9ydHNcclxuaW1wb3J0IHsgYWRqdXN0Q29sb3JCcmlnaHRuZXNzLCBzaW1wbGVIYXNoIH0gZnJvbSAnLi4vdXRpbHMvbWFwLmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNYXBSZW5kZXJlciB7XHJcbiAgY29uc3RydWN0b3IodGlsZVNpemUpIHtcclxuICAgIHRoaXMudGlsZVNpemUgPSB0aWxlU2l6ZTtcclxuICAgIC8vIENhY2hlIGlzIGxlc3MgY3JpdGljYWwgbm93IGZvciBiYXNlIHRpbGVzIGJ1dCBzdGlsbCB1c2VmdWwgZm9yIHJvb20gZmxvb3JzL290aGVyIGVsZW1lbnRzXHJcbiAgICB0aGlzLnRpbGVDb2xvcnMgPSB7fTtcclxuICAgIHRoaXMuYmFzZVdhbGxDb2xvciA9ICcjMWMxZTIyJzsgLy8gU2luZ2xlLCBjb25zaXN0ZW50IHdhbGwgY29sb3JcclxuICAgIHRoaXMuYmFzZUNvcnJpZG9yQ29sb3IgPSAnI2EwYTBhMCc7IC8vIFNpbmdsZSwgY29uc2lzdGVudCBjb3JyaWRvciBjb2xvclxyXG4gICAgdGhpcy5iYXNlUm9vbUZsb29yQ29sb3IgPSAnI2MwYzBjMCc7IC8vIERlZmF1bHQgcm9vbSBmbG9vciAob3ZlcndyaXR0ZW4gYnkgZHJhd1Jvb21EZXRhaWxzKVxyXG4gICAgdGhpcy5saWZ0Q29sb3IgPSAnIzcwNzA4MCc7IC8vIENvbnNpc3RlbnQgbGlmdCBjb2xvclxyXG4gICAgdGhpcy5lcnJvckNvbG9yID0gJyNmZjAwZmYnOyAvLyBFcnJvciBjb2xvclxyXG4gIH1cclxuXHJcbiAgLy8gUmVzZXQgY29sb3IgY2FjaGUgd2hlbiBhIG5ldyBtYXAgaXMgZHJhd24gKGNhbGxlZCBieSBQcm9jZWR1cmFsTWFwKVxyXG4gIHJlc2V0Q29sb3JDYWNoZSgpIHtcclxuICAgIHRoaXMudGlsZUNvbG9ycyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldCBvciBnZW5lcmF0ZSB0aGUgY29sb3IgZm9yIGEgc3BlY2lmaWMgdGlsZSAqL1xyXG4gIGdldFRpbGVDb2xvcihyLCBjLCB0aWxlVmFsdWUsIHJvb21zKSB7XHJcbiAgICAvLyBOT1RFOiBXZSBzdGlsbCB1c2UgdGhlIGNhY2hlIGtleSwgbWFpbmx5IHVzZWZ1bCBpZiByb29tcyBuZWVkIHNwZWNpZmljXHJcbiAgICAvLyB0aWxlIGNvbG9ycyBub3QgaGFuZGxlZCBieSBkcmF3Um9vbURldGFpbHMgbGF0ZXIsIG9yIGlmIHdlIGFkZCBtb3JlIGNvbXBsZXggbG9naWMuXHJcbiAgICAvLyBGb3IgdGhlIGJhc2UgdGlsZXMgbW9kaWZpZWQgYmVsb3csIGl0J3MgbGVzcyBlc3NlbnRpYWwuXHJcbiAgICBjb25zdCBrZXkgPSBgJHtyfSwke2N9YDtcclxuICAgIGlmICh0aGlzLnRpbGVDb2xvcnNba2V5XSkge1xyXG4gICAgICByZXR1cm4gdGhpcy50aWxlQ29sb3JzW2tleV07XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNvbG9yO1xyXG5cclxuICAgIC8vIC0tLSBSRU1PVkVEIHBlci10aWxlIGhhc2gvdmFyaWF0aW9uIGZvciBiYXNlIHR5cGVzIC0tLVxyXG4gICAgLy8gY29uc3QgaGFzaCA9IHNpbXBsZUhhc2gociAqIDEwMDAgKyBjKTtcclxuICAgIC8vIGNvbnN0IHZhcmlhdGlvbiA9ICgoaGFzaCAlIDIxKSAtIDEwKSAvIDEwMDtcclxuXHJcbiAgICBzd2l0Y2ggKHRpbGVWYWx1ZSkge1xyXG4gICAgICBjYXNlIFRJTEVfV0FMTDpcclxuICAgICAgICAvLyBVc2UgdGhlIHNpbmdsZSwgY29uc2lzdGVudCBiYXNlIGNvbG9yIGRpcmVjdGx5XHJcbiAgICAgICAgY29sb3IgPSB0aGlzLmJhc2VXYWxsQ29sb3I7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgVElMRV9DT1JSSURPUjpcclxuICAgICAgICAvLyBVc2UgdGhlIHNpbmdsZSwgY29uc2lzdGVudCBiYXNlIGNvbG9yIGRpcmVjdGx5XHJcbiAgICAgICAgY29sb3IgPSB0aGlzLmJhc2VDb3JyaWRvckNvbG9yO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFRJTEVfUk9PTV9GTE9PUjpcclxuICAgICAgICAvLyBVc2UgdGhlIGNvbnNpc3RlbnQgYmFzZSByb29tIGZsb29yIGNvbG9yLlxyXG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSBkcmF3Um9vbURldGFpbHMgZm9yIGFjdHVhbCByb29tIHRpbGVzLlxyXG4gICAgICAgIC8vIEl0IHNlcnZlcyBhcyB0aGUgY29sb3IgaWYgYSBUSUxFX1JPT01fRkxPT1Igc29tZWhvdyBleGlzdHMgb3V0c2lkZSBhIGRlZmluZWQgcm9vbS5cclxuICAgICAgICBjb2xvciA9IHRoaXMuYmFzZVJvb21GbG9vckNvbG9yO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFRJTEVfTElGVDpcclxuICAgICAgICAvLyBVc2UgdGhlIGNvbnNpc3RlbnQgbGlmdCBjb2xvclxyXG4gICAgICAgIGNvbG9yID0gdGhpcy5saWZ0Q29sb3I7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgY29sb3IgPSB0aGlzLmVycm9yQ29sb3I7IC8vIEVycm9yIGNvbG9yXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RpbGwgY2FjaGUgdGhlIHJlc3VsdFxyXG4gICAgdGhpcy50aWxlQ29sb3JzW2tleV0gPSBjb2xvcjtcclxuICAgIHJldHVybiBjb2xvcjtcclxuICB9XHJcblxyXG4gIC8qKiBNYWluIGRyYXdpbmcgZnVuY3Rpb24gKi9cclxuICBkcmF3KGN0eCwgbWFwRGF0YSwgYm9va0ltYWdlID0gbnVsbCkge1xyXG4gICAgY29uc3QgeyBtYXAsIHJvb21zLCBib29rcywgbGlmdFBvc2l0aW9uLCBvZmZzZXRYLCBvZmZzZXRZLCBjb2xzLCByb3dzIH0gPSBtYXBEYXRhO1xyXG5cclxuICAgIC8vIFJvdW5kIG9mZnNldHMgZm9yIHNoYXJwbmVzc1xyXG4gICAgY29uc3QgY3VycmVudE9mZnNldFggPSBNYXRoLmZsb29yKG9mZnNldFgpO1xyXG4gICAgY29uc3QgY3VycmVudE9mZnNldFkgPSBNYXRoLmZsb29yKG9mZnNldFkpO1xyXG5cclxuICAgIC8vIERldGVybWluZSB2aXNpYmxlIHRpbGVzIHdpdGggYSBzbWFsbCBidWZmZXJcclxuICAgIGNvbnN0IHN0YXJ0Q29sID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcigtY3VycmVudE9mZnNldFggLyB0aGlzLnRpbGVTaXplKSAtIDEpO1xyXG4gICAgY29uc3QgZW5kQ29sID0gTWF0aC5taW4oXHJcbiAgICAgIGNvbHMsXHJcbiAgICAgIE1hdGguY2VpbCgoLWN1cnJlbnRPZmZzZXRYICsgY3R4LmNhbnZhcy53aWR0aCkgLyB0aGlzLnRpbGVTaXplKSArIDFcclxuICAgICk7XHJcbiAgICBjb25zdCBzdGFydFJvdyA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoLWN1cnJlbnRPZmZzZXRZIC8gdGhpcy50aWxlU2l6ZSkgLSAxKTtcclxuICAgIGNvbnN0IGVuZFJvdyA9IE1hdGgubWluKFxyXG4gICAgICByb3dzLFxyXG4gICAgICBNYXRoLmNlaWwoKC1jdXJyZW50T2Zmc2V0WSArIGN0eC5jYW52YXMuaGVpZ2h0KSAvIHRoaXMudGlsZVNpemUpICsgMVxyXG4gICAgKTtcclxuXHJcbiAgICBjdHguc2F2ZSgpOyAvLyBTYXZlIGNvbnRleHQgc3RhdGVcclxuXHJcbiAgICAvLyAxLiBEcmF3IGJhc2UgdGlsZXMgKHdhbGxzLCBjb3JyaWRvcnMsIGRlZmF1bHQgZmxvb3IsIGxpZnQgYmFzZSlcclxuICAgIC8vICAgIFRoZXNlIHdpbGwgbm93IHVzZSB0aGUgY29uc2lzdGVudCBjb2xvcnMgZnJvbSBnZXRUaWxlQ29sb3IuXHJcbiAgICB0aGlzLmRyYXdCYXNlVGlsZXMoXHJcbiAgICAgIGN0eCxcclxuICAgICAgbWFwLFxyXG4gICAgICByb29tcyxcclxuICAgICAgY3VycmVudE9mZnNldFgsXHJcbiAgICAgIGN1cnJlbnRPZmZzZXRZLFxyXG4gICAgICBjb2xzLFxyXG4gICAgICByb3dzLFxyXG4gICAgICBzdGFydFJvdyxcclxuICAgICAgZW5kUm93LFxyXG4gICAgICBzdGFydENvbCxcclxuICAgICAgZW5kQ29sXHJcbiAgICApO1xyXG5cclxuICAgIC8vIDIuIERyYXcgc3BlY2lmaWMgcm9vbSBmbG9vcnMgYW5kIGRlY29yYXRpb25zXHJcbiAgICAvLyAgICBUaGlzIGZ1bmN0aW9uIFdJTEwgYXBwbHkgc3BlY2lmaWMgY29sb3JzIGJhc2VkIG9uIHJvb20gdHlwZSxcclxuICAgIC8vICAgIGFuZCBzdWJ0bGUgcGVyLXRpbGUgdmFyaWF0aW9ucyBXSVRISU4gdGhlIHJvb20gZmxvb3IuXHJcbiAgICB0aGlzLmRyYXdSb29tRGV0YWlscyhcclxuICAgICAgY3R4LFxyXG4gICAgICBtYXAsXHJcbiAgICAgIHJvb21zLFxyXG4gICAgICBsaWZ0UG9zaXRpb24sXHJcbiAgICAgIGN1cnJlbnRPZmZzZXRYLFxyXG4gICAgICBjdXJyZW50T2Zmc2V0WSxcclxuICAgICAgY29scyxcclxuICAgICAgcm93cyxcclxuICAgICAgc3RhcnRSb3csXHJcbiAgICAgIGVuZFJvdyxcclxuICAgICAgc3RhcnRDb2wsXHJcbiAgICAgIGVuZENvbFxyXG4gICAgKTtcclxuXHJcbiAgICAvLyAzLiBEcmF3IGxpZnQgZGV0YWlscyAob3ZlcmxheWluZyByb29tIGZsb29ycyBpZiBuZWVkZWQpXHJcbiAgICB0aGlzLmRyYXdMaWZ0RGV0YWlscyhjdHgsIGxpZnRQb3NpdGlvbiwgY3VycmVudE9mZnNldFgsIGN1cnJlbnRPZmZzZXRZKTtcclxuXHJcbiAgICAvLyA0LiBEcmF3IGJvb2tzXHJcbiAgICB0aGlzLmRyYXdCb29rcyhjdHgsIGJvb2tzLCBjdXJyZW50T2Zmc2V0WCwgY3VycmVudE9mZnNldFksIGJvb2tJbWFnZSk7XHJcblxyXG4gICAgY3R4LnJlc3RvcmUoKTsgLy8gUmVzdG9yZSBjb250ZXh0IHN0YXRlXHJcbiAgfVxyXG5cclxuICAvKiogRHJhdyBiYXNlIHRpbGVzICovXHJcbiAgZHJhd0Jhc2VUaWxlcyhjdHgsIG1hcCwgcm9vbXMsIG9mZnNldFgsIG9mZnNldFksIGNvbHMsIHJvd3MsIHN0YXJ0Um93LCBlbmRSb3csIHN0YXJ0Q29sLCBlbmRDb2wpIHtcclxuICAgIGN0eC5zYXZlKCk7XHJcbiAgICBjdHguc2hhZG93Q29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG5cclxuICAgIGNvbnN0IHdhbGxFZGdlQ29sb3JEYXJrID0gJyMzODM4MzgnO1xyXG4gICAgY29uc3Qgd2FsbEVkZ2VDb2xvckxpZ2h0ID0gJyM2MDYwNjAnO1xyXG4gICAgY29uc3Qgd2FsbFRvcEVkZ2VDb2xvciA9ICcjNzU3NTc1JztcclxuXHJcbiAgICBmb3IgKGxldCByID0gc3RhcnRSb3c7IHIgPCBlbmRSb3c7IHIrKykge1xyXG4gICAgICBmb3IgKGxldCBjID0gc3RhcnRDb2w7IGMgPCBlbmRDb2w7IGMrKykge1xyXG4gICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IG1hcFtyXT8uW2NdO1xyXG4gICAgICAgIGlmICh0aWxlVmFsdWUgPT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHNjcmVlblggPSBNYXRoLmZsb29yKGMgKiB0aGlzLnRpbGVTaXplICsgb2Zmc2V0WCk7XHJcbiAgICAgICAgY29uc3Qgc2NyZWVuWSA9IE1hdGguZmxvb3IociAqIHRoaXMudGlsZVNpemUgKyBvZmZzZXRZKTtcclxuICAgICAgICAvLyBHZXQgdGhlIGNvbG9yIC0gbm93IGNvbnNpc3RlbnQgZm9yIHdhbGxzL2NvcnJpZG9ycy9kZWZhdWx0IGZsb29yL2xpZnRcclxuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMuZ2V0VGlsZUNvbG9yKHIsIGMsIHRpbGVWYWx1ZSwgcm9vbXMpO1xyXG5cclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICAgICAgY3R4LmZpbGxSZWN0KHNjcmVlblgsIHNjcmVlblksIHRoaXMudGlsZVNpemUsIHRoaXMudGlsZVNpemUpO1xyXG5cclxuICAgICAgICAvLyAtLS0gV2FsbCBFZGdlcyBhbmQgTm9pc2UgKFN0aWxsIEFwcGxpZWQgZm9yIERldGFpbCkgLS0tXHJcbiAgICAgICAgaWYgKHRpbGVWYWx1ZSA9PT0gVElMRV9XQUxMKSB7XHJcbiAgICAgICAgICAvLyBOb2lzZSB0ZXh0dXJlIChhcHBsaWVkIE9OIFRPUCBvZiB0aGUgY29uc2lzdGVudCBiYXNlIGNvbG9yKVxyXG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuMDYpJztcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChcclxuICAgICAgICAgICAgICBzY3JlZW5YICsgTWF0aC5yYW5kb20oKSAqIHRoaXMudGlsZVNpemUsXHJcbiAgICAgICAgICAgICAgc2NyZWVuWSArIE1hdGgucmFuZG9tKCkgKiB0aGlzLnRpbGVTaXplLFxyXG4gICAgICAgICAgICAgIDEsXHJcbiAgICAgICAgICAgICAgMVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEVkZ2UgcmVuZGVyaW5nIChhcHBsaWVkIE9OIFRPUClcclxuICAgICAgICAgIGNvbnN0IGVkZ2VTaXplID0gMjtcclxuICAgICAgICAgIGlmIChyID4gMCAmJiBtYXBbciAtIDFdPy5bY10gIT09IFRJTEVfV0FMTCkge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gd2FsbFRvcEVkZ2VDb2xvcjtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHNjcmVlblgsIHNjcmVlblksIHRoaXMudGlsZVNpemUsIGVkZ2VTaXplKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChyIDwgcm93cyAtIDEgJiYgbWFwW3IgKyAxXT8uW2NdICE9PSBUSUxFX1dBTEwpIHtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHdhbGxFZGdlQ29sb3JEYXJrO1xyXG4gICAgICAgICAgICBjdHguZmlsbFJlY3Qoc2NyZWVuWCwgc2NyZWVuWSArIHRoaXMudGlsZVNpemUgLSBlZGdlU2l6ZSwgdGhpcy50aWxlU2l6ZSwgZWRnZVNpemUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGMgPiAwICYmIG1hcFtyXT8uW2MgLSAxXSAhPT0gVElMRV9XQUxMKSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB3YWxsRWRnZUNvbG9yTGlnaHQ7XHJcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChzY3JlZW5YLCBzY3JlZW5ZICsgZWRnZVNpemUsIGVkZ2VTaXplLCB0aGlzLnRpbGVTaXplIC0gZWRnZVNpemUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGMgPCBjb2xzIC0gMSAmJiBtYXBbcl0/LltjICsgMV0gIT09IFRJTEVfV0FMTCkge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gd2FsbEVkZ2VDb2xvckRhcms7XHJcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChcclxuICAgICAgICAgICAgICBzY3JlZW5YICsgdGhpcy50aWxlU2l6ZSAtIGVkZ2VTaXplLFxyXG4gICAgICAgICAgICAgIHNjcmVlblkgKyBlZGdlU2l6ZSxcclxuICAgICAgICAgICAgICBlZGdlU2l6ZSxcclxuICAgICAgICAgICAgICB0aGlzLnRpbGVTaXplIC0gZWRnZVNpemVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIENvcm5lciBsb2dpYyAocmVtYWlucyB0aGUgc2FtZSlcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgciA+IDAgJiZcclxuICAgICAgICAgICAgYyA+IDAgJiZcclxuICAgICAgICAgICAgbWFwW3IgLSAxXT8uW2NdICE9PSBUSUxFX1dBTEwgJiZcclxuICAgICAgICAgICAgbWFwW3JdPy5bYyAtIDFdICE9PSBUSUxFX1dBTEwgJiZcclxuICAgICAgICAgICAgbWFwW3IgLSAxXT8uW2MgLSAxXSAhPT0gVElMRV9XQUxMXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHdhbGxFZGdlQ29sb3JMaWdodDtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHNjcmVlblgsIHNjcmVlblksIGVkZ2VTaXplLCBlZGdlU2l6ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHIgPiAwICYmXHJcbiAgICAgICAgICAgIGMgPCBjb2xzIC0gMSAmJlxyXG4gICAgICAgICAgICBtYXBbciAtIDFdPy5bY10gIT09IFRJTEVfV0FMTCAmJlxyXG4gICAgICAgICAgICBtYXBbcl0/LltjICsgMV0gIT09IFRJTEVfV0FMTCAmJlxyXG4gICAgICAgICAgICBtYXBbciAtIDFdPy5bYyArIDFdICE9PSBUSUxFX1dBTExcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gd2FsbFRvcEVkZ2VDb2xvcjtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHNjcmVlblggKyB0aGlzLnRpbGVTaXplIC0gZWRnZVNpemUsIHNjcmVlblksIGVkZ2VTaXplLCBlZGdlU2l6ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyAuLi4gcG90ZW50aWFsbHkgb3RoZXIgY29ybmVyc1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGlsZVZhbHVlID09PSBUSUxFX0NPUlJJRE9SKSB7XHJcbiAgICAgICAgICAvLyBDb3JyaWRvciBOb2lzZSAoYXBwbGllZCBPTiBUT1Agb2YgdGhlIGNvbnNpc3RlbnQgYmFzZSBjb2xvcilcclxuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjAzKSc7XHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xyXG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoXHJcbiAgICAgICAgICAgICAgc2NyZWVuWCArIE1hdGgucmFuZG9tKCkgKiB0aGlzLnRpbGVTaXplLFxyXG4gICAgICAgICAgICAgIHNjcmVlblkgKyBNYXRoLnJhbmRvbSgpICogdGhpcy50aWxlU2l6ZSxcclxuICAgICAgICAgICAgICAxLFxyXG4gICAgICAgICAgICAgIDFcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTk9URTogTm8gc3BlY2lhbCBkcmF3aW5nIG5lZWRlZCBoZXJlIGZvciBUSUxFX1JPT01fRkxPT1Igb3IgVElMRV9MSUZUXHJcbiAgICAgICAgLy8gYXMgZHJhd1Jvb21EZXRhaWxzIGFuZCBkcmF3TGlmdERldGFpbHMgaGFuZGxlIHRoZWlyIHNwZWNpZmljcy5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY3R4LnJlc3RvcmUoKTtcclxuICB9XHJcblxyXG4gIC8qKiBEcmF3IHNwZWNpZmljIHJvb20gZmxvb3JzIGFuZCBkZWNvcmF0aW9ucyAqL1xyXG4gIGRyYXdSb29tRGV0YWlscyhcclxuICAgIGN0eCxcclxuICAgIG1hcCxcclxuICAgIHJvb21zLFxyXG4gICAgbGlmdFBvc2l0aW9uLFxyXG4gICAgb2Zmc2V0WCxcclxuICAgIG9mZnNldFksXHJcbiAgICBjb2xzLFxyXG4gICAgcm93cyxcclxuICAgIHN0YXJ0Um93LFxyXG4gICAgZW5kUm93LFxyXG4gICAgc3RhcnRDb2wsXHJcbiAgICBlbmRDb2xcclxuICApIHtcclxuICAgIGN0eC5zYXZlKCk7XHJcbiAgICBjdHguc2hhZG93Q29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG5cclxuICAgIGZvciAoY29uc3Qgcm9vbSBvZiByb29tcykge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgcm9vbS5jb2wgKyByb29tLndpZHRoIDwgc3RhcnRDb2wgfHxcclxuICAgICAgICByb29tLmNvbCA+IGVuZENvbCB8fFxyXG4gICAgICAgIHJvb20ucm93ICsgcm9vbS5oZWlnaHQgPCBzdGFydFJvdyB8fFxyXG4gICAgICAgIHJvb20ucm93ID4gZW5kUm93XHJcbiAgICAgIClcclxuICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgIGNvbnN0IHJvb21TY3JlZW5YID0gTWF0aC5mbG9vcihyb29tLmNvbCAqIHRoaXMudGlsZVNpemUgKyBvZmZzZXRYKTtcclxuICAgICAgY29uc3Qgcm9vbVNjcmVlblkgPSBNYXRoLmZsb29yKHJvb20ucm93ICogdGhpcy50aWxlU2l6ZSArIG9mZnNldFkpO1xyXG4gICAgICBjb25zdCByb29tU2NyZWVuVyA9IHJvb20ud2lkdGggKiB0aGlzLnRpbGVTaXplO1xyXG4gICAgICBjb25zdCByb29tU2NyZWVuSCA9IHJvb20uaGVpZ2h0ICogdGhpcy50aWxlU2l6ZTtcclxuXHJcbiAgICAgIC8vIC0tLSBEZXRlcm1pbmUgRmxvb3IgQ29sb3IgQmFzZWQgb24gUm9vbSBUeXBlIChUaGlzIGxvZ2ljIHJlbWFpbnMpIC0tLVxyXG4gICAgICBsZXQgZmxvb3JDb2xvciA9IHRoaXMuYmFzZVJvb21GbG9vckNvbG9yOyAvLyBTdGFydCB3aXRoIGRlZmF1bHRcclxuICAgICAgLy8gVXNlIGEgc2VlZCB0aGF0IGNoYW5nZXMgcGVyIHJvb20gYnV0IGlzIGNvbnNpc3RlbnQgZm9yIHRoYXQgcm9vbVxyXG4gICAgICAvLyBBZGRlZCBmbG9vck51bWJlciBkZXBlbmRlbmN5IGlmIGF2YWlsYWJsZSBpbiBgdGhpc2AsIG90aGVyd2lzZSB1c2Ugcm9vbS5pZFxyXG4gICAgICBjb25zdCBmbG9vck51bSA9IHR5cGVvZiB0aGlzLmZsb29yTnVtYmVyID09PSAnbnVtYmVyJyA/IHRoaXMuZmxvb3JOdW1iZXIgOiAwO1xyXG4gICAgICBsZXQgcm9vbVNlZWQgPSBzaW1wbGVIYXNoKHJvb20uaWQpICsgZmxvb3JOdW0gKiAxMDA7IC8vIFVzZSBoYXNoIG9mIElEIGZvciBtb3JlIHZhcmlhdGlvblxyXG5cclxuICAgICAgc3dpdGNoIChyb29tLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdjbGFzc3Jvb20nOlxyXG4gICAgICAgICAgZmxvb3JDb2xvciA9IGFkanVzdENvbG9yQnJpZ2h0bmVzcygnI2EwYzhlMCcsIDAuOSArIChzaW1wbGVIYXNoKHJvb21TZWVkKSAlIDExKSAvIDEwMCk7XHJcbiAgICAgICAgICBicmVhazsgLy8gQmx1aXNoXHJcbiAgICAgICAgY2FzZSAnb2ZmaWNlJzpcclxuICAgICAgICAgIGZsb29yQ29sb3IgPSBhZGp1c3RDb2xvckJyaWdodG5lc3MoXHJcbiAgICAgICAgICAgICcjZjBlOGMwJyxcclxuICAgICAgICAgICAgMC45ICsgKHNpbXBsZUhhc2gocm9vbVNlZWQgKyAxKSAlIDExKSAvIDEwMFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGJyZWFrOyAvLyBCZWlnZVxyXG4gICAgICAgIGNhc2UgJ2xpYnJhcnknOlxyXG4gICAgICAgICAgZmxvb3JDb2xvciA9IGFkanVzdENvbG9yQnJpZ2h0bmVzcyhcclxuICAgICAgICAgICAgJyNkOGMwYTgnLFxyXG4gICAgICAgICAgICAwLjkgKyAoc2ltcGxlSGFzaChyb29tU2VlZCArIDIpICUgMTEpIC8gMTAwXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgYnJlYWs7IC8vIFdvb2RlblxyXG4gICAgICAgIGNhc2UgJ2d5bSc6XHJcbiAgICAgICAgICBmbG9vckNvbG9yID0gYWRqdXN0Q29sb3JCcmlnaHRuZXNzKFxyXG4gICAgICAgICAgICAnI2IwZDBiMCcsXHJcbiAgICAgICAgICAgIDAuOSArIChzaW1wbGVIYXNoKHJvb21TZWVkICsgMykgJSAxMSkgLyAxMDBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBicmVhazsgLy8gR3JlZW5pc2hcclxuICAgICAgICBjYXNlICdsYWInOlxyXG4gICAgICAgICAgZmxvb3JDb2xvciA9IGFkanVzdENvbG9yQnJpZ2h0bmVzcyhcclxuICAgICAgICAgICAgJyNlMGUwZmYnLFxyXG4gICAgICAgICAgICAwLjkgKyAoc2ltcGxlSGFzaChyb29tU2VlZCArIDQpICUgMTEpIC8gMTAwXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgYnJlYWs7IC8vIExpZ2h0IGJsdWUtcHVycGxlXHJcbiAgICAgICAgY2FzZSAnc3RvcmFnZSc6XHJcbiAgICAgICAgICBmbG9vckNvbG9yID0gYWRqdXN0Q29sb3JCcmlnaHRuZXNzKFxyXG4gICAgICAgICAgICAnI2IwYTA5MCcsXHJcbiAgICAgICAgICAgIDAuOSArIChzaW1wbGVIYXNoKHJvb21TZWVkICsgNSkgJSAxMSkgLyAxMDBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBicmVhazsgLy8gR3JheS1icm93blxyXG4gICAgICAgIGNhc2UgJ3V0aWxpdHknOlxyXG4gICAgICAgICAgZmxvb3JDb2xvciA9IGFkanVzdENvbG9yQnJpZ2h0bmVzcyhcclxuICAgICAgICAgICAgJyNiMGIwYjAnLFxyXG4gICAgICAgICAgICAwLjkgKyAoc2ltcGxlSGFzaChyb29tU2VlZCArIDYpICUgMTEpIC8gMTAwXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgYnJlYWs7IC8vIEdyYXkgY29uY3JldGVcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gLS0tIERyYXcgUm9vbSBGbG9vciAoVGlsZSBieSBUaWxlIHdpdGhpbiBWaXNpYmxlIEFyZWEpIC0tLVxyXG4gICAgICBmb3IgKFxyXG4gICAgICAgIGxldCByID0gTWF0aC5tYXgocm9vbS5yb3csIHN0YXJ0Um93KTtcclxuICAgICAgICByIDwgTWF0aC5taW4ocm9vbS5yb3cgKyByb29tLmhlaWdodCwgZW5kUm93KTtcclxuICAgICAgICByKytcclxuICAgICAgKSB7XHJcbiAgICAgICAgZm9yIChcclxuICAgICAgICAgIGxldCBjID0gTWF0aC5tYXgocm9vbS5jb2wsIHN0YXJ0Q29sKTtcclxuICAgICAgICAgIGMgPCBNYXRoLm1pbihyb29tLmNvbCArIHJvb20ud2lkdGgsIGVuZENvbCk7XHJcbiAgICAgICAgICBjKytcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IG1hcFtyXT8uW2NdO1xyXG4gICAgICAgICAgLy8gT25seSBkcmF3IGlmIGl0J3MgYWN0dWFsbHkgYSBUSUxFX1JPT01fRkxPT1JcclxuICAgICAgICAgIGlmICh0aWxlVmFsdWUgPT09IFRJTEVfUk9PTV9GTE9PUikge1xyXG4gICAgICAgICAgICBjb25zdCBzY3JlZW5YID0gTWF0aC5mbG9vcihjICogdGhpcy50aWxlU2l6ZSArIG9mZnNldFgpO1xyXG4gICAgICAgICAgICBjb25zdCBzY3JlZW5ZID0gTWF0aC5mbG9vcihyICogdGhpcy50aWxlU2l6ZSArIG9mZnNldFkpO1xyXG5cclxuICAgICAgICAgICAgLy8gLS0tIFN1YnRsZSBQZXItVGlsZSBWYXJpYXRpb24gV0lUSElOIFJvb20gRmxvb3IgKEtlcHQgZm9yIHRleHR1cmUpIC0tLVxyXG4gICAgICAgICAgICBjb25zdCB0aWxlSGFzaCA9IHNpbXBsZUhhc2gociAqIDUwMDAgKyBjICogMyArIHJvb21TZWVkKTsgLy8gSW5jbHVkZSByb29tU2VlZFxyXG4gICAgICAgICAgICBjb25zdCB2YXJpYXRpb24gPSAoKHRpbGVIYXNoICUgMTEpIC0gNSkgLyAxMDA7IC8vIFZhcmlhdGlvbiAtMC4wNSB0byArMC4wNVxyXG4gICAgICAgICAgICBjb25zdCBicmlnaHRuZXNzRmFjdG9yID0gMC45OCArIHZhcmlhdGlvbjtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGFkanVzdENvbG9yQnJpZ2h0bmVzcyhmbG9vckNvbG9yLCBicmlnaHRuZXNzRmFjdG9yKTtcclxuICAgICAgICAgICAgLy8gLS0tIEVuZCBQZXItVGlsZSBWYXJpYXRpb24gLS0tXHJcblxyXG4gICAgICAgICAgICBjdHguZmlsbFJlY3Qoc2NyZWVuWCwgc2NyZWVuWSwgdGhpcy50aWxlU2l6ZSwgdGhpcy50aWxlU2l6ZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBPcHRpb25hbCBmbG9vciB0ZXh0dXJlIChyZW1haW5zIHRoZSBzYW1lKVxyXG4gICAgICAgICAgICBpZiAocm9vbS50eXBlID09PSAnbGFiJykge1xyXG4gICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuMDgpJztcclxuICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gMTtcclxuICAgICAgICAgICAgICBjdHguc3Ryb2tlUmVjdChzY3JlZW5YICsgMC41LCBzY3JlZW5ZICsgMC41LCB0aGlzLnRpbGVTaXplIC0gMSwgdGhpcy50aWxlU2l6ZSAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAtLS0gRHJhdyBEZWNvcmF0aW9ucyAocmVtYWlucyB0aGUgc2FtZSkgLS0tXHJcbiAgICAgIHRoaXMuZHJhd1Jvb21EZWNvcmF0aW9ucyhjdHgsIHJvb20sIHJvb21TY3JlZW5YLCByb29tU2NyZWVuWSwgcm9vbVNjcmVlblcsIHJvb21TY3JlZW5IKTtcclxuICAgIH1cclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0gZHJhd0xpZnREZXRhaWxzLCBkcmF3Um9vbURlY29yYXRpb25zLCBkcmF3Qm9va3MgcmVtYWluIHVuY2hhbmdlZCAtLS1cclxuICAvLyAuLi4gKGtlZXAgdGhlIGV4aXN0aW5nIGNvZGUgZm9yIHRoZXNlIG1ldGhvZHMpIC4uLlxyXG4gIC8qKiBOYXJ5c3VqIGRldGFsZSB3aW5keSAocHJ6eWNpc2ssIGtvbnR1cikgKi9cclxuICBkcmF3TGlmdERldGFpbHMoY3R4LCBsaWZ0UG9zaXRpb24sIG9mZnNldFgsIG9mZnNldFkpIHtcclxuICAgIGlmICghbGlmdFBvc2l0aW9uKSByZXR1cm47XHJcblxyXG4gICAgY29uc3Qgc2NyZWVuWCA9IE1hdGguZmxvb3IobGlmdFBvc2l0aW9uLnRpbGVYICogdGhpcy50aWxlU2l6ZSArIG9mZnNldFgpO1xyXG4gICAgY29uc3Qgc2NyZWVuWSA9IE1hdGguZmxvb3IobGlmdFBvc2l0aW9uLnRpbGVZICogdGhpcy50aWxlU2l6ZSArIG9mZnNldFkpO1xyXG5cclxuICAgIC8vIFNwcmF3ZMW6LCBjenkgd2luZGEgamVzdCB3aWRvY3puYSBwcnplZCByeXNvd2FuaWVtIGRldGFsaVxyXG4gICAgaWYgKFxyXG4gICAgICBzY3JlZW5YICsgdGhpcy50aWxlU2l6ZSA8IDAgfHxcclxuICAgICAgc2NyZWVuWCA+IGN0eC5jYW52YXMud2lkdGggfHxcclxuICAgICAgc2NyZWVuWSArIHRoaXMudGlsZVNpemUgPCAwIHx8XHJcbiAgICAgIHNjcmVlblkgPiBjdHguY2FudmFzLmhlaWdodFxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgY3R4LnNoYWRvd0NvbG9yID0gJ3RyYW5zcGFyZW50JzsgLy8gQnJhayBjaWVuaWEgZGxhIGRldGFsaSB3aW5keVxyXG5cclxuICAgIC8vIFd5cmHFum5pZWpzemEgcmFta2Egd2luZHlcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjZDBkMGQwJzsgLy8gSmFzbmEgcmFta2FcclxuICAgIGN0eC5saW5lV2lkdGggPSAxO1xyXG4gICAgY3R4LnN0cm9rZVJlY3Qoc2NyZWVuWCArIDAuNSwgc2NyZWVuWSArIDAuNSwgdGhpcy50aWxlU2l6ZSAtIDEsIHRoaXMudGlsZVNpemUgLSAxKTtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjNDA0MDQwJzsgLy8gQ2llbW55IHdld27EmXRyem55IGNpZcWEXHJcbiAgICBjdHguc3Ryb2tlUmVjdChzY3JlZW5YICsgMS41LCBzY3JlZW5ZICsgMS41LCB0aGlzLnRpbGVTaXplIC0gMywgdGhpcy50aWxlU2l6ZSAtIDMpO1xyXG5cclxuICAgIC8vIFVsZXBzem9ueSBwcnp5Y2lza1xyXG4gICAgY29uc3QgYnV0dG9uUmFkaXVzID0gdGhpcy50aWxlU2l6ZSAqIDAuMTU7IC8vIFRyb2NoxJkgd2nEmWtzenlcclxuICAgIGNvbnN0IGJ1dHRvblggPSBzY3JlZW5YICsgdGhpcy50aWxlU2l6ZSAqIDAuODtcclxuICAgIGNvbnN0IGJ1dHRvblkgPSBzY3JlZW5ZICsgdGhpcy50aWxlU2l6ZSAqIDAuNTtcclxuXHJcbiAgICAvLyBQb2RzdGF3YSBwcnp5Y2lza3UgKGNpZW1uaWVqc3phKVxyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICcjNDQ0JztcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5hcmMoYnV0dG9uWCwgYnV0dG9uWSwgYnV0dG9uUmFkaXVzLCAwLCBNYXRoLlBJICogMik7XHJcbiAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgIC8vIFNhbSBwcnp5Y2lzayAoY3plcndvbnkpXHJcbiAgICBjdHguZmlsbFN0eWxlID0gJyNmZjQ0NDQnO1xyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4LmFyYyhidXR0b25YLCBidXR0b25ZLCBidXR0b25SYWRpdXMgKiAwLjgsIDAsIE1hdGguUEkgKiAyKTtcclxuICAgIGN0eC5maWxsKCk7XHJcblxyXG4gICAgLy8gT2RibGFzayBuYSBwcnp5Y2lza3VcclxuICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJztcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5hcmMoXHJcbiAgICAgIGJ1dHRvblggLSBidXR0b25SYWRpdXMgKiAwLjIsXHJcbiAgICAgIGJ1dHRvblkgLSBidXR0b25SYWRpdXMgKiAwLjIsXHJcbiAgICAgIGJ1dHRvblJhZGl1cyAqIDAuMyxcclxuICAgICAgMCxcclxuICAgICAgTWF0aC5QSSAqIDJcclxuICAgICk7XHJcbiAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgfVxyXG5cclxuICAvKiogTmFyeXN1aiBkZWtvcmFjamUgZGxhIGtvbmtyZXRuZWdvIHBva29qdSAqL1xyXG4gIGRyYXdSb29tRGVjb3JhdGlvbnMoY3R4LCByb29tLCB4LCB5LCB3LCBoKSB7XHJcbiAgICAvLyB4LCB5IHRvIGxld3kgZ8Ozcm55IHLDs2cgcG9rb2p1IG5hIGVrcmFuaWVcclxuICAgIC8vIHcsIGggdG8gc3plcm9rb8WbxIcgaSB3eXNva2/Fm8SHIHBva29qdSBuYSBla3JhbmllXHJcbiAgICBjb25zdCB0cyA9IHRoaXMudGlsZVNpemU7XHJcbiAgICBjb25zdCBtYXJnaW4gPSB0cyAqIDAuMjsgLy8gTW5pZWpzenkgbWFyZ2luZXNcclxuICAgIGNvbnN0IG9iak1hcmdpbiA9IHRzICogMC4xOyAvLyBPZHN0xJlwIG1pxJlkenkgb2JpZWt0YW1pXHJcbiAgICBjdHgubGluZVdpZHRoID0gMTtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjNDQ0JzsgLy8gQ2llbW5pZWpzemEgZG9tecWbbG5hIG9id8OzZGthXHJcblxyXG4gICAgLy8gPT09IEZVTktDSkUgUE9NT0NOSUNaRSBETyBSWVNPV0FOSUEgPT09XHJcbiAgICBjb25zdCBkcmF3UmVjdCA9IChyeCwgcnksIHJ3LCByaCwgY29sb3IsIG91dGxpbmUgPSB0cnVlKSA9PiB7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcclxuICAgICAgY29uc3Qgc2NyZWVuWCA9IE1hdGguZmxvb3IoeCArIHJ4KTtcclxuICAgICAgY29uc3Qgc2NyZWVuWSA9IE1hdGguZmxvb3IoeSArIHJ5KTtcclxuICAgICAgY29uc3Qgc2NyZWVuVyA9IE1hdGguZmxvb3IocncpO1xyXG4gICAgICBjb25zdCBzY3JlZW5IID0gTWF0aC5mbG9vcihyaCk7XHJcbiAgICAgIGN0eC5maWxsUmVjdChzY3JlZW5YLCBzY3JlZW5ZLCBzY3JlZW5XLCBzY3JlZW5IKTtcclxuICAgICAgaWYgKG91dGxpbmUpIHtcclxuICAgICAgICBjdHguc3Ryb2tlUmVjdChzY3JlZW5YICsgMC41LCBzY3JlZW5ZICsgMC41LCBzY3JlZW5XIC0gMSwgc2NyZWVuSCAtIDEpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZHJhd0NpcmNsZSA9IChjeCwgY3ksIHJhZGl1cywgY29sb3IsIG91dGxpbmUgPSB0cnVlKSA9PiB7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcclxuICAgICAgY29uc3Qgc2NyZWVuWCA9IE1hdGguZmxvb3IoeCArIGN4KTtcclxuICAgICAgY29uc3Qgc2NyZWVuWSA9IE1hdGguZmxvb3IoeSArIGN5KTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguYXJjKHNjcmVlblgsIHNjcmVlblksIE1hdGguZmxvb3IocmFkaXVzKSwgMCwgTWF0aC5QSSAqIDIpO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG4gICAgICBpZiAob3V0bGluZSkge1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHN3aXRjaCAocm9vbS50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ2NsYXNzcm9vbSc6IC8vIFNhbGEgbGVrY3lqbmFcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzVkNDAzNyc7IC8vIEJyxIV6b3dhIG9id8OzZGthIGRsYSBtZWJsaVxyXG4gICAgICAgIGNvbnN0IGRlc2tXID0gdHMgKiAwLjYsXHJcbiAgICAgICAgICBkZXNrSCA9IHRzICogMC40LFxyXG4gICAgICAgICAgY2hhaXJIID0gdHMgKiAwLjI1O1xyXG4gICAgICAgIGNvbnN0IHNwYWNlWCA9IHRzICogMS4wLFxyXG4gICAgICAgICAgc3BhY2VZID0gdHMgKiAwLjk7XHJcbiAgICAgICAgLy8gVGFibGljYSBuYSBnw7NybmVqIMWbY2lhbmllXHJcbiAgICAgICAgZHJhd1JlY3QodyAqIDAuMjUsIG1hcmdpbiwgdyAqIDAuNSwgdHMgKiAwLjIsICcjMzMzJywgdHJ1ZSk7XHJcbiAgICAgICAgZHJhd1JlY3QodyAqIDAuMjUgKyAyLCBtYXJnaW4gKyAyLCB3ICogMC41IC0gNCwgdHMgKiAwLjIgLSA0LCAnIzRDQUY1MCcsIGZhbHNlKTsgLy8gWmllbG9uYSBwb3dpZXJ6Y2huaWFcclxuXHJcbiAgICAgICAgLy8gxYFhd2tpIGkga3J6ZXPFgmEgdyByesSZZGFjaFxyXG4gICAgICAgIGZvciAobGV0IHIgPSAwOyA7IHIrKykge1xyXG4gICAgICAgICAgY29uc3Qgcm93WSA9IG1hcmdpbiArIHRzICogMC41ICsgciAqIHNwYWNlWTtcclxuICAgICAgICAgIGlmIChyb3dZICsgZGVza0ggKyBjaGFpckggPiBoIC0gbWFyZ2luKSBicmVhazsgLy8gU3ByYXdkemVuaWUgY3p5IHptaWXFm2NpIHNpxJkgcnrEhWRcclxuICAgICAgICAgIGZvciAobGV0IGMgPSAwOyA7IGMrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb2xYID0gbWFyZ2luICsgYyAqIHNwYWNlWDtcclxuICAgICAgICAgICAgaWYgKGNvbFggKyBkZXNrVyA+IHcgLSBtYXJnaW4pIGJyZWFrOyAvLyBTcHJhd2R6ZW5pZSBjenkgem1pZcWbY2kgc2nEmSBrb2x1bW5hXHJcbiAgICAgICAgICAgIC8vIMWBYXdrYVxyXG4gICAgICAgICAgICBkcmF3UmVjdChjb2xYLCByb3dZLCBkZXNrVywgZGVza0gsICcjOEI0NTEzJyk7XHJcbiAgICAgICAgICAgIC8vIEtyemVzxYJvIHBvbmnFvGVqXHJcbiAgICAgICAgICAgIGRyYXdSZWN0KGNvbFggKyBkZXNrVyAqIDAuMSwgcm93WSArIGRlc2tIICsgb2JqTWFyZ2luLCBkZXNrVyAqIDAuOCwgY2hhaXJILCAnIzZhNGEzYScpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ29mZmljZSc6IC8vIEJpdXJvXHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM1ZDQwMzcnO1xyXG4gICAgICAgIC8vIEJpdXJrb1xyXG4gICAgICAgIGNvbnN0IHRhYmxlVyA9IE1hdGgubWluKHcgKiAwLjYsIHRzICogMi41KTtcclxuICAgICAgICBjb25zdCB0YWJsZUggPSBNYXRoLm1pbihoICogMC40LCB0cyAqIDEuMik7XHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luLCBtYXJnaW4sIHRhYmxlVywgdGFibGVILCAnI2EwNTIyZCcpO1xyXG4gICAgICAgIC8vIEtyemVzxYJvIGJpdXJvd2VcclxuICAgICAgICBkcmF3UmVjdChtYXJnaW4gKyB0YWJsZVcgKyBvYmpNYXJnaW4sIG1hcmdpbiArIHRhYmxlSCAqIDAuMSwgdHMgKiAwLjYsIHRzICogMC42LCAnIzQ0NCcpO1xyXG4gICAgICAgIC8vIFN6YWZhIG5hIGFrdGFcclxuICAgICAgICBjb25zdCBjYWJpbmV0VyA9IHRzICogMC44O1xyXG4gICAgICAgIGRyYXdSZWN0KHcgLSBtYXJnaW4gLSBjYWJpbmV0VywgbWFyZ2luLCBjYWJpbmV0VywgaCAtIG1hcmdpbiAqIDIsICcjNkI0RjQxJyk7XHJcbiAgICAgICAgLy8gS29tcHV0ZXIgbmEgYml1cmt1IChzeW1ib2xpY3puaWUpXHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luICsgb2JqTWFyZ2luLCBtYXJnaW4gKyBvYmpNYXJnaW4sIHRzICogMC41LCB0cyAqIDAuNCwgJyMzMzMnKTsgLy8gTW9uaXRvclxyXG4gICAgICAgIGRyYXdSZWN0KFxyXG4gICAgICAgICAgbWFyZ2luICsgb2JqTWFyZ2luICsgdHMgKiAwLjEsXHJcbiAgICAgICAgICBtYXJnaW4gKyBvYmpNYXJnaW4gKyB0cyAqIDAuNCArIDIsXHJcbiAgICAgICAgICB0cyAqIDAuMyxcclxuICAgICAgICAgIHRzICogMC4xLFxyXG4gICAgICAgICAgJyM1NTUnXHJcbiAgICAgICAgKTsgLy8gS2xhd2lhdHVyYVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnbGlicmFyeSc6IC8vIEJpYmxpb3Rla2FcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzQwMmExMCc7IC8vIENpZW1uaWVqc3phIG9id8OzZGthIGRsYSByZWdhxYLDs3dcclxuICAgICAgICBjb25zdCBzaGVsZlcgPSB0cyAqIDAuNjtcclxuICAgICAgICBjb25zdCBzaGVsZlNwYWNpbmcgPSB0cyAqIDEuNTtcclxuICAgICAgICAvLyBSZWdhxYJ5IHcgcGlvbmllXHJcbiAgICAgICAgZm9yIChsZXQgc3ggPSBtYXJnaW47IHN4IDwgdyAtIG1hcmdpbiAtIHNoZWxmVzsgc3ggKz0gc2hlbGZTcGFjaW5nKSB7XHJcbiAgICAgICAgICBkcmF3UmVjdChzeCwgbWFyZ2luLCBzaGVsZlcsIGggLSBtYXJnaW4gKiAyLCAnIzY1NDMyMScpO1xyXG4gICAgICAgICAgLy8gTGluaWUgcMOzxYJla1xyXG4gICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMCwwLDAsMC4zKSc7XHJcbiAgICAgICAgICBmb3IgKGxldCBzaGVsZlkgPSBtYXJnaW4gKyB0cyAqIDAuNTsgc2hlbGZZIDwgaCAtIG1hcmdpbjsgc2hlbGZZICs9IHRzICogMC43KSB7XHJcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgc3gsIHkgKyBzaGVsZlkpO1xyXG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyBzeCArIHNoZWxmVywgeSArIHNoZWxmWSk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjNDAyYTEwJzsgLy8gUHJ6eXdyw7PEhyBnxYLDs3dueSBrb2xvciBvYnfDs2RraVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTdMOzxYIgZG8gY3p5dGFuaWEgKGplxZtsaSBqZXN0IG1pZWpzY2UpXHJcbiAgICAgICAgaWYgKHcgPiBzaGVsZlNwYWNpbmcgKiAxLjUpIHtcclxuICAgICAgICAgIGNvbnN0IHRhYmxlTGliWCA9IHNoZWxmVyArIG1hcmdpbiArICh3IC0gc2hlbGZXICogMiAtIG1hcmdpbiAqIDIgLSB0cyAqIDEuNSkgLyAyOyAvLyBXecWbcm9ka3VqIHN0w7PFgiBtacSZZHp5IHJlZ2HFgmFtaVxyXG4gICAgICAgICAgaWYgKHRhYmxlTGliWCA+IHNoZWxmVyArIG1hcmdpbikge1xyXG4gICAgICAgICAgICAvLyBVcGV3bmlqIHNpxJksIMW8ZSBqZXN0IG1pZWpzY2VcclxuICAgICAgICAgICAgZHJhd1JlY3QodGFibGVMaWJYLCBoICogMC4zLCB0cyAqIDEuNSwgaCAqIDAuNCwgJyM5NjZGMzMnKTtcclxuICAgICAgICAgICAgLy8gS3J6ZXPFgmEgcHJ6eSBzdG9sZVxyXG4gICAgICAgICAgICBkcmF3UmVjdCh0YWJsZUxpYlggKyB0cyAqIDAuMiwgaCAqIDAuMyAtIHRzICogMC4zLCB0cyAqIDAuNSwgdHMgKiAwLjI1LCAnIzZhNGEzYScpO1xyXG4gICAgICAgICAgICBkcmF3UmVjdChcclxuICAgICAgICAgICAgICB0YWJsZUxpYlggKyB0cyAqIDAuMixcclxuICAgICAgICAgICAgICBoICogMC4zICsgaCAqIDAuNCArIG9iak1hcmdpbixcclxuICAgICAgICAgICAgICB0cyAqIDAuNSxcclxuICAgICAgICAgICAgICB0cyAqIDAuMjUsXHJcbiAgICAgICAgICAgICAgJyM2YTRhM2EnXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnZ3ltJzogLy8gU2nFgm93bmlhXHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM1NTUnO1xyXG4gICAgICAgIC8vIE1hdHkgZG8gxId3aWN6ZcWEXHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luLCBtYXJnaW4sIHcgKiAwLjQsIGggKiAwLjMsICcjNzc4ODk5Jyk7XHJcbiAgICAgICAgZHJhd1JlY3QodyAtIG1hcmdpbiAtIHcgKiAwLjMsIGggLSBtYXJnaW4gLSBoICogMC40LCB3ICogMC4zLCBoICogMC40LCAnIzc3ODg5OScpO1xyXG4gICAgICAgIC8vIEJpZcW8bmlhIChzeW1ib2xpY3puaWUpXHJcbiAgICAgICAgZHJhd1JlY3QodyAqIDAuNiwgbWFyZ2luLCB0cyAqIDAuOCwgdHMgKiAxLjgsICcjMzMzJyk7XHJcbiAgICAgICAgZHJhd1JlY3QodyAqIDAuNiArIHRzICogMC4xLCBtYXJnaW4gKyB0cyAqIDAuMSwgdHMgKiAwLjYsIHRzICogMS42LCAnIzU1NScsIGZhbHNlKTtcclxuICAgICAgICAvLyDFgWF3ZWN6a2FcclxuICAgICAgICBkcmF3UmVjdChtYXJnaW4sIGggKiAwLjUsIHRzICogMS41LCB0cyAqIDAuNCwgJyM4QjQ1MTMnKTtcclxuICAgICAgICAvLyBTdG9qYWsgeiBjacSZxbxhcmthbWlcclxuICAgICAgICBkcmF3UmVjdCh3IC0gbWFyZ2luIC0gdHMgKiAwLjUsIG1hcmdpbiwgdHMgKiAwLjUsIHRzICogMS41LCAnIzQ0NCcpO1xyXG4gICAgICAgIGRyYXdDaXJjbGUodyAtIG1hcmdpbiAtIHRzICogMC4yNSwgbWFyZ2luICsgdHMgKiAwLjMsIHRzICogMC4xNSwgJyM2NjYnKTtcclxuICAgICAgICBkcmF3Q2lyY2xlKHcgLSBtYXJnaW4gLSB0cyAqIDAuMjUsIG1hcmdpbiArIHRzICogMC43LCB0cyAqIDAuMTUsICcjNjY2Jyk7XHJcbiAgICAgICAgZHJhd0NpcmNsZSh3IC0gbWFyZ2luIC0gdHMgKiAwLjI1LCBtYXJnaW4gKyB0cyAqIDEuMSwgdHMgKiAwLjE1LCAnIzY2NicpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnbGFiJzogLy8gTGFib3JhdG9yaXVtXHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM2NjgnO1xyXG4gICAgICAgIC8vIFN0b8WCeSBsYWJvcmF0b3J5am5lIChkxYJ1Z2llKVxyXG4gICAgICAgIGNvbnN0IGxhYlRhYmxlSCA9IHRzICogMC44O1xyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiwgbWFyZ2luLCB3IC0gbWFyZ2luICogMiwgbGFiVGFibGVILCAnI2QwZDBkOCcpOyAvLyBKYXNub3N6YXJ5IHN0w7PFglxyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiwgaCAtIG1hcmdpbiAtIGxhYlRhYmxlSCwgdyAtIG1hcmdpbiAqIDIsIGxhYlRhYmxlSCwgJyNkMGQwZDgnKTtcclxuICAgICAgICAvLyBTcHJ6xJl0IG5hIHN0b8WCYWNoXHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luICsgdHMgKiAwLjIsIG1hcmdpbiArIHRzICogMC4xLCB0cyAqIDAuNSwgdHMgKiAwLjUsICcjNGE5MGUyJyk7IC8vIENvxZsgbmllYmllc2tpZWdvXHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luICsgdHMgKiAxLjAsIG1hcmdpbiArIHRzICogMC4xLCB0cyAqIDAuMywgdHMgKiAwLjYsICcjZjVhNjIzJyk7IC8vIENvxZsgcG9tYXJhxYRjem93ZWdvXHJcbiAgICAgICAgZHJhd0NpcmNsZSh3IC0gbWFyZ2luICogMiAtIHRzICogMC40LCBtYXJnaW4gKyBsYWJUYWJsZUggKiAwLjUsIHRzICogMC4yLCAnI2UwNDA0MCcsIHRydWUpOyAvLyBDb8WbIGN6ZXJ3b25lZ28gb2tyxIVnxYJlZ29cclxuICAgICAgICAvLyBTemFma2EgeiBvZGN6eW5uaWthbWlcclxuICAgICAgICBkcmF3UmVjdChcclxuICAgICAgICAgIHcgKiAwLjQsXHJcbiAgICAgICAgICBtYXJnaW4gKyBsYWJUYWJsZUggKyBvYmpNYXJnaW4sXHJcbiAgICAgICAgICB0cyxcclxuICAgICAgICAgIGggLSBtYXJnaW4gKiAyIC0gbGFiVGFibGVIICogMiAtIG9iak1hcmdpbiAqIDIsXHJcbiAgICAgICAgICAnI2EwYTBiMCdcclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnc3RvcmFnZSc6IC8vIE1hZ2F6eW5cclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzRkNDAzMCc7XHJcbiAgICAgICAgLy8gUMOzxYJraS9yZWdhxYJ5IG1ldGFsb3dlXHJcbiAgICAgICAgY29uc3QgbWV0YWxTaGVsZlcgPSB3IC0gbWFyZ2luICogMjtcclxuICAgICAgICBjb25zdCBtZXRhbFNoZWxmSCA9IHRzICogMC41O1xyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiwgbWFyZ2luLCBtZXRhbFNoZWxmVywgbWV0YWxTaGVsZkgsICcjOWU5ZTllJyk7XHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luLCBoIC0gbWFyZ2luIC0gbWV0YWxTaGVsZkgsIG1ldGFsU2hlbGZXLCBtZXRhbFNoZWxmSCwgJyM5ZTllOWUnKTtcclxuICAgICAgICAvLyBQdWTFgmFcclxuICAgICAgICBjb25zdCBib3hTaXplID0gdHMgKiAwLjY7XHJcbiAgICAgICAgZHJhd1JlY3QobWFyZ2luICsgdHMgKiAwLjIsIG1hcmdpbiArIG1ldGFsU2hlbGZIICsgb2JqTWFyZ2luLCBib3hTaXplLCBib3hTaXplLCAnI2JmOGY2ZicpO1xyXG4gICAgICAgIGRyYXdSZWN0KG1hcmdpbiArIHRzICogMS4wLCBtYXJnaW4gKyBtZXRhbFNoZWxmSCArIG9iak1hcmdpbiwgYm94U2l6ZSwgYm94U2l6ZSwgJyNiZjhmNmYnKTtcclxuICAgICAgICBkcmF3UmVjdChcclxuICAgICAgICAgIHcgLSBtYXJnaW4gLSBib3hTaXplICogMS41LFxyXG4gICAgICAgICAgbWFyZ2luICsgbWV0YWxTaGVsZkggKyBvYmpNYXJnaW4gKiAzLFxyXG4gICAgICAgICAgYm94U2l6ZSAqIDEuMixcclxuICAgICAgICAgIGJveFNpemUgKiAwLjgsXHJcbiAgICAgICAgICAnI2JmOGY2ZidcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIFN0YXJlIGJpdXJrbyB3IHJvZ3VcclxuICAgICAgICBkcmF3UmVjdCh3IC0gbWFyZ2luIC0gdHMsIGggLSBtYXJnaW4gLSB0cywgdHMgKiAwLjgsIHRzICogMC44LCAnIzZhNGEzYScpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAndXRpbGl0eSc6IC8vIFBvbWllc3pjemVuaWUgZ29zcG9kYXJjemVcclxuICAgICAgZGVmYXVsdDogLy8gRG9tecWbbG5lLCBqZcWbbGkgdHlwIG5pZXpuYW55XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyM1ZDQwMzcnO1xyXG4gICAgICAgIC8vIFNrcnp5bmtpL3VyesSFZHplbmlhXHJcbiAgICAgICAgZHJhd1JlY3QodyAqIDAuMSwgaCAqIDAuMTUsIHcgKiAwLjMsIGggKiAwLjI1LCAnI0EwNTIyRCcpO1xyXG4gICAgICAgIGRyYXdSZWN0KHcgKiAwLjYsIGggKiAwLjUsIHcgKiAwLjMsIGggKiAwLjQsICcjQTA1MjJEJyk7XHJcbiAgICAgICAgLy8gU3phZmEgbWV0YWxvd2FcclxuICAgICAgICBkcmF3UmVjdCh3IC0gbWFyZ2luIC0gdHMgKiAwLjUsIG1hcmdpbiwgdHMgKiAwLjUsIGggLSBtYXJnaW4gKiAyLCAnIzc3NycpO1xyXG4gICAgICAgIC8vIFJ1cnkva2FibGUgKHN5bWJvbGljem5pZSlcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzU1NSc7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDM7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oeCArIG1hcmdpbiwgeSArIGggKiAwLjgpO1xyXG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcgLSBtYXJnaW4sIHkgKyBoICogMC44KTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oeCArIHcgKiAwLjcsIHkgKyBtYXJnaW4pO1xyXG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcgKiAwLjcsIHkgKyBoIC0gbWFyZ2luKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7IC8vIFByenl3csOzxIcgZ3J1Ym/Fm8SHIGxpbmlpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogTmFyeXN1aiBrc2nEhcW8a2kgKi9cclxuICBkcmF3Qm9va3MoY3R4LCBib29rcywgb2Zmc2V0WCwgb2Zmc2V0WSwgYm9va0ltYWdlKSB7XHJcbiAgICBpZiAoIWJvb2tzIHx8IGJvb2tzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgY29uc3QgZGVmYXVsdEJvb2tTaXplID0gdGhpcy50aWxlU2l6ZSAqIDAuNjtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGJvb2sgb2YgYm9va3MpIHtcclxuICAgICAgY29uc3QgaXNDb2xsZWN0ZWQgPSBib29rLmlzQ29sbGVjdGVkIHx8IGJvb2suY29sbGVjdGVkOyAvLyBIYW5kbGUgYm90aCBwb3RlbnRpYWwgcHJvcGVydGllc1xyXG4gICAgICBpZiAoIWlzQ29sbGVjdGVkKSB7XHJcbiAgICAgICAgY29uc3QgYm9va1NpemUgPSBib29rLnNpemUgfHwgZGVmYXVsdEJvb2tTaXplO1xyXG4gICAgICAgIC8vIFJvdW5kIGRyYXdpbmcgY29vcmRpbmF0ZXNcclxuICAgICAgICBjb25zdCBzY3JlZW5YID0gTWF0aC5mbG9vcihib29rLnggKyBvZmZzZXRYIC0gYm9va1NpemUgLyAyKTtcclxuICAgICAgICBjb25zdCBzY3JlZW5ZID0gTWF0aC5mbG9vcihib29rLnkgKyBvZmZzZXRZIC0gYm9va1NpemUgLyAyKTtcclxuXHJcbiAgICAgICAgLy8gQmFzaWMgdmlzaWJpbGl0eSBjaGVja1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHNjcmVlblggKyBib29rU2l6ZSA+IDAgJiZcclxuICAgICAgICAgIHNjcmVlblggPCBjdHguY2FudmFzLndpZHRoICYmXHJcbiAgICAgICAgICBzY3JlZW5ZICsgYm9va1NpemUgPiAwICYmXHJcbiAgICAgICAgICBzY3JlZW5ZIDwgY3R4LmNhbnZhcy5oZWlnaHRcclxuICAgICAgICApIHtcclxuICAgICAgICAgIC8vIFByZWZlciBib29rJ3Mgb3duIGRyYXcgbWV0aG9kIGlmIGF2YWlsYWJsZVxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBib29rLmRyYXcgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgLy8gUGFzcyByb3VuZGVkIGNvb3JkaW5hdGVzIGFuZCBzaXplXHJcbiAgICAgICAgICAgIGJvb2suZHJhdyhjdHgsIG9mZnNldFgsIG9mZnNldFksIGJvb2tJbWFnZSk7IC8vIGJvb2suZHJhdyBzaG91bGQgaGFuZGxlIGl0cyBvd24gcm91bmRpbmcgaWYgbmVlZGVkIGludGVybmFsbHlcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIGRyYXdpbmdcclxuICAgICAgICAgICAgaWYgKGJvb2tJbWFnZSkge1xyXG4gICAgICAgICAgICAgIC8vIERyYXcgd2l0aCByb3VuZGVkIGNvb3JkaW5hdGVzXHJcbiAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShib29rSW1hZ2UsIHNjcmVlblgsIHNjcmVlblksIGJvb2tTaXplLCBib29rU2l6ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjOGQ2ZTYzJzsgLy8gQnJvd24gYm9vayBjb2xvclxyXG4gICAgICAgICAgICAgIGN0eC5maWxsUmVjdChzY3JlZW5YLCBzY3JlZW5ZLCBib29rU2l6ZSwgYm9va1NpemUpO1xyXG4gICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjNWQ0MDM3JzsgLy8gRGFya2VyIG91dGxpbmVcclxuICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gMTtcclxuICAgICAgICAgICAgICBjdHguc3Ryb2tlUmVjdChzY3JlZW5YICsgMC41LCBzY3JlZW5ZICsgMC41LCBib29rU2l6ZSAtIDEsIGJvb2tTaXplIC0gMSk7IC8vIERyYXcgYm9yZGVyIG1vcmUgY2xlYXJseVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59IC8vIEVuZCBjbGFzcyBNYXBSZW5kZXJlclxyXG4iLCIvLyBzcmMvbWFwL21hcEdlbmVyYXRvci5qc1xyXG5cclxuaW1wb3J0IHtcclxuICBUSUxFX1dBTEwsXHJcbiAgVElMRV9DT1JSSURPUixcclxuICBUSUxFX1JPT01fRkxPT1IsXHJcbiAgVElMRV9MSUZULFxyXG4gIEdZTV9DSEFOQ0VfT05fRklSU1RfRkxPT1IsXHJcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgcmFuZG9tSW50LCBwZXJmb3JtQkZTIH0gZnJvbSAnLi4vdXRpbHMvbWFwLmpzJzsgLy8gQXNzdW1pbmcgcGVyZm9ybUJGUyBpcyBpbiBtYXAuanNcclxuXHJcbi8vIC0tLSBNb2R1bGUtbGV2ZWwgc3RhdGUgZm9yIGxpZnQgY29uc2lzdGVuY3kgLS0tXHJcbmxldCBjb25zaXN0ZW50TGlmdENvb3JkcyA9IG51bGw7XHJcblxyXG4vLyAtLS0gR2VuZXJhdGlvbiBQYXJhbWV0ZXJzIChEZWZhdWx0cykgLS0tXHJcbmNvbnN0IERFRkFVTFRfR0VOX1BBUkFNUyA9IHtcclxuICBtaW5Sb29tU2l6ZTogNSxcclxuICBtYXhSb29tU2l6ZTogMTAsXHJcbiAgY29ycmlkb3JUaGlja25lc3M6IDEsIC8vIEN1cnJlbnRseSBoYXJkY29kZWQgdG8gMSBpbiBjYXJ2aW5nIGZ1bmNzXHJcbiAgbnVtUm9vbXM6IDEyLFxyXG4gIG1heFJvb21BdHRlbXB0czogMjAwLFxyXG4gIHJvb21UeXBlV2VpZ2h0czoge1xyXG4gICAgY2xhc3Nyb29tOiA1MCxcclxuICAgIG9mZmljZTogMjUsXHJcbiAgICBsaWJyYXJ5OiAxNSxcclxuICAgIGd5bTogMCwgLy8gQmFzZSB3ZWlnaHQsIGFkanVzdGVkIGJhc2VkIG9uIGZsb29yXHJcbiAgICB1dGlsaXR5OiAxMCxcclxuICB9LFxyXG59O1xyXG5cclxuLy8gLS0tIENvcmUgR2VuZXJhdGlvbiBGdW5jdGlvbiAtLS1cclxuLy8gSW4gZ2VuZXJhdGVMZXZlbERhdGEsIG1ha2Ugc3VyZSB0byBwYXNzIGByb29tc2AgdG8gYF9wbGFjZUxpZnRgXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUxldmVsRGF0YShjb25maWcpIHtcclxuICBjb25zdCB7IGNvbHMsIHJvd3MsIGZsb29yTnVtYmVyLCBtaW5GbG9vciwgdGlsZVNpemUsIGdlbmVyYXRpb25QYXJhbXM6IHVzZXJQYXJhbXMgfSA9IGNvbmZpZztcclxuICBjb25zdCBnZW5QYXJhbXMgPSB7IC4uLkRFRkFVTFRfR0VOX1BBUkFNUywgLi4udXNlclBhcmFtcyB9O1xyXG5cclxuICBnZW5QYXJhbXMucm9vbVR5cGVXZWlnaHRzLmd5bSA9IGZsb29yTnVtYmVyID09PSBtaW5GbG9vciA/IEdZTV9DSEFOQ0VfT05fRklSU1RfRkxPT1IgKiAxMDAgOiAwO1xyXG5cclxuICBpZiAoZmxvb3JOdW1iZXIgPT09IG1pbkZsb29yKSB7XHJcbiAgICBjb25zaXN0ZW50TGlmdENvb3JkcyA9IG51bGw7XHJcbiAgICBjb25zb2xlLmxvZyhgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gUmVzZXQgY29uc2lzdGVudCBsaWZ0IGNvb3JkcyBmb3IgdGhlIGZpcnN0IGZsb29yLmApO1xyXG4gIH1cclxuXHJcbiAgY29uc29sZS5sb2coYFtNYXBHZW4gRmxvb3IgJHtmbG9vck51bWJlcn1dIFN0YXJ0aW5nIG1hcCBnZW5lcmF0aW9uICgke2NvbHN9eCR7cm93c30pLi4uYCk7XHJcbiAgY29uc3QgbWFwID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogcm93cyB9LCAoKSA9PiBBcnJheShjb2xzKS5maWxsKFRJTEVfV0FMTCkpO1xyXG4gIGNvbnN0IHJvb21zID0gW107IC8vIFRoaXMgaXMgdGhlIGByb29tc0xpc3RgXHJcbiAgbGV0IGxpZnRQb3NpdGlvbiA9IG51bGw7XHJcblxyXG4gIF9wbGFjZVJvb21zKG1hcCwgcm9vbXMsIGNvbHMsIHJvd3MsIGdlblBhcmFtcyk7IC8vIHJvb21zIGlzIHBvcHVsYXRlZCBoZXJlXHJcblxyXG4gIGlmIChyb29tcy5sZW5ndGggPCAyICYmIGZsb29yTnVtYmVyICE9PSBtaW5GbG9vcikge1xyXG4gICAgY29uc29sZS53YXJuKFxyXG4gICAgICBgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gUGxhY2VkIG9ubHkgJHtyb29tcy5sZW5ndGh9IHJvb21zLiBFeHBlY3QgbGltaXRlZCBjb25uZWN0aXZpdHkuYFxyXG4gICAgKTtcclxuICB9IGVsc2UgaWYgKHJvb21zLmxlbmd0aCA+PSAyKSB7XHJcbiAgICBfY29ubmVjdFJvb21zQmV0dGVyKG1hcCwgcm9vbXMsIGNvbHMsIHJvd3MpO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHBsYWNlZExpZnREYXRhID0gX3BsYWNlTGlmdChcclxuICAgICAgbWFwLFxyXG4gICAgICBjb2xzLFxyXG4gICAgICByb3dzLFxyXG4gICAgICBmbG9vck51bWJlcixcclxuICAgICAgbWluRmxvb3IsXHJcbiAgICAgIHRpbGVTaXplLFxyXG4gICAgICBjb25zaXN0ZW50TGlmdENvb3JkcyxcclxuICAgICAgcm9vbXMgLy8gUEFTUyBUSEUgR0VORVJBVEVEIFJPT01TIExJU1QgSEVSRVxyXG4gICAgKTtcclxuICAgIGxpZnRQb3NpdGlvbiA9IHBsYWNlZExpZnREYXRhLnBvc2l0aW9uO1xyXG4gICAgaWYgKHBsYWNlZExpZnREYXRhLmNvb3Jkcykge1xyXG4gICAgICBjb25zaXN0ZW50TGlmdENvb3JkcyA9IHBsYWNlZExpZnREYXRhLmNvb3JkcztcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gQ1JJVElDQUw6IExpZnQgcGxhY2VtZW50IGZhaWxlZDpgLCBlcnJvcik7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYExpZnQgcGxhY2VtZW50IGZhaWxlZCBvbiBmbG9vciAke2Zsb29yTnVtYmVyfTogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gIH1cclxuXHJcbiAgX2Vuc3VyZU1hcEJvcmRlcnMobWFwLCBjb2xzLCByb3dzKTtcclxuXHJcbiAgaWYgKGxpZnRQb3NpdGlvbiAmJiAhX2lzTGlmdFJlYWNoYWJsZShtYXAsIGxpZnRQb3NpdGlvbiwgY29scywgcm93cykpIHtcclxuICAgIGNvbnNvbGUud2FybihcclxuICAgICAgYFtNYXBWYWxpZGF0aW9uIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBMaWZ0IGF0IHRpbGUoJHtsaWZ0UG9zaXRpb24udGlsZVh9LCAke2xpZnRQb3NpdGlvbi50aWxlWX0pIGluaXRpYWxseSB1bnJlYWNoYWJsZS4gQXR0ZW1wdGluZyBmaW5hbCBmb3JjZSBjb25uZWN0aW9uLmBcclxuICAgICk7XHJcbiAgICBjb25zdCBjb25uZWN0ZWQgPSBfZm9yY2VDb25uZWN0aW9uVG9Qb2ludChcclxuICAgICAgbWFwLFxyXG4gICAgICBsaWZ0UG9zaXRpb24udGlsZVgsXHJcbiAgICAgIGxpZnRQb3NpdGlvbi50aWxlWSxcclxuICAgICAgY29scyxcclxuICAgICAgcm93c1xyXG4gICAgKTtcclxuICAgIGlmICghY29ubmVjdGVkIHx8ICFfaXNMaWZ0UmVhY2hhYmxlKG1hcCwgbGlmdFBvc2l0aW9uLCBjb2xzLCByb3dzKSkge1xyXG4gICAgICBjb25zdCBlcnJvck1zZyA9IGBDUklUSUNBTDogUGxhY2VkIGxpZnQgYXQgdGlsZSgke2xpZnRQb3NpdGlvbi50aWxlWH0sICR7bGlmdFBvc2l0aW9uLnRpbGVZfSkgaXMgVU5SRUFDSEFCTEUgZXZlbiBhZnRlciBmb3JjZSBjb25uZWN0ISBHZW5lcmF0aW9uIGZhaWxlZC5gO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBbTWFwR2VuIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSAke2Vycm9yTXNnfWApO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYExpZnQgaXMgdW5yZWFjaGFibGUgb24gZmxvb3IgJHtmbG9vck51bWJlcn0uIENhbm5vdCBwcm9jZWVkLmApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYFtNYXBWYWxpZGF0aW9uIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBMaWZ0IGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bCBhZnRlciBzZWNvbmQgYXR0ZW1wdC5gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChsaWZ0UG9zaXRpb24pIHtcclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBgW01hcFZhbGlkYXRpb24gRmxvb3IgJHtmbG9vck51bWJlcn1dIExpZnQgYXQgdGlsZSgke2xpZnRQb3NpdGlvbi50aWxlWH0sICR7bGlmdFBvc2l0aW9uLnRpbGVZfSkgaXMgcmVhY2hhYmxlLmBcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgTWFwIGdlbmVyYXRlZCB3aXRob3V0IGEgdmFsaWQgbGlmdCBwb3NpdGlvbiBvbiBmbG9vciAke2Zsb29yTnVtYmVyfS5gKTtcclxuICB9XHJcblxyXG4gIGNvbnNvbGUubG9nKGBbTWFwR2VuIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBNYXAgZ2VuZXJhdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LmApO1xyXG4gIHJldHVybiB7IG1hcCwgcm9vbXMsIGxpZnRQb3NpdGlvbiB9O1xyXG59XHJcblxyXG4vLyAtLS0gSGVscGVyOiBQbGFjZSBSb29tcyAtLS1cclxuZnVuY3Rpb24gX3BsYWNlUm9vbXMobWFwLCByb29tcywgY29scywgcm93cywgZ2VuUGFyYW1zKSB7XHJcbiAgY29uc3QgeyBtaW5Sb29tU2l6ZSwgbWF4Um9vbVNpemUsIG51bVJvb21zLCBtYXhSb29tQXR0ZW1wdHMsIHJvb21UeXBlV2VpZ2h0cyB9ID0gZ2VuUGFyYW1zO1xyXG4gIGxldCByb29tQXR0ZW1wdHMgPSAwO1xyXG5cclxuICBjb25zdCB3ZWlnaHRlZFR5cGVzID0gW107XHJcbiAgbGV0IHRvdGFsV2VpZ2h0ID0gMDtcclxuICBmb3IgKGNvbnN0IHR5cGUgaW4gcm9vbVR5cGVXZWlnaHRzKSB7XHJcbiAgICBjb25zdCB3ZWlnaHQgPSByb29tVHlwZVdlaWdodHNbdHlwZV07XHJcbiAgICBpZiAod2VpZ2h0ID4gMCkge1xyXG4gICAgICB0b3RhbFdlaWdodCArPSB3ZWlnaHQ7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2VpZ2h0OyBpKyspIHtcclxuICAgICAgICB3ZWlnaHRlZFR5cGVzLnB1c2godHlwZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLy8gRW5zdXJlIHdlaWdodGVkVHlwZXMgaXMgbm90IGVtcHR5IGlmIGFsbCB3ZWlnaHRzIGFyZSAwIChlZGdlIGNhc2UpXHJcbiAgaWYgKHdlaWdodGVkVHlwZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICB3ZWlnaHRlZFR5cGVzLnB1c2goJ3V0aWxpdHknKTsgLy8gRGVmYXVsdCBmYWxsYmFja1xyXG4gICAgY29uc29sZS53YXJuKFxyXG4gICAgICBcIltNYXBHZW4gUm9vbXNdIE5vIHJvb20gdHlwZSB3ZWlnaHRzIHByb3ZpZGVkIG9yIGFsbCBhcmUgemVyby4gRGVmYXVsdGluZyB0byAndXRpbGl0eScuXCJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICB3aGlsZSAocm9vbXMubGVuZ3RoIDwgbnVtUm9vbXMgJiYgcm9vbUF0dGVtcHRzIDwgbWF4Um9vbUF0dGVtcHRzKSB7XHJcbiAgICByb29tQXR0ZW1wdHMrKztcclxuICAgIGNvbnN0IHJvb21XaWR0aCA9IHJhbmRvbUludChtaW5Sb29tU2l6ZSwgbWF4Um9vbVNpemUpO1xyXG4gICAgY29uc3Qgcm9vbUhlaWdodCA9IHJhbmRvbUludChtaW5Sb29tU2l6ZSwgbWF4Um9vbVNpemUpO1xyXG4gICAgLy8gRW5zdXJlIHJvb20gZml0cyB3aXRoaW4gbWFwIGJvdW5kYXJpZXMgKGxlYXZpbmcgMS10aWxlIGJvcmRlcilcclxuICAgIGNvbnN0IHJvb21Db2wgPSByYW5kb21JbnQoMSwgY29scyAtIHJvb21XaWR0aCAtIDEpO1xyXG4gICAgY29uc3Qgcm9vbVJvdyA9IHJhbmRvbUludCgxLCByb3dzIC0gcm9vbUhlaWdodCAtIDEpO1xyXG5cclxuICAgIGNvbnN0IHJvb21UeXBlID0gd2VpZ2h0ZWRUeXBlc1tyYW5kb21JbnQoMCwgd2VpZ2h0ZWRUeXBlcy5sZW5ndGggLSAxKV07XHJcblxyXG4gICAgY29uc3QgbmV3Um9vbSA9IHtcclxuICAgICAgY29sOiByb29tQ29sLFxyXG4gICAgICByb3c6IHJvb21Sb3csXHJcbiAgICAgIHdpZHRoOiByb29tV2lkdGgsXHJcbiAgICAgIGhlaWdodDogcm9vbUhlaWdodCxcclxuICAgICAgdHlwZTogcm9vbVR5cGUsXHJcbiAgICAgIGlkOiBgcm9vbV8ke3Jvb21zLmxlbmd0aCArIDF9YCxcclxuICAgICAgY2VudGVyVGlsZVg6IE1hdGguZmxvb3Iocm9vbUNvbCArIHJvb21XaWR0aCAvIDIpLFxyXG4gICAgICBjZW50ZXJUaWxlWTogTWF0aC5mbG9vcihyb29tUm93ICsgcm9vbUhlaWdodCAvIDIpLFxyXG4gICAgICBjb25uZWN0ZWQ6IGZhbHNlLFxyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgb3ZlcmxhcHMgPSBmYWxzZTtcclxuICAgIGNvbnN0IGJ1ZmZlciA9IDI7IC8vIEtlZXAgYSBidWZmZXIgYmV0d2VlbiByb29tc1xyXG4gICAgZm9yIChjb25zdCBleGlzdGluZ1Jvb20gb2Ygcm9vbXMpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIG5ld1Jvb20uY29sIDwgZXhpc3RpbmdSb29tLmNvbCArIGV4aXN0aW5nUm9vbS53aWR0aCArIGJ1ZmZlciAmJlxyXG4gICAgICAgIG5ld1Jvb20uY29sICsgbmV3Um9vbS53aWR0aCArIGJ1ZmZlciA+IGV4aXN0aW5nUm9vbS5jb2wgJiZcclxuICAgICAgICBuZXdSb29tLnJvdyA8IGV4aXN0aW5nUm9vbS5yb3cgKyBleGlzdGluZ1Jvb20uaGVpZ2h0ICsgYnVmZmVyICYmXHJcbiAgICAgICAgbmV3Um9vbS5yb3cgKyBuZXdSb29tLmhlaWdodCArIGJ1ZmZlciA+IGV4aXN0aW5nUm9vbS5yb3dcclxuICAgICAgKSB7XHJcbiAgICAgICAgb3ZlcmxhcHMgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFvdmVybGFwcykge1xyXG4gICAgICByb29tcy5wdXNoKG5ld1Jvb20pO1xyXG4gICAgICAvLyBDYXJ2ZSByb29tIGZsb29yXHJcbiAgICAgIGZvciAobGV0IHIgPSBuZXdSb29tLnJvdzsgciA8IG5ld1Jvb20ucm93ICsgbmV3Um9vbS5oZWlnaHQ7IHIrKykge1xyXG4gICAgICAgIGZvciAobGV0IGMgPSBuZXdSb29tLmNvbDsgYyA8IG5ld1Jvb20uY29sICsgbmV3Um9vbS53aWR0aDsgYysrKSB7XHJcbiAgICAgICAgICAvLyBEb3VibGUgY2hlY2sgYm91bmRzIGp1c3QgaW4gY2FzZSBjYWxjdWxhdGlvbiB3YXMgb2ZmXHJcbiAgICAgICAgICBpZiAociA+PSAwICYmIHIgPCByb3dzICYmIGMgPj0gMCAmJiBjIDwgY29scykge1xyXG4gICAgICAgICAgICBtYXBbcl1bY10gPSBUSUxFX1JPT01fRkxPT1I7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChyb29tcy5sZW5ndGggPCBudW1Sb29tcykge1xyXG4gICAgY29uc29sZS53YXJuKFxyXG4gICAgICBgW01hcEdlbiBSb29tc10gUGxhY2VkIG9ubHkgJHtyb29tcy5sZW5ndGh9LyR7bnVtUm9vbXN9IHJvb21zIGFmdGVyICR7cm9vbUF0dGVtcHRzfSBhdHRlbXB0cy5gXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZyhgW01hcEdlbiBSb29tc10gUGxhY2VkICR7cm9vbXMubGVuZ3RofSByb29tcyBhZnRlciAke3Jvb21BdHRlbXB0c30gYXR0ZW1wdHMuYCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyAtLS0gSGVscGVyOiBDb25uZWN0IFJvb21zIC0tLVxyXG5mdW5jdGlvbiBfY29ubmVjdFJvb21zQmV0dGVyKG1hcCwgcm9vbXMsIGNvbHMsIHJvd3MpIHtcclxuICBpZiAocm9vbXMubGVuZ3RoIDwgMikgcmV0dXJuO1xyXG4gIGNvbnNvbGUubG9nKGBbTWFwR2VuIENvbm5lY3RdIENvbm5lY3RpbmcgJHtyb29tcy5sZW5ndGh9IHJvb21zIChpbXByb3ZlZCkuLi5gKTtcclxuXHJcbiAgLy8gVXNlIGEgU2V0IGZvciBmYXN0ZXIgY2hlY2tpbmcgb2YgY29ubmVjdGVkIHN0YXR1c1xyXG4gIGNvbnN0IGNvbm5lY3RlZFNldCA9IG5ldyBTZXQoW3Jvb21zWzBdLmlkXSk7XHJcbiAgbGV0IHVuY29ubmVjdGVkUm9vbXMgPSByb29tcy5zbGljZSgxKTsgLy8gU3RhcnQgd2l0aCBhbGwgYnV0IHRoZSBmaXJzdFxyXG5cclxuICB3aGlsZSAodW5jb25uZWN0ZWRSb29tcy5sZW5ndGggPiAwKSB7XHJcbiAgICBsZXQgYmVzdERpc3RhbmNlU3EgPSBJbmZpbml0eTtcclxuICAgIGxldCBiZXN0VW5jb25uZWN0ZWRSb29tID0gbnVsbDtcclxuICAgIGxldCBiZXN0Q29ubmVjdGVkUm9vbUlkID0gbnVsbDsgLy8gU3RvcmUgSUQgb2YgdGhlIGNvbm5lY3RlZCByb29tXHJcbiAgICBsZXQgYmVzdFVuY29ubmVjdGVkSW5kZXggPSAtMTtcclxuXHJcbiAgICAvLyBGaW5kIHRoZSB1bmNvbm5lY3RlZCByb29tIGNsb3Nlc3QgdG8gQU5ZIGNvbm5lY3RlZCByb29tXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVuY29ubmVjdGVkUm9vbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgcm9vbVUgPSB1bmNvbm5lY3RlZFJvb21zW2ldO1xyXG4gICAgICBmb3IgKGNvbnN0IHJvb21DIG9mIHJvb21zKSB7XHJcbiAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIEFMTCByb29tc1xyXG4gICAgICAgIGlmIChjb25uZWN0ZWRTZXQuaGFzKHJvb21DLmlkKSkge1xyXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgcm9vbUMgaXMgY29ubmVjdGVkXHJcbiAgICAgICAgICBjb25zdCBkeCA9IHJvb21VLmNlbnRlclRpbGVYIC0gcm9vbUMuY2VudGVyVGlsZVg7XHJcbiAgICAgICAgICBjb25zdCBkeSA9IHJvb21VLmNlbnRlclRpbGVZIC0gcm9vbUMuY2VudGVyVGlsZVk7XHJcbiAgICAgICAgICBjb25zdCBkaXN0U3EgPSBkeCAqIGR4ICsgZHkgKiBkeTtcclxuICAgICAgICAgIGlmIChkaXN0U3EgPCBiZXN0RGlzdGFuY2VTcSkge1xyXG4gICAgICAgICAgICBiZXN0RGlzdGFuY2VTcSA9IGRpc3RTcTtcclxuICAgICAgICAgICAgYmVzdFVuY29ubmVjdGVkUm9vbSA9IHJvb21VO1xyXG4gICAgICAgICAgICBiZXN0Q29ubmVjdGVkUm9vbUlkID0gcm9vbUMuaWQ7XHJcbiAgICAgICAgICAgIGJlc3RVbmNvbm5lY3RlZEluZGV4ID0gaTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmVzdFVuY29ubmVjdGVkUm9vbSAmJiBiZXN0Q29ubmVjdGVkUm9vbUlkICE9PSBudWxsKSB7XHJcbiAgICAgIC8vIEZpbmQgdGhlIGFjdHVhbCBjb25uZWN0ZWQgcm9vbSBvYmplY3QgdXNpbmcgdGhlIElEXHJcbiAgICAgIGNvbnN0IGJlc3RDb25uZWN0ZWRSb29tID0gcm9vbXMuZmluZCgocikgPT4gci5pZCA9PT0gYmVzdENvbm5lY3RlZFJvb21JZCk7XHJcbiAgICAgIGlmICghYmVzdENvbm5lY3RlZFJvb20pIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgYFtNYXBHZW4gQ29ubmVjdF0gRXJyb3I6IENvdWxkIG5vdCBmaW5kIGNvbm5lY3RlZCByb29tIHdpdGggSUQgJHtiZXN0Q29ubmVjdGVkUm9vbUlkfS4gU2tpcHBpbmcgY29ubmVjdGlvbi5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBSZW1vdmUgdGhlIHByb2JsZW1hdGljIHVuY29ubmVjdGVkIHJvb20gdG8gYXZvaWQgaW5maW5pdGUgbG9vcFxyXG4gICAgICAgIHVuY29ubmVjdGVkUm9vbXMuc3BsaWNlKGJlc3RVbmNvbm5lY3RlZEluZGV4LCAxKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgX2NhcnZlQ29ycmlkb3JCZXR3ZWVuKG1hcCwgYmVzdENvbm5lY3RlZFJvb20sIGJlc3RVbmNvbm5lY3RlZFJvb20sIGNvbHMsIHJvd3MpO1xyXG4gICAgICBjb25uZWN0ZWRTZXQuYWRkKGJlc3RVbmNvbm5lY3RlZFJvb20uaWQpOyAvLyBBZGQgdGhlIG5ld2x5IGNvbm5lY3RlZCByb29tIElEIHRvIHRoZSBzZXRcclxuICAgICAgdW5jb25uZWN0ZWRSb29tcy5zcGxpY2UoYmVzdFVuY29ubmVjdGVkSW5kZXgsIDEpOyAvLyBSZW1vdmUgZnJvbSB1bmNvbm5lY3RlZCBsaXN0XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdbTWFwR2VuIENvbm5lY3RdIENvdWxkIG5vdCBmaW5kIG5leHQgcGFpciBvZiByb29tcyB0byBjb25uZWN0LiBCcmVha2luZyBsb29wLiBSZW1haW5pbmcgdW5jb25uZWN0ZWQ6JyxcclxuICAgICAgICB1bmNvbm5lY3RlZFJvb21zLm1hcCgocikgPT4gci5pZClcclxuICAgICAgKTtcclxuICAgICAgYnJlYWs7IC8vIEF2b2lkIGluZmluaXRlIGxvb3AgaWYgc29tZXRoaW5nIHdlbnQgd3JvbmdcclxuICAgIH1cclxuICB9XHJcbiAgY29uc29sZS5sb2coYFtNYXBHZW4gQ29ubmVjdF0gRmluaXNoZWQgY29ubmVjdGluZyByb29tcy4gQ29ubmVjdGVkIGNvdW50OiAke2Nvbm5lY3RlZFNldC5zaXplfWApO1xyXG59XHJcblxyXG4vLyAtLS0gSGVscGVyOiBDYXJ2ZSBDb3JyaWRvcnMgLS0tXHJcbmZ1bmN0aW9uIF9jYXJ2ZUNvcnJpZG9yQmV0d2VlbihtYXAsIHJvb21BLCByb29tQiwgY29scywgcm93cykge1xyXG4gIGNvbnN0IHsgY2VudGVyVGlsZVg6IGF4LCBjZW50ZXJUaWxlWTogYXkgfSA9IHJvb21BO1xyXG4gIGNvbnN0IHsgY2VudGVyVGlsZVg6IGJ4LCBjZW50ZXJUaWxlWTogYnkgfSA9IHJvb21CO1xyXG4gIC8vIFJhbmRvbWx5IGNob29zZSBMLXNoYXBlIGRpcmVjdGlvbiAoSG9yaXpvbnRhbCB0aGVuIFZlcnRpY2FsLCBvciBWZXJ0aWNhbCB0aGVuIEhvcml6b250YWwpXHJcbiAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcclxuICAgIC8vIEggdGhlbiBWXHJcbiAgICBfY2FydmVIb3Jpem9udGFsQ29ycmlkb3IobWFwLCBheSwgYXgsIGJ4LCBjb2xzLCByb3dzKTtcclxuICAgIF9jYXJ2ZVZlcnRpY2FsQ29ycmlkb3IobWFwLCBieCwgYXksIGJ5LCBjb2xzLCByb3dzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gViB0aGVuIEhcclxuICAgIF9jYXJ2ZVZlcnRpY2FsQ29ycmlkb3IobWFwLCBheCwgYXksIGJ5LCBjb2xzLCByb3dzKTtcclxuICAgIF9jYXJ2ZUhvcml6b250YWxDb3JyaWRvcihtYXAsIGJ5LCBheCwgYngsIGNvbHMsIHJvd3MpO1xyXG4gIH1cclxufVxyXG5mdW5jdGlvbiBfY2FydmVIb3Jpem9udGFsQ29ycmlkb3IobWFwLCByLCBjMSwgYzIsIGNvbHMsIHJvd3MpIHtcclxuICAvLyBFbnN1cmUgcm93IGlzIHZhbGlkXHJcbiAgaWYgKHIgPCAwIHx8IHIgPj0gcm93cykgcmV0dXJuO1xyXG4gIGNvbnN0IHN0YXJ0Q29sID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oYzEsIGMyKSk7IC8vIENsYW1wIHRvIG1hcCBib3VuZHNcclxuICBjb25zdCBlbmRDb2wgPSBNYXRoLm1pbihjb2xzIC0gMSwgTWF0aC5tYXgoYzEsIGMyKSk7IC8vIENsYW1wIHRvIG1hcCBib3VuZHNcclxuICBmb3IgKGxldCBjID0gc3RhcnRDb2w7IGMgPD0gZW5kQ29sOyBjKyspIHtcclxuICAgIC8vIE9ubHkgY2FydmUgaWYgaXQncyBjdXJyZW50bHkgYSB3YWxsXHJcbiAgICBpZiAobWFwW3JdPy5bY10gPT09IFRJTEVfV0FMTCkge1xyXG4gICAgICBtYXBbcl1bY10gPSBUSUxFX0NPUlJJRE9SO1xyXG4gICAgfVxyXG4gICAgLy8gT3B0aW9uYWw6IEFsc28gY2FydmUgYWRqYWNlbnQgdmVydGljYWwgdGlsZXMgZm9yIHRoaWNrbmVzcyA+IDFcclxuICAgIC8vIGlmICh0aGlja25lc3MgPiAxICYmIHIrMSA8IHJvd3MgJiYgbWFwW3IrMV0/LltjXSA9PT0gVElMRV9XQUxMKSBtYXBbcisxXVtjXSA9IFRJTEVfQ09SUklET1I7XHJcbiAgfVxyXG59XHJcbmZ1bmN0aW9uIF9jYXJ2ZVZlcnRpY2FsQ29ycmlkb3IobWFwLCBjLCByMSwgcjIsIGNvbHMsIHJvd3MpIHtcclxuICAvLyBFbnN1cmUgY29sIGlzIHZhbGlkXHJcbiAgaWYgKGMgPCAwIHx8IGMgPj0gY29scykgcmV0dXJuO1xyXG4gIGNvbnN0IHN0YXJ0Um93ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocjEsIHIyKSk7IC8vIENsYW1wIHRvIG1hcCBib3VuZHNcclxuICBjb25zdCBlbmRSb3cgPSBNYXRoLm1pbihyb3dzIC0gMSwgTWF0aC5tYXgocjEsIHIyKSk7IC8vIENsYW1wIHRvIG1hcCBib3VuZHNcclxuICBmb3IgKGxldCByID0gc3RhcnRSb3c7IHIgPD0gZW5kUm93OyByKyspIHtcclxuICAgIC8vIE9ubHkgY2FydmUgaWYgaXQncyBjdXJyZW50bHkgYSB3YWxsXHJcbiAgICBpZiAobWFwW3JdPy5bY10gPT09IFRJTEVfV0FMTCkge1xyXG4gICAgICBtYXBbcl1bY10gPSBUSUxFX0NPUlJJRE9SO1xyXG4gICAgfVxyXG4gICAgLy8gT3B0aW9uYWw6IEFsc28gY2FydmUgYWRqYWNlbnQgaG9yaXpvbnRhbCB0aWxlcyBmb3IgdGhpY2tuZXNzID4gMVxyXG4gICAgLy8gaWYgKHRoaWNrbmVzcyA+IDEgJiYgYysxIDwgY29scyAmJiBtYXBbcl0/LltjKzFdID09PSBUSUxFX1dBTEwpIG1hcFtyXVtjKzFdID0gVElMRV9DT1JSSURPUjtcclxuICB9XHJcbn1cclxuXHJcbi8vIC0tLSBORVcgSEVMUEVSOiBHZXQgVGlsZSBPcGVubmVzcyBEZXRhaWxzIC0tLVxyXG5mdW5jdGlvbiBfZ2V0VGlsZU9wZW5uZXNzRGV0YWlscyh0aWxlWCwgdGlsZVksIG1hcCwgY29scywgcm93cykge1xyXG4gIC8vIExvY2FsIHdhbGthYmxlIGRlZmluaXRpb24gZm9yIHRoaXMgaGVscGVyXHJcbiAgY29uc3QgaXNUaWxlV2Fsa2FibGUgPSAoeCwgeSwgY3VycmVudE1hcCwgbWFwQ29scywgbWFwUm93cykgPT4ge1xyXG4gICAgaWYgKHggPCAwIHx8IHggPj0gbWFwQ29scyB8fCB5IDwgMCB8fCB5ID49IG1hcFJvd3MpIHJldHVybiBmYWxzZTtcclxuICAgIGNvbnN0IHRpbGVWYWwgPSBjdXJyZW50TWFwW3ldPy5beF07XHJcbiAgICByZXR1cm4gdGlsZVZhbCA9PT0gVElMRV9DT1JSSURPUiB8fCB0aWxlVmFsID09PSBUSUxFX1JPT01fRkxPT1IgfHwgdGlsZVZhbCA9PT0gVElMRV9MSUZUO1xyXG4gIH07XHJcblxyXG4gIGxldCBvcGVuU2lkZXMgPSAwO1xyXG4gIC8vIE9yZGVyOiBOLCBTLCBXLCBFXHJcbiAgY29uc3QgbmVpZ2hib3JEZWx0YXMgPSBbXHJcbiAgICB7IGR4OiAwLCBkeTogLTEgfSxcclxuICAgIHsgZHg6IDAsIGR5OiAxIH0sXHJcbiAgICB7IGR4OiAtMSwgZHk6IDAgfSxcclxuICAgIHsgZHg6IDEsIGR5OiAwIH0sXHJcbiAgXTtcclxuICBsZXQgd2Fsa2FibGVOZWlnaGJvckZsYWdzID0gW2ZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlXTsgLy8gTiwgUywgVywgRVxyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5laWdoYm9yRGVsdGFzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBueCA9IHRpbGVYICsgbmVpZ2hib3JEZWx0YXNbaV0uZHg7XHJcbiAgICBjb25zdCBueSA9IHRpbGVZICsgbmVpZ2hib3JEZWx0YXNbaV0uZHk7XHJcbiAgICBpZiAoaXNUaWxlV2Fsa2FibGUobngsIG55LCBtYXAsIGNvbHMsIHJvd3MpKSB7XHJcbiAgICAgIG9wZW5TaWRlcysrO1xyXG4gICAgICB3YWxrYWJsZU5laWdoYm9yRmxhZ3NbaV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IGlzQ2hva2Vwb2ludCA9IGZhbHNlO1xyXG4gIGlmIChvcGVuU2lkZXMgPT09IDIpIHtcclxuICAgIGNvbnN0IFtOLCBTLCBXLCBFXSA9IHdhbGthYmxlTmVpZ2hib3JGbGFncztcclxuICAgIC8vIFZlcnRpY2FsIGNob2tlcG9pbnQgKE4mUyBvcGVuLCBXJkUgY2xvc2VkKSBPUiBIb3Jpem9udGFsIGNob2tlcG9pbnQgKFcmRSBvcGVuLCBOJlMgY2xvc2VkKVxyXG4gICAgaWYgKChOICYmIFMgJiYgIVcgJiYgIUUpIHx8IChXICYmIEUgJiYgIU4gJiYgIVMpKSB7XHJcbiAgICAgIGlzQ2hva2Vwb2ludCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB7IG9wZW5TaWRlcywgaXNDaG9rZXBvaW50IH07XHJcbn1cclxuXHJcbi8vIC0tLSBIZWxwZXI6IFBsYWNlIExpZnQgLS0tXHJcbi8vIFRha2VzIGN1cnJlbnQgYGxpZnRDb29yZHNgIGFuZCByZXR1cm5zIHRoZSB1c2VkL2ZvdW5kIGNvb3JkcyBhbmQgcG9zaXRpb25cclxuLy8gTW9kaWZ5IF9wbGFjZUxpZnQgdG8gcGFzcyB0aGUgcm9vbXMgbGlzdCB0byBfZmluZExpZnRQbGFjZW1lbnRMb2NhdGlvblxyXG5mdW5jdGlvbiBfcGxhY2VMaWZ0KFxyXG4gIG1hcCxcclxuICBjb2xzLFxyXG4gIHJvd3MsXHJcbiAgZmxvb3JOdW1iZXIsXHJcbiAgbWluRmxvb3IsXHJcbiAgdGlsZVNpemUsXHJcbiAgY3VycmVudENvbnNpc3RlbnRDb29yZHMsXHJcbiAgcm9vbXNMaXN0XHJcbikge1xyXG4gIC8vIEFkZGVkIHJvb21zTGlzdFxyXG4gIGxldCBjb29yZHNUb1VzZSA9IGN1cnJlbnRDb25zaXN0ZW50Q29vcmRzO1xyXG4gIGxldCBuZXdseUZvdW5kQ29vcmRzID0gbnVsbDtcclxuXHJcbiAgLy8gRmluZCBjb29yZHMgb25seSBvbiB0aGUgZmlyc3QgZmxvb3IgaWYgbm90IGFscmVhZHkgc2V0XHJcbiAgaWYgKGZsb29yTnVtYmVyID09PSBtaW5GbG9vciAmJiAhY29vcmRzVG9Vc2UpIHtcclxuICAgIGNvbnNvbGUubG9nKGBbTWFwR2VuIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBGaW5kaW5nIGluaXRpYWwgbGlmdCBwbGFjZW1lbnQgbG9jYXRpb24uLi5gKTtcclxuICAgIGNvb3Jkc1RvVXNlID0gX2ZpbmRMaWZ0UGxhY2VtZW50TG9jYXRpb24obWFwLCBjb2xzLCByb3dzLCByb29tc0xpc3QpOyAvLyBQQVNTIHJvb21zTGlzdFxyXG4gICAgaWYgKCFjb29yZHNUb1VzZSkge1xyXG4gICAgICAvLyBGYWxsYmFjazogaWYgbm8gZ29vZCByb29tIHNwb3QsIHRyeSB0aGUgcHJldmlvdXMgZ2VuZXJhbCBmaW5kIGxvZ2ljICh3aGljaCBpbmNsdWRlcyBjb3JyaWRvcnMpXHJcbiAgICAgIC8vIEZvciBzaW1wbGljaXR5IGhlcmUsIHdlJ2xsIGp1c3QgZ28gdG8gdGhlIGNlbnRlci4gQSBtb3JlIHJvYnVzdCBmYWxsYmFjayBjb3VsZCBiZSB0byBjYWxsXHJcbiAgICAgIC8vIGEgdmVyc2lvbiBvZiBfZmluZExpZnRQbGFjZW1lbnRMb2NhdGlvbiB0aGF0ICpkb2VzKiBjb25zaWRlciBjb3JyaWRvcnMuXHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICBgW01hcEdlbiBGbG9vciAke2Zsb29yTnVtYmVyfV0gTm8gaWRlYWwgSU4tUk9PTSBsaWZ0IGxvY2F0aW9uIGZvdW5kLiBGb3JjaW5nIHBsYWNlbWVudCBuZWFyIGNlbnRlci5gXHJcbiAgICAgICk7XHJcbiAgICAgIGNvb3Jkc1RvVXNlID0geyB0aWxlWDogTWF0aC5mbG9vcihjb2xzIC8gMiksIHRpbGVZOiBNYXRoLmZsb29yKHJvd3MgLyAyKSB9O1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIGBbTWFwR2VuIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBFc3RhYmxpc2hlZCBjb25zaXN0ZW50IGxpZnQgY29vcmRzIGF0IHRpbGUoJHtjb29yZHNUb1VzZS50aWxlWH0sICR7Y29vcmRzVG9Vc2UudGlsZVl9KWBcclxuICAgICk7XHJcbiAgICBuZXdseUZvdW5kQ29vcmRzID0gY29vcmRzVG9Vc2U7XHJcbiAgfSBlbHNlIGlmICghY29vcmRzVG9Vc2UgJiYgZmxvb3JOdW1iZXIgPiBtaW5GbG9vcikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBbTWFwR2VuIExpZnRdIE1pc3NpbmcgY29uc2lzdGVudCBjb29yZGluYXRlcyBmb3IgZmxvb3IgJHtmbG9vck51bWJlcn0uYCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCB7IHRpbGVYLCB0aWxlWSB9ID0gY29vcmRzVG9Vc2U7XHJcblxyXG4gIC8vIEJhc2ljIGJvdW5kcyBjaGVjayBmb3Igc2FmZXR5XHJcbiAgaWYgKHRpbGVZIDwgMCB8fCB0aWxlWSA+PSByb3dzIHx8IHRpbGVYIDwgMCB8fCB0aWxlWCA+PSBjb2xzKSB7XHJcbiAgICAvLyBUaGlzIG1pZ2h0IGhhcHBlbiBpZiB0aGUgZmFsbGJhY2sgY29vcmRzIGFyZSBiYWQgb24gYSB2ZXJ5IHNtYWxsIG1hcFxyXG4gICAgY29uc3Qgc2FmZUZhbGxiYWNrWCA9IE1hdGgubWF4KDEsIE1hdGgubWluKGNvbHMgLSAyLCB0aWxlWCkpO1xyXG4gICAgY29uc3Qgc2FmZUZhbGxiYWNrWSA9IE1hdGgubWF4KDEsIE1hdGgubWluKHJvd3MgLSAyLCB0aWxlWSkpO1xyXG4gICAgY29uc29sZS5lcnJvcihcclxuICAgICAgYFtNYXBHZW4gTGlmdF0gQ29vcmRzICgke3RpbGVYfSwgJHt0aWxlWX0pIGFyZSBvdXRzaWRlIG1hcCBib3VuZHMgb24gZmxvb3IgJHtmbG9vck51bWJlcn0uIEFkanVzdGVkIHRvICgke3NhZmVGYWxsYmFja1h9LCR7c2FmZUZhbGxiYWNrWX0pYFxyXG4gICAgKTtcclxuICAgIGNvb3Jkc1RvVXNlID0geyB0aWxlWDogc2FmZUZhbGxiYWNrWCwgdGlsZVk6IHNhZmVGYWxsYmFja1kgfTtcclxuICAgIC8vIFJlLWFzc2lnbiB0aWxlWCwgdGlsZVkgZm9yIHRoZSByZXN0IG9mIHRoZSBmdW5jdGlvblxyXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBoYWNreTsgaWRlYWxseSwgdGhlIHByaW1hcnkgZmluZCBsb2dpYyBvciBpdHMgZmFsbGJhY2sgc2hvdWxkIGFsd2F5cyByZXR1cm4gdmFsaWQgY29vcmRzLlxyXG4gICAgLy8gSG93ZXZlciwgaWYgYGNvbnNpc3RlbnRMaWZ0Q29vcmRzYCB3ZXJlIHNvbWVob3cgaW52YWxpZCBmcm9tIGEgcHJldmlvdXMgZmxvb3IsIHRoaXMgY291bGQgYmUgYW4gaXNzdWUuXHJcbiAgICAvLyBGb3Igbm93LCB3ZSdsbCBhc3N1bWUgYF9maW5kTGlmdFBsYWNlbWVudExvY2F0aW9uYCBvciBpdHMgZGlyZWN0IGZhbGxiYWNrIGlzIHJvYnVzdCBlbm91Z2guXHJcbiAgICAvLyBUaGUgb3JpZ2luYWwgZXJyb3IgdGhyb3cgaXMgYmV0dGVyIGlmIHdlIGV4cGVjdCBgY29vcmRzVG9Vc2VgIHRvIGFsd2F5cyBiZSB2YWxpZCBmcm9tIGdlbmVyYXRpb24uXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIGBbTWFwR2VuIExpZnRdIENvb3JkcyAoJHtjb29yZHNUb1VzZS50aWxlWH0sICR7Y29vcmRzVG9Vc2UudGlsZVl9KSBhcmUgb3V0c2lkZSBtYXAgYm91bmRzIG9uIGZsb29yICR7Zmxvb3JOdW1iZXJ9LmBcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiB0aGUgY2hvc2VuIHNwb3QgaXMgYSB3YWxsOyBpZiBzbywgYXR0ZW1wdCBjb25uZWN0aW9uXHJcbiAgLy8gVGhpcyBpcyBjcnVjaWFsIGlmIHRoZSBmYWxsYmFjayAoY2VudGVyIG9mIG1hcCkgd2FzIHVzZWQuXHJcbiAgaWYgKG1hcFt0aWxlWV1bdGlsZVhdID09PSBUSUxFX1dBTEwpIHtcclxuICAgIGNvbnNvbGUud2FybihcclxuICAgICAgYFtNYXBHZW4gRmxvb3IgJHtmbG9vck51bWJlcn1dIExpZnQgbG9jYXRpb24gdGlsZSgke3RpbGVYfSwgJHt0aWxlWX0pIGlzIGEgd2FsbCAobGlrZWx5IGZhbGxiYWNrKS4gRm9yY2luZyBjb25uZWN0aW9uLi4uYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGNvbm5lY3RlZCA9IF9mb3JjZUNvbm5lY3Rpb25Ub1BvaW50KG1hcCwgdGlsZVgsIHRpbGVZLCBjb2xzLCByb3dzKTtcclxuICAgIGlmICghY29ubmVjdGVkKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgYFtNYXBHZW4gTGlmdCBDb25uZWN0XSBGQUlMRUQgdG8gY29ubmVjdCB3YWxsIGF0IGxpZnQgbG9jYXRpb24gdGlsZSgke3RpbGVYfSwgJHt0aWxlWX0pLiBMaWZ0IG1pZ2h0IGJlIGlzb2xhdGVkLmBcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGAgIFtNYXBHZW4gTGlmdCBDb25uZWN0XSBDb25uZWN0aW9uIGF0dGVtcHQgZmluaXNoZWQgZm9yIHdhbGwgYXQgbGlmdCBsb2NhdGlvbi5gKTtcclxuICAgICAgaWYgKG1hcFt0aWxlWV1bdGlsZVhdID09PSBUSUxFX1dBTEwpIHtcclxuICAgICAgICAvLyBEb3VibGUgY2hlY2sgYWZ0ZXIgY29ubmVjdGlvblxyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgIGAgIFtNYXBHZW4gTGlmdCBDb25uZWN0XSBGb3JjZSBjb25uZWN0aW9uIGNvbXBsZXRlZCwgYnV0IHRhcmdldCB0aWxlICgke3RpbGVYfSwke3RpbGVZfSkgcmVtYWluZWQgV0FMTC4gU2V0dGluZyB0byBDT1JSSURPUi5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICBtYXBbdGlsZVldW3RpbGVYXSA9IFRJTEVfQ09SUklET1I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIGAgIFtNYXBHZW4gTGlmdF0gTGlmdCBsb2NhdGlvbiB0aWxlKCR7dGlsZVh9LCAke3RpbGVZfSkgaXMgYWxyZWFkeSB3YWxrYWJsZSAoVHlwZTogJHttYXBbdGlsZVldW3RpbGVYXX0pLmBcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBQbGFjZSB0aGUgbGlmdCB0aWxlXHJcbiAgbWFwW3RpbGVZXVt0aWxlWF0gPSBUSUxFX0xJRlQ7XHJcblxyXG4gIGNvbnN0IGxpZnRXb3JsZFBvcyA9IHtcclxuICAgIHg6ICh0aWxlWCArIDAuNSkgKiB0aWxlU2l6ZSxcclxuICAgIHk6ICh0aWxlWSArIDAuNSkgKiB0aWxlU2l6ZSxcclxuICAgIHRpbGVYOiB0aWxlWCxcclxuICAgIHRpbGVZOiB0aWxlWSxcclxuICB9O1xyXG5cclxuICBjb25zb2xlLmxvZyhcclxuICAgIGBbTWFwR2VuIEZsb29yICR7Zmxvb3JOdW1iZXJ9XSBQbGFjZWQvQ29uZmlybWVkIGxpZnQgYXQgdGlsZSgke3RpbGVYfSwgJHt0aWxlWX0pLiBXb3JsZDogKCR7bGlmdFdvcmxkUG9zLngudG9GaXhlZChcclxuICAgICAgMVxyXG4gICAgKX0sICR7bGlmdFdvcmxkUG9zLnkudG9GaXhlZCgxKX0pYFxyXG4gICk7XHJcblxyXG4gIHJldHVybiB7IHBvc2l0aW9uOiBsaWZ0V29ybGRQb3MsIGNvb3JkczogbmV3bHlGb3VuZENvb3JkcyB8fCBjb29yZHNUb1VzZSB9O1xyXG59XHJcblxyXG4vLyAtLS0gTU9ESUZJRUQgSGVscGVyOiBGaW5kIExpZnQgTG9jYXRpb24gKEZvciBGaXJzdCBGbG9vcikgLS0tXHJcbmZ1bmN0aW9uIF9maW5kTGlmdFBsYWNlbWVudExvY2F0aW9uKG1hcCwgY29scywgcm93cywgcm9vbXNMaXN0KSB7XHJcbiAgLy8gQWRkZWQgcm9vbXNMaXN0IHBhcmFtZXRlclxyXG4gIGNvbnN0IGNlbnRlclggPSBNYXRoLmZsb29yKGNvbHMgLyAyKTtcclxuICBjb25zdCBjZW50ZXJZID0gTWF0aC5mbG9vcihyb3dzIC8gMik7XHJcblxyXG4gIGxldCBiZXN0U3BvdENhbmRpZGF0ZSA9IG51bGw7XHJcblxyXG4gIGNvbnNvbGUubG9nKGAgIFtNYXBHZW4gRmluZExpZnQgVjNdIFNlYXJjaGluZyBmb3Igb3B0aW1hbCBsaWZ0IHNwb3QgSU5TSURFIGEgcm9vbS4uLmApO1xyXG5cclxuICBpZiAoIXJvb21zTGlzdCB8fCByb29tc0xpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgIGAgIFtNYXBHZW4gRmluZExpZnQgVjNdIE5vIHJvb21zIGF2YWlsYWJsZSB0byBwbGFjZSBhIGxpZnQgaW4uIEZhbGxiYWNrIHdpbGwgYmUgdXNlZCBieSBjYWxsZXIuYFxyXG4gICAgKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZm9yIChjb25zdCByb29tIG9mIHJvb21zTGlzdCkge1xyXG4gICAgLy8gSXRlcmF0ZSBcImludGVybmFsXCIgZmxvb3IgdGlsZXMgb2YgdGhlIHJvb20uXHJcbiAgICAvLyBJbnRlcm5hbCB0aWxlcyBhcmUgYXQgbGVhc3QgMSB0aWxlIGF3YXkgZnJvbSB0aGUgcm9vbSdzIGJvdW5kaW5nIHdhbGxzLlxyXG4gICAgLy8gUmVxdWlyZXMgcm9vbSB0byBiZSBhdCBsZWFzdCAzeDMgaW4gc2l6ZSB0byBoYXZlIGFueSBpbnRlcm5hbCB0aWxlcy5cclxuICAgIC8vIChtaW5Sb29tU2l6ZSBpcyA1LCBzbyBhIDV4NSByb29tIGhhcyBhIDN4MyBpbnRlcm5hbCBhcmVhKVxyXG4gICAgY29uc3Qgc3RhcnRJbnRlcm5hbENvbCA9IHJvb20uY29sICsgMTtcclxuICAgIGNvbnN0IGVuZEludGVybmFsQ29sID0gcm9vbS5jb2wgKyByb29tLndpZHRoIC0gMjtcclxuICAgIGNvbnN0IHN0YXJ0SW50ZXJuYWxSb3cgPSByb29tLnJvdyArIDE7XHJcbiAgICBjb25zdCBlbmRJbnRlcm5hbFJvdyA9IHJvb20ucm93ICsgcm9vbS5oZWlnaHQgLSAyO1xyXG5cclxuICAgIGlmIChzdGFydEludGVybmFsQ29sID4gZW5kSW50ZXJuYWxDb2wgfHwgc3RhcnRJbnRlcm5hbFJvdyA+IGVuZEludGVybmFsUm93KSB7XHJcbiAgICAgIC8vIFJvb20gaXMgdG9vIHNtYWxsIChlLmcuLCAyeE4gb3IgTngyKSB0byBoYXZlIFwiaW50ZXJuYWxcIiB0aWxlcyBieSB0aGlzIGRlZmluaXRpb24uXHJcbiAgICAgIC8vIFdlIGNvdWxkIGl0ZXJhdGUgYWxsIHJvb20uY29sIHRvIHJvb20uY29sICsgcm9vbS53aWR0aCAtMSBldGMuIGlmIHdlIHdhbnQgdG8gaW5jbHVkZSBlZGdlcy5cclxuICAgICAgLy8gRm9yIG5vdywgc3RpY2tpbmcgdG8gXCJpbnRlcm5hbFwiIGZvciBiZXR0ZXIgcGxhY2VtZW50LlxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhgICAgIFtGaW5kTGlmdCBWM10gUm9vbSAke3Jvb20uaWR9ICgke3Jvb20ud2lkdGh9eCR7cm9vbS5oZWlnaHR9KSB0b28gc21hbGwgZm9yIGludGVybmFsIHRpbGVzLiBTa2lwcGluZy5gKTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgciA9IHN0YXJ0SW50ZXJuYWxSb3c7IHIgPD0gZW5kSW50ZXJuYWxSb3c7IHIrKykge1xyXG4gICAgICBmb3IgKGxldCBjID0gc3RhcnRJbnRlcm5hbENvbDsgYyA8PSBlbmRJbnRlcm5hbENvbDsgYysrKSB7XHJcbiAgICAgICAgLy8gQnkgZGVmaW5pdGlvbiwgbWFwW3JdW2NdIHNob3VsZCBiZSBUSUxFX1JPT01fRkxPT1IgaGVyZS5cclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbnRTY29yZSA9IDA7XHJcbiAgICAgICAgY29uc3QgZGlzdFNxID0gKGMgLSBjZW50ZXJYKSAqIChjIC0gY2VudGVyWCkgKyAociAtIGNlbnRlclkpICogKHIgLSBjZW50ZXJZKTtcclxuICAgICAgICBjdXJyZW50U2NvcmUgLT0gZGlzdFNxIC8gMzA7IC8vIFByb3hpbWl0eSBib251c1xyXG5cclxuICAgICAgICBjb25zdCBkZXRhaWxzU2VsZiA9IF9nZXRUaWxlT3Blbm5lc3NEZXRhaWxzKGMsIHIsIG1hcCwgY29scywgcm93cyk7XHJcblxyXG4gICAgICAgIGlmIChkZXRhaWxzU2VsZi5vcGVuU2lkZXMgPCAxKSB7XHJcbiAgICAgICAgICAvLyBTaG91bGQgaGF2ZSBhdCBsZWFzdCAxIGNvbm5lY3Rpb24gaWYgaXQncyBhIHZhbGlkIGludGVybmFsIHJvb20gdGlsZS5cclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRldGFpbHNTZWxmLmlzQ2hva2Vwb2ludCkge1xyXG4gICAgICAgICAgY3VycmVudFNjb3JlIC09IDcwMDsgLy8gUGVuYWxpemUgaWYgbGlmdCB0aWxlIGl0c2VsZiB3b3VsZCBmb3JtIGEgY2hva2Vwb2ludFxyXG4gICAgICAgIH1cclxuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZGV0YWlsc1NlbGYub3BlblNpZGVzICogMTIwOyAvLyBNb3JlIG9wZW4gc2lkZXMgZm9yIHRoZSBsaWZ0IHRpbGUgYXJlIGdvb2QuXHJcblxyXG4gICAgICAgIGxldCB3b3JzdEFjY2Vzc1BlbmFsdHlGcm9tTmVpZ2hib3JzID0gMDtcclxuICAgICAgICBsZXQgbnVtQWN0dWFsQWNjZXNzUG9pbnRzID0gMDtcclxuICAgICAgICBjb25zdCBuZWlnaGJvckRlbHRhcyA9IFtcclxuICAgICAgICAgIHsgZHg6IDAsIGR5OiAtMSB9LFxyXG4gICAgICAgICAgeyBkeDogMCwgZHk6IDEgfSxcclxuICAgICAgICAgIHsgZHg6IC0xLCBkeTogMCB9LFxyXG4gICAgICAgICAgeyBkeDogMSwgZHk6IDAgfSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGRlbHRhIG9mIG5laWdoYm9yRGVsdGFzKSB7XHJcbiAgICAgICAgICBjb25zdCBuY0FjY2VzcyA9IGMgKyBkZWx0YS5keDtcclxuICAgICAgICAgIGNvbnN0IG5yQWNjZXNzID0gciArIGRlbHRhLmR5O1xyXG5cclxuICAgICAgICAgIGlmIChuckFjY2VzcyA+PSAwICYmIG5yQWNjZXNzIDwgcm93cyAmJiBuY0FjY2VzcyA+PSAwICYmIG5jQWNjZXNzIDwgY29scykge1xyXG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NUaWxlVHlwZSA9IG1hcFtuckFjY2Vzc10/LltuY0FjY2Vzc107XHJcbiAgICAgICAgICAgIGlmIChhY2Nlc3NUaWxlVHlwZSA9PT0gVElMRV9DT1JSSURPUiB8fCBhY2Nlc3NUaWxlVHlwZSA9PT0gVElMRV9ST09NX0ZMT09SKSB7XHJcbiAgICAgICAgICAgICAgbnVtQWN0dWFsQWNjZXNzUG9pbnRzKys7XHJcbiAgICAgICAgICAgICAgY29uc3QgZGV0YWlsc0FjY2Vzc1RpbGUgPSBfZ2V0VGlsZU9wZW5uZXNzRGV0YWlscyhcclxuICAgICAgICAgICAgICAgIG5jQWNjZXNzLFxyXG4gICAgICAgICAgICAgICAgbnJBY2Nlc3MsXHJcbiAgICAgICAgICAgICAgICBtYXAsXHJcbiAgICAgICAgICAgICAgICBjb2xzLFxyXG4gICAgICAgICAgICAgICAgcm93c1xyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChkZXRhaWxzQWNjZXNzVGlsZS5vcGVuU2lkZXMgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFjY2VzcyB0aWxlIG9ubHkgbGVhZHMgdG8gb3VyIGNhbmRpZGF0ZSAoaXQncyBhIHN0dWIpXHJcbiAgICAgICAgICAgICAgICB3b3JzdEFjY2Vzc1BlbmFsdHlGcm9tTmVpZ2hib3JzID0gTWF0aC5tYXgod29yc3RBY2Nlc3NQZW5hbHR5RnJvbU5laWdoYm9ycywgMzAwMDApOyAvLyBNYXNzaXZlIHBlbmFsdHlcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmIChkZXRhaWxzQWNjZXNzVGlsZS5pc0Nob2tlcG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHdvcnN0QWNjZXNzUGVuYWx0eUZyb21OZWlnaGJvcnMgPSBNYXRoLm1heCh3b3JzdEFjY2Vzc1BlbmFsdHlGcm9tTmVpZ2hib3JzLCA1MDApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIGxpZnQgY2FuZGlkYXRlIGlzIGluIHRoZSBtaWRkbGUgb2YgYSByb29tLCBudW1BY3R1YWxBY2Nlc3NQb2ludHMgbWlnaHQgYmUgbG93XHJcbiAgICAgICAgLy8gaWYgaXQncyBzdXJyb3VuZGVkIGJ5IG90aGVyIFRJTEVfUk9PTV9GTE9PUiBvZiB0aGUgKnNhbWUqIHJvb20uXHJcbiAgICAgICAgLy8gZGV0YWlsc1NlbGYub3BlblNpZGVzIGlzIGEgYmV0dGVyIG1lYXN1cmUgb2YgaXRzIFwiZW1iZWRkbmVzc1wiIGluIHRoaXMgY2FzZS5cclxuICAgICAgICAvLyBUaGUgY3JpdGljYWwgcGFydCBpcyB0aGF0IGB3b3JzdEFjY2Vzc1BlbmFsdHlGcm9tTmVpZ2hib3JzYCBjYXRjaGVzIGJhZCAqZXh0ZXJuYWwqIGFjY2Vzcy5cclxuICAgICAgICBpZiAobnVtQWN0dWFsQWNjZXNzUG9pbnRzID09PSAwICYmIGRldGFpbHNTZWxmLm9wZW5TaWRlcyA8IDIpIHtcclxuICAgICAgICAgIC8vIElmIGl0IGhhcyBubyBkaXJlY3QgY29ycmlkb3Ivb3RoZXIgcm9vbSBhY2Nlc3MgQU5EIGlzIGFsc28gdmVyeSBjbG9zZWQgb2ZmIGl0c2VsZlxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjdXJyZW50U2NvcmUgLT0gd29yc3RBY2Nlc3NQZW5hbHR5RnJvbU5laWdoYm9ycztcclxuXHJcbiAgICAgICAgaWYgKGJlc3RTcG90Q2FuZGlkYXRlID09PSBudWxsIHx8IGN1cnJlbnRTY29yZSA+IGJlc3RTcG90Q2FuZGlkYXRlLnNjb3JlKSB7XHJcbiAgICAgICAgICBiZXN0U3BvdENhbmRpZGF0ZSA9IHtcclxuICAgICAgICAgICAgdGlsZVg6IGMsXHJcbiAgICAgICAgICAgIHRpbGVZOiByLFxyXG4gICAgICAgICAgICBzY29yZTogY3VycmVudFNjb3JlLFxyXG4gICAgICAgICAgICBkZWJ1Z19yb29tOiByb29tLmlkLFxyXG4gICAgICAgICAgICAvLyBBZGQgb3RoZXIgZGVidWcgZmllbGRzIGZyb20gcHJldmlvdXMgdmVyc2lvbiBpZiBuZWVkZWRcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoYmVzdFNwb3RDYW5kaWRhdGUpIHtcclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBgICBbTWFwR2VuIEZpbmRMaWZ0IFYzXSBTZWxlY3RlZCBiZXN0IHNwb3QgSU4gUk9PTSAoJHtiZXN0U3BvdENhbmRpZGF0ZS5kZWJ1Z19yb29tfSkgYXQgdGlsZSgke2Jlc3RTcG90Q2FuZGlkYXRlLnRpbGVYfSwgJHtiZXN0U3BvdENhbmRpZGF0ZS50aWxlWX0pLiBgICtcclxuICAgICAgICBgU2NvcmU6ICR7YmVzdFNwb3RDYW5kaWRhdGUuc2NvcmUudG9GaXhlZCgwKX0uYFxyXG4gICAgKTtcclxuICAgIHJldHVybiB7IHRpbGVYOiBiZXN0U3BvdENhbmRpZGF0ZS50aWxlWCwgdGlsZVk6IGJlc3RTcG90Q2FuZGlkYXRlLnRpbGVZIH07XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLndhcm4oXHJcbiAgICAnW01hcEdlbiBGaW5kTGlmdCBWM10gTm8gc3VpdGFibGUgSU4tUk9PTSBsb2NhdGlvbiBmb3VuZCB3aXRoIGludGVybmFsIHRpbGVzLiBGYWxsYmFjayB3aWxsIGJlIHVzZWQgYnkgY2FsbGVyLidcclxuICApO1xyXG4gIHJldHVybiBudWxsO1xyXG59XHJcblxyXG4vLyAtLS0gSGVscGVyOiBGb3JjZSBDb25uZWN0aW9uIC0tLVxyXG5mdW5jdGlvbiBfZm9yY2VDb25uZWN0aW9uVG9Qb2ludChtYXAsIHRhcmdldFgsIHRhcmdldFksIGNvbHMsIHJvd3MpIHtcclxuICBjb25zb2xlLmxvZyhcclxuICAgIGAgIFtNYXBHZW4gQ29ubmVjdF0gVHJ5aW5nIHRvIGNvbm5lY3Qgd2FsbCBhdCB0aWxlKCR7dGFyZ2V0WH0sICR7dGFyZ2V0WX0pIHRvIHdhbGthYmxlIGFyZWEuLi5gXHJcbiAgKTtcclxuICBjb25zdCBkaXJlY3Rpb25zID0gW1xyXG4gICAgWzAsIC0xXSxcclxuICAgIFswLCAxXSxcclxuICAgIFstMSwgMF0sXHJcbiAgICBbMSwgMF0sXHJcbiAgXTtcclxuICBsZXQgaXNBZGphY2VudFRvV2Fsa2FibGUgPSBmYWxzZTtcclxuICBsZXQgYWRqYWNlbnRXYWxrYWJsZUNvb3JkID0gbnVsbDtcclxuXHJcbiAgLy8gMS4gQ2hlY2sgaWYgYWxyZWFkeSBhZGphY2VudCB0byBhIHdhbGthYmxlIHRpbGVcclxuICBmb3IgKGNvbnN0IFtkeCwgZHldIG9mIGRpcmVjdGlvbnMpIHtcclxuICAgIGNvbnN0IG54ID0gdGFyZ2V0WCArIGR4O1xyXG4gICAgY29uc3QgbnkgPSB0YXJnZXRZICsgZHk7XHJcbiAgICBjb25zdCBuZWlnaGJvclRpbGUgPSBtYXBbbnldPy5bbnhdO1xyXG4gICAgaWYgKFxyXG4gICAgICBuZWlnaGJvclRpbGUgPT09IFRJTEVfQ09SUklET1IgfHxcclxuICAgICAgbmVpZ2hib3JUaWxlID09PSBUSUxFX1JPT01fRkxPT1IgfHxcclxuICAgICAgbmVpZ2hib3JUaWxlID09PSBUSUxFX0xJRlRcclxuICAgICkge1xyXG4gICAgICBpc0FkamFjZW50VG9XYWxrYWJsZSA9IHRydWU7XHJcbiAgICAgIGFkamFjZW50V2Fsa2FibGVDb29yZCA9IHsgeDogbngsIHk6IG55IH07XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGlzQWRqYWNlbnRUb1dhbGthYmxlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgYCAgW01hcEdlbiBDb25uZWN0XSBUYXJnZXQoJHt0YXJnZXRYfSwgJHt0YXJnZXRZfSkgaXMgYWRqYWNlbnQgdG8gd2Fsa2FibGUgYXQgKCR7YWRqYWNlbnRXYWxrYWJsZUNvb3JkLnh9LCAke2FkamFjZW50V2Fsa2FibGVDb29yZC55fSkuIFNldHRpbmcgdGFyZ2V0IHRvIENvcnJpZG9yLmBcclxuICAgICk7XHJcbiAgICAvLyBNYWtlIHRoZSB0YXJnZXQgdGlsZSBpdHNlbGYgd2Fsa2FibGUgKENvcnJpZG9yIGlzIGEgc2FmZSBiZXQpXHJcbiAgICBtYXBbdGFyZ2V0WV1bdGFyZ2V0WF0gPSBUSUxFX0NPUlJJRE9SO1xyXG4gICAgcmV0dXJuIHRydWU7IC8vIENvbm5lY3Rpb24gaXMgdHJpdmlhbFxyXG4gIH1cclxuXHJcbiAgLy8gMi4gSWYgbm90IGFkamFjZW50LCBmaW5kIHRoZSBuZWFyZXN0IHdhbGthYmxlIHRpbGUgKENvcnJpZG9yIG9yIEZsb29yKSB1c2luZyBCRlNcclxuICBjb25zb2xlLmxvZyhcclxuICAgIGAgIFtNYXBHZW4gQ29ubmVjdF0gVGFyZ2V0IG5vdCBhZGphY2VudC4gU2VhcmNoaW5nIG5lYXJlc3Qgd2Fsa2FibGUgKENvcnJpZG9yL0Zsb29yKSB2aWEgQkZTLi4uYFxyXG4gICk7XHJcbiAgY29uc3QgcXVldWUgPSBbW3RhcmdldFgsIHRhcmdldFksIDBdXTsgLy8geCwgeSwgZGlzdGFuY2VcclxuICBjb25zdCB2aXNpdGVkID0gbmV3IFNldChbYCR7dGFyZ2V0WH0sJHt0YXJnZXRZfWBdKTtcclxuICBjb25zdCBiZnNQYXRoYWJsZSA9IFtUSUxFX1dBTEwsIFRJTEVfQ09SUklET1IsIFRJTEVfUk9PTV9GTE9PUiwgVElMRV9MSUZUXTsgLy8gQ2FuIHBhdGggdGhyb3VnaCBhbnl0aGluZ1xyXG4gIGNvbnN0IHRhcmdldFdhbGthYmxlID0gW1RJTEVfQ09SUklET1IsIFRJTEVfUk9PTV9GTE9PUl07XHJcbiAgbGV0IGNsb3Nlc3RXYWxrYWJsZSA9IG51bGw7XHJcbiAgbGV0IG1pbkZvdW5kRGlzdCA9IEluZmluaXR5O1xyXG5cclxuICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgW2N1cnJYLCBjdXJyWSwgZGlzdF0gPSBxdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgIC8vIElmIHdlIGFscmVhZHkgZm91bmQgKmEqIHdhbGthYmxlIHRpbGUsIGRvbid0IGV4cGxvcmUgcGF0aHMgbG9uZ2VyIHRoYW4gdGhhdFxyXG4gICAgaWYgKGRpc3QgPj0gbWluRm91bmREaXN0KSBjb250aW51ZTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtkeCwgZHldIG9mIGRpcmVjdGlvbnMpIHtcclxuICAgICAgY29uc3QgbmV4dFggPSBjdXJyWCArIGR4O1xyXG4gICAgICBjb25zdCBuZXh0WSA9IGN1cnJZICsgZHk7XHJcbiAgICAgIGNvbnN0IGtleSA9IGAke25leHRYfSwke25leHRZfWA7XHJcblxyXG4gICAgICBpZiAobmV4dFggPj0gMCAmJiBuZXh0WCA8IGNvbHMgJiYgbmV4dFkgPj0gMCAmJiBuZXh0WSA8IHJvd3MgJiYgIXZpc2l0ZWQuaGFzKGtleSkpIHtcclxuICAgICAgICBjb25zdCB0aWxlVmFsdWUgPSBtYXBbbmV4dFldPy5bbmV4dFhdO1xyXG4gICAgICAgIHZpc2l0ZWQuYWRkKGtleSk7XHJcblxyXG4gICAgICAgIC8vIEZvdW5kIGEgdGFyZ2V0IHdhbGthYmxlIHRpbGU/XHJcbiAgICAgICAgaWYgKHRhcmdldFdhbGthYmxlLmluY2x1ZGVzKHRpbGVWYWx1ZSkpIHtcclxuICAgICAgICAgIGlmIChkaXN0ICsgMSA8IG1pbkZvdW5kRGlzdCkge1xyXG4gICAgICAgICAgICAvLyBGb3VuZCBhIGNsb3NlciBvbmVcclxuICAgICAgICAgICAgbWluRm91bmREaXN0ID0gZGlzdCArIDE7XHJcbiAgICAgICAgICAgIGNsb3Nlc3RXYWxrYWJsZSA9IHsgeDogbmV4dFgsIHk6IG5leHRZLCBkaXN0OiBtaW5Gb3VuZERpc3QgfTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgICAgYCAgICBbQkZTXSBGb3VuZCBwb3RlbnRpYWwgdGFyZ2V0IGF0ICgke25leHRYfSwgJHtuZXh0WX0pLCBkaXN0ICR7bWluRm91bmREaXN0fWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIERvbid0IHB1c2ggdGhpcyB0YXJnZXQgb250byBxdWV1ZSwgd2Ugc3RvcCBzZWFyY2hpbmcgZnJvbSBoZXJlXHJcbiAgICAgICAgfSBlbHNlIGlmIChiZnNQYXRoYWJsZS5pbmNsdWRlcyh0aWxlVmFsdWUpKSB7XHJcbiAgICAgICAgICAvLyBDYW4gY29udGludWUgc2VhcmNoaW5nIGZyb20gdGhpcyBuZWlnaGJvciBpZiBpdCdzIHBhdGhhYmxlIGFuZCBjbG9zZXIgdGhhbiBjdXJyZW50IGJlc3RcclxuICAgICAgICAgIGlmIChkaXN0ICsgMSA8IG1pbkZvdW5kRGlzdCkge1xyXG4gICAgICAgICAgICBxdWV1ZS5wdXNoKFtuZXh0WCwgbmV4dFksIGRpc3QgKyAxXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyAzLiBDYXJ2ZSBwYXRoIGlmIGEgd2Fsa2FibGUgdGlsZSB3YXMgZm91bmRcclxuICBpZiAoY2xvc2VzdFdhbGthYmxlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgYCAgW01hcEdlbiBDb25uZWN0XSBGb3VuZCBjbG9zZXN0IHdhbGthYmxlIGF0IHRpbGUoJHtjbG9zZXN0V2Fsa2FibGUueH0sICR7Y2xvc2VzdFdhbGthYmxlLnl9KSBkaXN0YW5jZSAke2Nsb3Nlc3RXYWxrYWJsZS5kaXN0fS4gQ2FydmluZyBwYXRoLi4uYFxyXG4gICAgKTtcclxuICAgIC8vIFNpbXBsZSBMLXNoYXBlZCBjYXJ2aW5nIGZyb20gdGFyZ2V0IHRvIGNsb3Nlc3Qgd2Fsa2FibGVcclxuICAgIF9jYXJ2ZUhvcml6b250YWxDb3JyaWRvcihtYXAsIHRhcmdldFksIHRhcmdldFgsIGNsb3Nlc3RXYWxrYWJsZS54LCBjb2xzLCByb3dzKTtcclxuICAgIF9jYXJ2ZVZlcnRpY2FsQ29ycmlkb3IobWFwLCBjbG9zZXN0V2Fsa2FibGUueCwgdGFyZ2V0WSwgY2xvc2VzdFdhbGthYmxlLnksIGNvbHMsIHJvd3MpO1xyXG4gICAgY29uc29sZS5sb2coYCAgW01hcEdlbiBDb25uZWN0XSBDYXJ2ZWQgcGF0aCBhdHRlbXB0IGZpbmlzaGVkLmApO1xyXG5cclxuICAgIC8vIFZlcmlmeSB0aGUgdGFyZ2V0IHRpbGUgaXRzZWxmIGJlY2FtZSB3YWxrYWJsZSAoc2hvdWxkIGJlIGNvcnJpZG9yIG5vdylcclxuICAgIGlmIChtYXBbdGFyZ2V0WV1bdGFyZ2V0WF0gPT09IFRJTEVfQ09SUklET1IgfHwgbWFwW3RhcmdldFldW3RhcmdldFhdID09PSBUSUxFX1JPT01fRkxPT1IpIHtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYCAgICBbVmVyaWZ5XSBUYXJnZXQgdGlsZSAoJHt0YXJnZXRYfSwke3RhcmdldFl9KSBpcyBub3cgd2Fsa2FibGUgKFR5cGU6ICR7bWFwW3RhcmdldFldW3RhcmdldFhdfSlgXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgIGAgIFtNYXBHZW4gQ29ubmVjdF0gQ2FydmluZyBkb25lLCBidXQgdGFyZ2V0IHRpbGUoJHt0YXJnZXRYfSwgJHt0YXJnZXRZfSkgaXMgc3RpbGwgV0FMTCAoVmFsdWU6ICR7bWFwW3RhcmdldFldW3RhcmdldFhdfSkuIFNldHRpbmcgbWFudWFsbHkuYFxyXG4gICAgICApO1xyXG4gICAgICAvLyBGb3JjZSBpdCBqdXN0IGluIGNhc2UgY2FydmluZyBsb2dpYyBoYWQgYW4gZWRnZSBjYXNlXHJcbiAgICAgIG1hcFt0YXJnZXRZXVt0YXJnZXRYXSA9IFRJTEVfQ09SUklET1I7XHJcbiAgICAgIHJldHVybiB0cnVlOyAvLyBBc3N1bWUgc3VjY2VzcyBpZiB3ZSBmb3VuZCBhIHBhdGggYW5kIGZvcmNlZCB0aGUgdGlsZVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICBgICBbTWFwR2VuIENvbm5lY3RdIEZBSUxFRCB0byBmaW5kIEFOWSBuZWFyYnkgd2Fsa2FibGUgKENvcnJpZG9yL0Zsb29yKSB2aWEgQkZTIGZyb20gd2FsbCBhdCB0aWxlKCR7dGFyZ2V0WH0sICR7dGFyZ2V0WX0pLiBDYW5ub3QgY29ubmVjdC5gXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGZhbHNlOyAvLyBDb25uZWN0aW9uIGZhaWxlZFxyXG4gIH1cclxufVxyXG5cclxuLy8gLS0tIEhlbHBlcjogQ2hlY2sgTGlmdCBSZWFjaGFiaWxpdHkgLS0tXHJcbmZ1bmN0aW9uIF9pc0xpZnRSZWFjaGFibGUobWFwLCBsaWZ0UG9zaXRpb24sIGNvbHMsIHJvd3MpIHtcclxuICBpZiAoIWxpZnRQb3NpdGlvbikgcmV0dXJuIGZhbHNlO1xyXG4gIGNvbnN0IHsgdGlsZVgsIHRpbGVZIH0gPSBsaWZ0UG9zaXRpb247XHJcbiAgaWYgKFxyXG4gICAgdGlsZVkgPCAwIHx8XHJcbiAgICB0aWxlWSA+PSByb3dzIHx8XHJcbiAgICB0aWxlWCA8IDAgfHxcclxuICAgIHRpbGVYID49IGNvbHMgfHxcclxuICAgIG1hcFt0aWxlWV0/Llt0aWxlWF0gIT09IFRJTEVfTElGVFxyXG4gICkge1xyXG4gICAgY29uc29sZS5lcnJvcihcclxuICAgICAgYFtNYXBWYWxpZGF0aW9uIFJlYWNoYWJpbGl0eV0gSW52YWxpZCBsaWZ0IHBvc2l0aW9uIHByb3ZpZGVkOiAoJHt0aWxlWH0sICR7dGlsZVl9KWBcclxuICAgICk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvLyBVc2UgQkZTIHV0aWxpdHkgZnVuY3Rpb24gdG8gY2hlY2sgcmVhY2hhYmlsaXR5IGZyb20gdGhlIGxpZnQgdGlsZVxyXG4gIC8vIFdlIG5lZWQgdG8ga25vdyBpZiB0aGUgbGlmdCBjYW4gcmVhY2ggKmFueSogVElMRV9DT1JSSURPUiBvciBUSUxFX1JPT01fRkxPT1JcclxuICBjb25zdCB3YWxrYWJsZUZvckxpZnRTZWFyY2ggPSBbVElMRV9DT1JSSURPUiwgVElMRV9ST09NX0ZMT09SLCBUSUxFX0xJRlRdOyAvLyBCRlMgY2FuIHRyYXZlcnNlIHRoZXNlXHJcbiAgY29uc3QgdGFyZ2V0VGlsZXMgPSBbVElMRV9DT1JSSURPUiwgVElMRV9ST09NX0ZMT09SXTsgLy8gU3VjY2VzcyBpZiBCRlMgZmluZHMgb25lIG9mIHRoZXNlXHJcblxyXG4gIGNvbnN0IHsgcmVhY2hhYmxlIH0gPSBwZXJmb3JtQkZTKFxyXG4gICAgbWFwLFxyXG4gICAgdGlsZVgsXHJcbiAgICB0aWxlWSxcclxuICAgIGNvbHMsXHJcbiAgICByb3dzLFxyXG4gICAgd2Fsa2FibGVGb3JMaWZ0U2VhcmNoLFxyXG4gICAgdGFyZ2V0VGlsZXNcclxuICApO1xyXG5cclxuICBpZiAoIXJlYWNoYWJsZSkge1xyXG4gICAgY29uc29sZS5lcnJvcihcclxuICAgICAgYFtNYXBWYWxpZGF0aW9uIFJlYWNoYWJpbGl0eV0gRkFJTEVELiBMaWZ0IGF0IHRpbGUoJHt0aWxlWH0sICR7dGlsZVl9KSBpcyBpc29sYXRlZCBmcm9tIGNvcnJpZG9ycy9yb29tcy5gXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gcmVhY2hhYmxlO1xyXG59XHJcblxyXG4vLyAtLS0gSGVscGVyOiBFbnN1cmUgQm9yZGVycyAtLS1cclxuZnVuY3Rpb24gX2Vuc3VyZU1hcEJvcmRlcnMobWFwLCBjb2xzLCByb3dzKSB7XHJcbiAgY29uc29sZS5sb2coJyAgW01hcEdlbl0gRW5zdXJpbmcgbWFwIGJvcmRlcnMgYXJlIHdhbGxzLicpO1xyXG4gIC8vIFRvcCBhbmQgQm90dG9tIGJvcmRlcnNcclxuICBmb3IgKGxldCBjID0gMDsgYyA8IGNvbHM7IGMrKykge1xyXG4gICAgaWYgKG1hcFswXT8uW2NdICE9PSB1bmRlZmluZWQpIG1hcFswXVtjXSA9IFRJTEVfV0FMTDtcclxuICAgIGlmIChtYXBbcm93cyAtIDFdPy5bY10gIT09IHVuZGVmaW5lZCkgbWFwW3Jvd3MgLSAxXVtjXSA9IFRJTEVfV0FMTDtcclxuICB9XHJcbiAgLy8gTGVmdCBhbmQgUmlnaHQgYm9yZGVyc1xyXG4gIGZvciAobGV0IHIgPSAwOyByIDwgcm93czsgcisrKSB7XHJcbiAgICBpZiAobWFwW3JdPy5bMF0gIT09IHVuZGVmaW5lZCkgbWFwW3JdWzBdID0gVElMRV9XQUxMO1xyXG4gICAgaWYgKG1hcFtyXT8uW2NvbHMgLSAxXSAhPT0gdW5kZWZpbmVkKSBtYXBbcl1bY29scyAtIDFdID0gVElMRV9XQUxMO1xyXG4gIH1cclxufVxyXG5cclxuLy8gLS0tIERlYnVnIEhlbHBlciAtLS1cclxuLy8gKE9wdGlvbmFsLCB1bmNvbW1lbnQgdGhlIGNhbGwgaW4gZ2VuZXJhdGVMZXZlbERhdGEgdG8gdXNlIHdoZW4gZGVidWdnaW5nIHJlYWNoYWJpbGl0eSlcclxuZnVuY3Rpb24gbG9nTWFwR3JpZEZvckRlYnVnKG1hcCwgY29scywgcm93cykge1xyXG4gIGNvbnNvbGUubG9nKCctLS0gREVCVUcgTUFQIEdSSUQgLS0tJyk7XHJcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCByb3dzOyB5KyspIHtcclxuICAgIGNvbnN0IHJvd1N0cmluZyA9IG1hcFt5XVxyXG4gICAgICAubWFwKCh0aWxlKSA9PiB7XHJcbiAgICAgICAgc3dpdGNoICh0aWxlKSB7XHJcbiAgICAgICAgICBjYXNlIFRJTEVfV0FMTDpcclxuICAgICAgICAgICAgcmV0dXJuICcjJztcclxuICAgICAgICAgIGNhc2UgVElMRV9DT1JSSURPUjpcclxuICAgICAgICAgICAgcmV0dXJuICcuJztcclxuICAgICAgICAgIGNhc2UgVElMRV9ST09NX0ZMT09SOlxyXG4gICAgICAgICAgICByZXR1cm4gJyAnO1xyXG4gICAgICAgICAgY2FzZSBUSUxFX0xJRlQ6XHJcbiAgICAgICAgICAgIHJldHVybiAnTCc7XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gJz8nO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLmpvaW4oJycpO1xyXG4gICAgY29uc29sZS5sb2cocm93U3RyaW5nKTtcclxuICB9XHJcbiAgY29uc29sZS5sb2coJy0tLSBFTkQgREVCVUcgTUFQIEdSSUQgLS0tJyk7XHJcbn1cclxuIiwiLy8gc3JjL21hcC9Qcm9jZWR1cmFsTWFwLmpzXHJcbmltcG9ydCB7IEJvb2sgfSBmcm9tICcuL0Jvb2suanMnO1xyXG5pbXBvcnQgeyBNYXBSZW5kZXJlciB9IGZyb20gJy4vTWFwUmVuZGVyZXIuanMnO1xyXG5pbXBvcnQgeyByYW5kb21JbnQgfSBmcm9tICcuLi91dGlscy9tYXAuanMnOyAvLyDQo9Cx0LXQtNC40YLQtdGB0YwsINGH0YLQviDRjdGC0L7RgiDRhNCw0LnQuyDQuCDRhNGD0L3QutGG0LjRjyDRgdGD0YnQtdGB0YLQstGD0Y7RglxyXG5pbXBvcnQgeyBnZW5lcmF0ZUxldmVsRGF0YSB9IGZyb20gJy4vTWFwR2VuLmpzJztcclxuaW1wb3J0IHtcclxuICBUSUxFX1dBTEwsXHJcbiAgVElMRV9DT1JSSURPUixcclxuICBUSUxFX1JPT01fRkxPT1IsXHJcbiAgVElMRV9MSUZULFxyXG4gIExJRlRfSU5URVJBQ1RJT05fUkFESVVTX01VTFRJUExJRVIsXHJcbiAgLy8gR1lNX0NIQU5DRV9PTl9GSVJTVF9GTE9PUiwgLy8g0JXRgdC70Lgg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINCyIE1hcEdlbi5qc1xyXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XHJcblxyXG5jb25zdCBERUJVR19GTE9PUiA9IDM7IC8vINCj0YHRgtCw0L3QvtCy0LjRgtC1INC90LAg0L3QvtC80LXRgCDRjdGC0LDQttCwINC00LvRjyDQvtGC0LvQsNC00LrQuCDQuNC70LggbnVsbC8wINC00LvRjyDQvtGC0LrQu9GO0YfQtdC90LjRj1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb2NlZHVyYWxNYXAge1xyXG4gIGNvbnN0cnVjdG9yKGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQsIGZsb29yTnVtYmVyLCBtaW5GbG9vciwgbWF4Rmxvb3IpIHtcclxuICAgIHRoaXMudGlsZVNpemUgPSAzMjtcclxuICAgIHRoaXMuY29scyA9IDQwO1xyXG4gICAgdGhpcy5yb3dzID0gMzA7XHJcbiAgICB0aGlzLndpZHRoID0gdGhpcy5jb2xzICogdGhpcy50aWxlU2l6ZTtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5yb3dzICogdGhpcy50aWxlU2l6ZTtcclxuICAgIHRoaXMub2Zmc2V0WCA9IDA7XHJcbiAgICB0aGlzLm9mZnNldFkgPSAwO1xyXG5cclxuICAgIHRoaXMuZmxvb3JOdW1iZXIgPSBmbG9vck51bWJlcjtcclxuICAgIHRoaXMubWluRmxvb3IgPSBtaW5GbG9vcjtcclxuICAgIHRoaXMubWF4Rmxvb3IgPSBtYXhGbG9vcjtcclxuXHJcbiAgICB0aGlzLm1hcCA9IG51bGw7XHJcbiAgICB0aGlzLnJvb21zID0gW107XHJcbiAgICB0aGlzLmJvb2tzID0gW107XHJcbiAgICB0aGlzLmxpZnRQb3NpdGlvbiA9IG51bGw7IC8vIHt4LCB5LCB0aWxlWCwgdGlsZVl9XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBNYXBSZW5kZXJlcih0aGlzLnRpbGVTaXplKTtcclxuXHJcbiAgICBjb25zdCBnZW5lcmF0aW9uUGFyYW1zID0ge1xyXG4gICAgICBtaW5Sb29tU2l6ZTogNSxcclxuICAgICAgbWF4Um9vbVNpemU6IDEwLFxyXG4gICAgICBjb3JyaWRvclRoaWNrbmVzczogMSxcclxuICAgICAgbnVtUm9vbXM6IDEyLFxyXG4gICAgICBtYXhSb29tQXR0ZW1wdHM6IDIwMCxcclxuICAgICAgYm9va3NQZXJNYXA6IDUsIC8vINCa0L7Qu9C40YfQtdGB0YLQstC+INC60L3QuNCzINC90LAg0LrQsNGA0YLRg1xyXG4gICAgICByb29tVHlwZVdlaWdodHM6IHtcclxuICAgICAgICAvLyDQktC10YHQsCDQtNC70Y8g0YLQuNC/0L7QsiDQutC+0LzQvdCw0YJcclxuICAgICAgICBjbGFzc3Jvb206IDUwLFxyXG4gICAgICAgIG9mZmljZTogMjUsXHJcbiAgICAgICAgbGlicmFyeTogMTUsXHJcbiAgICAgICAgbGFiOiAxMCxcclxuICAgICAgICBzdG9yYWdlOiA1LFxyXG4gICAgICAgIHV0aWxpdHk6IDEwLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBnZW5lcmF0aW9uQ29uZmlnID0ge1xyXG4gICAgICAgIGNvbHM6IHRoaXMuY29scyxcclxuICAgICAgICByb3dzOiB0aGlzLnJvd3MsXHJcbiAgICAgICAgZmxvb3JOdW1iZXI6IHRoaXMuZmxvb3JOdW1iZXIsXHJcbiAgICAgICAgbWluRmxvb3I6IHRoaXMubWluRmxvb3IsXHJcbiAgICAgICAgbWF4Rmxvb3I6IHRoaXMubWF4Rmxvb3IsXHJcbiAgICAgICAgdGlsZVNpemU6IHRoaXMudGlsZVNpemUsXHJcbiAgICAgICAgZ2VuZXJhdGlvblBhcmFtczogZ2VuZXJhdGlvblBhcmFtcyxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHsgbWFwLCByb29tcywgbGlmdFBvc2l0aW9uIH0gPSBnZW5lcmF0ZUxldmVsRGF0YShnZW5lcmF0aW9uQ29uZmlnKTtcclxuXHJcbiAgICAgIHRoaXMubWFwID0gbWFwO1xyXG4gICAgICB0aGlzLnJvb21zID0gcm9vbXM7XHJcbiAgICAgIHRoaXMubGlmdFBvc2l0aW9uID0gbGlmdFBvc2l0aW9uOyAvLyDQodC+0LTQtdGA0LbQuNGCIHt4LCB5LCB0aWxlWCwgdGlsZVl9XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlc2V0Q29sb3JDYWNoZSgpO1xyXG4gICAgICB0aGlzLnBsYWNlQm9va3NSZWxpYWJseShnZW5lcmF0aW9uUGFyYW1zLmJvb2tzUGVyTWFwKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmZsb29yTnVtYmVyID09PSBERUJVR19GTE9PUikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9XSBJbml0IGNvbXBsZXRlLiBMaWZ0IGF0IHRpbGUgKCR7bGlmdFBvc2l0aW9uPy50aWxlWH0sICR7bGlmdFBvc2l0aW9uPy50aWxlWX0pLmBcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIHRoaXMubG9nTWFwR3JpZCgpOyAvLyDQnNC+0LbQvdC+INGA0LDRgdC60L7QvNC80LXQvdGC0LjRgNC+0LLQsNGC0Ywg0LTQu9GPINCy0YvQstC+0LTQsCDRgdC10YLQutC4INGB0YDQsNC30YMg0L/QvtGB0LvQtSDQs9C10L3QtdGA0LDRhtC40LhcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBgW1Byb2NNYXAgRiR7dGhpcy5mbG9vck51bWJlcn1dIENSSVRJQ0FMIEVSUk9SIGR1cmluZyBtYXAgZ2VuZXJhdGlvbiBvciBzZXR1cDpgLFxyXG4gICAgICAgIGVycm9yXHJcbiAgICAgICk7XHJcbiAgICAgIHRocm93IGVycm9yOyAvLyDQn9C10YDQtdCx0YDQsNGB0YvQstCw0LXQvCDQvtGI0LjQsdC60YMsINGH0YLQvtCx0YsgR2FtZS5qcyDQvNC+0LMg0LXQtSDQvtCx0YDQsNCx0L7RgtCw0YLRjFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcGxhY2VCb29rc1JlbGlhYmx5KGJvb2tzUGVyTWFwKSB7XHJcbiAgICB0aGlzLmJvb2tzID0gW107IC8vINCe0YfQuNGJ0LDQtdC8INC/0YDQtdC00YvQtNGD0YnQuNC1INC60L3QuNCz0LhcclxuICAgIGNvbnN0IHBvdGVudGlhbExvY2F0aW9ucyA9IFtdO1xyXG4gICAgY29uc3QgcGxhY2VkQ29vcmRzID0gbmV3IFNldCgpO1xyXG4gICAgLy8gY29uc29sZS5sb2coYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9XSBQbGFjaW5nIHVwIHRvICR7Ym9va3NQZXJNYXB9IGJvb2tzLi4uYCk7XHJcblxyXG4gICAgZm9yIChsZXQgciA9IDA7IHIgPCB0aGlzLnJvd3M7IHIrKykge1xyXG4gICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY29sczsgYysrKSB7XHJcbiAgICAgICAgY29uc3QgdGlsZVZhbHVlID0gdGhpcy5tYXBbcl0/LltjXTtcclxuICAgICAgICBjb25zdCBpc0xpZnRUaWxlID1cclxuICAgICAgICAgIHRoaXMubGlmdFBvc2l0aW9uICYmIHIgPT09IHRoaXMubGlmdFBvc2l0aW9uLnRpbGVZICYmIGMgPT09IHRoaXMubGlmdFBvc2l0aW9uLnRpbGVYO1xyXG4gICAgICAgIC8vINCa0L3QuNCz0Lgg0LzQvtC20L3QviDRgNCw0LfQvNC10YnQsNGC0Ywg0LIg0LrQvtGA0LjQtNC+0YDQsNGFINC40LvQuCDQvdCwINC/0L7Qu9GDINC60L7QvNC90LDRgiwg0L3QviDQvdC1INC90LAg0LrQu9C10YLQutC1INC70LjRhNGC0LBcclxuICAgICAgICBpZiAoKHRpbGVWYWx1ZSA9PT0gVElMRV9DT1JSSURPUiB8fCB0aWxlVmFsdWUgPT09IFRJTEVfUk9PTV9GTE9PUikgJiYgIWlzTGlmdFRpbGUpIHtcclxuICAgICAgICAgIHBvdGVudGlhbExvY2F0aW9ucy5wdXNoKHsgciwgYyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgYm9va3NQbGFjZWQgPSAwO1xyXG4gICAgd2hpbGUgKGJvb2tzUGxhY2VkIDwgYm9va3NQZXJNYXAgJiYgcG90ZW50aWFsTG9jYXRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3RlbnRpYWxMb2NhdGlvbnMubGVuZ3RoKTtcclxuICAgICAgY29uc3QgeyByLCBjIH0gPSBwb3RlbnRpYWxMb2NhdGlvbnMuc3BsaWNlKHJhbmRvbUluZGV4LCAxKVswXTsgLy8g0KPQtNCw0LvRj9C10Lwg0LLRi9Cx0YDQsNC90L3Rg9GOINC70L7QutCw0YbQuNGOXHJcbiAgICAgIGNvbnN0IGNvb3JkS2V5ID0gYCR7Y30sJHtyfWA7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgKHRoaXMubWFwW3JdPy5bY10gPT09IFRJTEVfQ09SUklET1IgfHwgdGhpcy5tYXBbcl0/LltjXSA9PT0gVElMRV9ST09NX0ZMT09SKSAmJlxyXG4gICAgICAgICFwbGFjZWRDb29yZHMuaGFzKGNvb3JkS2V5KVxyXG4gICAgICApIHtcclxuICAgICAgICBjb25zdCBib29rV29ybGRYID0gKGMgKyAwLjUpICogdGhpcy50aWxlU2l6ZTtcclxuICAgICAgICBjb25zdCBib29rV29ybGRZID0gKHIgKyAwLjUpICogdGhpcy50aWxlU2l6ZTtcclxuICAgICAgICBjb25zdCBib29rSWQgPSBgYm9va19mJHt0aGlzLmZsb29yTnVtYmVyfV8ke2Jvb2tzUGxhY2VkICsgMX1gOyAvLyDQo9C90LjQutCw0LvRjNC90YvQuSBJRFxyXG4gICAgICAgIHRoaXMuYm9va3MucHVzaChuZXcgQm9vayhib29rV29ybGRYLCBib29rV29ybGRZLCBib29rSWQsIHRoaXMudGlsZVNpemUpKTtcclxuICAgICAgICBwbGFjZWRDb29yZHMuYWRkKGNvb3JkS2V5KTtcclxuICAgICAgICBib29rc1BsYWNlZCsrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBpZiAoYm9va3NQbGFjZWQgPCBib29rc1Blck1hcCkgY29uc29sZS53YXJuKGBbUHJvY01hcCBGJHt0aGlzLmZsb29yTnVtYmVyfV0gUGxhY2VkIG9ubHkgJHtib29rc1BsYWNlZH0vJHtib29rc1Blck1hcH0gYm9va3MuYCk7XHJcbiAgfVxyXG5cclxuICBpc1dhbGthYmxlKHdvcmxkWCwgd29ybGRZKSB7XHJcbiAgICBpZiAoIXRoaXMubWFwKSByZXR1cm4gZmFsc2U7XHJcbiAgICBjb25zdCB0aWxlWCA9IE1hdGguZmxvb3Iod29ybGRYIC8gdGhpcy50aWxlU2l6ZSk7XHJcbiAgICBjb25zdCB0aWxlWSA9IE1hdGguZmxvb3Iod29ybGRZIC8gdGhpcy50aWxlU2l6ZSk7XHJcblxyXG4gICAgaWYgKHRpbGVYIDwgMCB8fCB0aWxlWCA+PSB0aGlzLmNvbHMgfHwgdGlsZVkgPCAwIHx8IHRpbGVZID49IHRoaXMucm93cykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7IC8vINCX0LAg0L/RgNC10LTQtdC70LDQvNC4INC60LDRgNGC0YtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0aWxlVmFsdWUgPSB0aGlzLm1hcFt0aWxlWV0/Llt0aWxlWF07XHJcbiAgICAvLyDQm9C40YTRgiDRgdGH0LjRgtCw0LXRgtGB0Y8g0L/RgNC+0YXQvtC00LjQvNGL0Lwg0LTQu9GPINC/0YDQvtCy0LXRgNC60Lgg0YHRgtC+0LvQutC90L7QstC10L3QuNC5ICjQv9C10YDRgdC+0L3QsNC2INC80L7QttC10YIg0L3QsCDQvdC10LPQviDQt9Cw0LnRgtC4KVxyXG4gICAgcmV0dXJuIHRpbGVWYWx1ZSA9PT0gVElMRV9DT1JSSURPUiB8fCB0aWxlVmFsdWUgPT09IFRJTEVfUk9PTV9GTE9PUiB8fCB0aWxlVmFsdWUgPT09IFRJTEVfTElGVDtcclxuICB9XHJcblxyXG4gIGZpbmRSYW5kb21Jbml0aWFsU3Bhd25Qb3NpdGlvbigpIHtcclxuICAgIGlmICghdGhpcy5tYXApIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCBzdWl0YWJsZVRpbGVzID0gW107XHJcbiAgICAvLyDQodC90LDRh9Cw0LvQsCDQuNGJ0LXQvCDQsdC+0LvQtdC1IFwi0L7RgtC60YDRi9GC0YvQtVwiINC80LXRgdGC0LBcclxuICAgIGZvciAobGV0IHIgPSAxOyByIDwgdGhpcy5yb3dzIC0gMTsgcisrKSB7XHJcbiAgICAgIC8vINCY0LfQsdC10LPQsNC10Lwg0LrRgNCw0LXQsiDQtNC70Y8g0L/QtdGA0LLQvtC5INC/0L7Qv9GL0YLQutC4XHJcbiAgICAgIGZvciAobGV0IGMgPSAxOyBjIDwgdGhpcy5jb2xzIC0gMTsgYysrKSB7XHJcbiAgICAgICAgY29uc3QgdGlsZVZhbHVlID0gdGhpcy5tYXBbcl0/LltjXTtcclxuICAgICAgICBjb25zdCBpc0xpZnQgPVxyXG4gICAgICAgICAgdGhpcy5saWZ0UG9zaXRpb24gJiYgciA9PT0gdGhpcy5saWZ0UG9zaXRpb24udGlsZVkgJiYgYyA9PT0gdGhpcy5saWZ0UG9zaXRpb24udGlsZVg7XHJcbiAgICAgICAgaWYgKCh0aWxlVmFsdWUgPT09IFRJTEVfQ09SUklET1IgfHwgdGlsZVZhbHVlID09PSBUSUxFX1JPT01fRkxPT1IpICYmICFpc0xpZnQpIHtcclxuICAgICAgICAgIGlmICh0aGlzLmlzVGlsZU9wZW5Fbm91Z2goYywgciwgMywgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgLy8g0KLRgNC10LHRg9C10LwgMyDQvtGC0LrRgNGL0YLRi9GFINGB0YLQvtGA0L7QvdGLLCDQuNC30LHQtdCz0LDQtdC8INGD0LfQutC40YUg0L/RgNC+0YXQvtC00L7QslxyXG4gICAgICAgICAgICBzdWl0YWJsZVRpbGVzLnB1c2goeyByLCBjIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g0JXRgdC70Lgg0L3QtSDQvdCw0YjQu9C4INC40LTQtdCw0LvRjNC90YvRhSwg0LjRidC10Lwg0YEgMiDQvtGC0LrRgNGL0YLRi9C80Lgg0YHRgtC+0YDQvtC90LDQvNC4XHJcbiAgICBpZiAoc3VpdGFibGVUaWxlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCB0aGlzLnJvd3M7IHIrKykge1xyXG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jb2xzOyBjKyspIHtcclxuICAgICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IHRoaXMubWFwW3JdPy5bY107XHJcbiAgICAgICAgICBjb25zdCBpc0xpZnQgPVxyXG4gICAgICAgICAgICB0aGlzLmxpZnRQb3NpdGlvbiAmJiByID09PSB0aGlzLmxpZnRQb3NpdGlvbi50aWxlWSAmJiBjID09PSB0aGlzLmxpZnRQb3NpdGlvbi50aWxlWDtcclxuICAgICAgICAgIGlmICgodGlsZVZhbHVlID09PSBUSUxFX0NPUlJJRE9SIHx8IHRpbGVWYWx1ZSA9PT0gVElMRV9ST09NX0ZMT09SKSAmJiAhaXNMaWZ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVGlsZU9wZW5Fbm91Z2goYywgciwgMiwgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAvLyAyINC+0YLQutGA0YvRgtGL0YUg0YHRgtC+0YDQvtC90YssINC40LfQsdC10LPQsNC10Lwg0YPQt9C60LjRhSDQv9GA0L7RhdC+0LTQvtCyXHJcbiAgICAgICAgICAgICAgc3VpdGFibGVUaWxlcy5wdXNoKHsgciwgYyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g0JrRgNCw0LnQvdC40Lkg0YHQu9GD0YfQsNC5OiDQu9GO0LHQsNGPINC/0YDQvtGF0L7QtNC40LzQsNGPINC90LUg0LvQuNGE0YLQvtCy0LDRjyDQutC70LXRgtC60LBcclxuICAgIGlmIChzdWl0YWJsZVRpbGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAvLyBjb25zb2xlLndhcm4oYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9IFJhbmRvbVNwYXduXSBObyBpZGVhbCBzcG90cy4gVXNpbmcgYW55IHZhbGlkIG5vbi1saWZ0IGZsb29yL2NvcnJpZG9yLmApO1xyXG4gICAgICBmb3IgKGxldCByID0gMDsgciA8IHRoaXMucm93czsgcisrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmNvbHM7IGMrKykge1xyXG4gICAgICAgICAgY29uc3QgdGlsZVZhbHVlID0gdGhpcy5tYXBbcl0/LltjXTtcclxuICAgICAgICAgIGNvbnN0IGlzTGlmdCA9XHJcbiAgICAgICAgICAgIHRoaXMubGlmdFBvc2l0aW9uICYmIHIgPT09IHRoaXMubGlmdFBvc2l0aW9uLnRpbGVZICYmIGMgPT09IHRoaXMubGlmdFBvc2l0aW9uLnRpbGVYO1xyXG4gICAgICAgICAgaWYgKCh0aWxlVmFsdWUgPT09IFRJTEVfQ09SUklET1IgfHwgdGlsZVZhbHVlID09PSBUSUxFX1JPT01fRkxPT1IpICYmICFpc0xpZnQpIHtcclxuICAgICAgICAgICAgc3VpdGFibGVUaWxlcy5wdXNoKHsgciwgYyB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3VpdGFibGVUaWxlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBgW1Byb2NNYXAgRiR7dGhpcy5mbG9vck51bWJlcn0gUmFuZG9tU3Bhd25dIENSSVRJQ0FMOiBObyBzdWl0YWJsZSBzcGF3biB0aWxlcyBmb3VuZCFgXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyByLCBjIH0gPSBzdWl0YWJsZVRpbGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHN1aXRhYmxlVGlsZXMubGVuZ3RoKV07XHJcbiAgICByZXR1cm4geyB4OiAoYyArIDAuNSkgKiB0aGlzLnRpbGVTaXplLCB5OiAociArIDAuNSkgKiB0aGlzLnRpbGVTaXplIH07XHJcbiAgfVxyXG5cclxuICBpc1RpbGVPcGVuRW5vdWdoKHRpbGVYLCB0aWxlWSwgbWluT3BlblNpZGVzID0gMiwgYXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IGlzRGVidWdDdXJyZW50Q2FsbCA9IHRoaXMuZmxvb3JOdW1iZXIgPT09IERFQlVHX0ZMT09SOyAvLyDQm9C+0LPQuNGA0YPQtdC8INGC0L7Qu9GM0LrQviDQtNC70Y8g0L7RgtC70LDQtNC+0YfQvdC+0LPQviDRjdGC0LDQttCwXHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgW1Byb2NNYXAgRiR7dGhpcy5mbG9vck51bWJlcn0gaXNUaWxlT3BlbkVub3VnaF0gQ2hlY2tpbmcgKCR7dGlsZVh9LCR7dGlsZVl9KSB3aXRoIG1pbk9wZW5TaWRlcz0ke21pbk9wZW5TaWRlc30sIGF2b2lkTmFycm93PSR7YXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzfWApO1xyXG5cclxuICAgIGlmICghdGhpcy5tYXApIHJldHVybiBmYWxzZTtcclxuICAgIGxldCBvcGVuU2lkZXNDb3VudCA9IDA7XHJcbiAgICAvLyBkeCwgZHksIGxhYmVsXHJcbiAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xyXG4gICAgICBbMCwgLTEsICdOJ10sXHJcbiAgICAgIFswLCAxLCAnUyddLFxyXG4gICAgICBbLTEsIDAsICdXJ10sXHJcbiAgICAgIFsxLCAwLCAnRSddLFxyXG4gICAgXTtcclxuICAgIGNvbnN0IGlzT3BlblNpZGUgPSBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdOyAvLyBOLCBTLCBXLCBFXHJcbiAgICAvLyBsZXQgbmVpZ2hib3JEZWJ1ZyA9IHt9OyAvLyDQoNCw0YHQutC+0LzQvNC10L3RgtC40YDRg9C50YLQtSDQtNC70Y8g0LTQtdGC0LDQu9GM0L3QvtCz0L4g0LvQvtCz0LAg0YHQvtGB0LXQtNC10LlcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgW2R4LCBkeSwgZGlyTGFiZWxdID0gZGlyZWN0aW9uc1tpXTtcclxuICAgICAgY29uc3QgbmVpZ2hib3JYID0gdGlsZVggKyBkeDtcclxuICAgICAgY29uc3QgbmVpZ2hib3JZID0gdGlsZVkgKyBkeTtcclxuICAgICAgbGV0IG5laWdoYm9yVGlsZVZhbHVlID0gVElMRV9XQUxMOyAvLyDQn9C+INGD0LzQvtC70YfQsNC90LjRjiDRgdGC0LXQvdCwLCDQtdGB0LvQuCDQt9CwINC/0YDQtdC00LXQu9Cw0LzQuFxyXG5cclxuICAgICAgaWYgKG5laWdoYm9yWCA+PSAwICYmIG5laWdoYm9yWCA8IHRoaXMuY29scyAmJiBuZWlnaGJvclkgPj0gMCAmJiBuZWlnaGJvclkgPCB0aGlzLnJvd3MpIHtcclxuICAgICAgICBuZWlnaGJvclRpbGVWYWx1ZSA9IHRoaXMubWFwW25laWdoYm9yWV0/LltuZWlnaGJvclhdO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIG5laWdoYm9yVGlsZVZhbHVlID09PSBUSUxFX0NPUlJJRE9SIHx8XHJcbiAgICAgICAgICBuZWlnaGJvclRpbGVWYWx1ZSA9PT0gVElMRV9ST09NX0ZMT09SIHx8XHJcbiAgICAgICAgICBuZWlnaGJvclRpbGVWYWx1ZSA9PT0gVElMRV9MSUZUXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBvcGVuU2lkZXNDb3VudCsrO1xyXG4gICAgICAgICAgaXNPcGVuU2lkZVtpXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIG5laWdoYm9yRGVidWdbZGlyTGFiZWxdID0gYCgke25laWdoYm9yWH0sJHtuZWlnaGJvcll9KSBUeXBlOiR7bmVpZ2hib3JUaWxlVmFsdWV9IChPcGVuOiR7aXNPcGVuU2lkZVtpXX0pYDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbaXNUaWxlT3BlbkVub3VnaF0gTmVpZ2hib3JzIGZvciAoJHt0aWxlWH0sJHt0aWxlWX0pOiAke0pTT04uc3RyaW5naWZ5KG5laWdoYm9yRGVidWcpfSAtPiBvcGVuU2lkZXNDb3VudDogJHtvcGVuU2lkZXNDb3VudH1gKTtcclxuXHJcbiAgICBpZiAob3BlblNpZGVzQ291bnQgPCBtaW5PcGVuU2lkZXMpIHtcclxuICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2lzVGlsZU9wZW5Fbm91Z2hdIFJFU1VMVCBmb3IgKCR7dGlsZVh9LCR7dGlsZVl9KTogZmFsc2UgKG9wZW5TaWRlc0NvdW50ICR7b3BlblNpZGVzQ291bnR9IDwgbWluT3BlblNpZGVzICR7bWluT3BlblNpZGVzfSlgKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhdm9pZE9uZVRpbGVXaWRlUGFzc2FnZXMgJiYgb3BlblNpZGVzQ291bnQgPT09IDIpIHtcclxuICAgICAgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwINC/0YDQvtGF0L7QtCDRiNC40YDQuNC90L7QuSDQsiAxINC60LvQtdGC0LrRgyAo0L7RgtC60YDRi9GC0Ysg0YLQvtC70YzQutC+INC/0YDQvtGC0LjQstC+0L/QvtC70L7QttC90YvQtSDRgdGC0L7RgNC+0L3RiylcclxuICAgICAgaWYgKGlzT3BlblNpZGVbMF0gJiYgaXNPcGVuU2lkZVsxXSAmJiAhaXNPcGVuU2lkZVsyXSAmJiAhaXNPcGVuU2lkZVszXSkge1xyXG4gICAgICAgIC8vINCh0LXQstC10YAg0Lgg0K7QsyDQvtGC0LrRgNGL0YLRiywg0JfQsNC/0LDQtCDQuCDQktC+0YHRgtC+0Log0LfQsNC60YDRi9GC0YtcclxuICAgICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbaXNUaWxlT3BlbkVub3VnaF0gUkVTVUxUIGZvciAoJHt0aWxlWH0sJHt0aWxlWX0pOiBmYWxzZSAodmVydGljYWwgMS10aWxlIHBhc3NhZ2UpYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpc09wZW5TaWRlWzJdICYmIGlzT3BlblNpZGVbM10gJiYgIWlzT3BlblNpZGVbMF0gJiYgIWlzT3BlblNpZGVbMV0pIHtcclxuICAgICAgICAvLyDQl9Cw0L/QsNC0INC4INCS0L7RgdGC0L7QuiDQvtGC0LrRgNGL0YLRiywg0KHQtdCy0LXRgCDQuCDQrtCzINC30LDQutGA0YvRgtGLXHJcbiAgICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2lzVGlsZU9wZW5Fbm91Z2hdIFJFU1VMVCBmb3IgKCR7dGlsZVh9LCR7dGlsZVl9KTogZmFsc2UgKGhvcml6b250YWwgMS10aWxlIHBhc3NhZ2UpYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbaXNUaWxlT3BlbkVub3VnaF0gUkVTVUxUIGZvciAoJHt0aWxlWH0sJHt0aWxlWX0pOiB0cnVlYCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGZpbmROZWFyZXN0V2Fsa2FibGVUaWxlKFxyXG4gICAgdGFyZ2V0V29ybGRYLFxyXG4gICAgdGFyZ2V0V29ybGRZLFxyXG4gICAgbWF4UmFkaXVzID0gOCxcclxuICAgIGV4Y2x1ZGVMaWZ0ID0gZmFsc2UsXHJcbiAgICBhdm9pZE9uZVRpbGVXaWRlUGFzc2FnZXMgPSBmYWxzZVxyXG4gICkge1xyXG4gICAgY29uc3QgaXNEZWJ1Z0N1cnJlbnRDYWxsID0gdGhpcy5mbG9vck51bWJlciA9PT0gREVCVUdfRkxPT1I7XHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgW1Byb2NNYXAgRiR7dGhpcy5mbG9vck51bWJlcn0gZmluZE5lYXJlc3RXYWxrYWJsZVRpbGVdIFRhcmdldFdvcmxkOigke3RhcmdldFdvcmxkWC50b0ZpeGVkKDEpfSwke3RhcmdldFdvcmxkWS50b0ZpeGVkKDEpfSksIG1heFI6JHttYXhSYWRpdXN9LCBleGNsdWRlTGlmdDoke2V4Y2x1ZGVMaWZ0fSwgYXZvaWROYXJyb3c6JHthdm9pZE9uZVRpbGVXaWRlUGFzc2FnZXN9YCk7XHJcblxyXG4gICAgaWYgKCF0aGlzLm1hcCkgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCB0YXJnZXRUaWxlWCA9IE1hdGguZmxvb3IodGFyZ2V0V29ybGRYIC8gdGhpcy50aWxlU2l6ZSk7XHJcbiAgICBjb25zdCB0YXJnZXRUaWxlWSA9IE1hdGguZmxvb3IodGFyZ2V0V29ybGRZIC8gdGhpcy50aWxlU2l6ZSk7XHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbZmluZE5lYXJlc3RdIFRhcmdldFRpbGU6ICgke3RhcmdldFRpbGVYfSwke3RhcmdldFRpbGVZfSlgKTtcclxuXHJcbiAgICBjb25zdCB0YXJnZXRTYWZlVGlsZXMgPSBbVElMRV9DT1JSSURPUiwgVElMRV9ST09NX0ZMT09SXTsgLy8g0JrRg9C00LAg0YXQvtGC0LjQvCDQv9C+0L/QsNGB0YLRjFxyXG5cclxuICAgIC8vIDEuINCf0YDQvtCy0LXRgNGP0LXQvCDRgdCw0LzRgyDRhtC10LvQtdCy0YPRjiDQutC70LXRgtC60YNcclxuICAgIGlmIChcclxuICAgICAgdGFyZ2V0VGlsZVggPj0gMCAmJlxyXG4gICAgICB0YXJnZXRUaWxlWCA8IHRoaXMuY29scyAmJlxyXG4gICAgICB0YXJnZXRUaWxlWSA+PSAwICYmXHJcbiAgICAgIHRhcmdldFRpbGVZIDwgdGhpcy5yb3dzXHJcbiAgICApIHtcclxuICAgICAgY29uc3Qgc3RhcnRUaWxlVmFsdWUgPSB0aGlzLm1hcFt0YXJnZXRUaWxlWV1bdGFyZ2V0VGlsZVhdO1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdGFyZ2V0U2FmZVRpbGVzLmluY2x1ZGVzKHN0YXJ0VGlsZVZhbHVlKSAmJlxyXG4gICAgICAgICghZXhjbHVkZUxpZnQgfHwgc3RhcnRUaWxlVmFsdWUgIT09IFRJTEVfTElGVClcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8g0JXRgdC70Lgg0YbQtdC70YwgLSDQu9C40YTRgiDQuCDQvNGLINC10LPQviDQvdC1INC40YHQutC70Y7Rh9Cw0LXQvCwg0YLQviDRgtGA0LXQsdC+0LLQsNC90LjRjyDQuiBcItC+0YLQutGA0YvRgtC+0YHRgtC4XCIg0LzQvtCz0YPRgiDQsdGL0YLRjCDQvdC40LbQtSwg0YIu0LouINGN0YLQviDQtNC70Y8gcGF0aGZpbmRpbmcsINCwINC90LUg0YHQv9Cw0LLQvdCwXHJcbiAgICAgICAgY29uc3QgbWluU2lkZXNGb3JJbml0aWFsID0gMjtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB0aGlzLmlzVGlsZU9wZW5Fbm91Z2goXHJcbiAgICAgICAgICAgIHRhcmdldFRpbGVYLFxyXG4gICAgICAgICAgICB0YXJnZXRUaWxlWSxcclxuICAgICAgICAgICAgbWluU2lkZXNGb3JJbml0aWFsLFxyXG4gICAgICAgICAgICBhdm9pZE9uZVRpbGVXaWRlUGFzc2FnZXNcclxuICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtmaW5kTmVhcmVzdF0gU1VDQ0VTUzogVGFyZ2V0IHRpbGUgKCR7dGFyZ2V0VGlsZVh9LCR7dGFyZ2V0VGlsZVl9KSBpcyBzdWl0YWJsZS5gKTtcclxuICAgICAgICAgIHJldHVybiB7IHg6ICh0YXJnZXRUaWxlWCArIDAuNSkgKiB0aGlzLnRpbGVTaXplLCB5OiAodGFyZ2V0VGlsZVkgKyAwLjUpICogdGhpcy50aWxlU2l6ZSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIDIuINCg0LDQtNC40LDQu9GM0L3Ri9C5INC/0L7QuNGB0LpcclxuICAgIGZvciAobGV0IHJhZGl1cyA9IDE7IHJhZGl1cyA8PSBtYXhSYWRpdXM7IHJhZGl1cysrKSB7XHJcbiAgICAgIC8vINCV0YHQu9C4INC40LfQsdC10LPQsNC10Lwg0YPQt9C60LjRhSDQv9GA0L7RhdC+0LTQvtCyLCDQtNC70Y8g0LHQu9C40LbQsNC50YjQuNGFINGB0L7RgdC10LTQtdC5IChyYWRpdXM9MSkg0YLRgNC10LHRg9C10Lwg0LHQvtC70YzRiNC1INC+0YLQutGA0YvRgtGL0YUg0YHRgtC+0YDQvtC9XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRSYWRpdXNNaW5PcGVuU2lkZXMgPSAyO1xyXG4gICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsICYmIHJhZGl1cyA9PT0gMSkgY29uc29sZS5sb2coYCAgW2ZpbmROZWFyZXN0XSBSYWRpYWwgc2VhcmNoIChyYWRpdXMgMSksIG1pbk9wZW5TaWRlcyBmb3IgY2hlY2s6ICR7Y3VycmVudFJhZGl1c01pbk9wZW5TaWRlc31gKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGR5ID0gLXJhZGl1czsgZHkgPD0gcmFkaXVzOyBkeSsrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZHggPSAtcmFkaXVzOyBkeCA8PSByYWRpdXM7IGR4KyspIHtcclxuICAgICAgICAgIGlmIChNYXRoLmFicyhkeCkgPCByYWRpdXMgJiYgTWF0aC5hYnMoZHkpIDwgcmFkaXVzKSBjb250aW51ZTsgLy8g0KLQvtC70YzQutC+INCz0YDQsNC90LjRhtCwINGC0LXQutGD0YnQtdCz0L4g0YDQsNC00LjRg9GB0LBcclxuICAgICAgICAgIGNvbnN0IGNoZWNrWCA9IHRhcmdldFRpbGVYICsgZHg7XHJcbiAgICAgICAgICBjb25zdCBjaGVja1kgPSB0YXJnZXRUaWxlWSArIGR5O1xyXG5cclxuICAgICAgICAgIGlmIChjaGVja1ggPCAwIHx8IGNoZWNrWCA+PSB0aGlzLmNvbHMgfHwgY2hlY2tZIDwgMCB8fCBjaGVja1kgPj0gdGhpcy5yb3dzKSBjb250aW51ZTsgLy8g0JIg0L/RgNC10LTQtdC70LDRhSDQutCw0YDRgtGLXHJcblxyXG4gICAgICAgICAgY29uc3QgdGlsZVZhbHVlID0gdGhpcy5tYXBbY2hlY2tZXT8uW2NoZWNrWF07XHJcbiAgICAgICAgICBpZiAodGFyZ2V0U2FmZVRpbGVzLmluY2x1ZGVzKHRpbGVWYWx1ZSkgJiYgKCFleGNsdWRlTGlmdCB8fCB0aWxlVmFsdWUgIT09IFRJTEVfTElGVCkpIHtcclxuICAgICAgICAgICAgLy8g0J/QvtC00YXQvtC00LjRgiDQu9C4INGC0LjQvyDRgtCw0LnQu9CwXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICB0aGlzLmlzVGlsZU9wZW5Fbm91Z2goXHJcbiAgICAgICAgICAgICAgICBjaGVja1gsXHJcbiAgICAgICAgICAgICAgICBjaGVja1ksXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFkaXVzTWluT3BlblNpZGVzLFxyXG4gICAgICAgICAgICAgICAgYXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbZmluZE5lYXJlc3RdIFNVQ0NFU1M6IFJhZGlhbCBmb3VuZCAoJHtjaGVja1h9LCR7Y2hlY2tZfSkgYXQgcmFkaXVzICR7cmFkaXVzfS5gKTtcclxuICAgICAgICAgICAgICByZXR1cm4geyB4OiAoY2hlY2tYICsgMC41KSAqIHRoaXMudGlsZVNpemUsIHk6IChjaGVja1kgKyAwLjUpICogdGhpcy50aWxlU2l6ZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMy4g0J/QvtC40YHQuiBCRlMgKNC30LDQv9Cw0YHQvdC+0Lkg0LLQsNGA0LjQsNC90YIpXHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLndhcm4oYCAgW2ZpbmROZWFyZXN0XSBSYWRpYWwgc2VhcmNoIGZhaWxlZCBmb3IgdGFyZ2V0ICgke3RhcmdldFRpbGVYfSwke3RhcmdldFRpbGVZfSkuIFN0YXJ0aW5nIEJGUy4uLmApO1xyXG4gICAgY29uc3QgYmZzTWluT3BlblNpZGVzID0gMjsgLy8g0JTQu9GPIEJGUyDRgdGC0LDQvdC00LDRgNGC0L3Ri9C1IDIg0YHRgtC+0YDQvtC90YssINC90L4g0YEg0L/RgNC+0LLQtdGA0LrQvtC5IGF2b2lkT25lVGlsZVdpZGVQYXNzYWdlc1xyXG4gICAgY29uc3QgcXVldWUgPSBbW3RhcmdldFRpbGVYLCB0YXJnZXRUaWxlWV1dO1xyXG4gICAgY29uc3QgdmlzaXRlZCA9IG5ldyBTZXQoW2Ake3RhcmdldFRpbGVYfSwke3RhcmdldFRpbGVZfWBdKTtcclxuICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXHJcbiAgICAgIFswLCAtMV0sXHJcbiAgICAgIFswLCAxXSxcclxuICAgICAgWy0xLCAwXSxcclxuICAgICAgWzEsIDBdLFxyXG4gICAgXTsgLy8gTiwgUywgVywgRVxyXG4gICAgLy8g0JTQu9GPINC/0YPRgtC4IEJGUyDQvNC+0LbQvdC+INC/0YDQvtGF0L7QtNC40YLRjCDRh9C10YDQtdC3INC70LjRhNGCLCDQtNCw0LbQtSDQtdGB0LvQuCBleGNsdWRlTGlmdD10cnVlICjQvNGLINC90LUg0YXQvtGC0LjQvCDQvdCwINC90LXQvCDQntCh0KLQkNCd0J7QktCY0KLQrNCh0K8pXHJcbiAgICBjb25zdCBiZnNXYWxrYWJsZVBhdGhUaWxlcyA9IFtUSUxFX0NPUlJJRE9SLCBUSUxFX1JPT01fRkxPT1IsIFRJTEVfTElGVF07XHJcblxyXG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgW2N1cnJYLCBjdXJyWV0gPSBxdWV1ZS5zaGlmdCgpO1xyXG4gICAgICBmb3IgKGNvbnN0IFtkeCwgZHldIG9mIGRpcmVjdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBuZXh0WCA9IGN1cnJYICsgZHg7XHJcbiAgICAgICAgY29uc3QgbmV4dFkgPSBjdXJyWSArIGR5O1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGAke25leHRYfSwke25leHRZfWA7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIG5leHRYID49IDAgJiZcclxuICAgICAgICAgIG5leHRYIDwgdGhpcy5jb2xzICYmXHJcbiAgICAgICAgICBuZXh0WSA+PSAwICYmXHJcbiAgICAgICAgICBuZXh0WSA8IHRoaXMucm93cyAmJlxyXG4gICAgICAgICAgIXZpc2l0ZWQuaGFzKGtleSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNvbnN0IHRpbGVWYWx1ZSA9IHRoaXMubWFwW25leHRZXT8uW25leHRYXTtcclxuICAgICAgICAgIHZpc2l0ZWQuYWRkKGtleSk7XHJcblxyXG4gICAgICAgICAgaWYgKHRhcmdldFNhZmVUaWxlcy5pbmNsdWRlcyh0aWxlVmFsdWUpICYmICghZXhjbHVkZUxpZnQgfHwgdGlsZVZhbHVlICE9PSBUSUxFX0xJRlQpKSB7XHJcbiAgICAgICAgICAgIC8vINCd0LDRiNC70Lgg0L/QvtC00YXQvtC00Y/RidC40Lkg0YLQuNC/INGC0LDQudC70LBcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUaWxlT3BlbkVub3VnaChuZXh0WCwgbmV4dFksIGJmc01pbk9wZW5TaWRlcywgYXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzKSkge1xyXG4gICAgICAgICAgICAgIC8vINCYINC+0L0g0LTQvtGB0YLQsNGC0L7Rh9C90L4g0L7RgtC60YDRi9GCXHJcbiAgICAgICAgICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2ZpbmROZWFyZXN0XSBTVUNDRVNTOiBCRlMgZm91bmQgKCR7bmV4dFh9LCR7bmV4dFl9KS5gKTtcclxuICAgICAgICAgICAgICByZXR1cm4geyB4OiAobmV4dFggKyAwLjUpICogdGhpcy50aWxlU2l6ZSwgeTogKG5leHRZICsgMC41KSAqIHRoaXMudGlsZVNpemUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8g0JXRgdC70Lgg0YLQsNC50Lsg0L/RgNC+0YXQvtC00LjQvCDQtNC70Y8gQkZTLCDQtNC+0LHQsNCy0LvRj9C10Lwg0LIg0L7Rh9C10YDQtdC00YxcclxuICAgICAgICAgIGlmIChiZnNXYWxrYWJsZVBhdGhUaWxlcy5pbmNsdWRlcyh0aWxlVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goW25leHRYLCBuZXh0WV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUuZXJyb3IoYCAgW2ZpbmROZWFyZXN0XSBGQUlMVVJFOiBObyBzdWl0YWJsZSB0aWxlIGZvdW5kIGZvciB0YXJnZXQgKCR7dGFyZ2V0VGlsZVh9LCR7dGFyZ2V0VGlsZVl9KSBhZnRlciBhbGwgc2VhcmNoZXMuYCk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFNwYXduUG9pbnRJblJvb21PZkxpZnQobGlmdFRpbGVYLCBsaWZ0VGlsZVksIHByZWZlcnJlZERpc3RhbmNlID0gMikge1xyXG4gICAgY29uc3QgaXNEZWJ1Z0N1cnJlbnRDYWxsID0gdGhpcy5mbG9vck51bWJlciA9PT0gREVCVUdfRkxPT1I7XHJcbiAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgW1Byb2NNYXAgRiR7dGhpcy5mbG9vck51bWJlcn0gZ2V0U3Bhd25Qb2ludEluUm9vbU9mTGlmdF0gQ2FsbGVkIGZvciBsaWZ0IGF0ICgke2xpZnRUaWxlWH0sICR7bGlmdFRpbGVZfSksIHByZWZlcnJlZERpc3Q6ICR7cHJlZmVycmVkRGlzdGFuY2V9YCk7XHJcblxyXG4gICAgbGV0IGFzc29jaWF0ZWRSb29tID0gbnVsbDtcclxuICAgIGxldCBlbnRyeVBvaW50VG9Sb29tID0gbnVsbDsgLy8ge3gsIHl9IC0g0LrQu9C10YLQutCwINC/0L7Qu9CwINC60L7QvNC90LDRgtGLLCDQv9GA0LjQvNGL0LrQsNGO0YnQsNGPINC6INC70LjRhNGC0YMv0LrQvtGA0LjQtNC+0YDRgyDQu9C40YTRgtCwXHJcbiAgICBsZXQgZGlyZWN0aW9uRnJvbVNvdXJjZVRvRW50cnlQb2ludCA9IG51bGw7IC8vIHtkeCwgZHl9IC0g0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQvtGCINC40YHRgtC+0YfQvdC40LrQsCAo0LvQuNGE0YIg0LjQu9C4INC60L7RgNC40LTQvtGAINGDINC70LjRhNGC0LApINC6IGVudHJ5UG9pbnRUb1Jvb21cclxuXHJcbiAgICBjb25zdCBjaGVja05laWdoYm9ycyA9IFtcclxuICAgICAgeyBkeDogMCwgZHk6IC0xIH0sXHJcbiAgICAgIHsgZHg6IDAsIGR5OiAxIH0sXHJcbiAgICAgIHsgZHg6IC0xLCBkeTogMCB9LFxyXG4gICAgICB7IGR4OiAxLCBkeTogMCB9LFxyXG4gICAgXTsgLy8gTiwgUywgVywgRVxyXG5cclxuICAgIC8vINCt0YLQsNC/IDE6INCb0LjRhNGCINC90LDQv9GA0Y/QvNGD0Y4g0L/RgNC40LzRi9C60LDQtdGCINC6INC60L7QvNC90LDRgtC1P1xyXG4gICAgLy8g0JrQu9C10YLQutCwINC70LjRhNGC0LAgbGlmdFRpbGVYLCBsaWZ0VGlsZVkg0JzQntCW0JXQoiDQsdGL0YLRjCBUSUxFX0NPUlJJRE9SINCyIHRoaXMubWFwLCDQtdGB0LvQuCDQv9GD0YLRjCDQsdGL0Lsg0L/RgNC+0LvQvtC20LXQvSDQuiDQvdC10LkuXHJcbiAgICBmb3IgKGNvbnN0IG4gb2YgY2hlY2tOZWlnaGJvcnMpIHtcclxuICAgICAgY29uc3QgYWRqWCA9IGxpZnRUaWxlWCArIG4uZHg7IC8vINCh0L7RgdC10LQg0LrQu9C10YLQutC4INC70LjRhNGC0LBcclxuICAgICAgY29uc3QgYWRqWSA9IGxpZnRUaWxlWSArIG4uZHk7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBhZGpYID49IDAgJiZcclxuICAgICAgICBhZGpYIDwgdGhpcy5jb2xzICYmXHJcbiAgICAgICAgYWRqWSA+PSAwICYmXHJcbiAgICAgICAgYWRqWSA8IHRoaXMucm93cyAmJlxyXG4gICAgICAgIHRoaXMubWFwW2FkalldPy5bYWRqWF0gPT09IFRJTEVfUk9PTV9GTE9PUlxyXG4gICAgICApIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHJvb20gb2YgdGhpcy5yb29tcykge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBhZGpYID49IHJvb20ueCAmJlxyXG4gICAgICAgICAgICBhZGpYIDwgcm9vbS54ICsgcm9vbS53aWR0aCAmJlxyXG4gICAgICAgICAgICBhZGpZID49IHJvb20ueSAmJlxyXG4gICAgICAgICAgICBhZGpZIDwgcm9vbS55ICsgcm9vbS5oZWlnaHRcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBhc3NvY2lhdGVkUm9vbSA9IHJvb207XHJcbiAgICAgICAgICAgIGVudHJ5UG9pbnRUb1Jvb20gPSB7IHg6IGFkalgsIHk6IGFkalkgfTsgLy8g0K3RgtC+INC4INC10YHRgtGMINGC0L7Rh9C60LAg0LLRhdC+0LTQsCDQsiDQutC+0LzQvdCw0YLRg1xyXG4gICAgICAgICAgICBkaXJlY3Rpb25Gcm9tU291cmNlVG9FbnRyeVBvaW50ID0geyBkeDogbi5keCwgZHk6IG4uZHkgfTsgLy8g0J3QsNC/0YDQsNCy0LvQtdC90LjQtSDQvtGCINC70LjRhNGC0LAg0Log0Y3RgtC+0Lkg0YLQvtGH0LrQtVxyXG4gICAgICAgICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbZ2V0U3Bhd25Qb2ludEluUm9vbU9mTGlmdF0gTGlmdCAoJHtsaWZ0VGlsZVh9LCR7bGlmdFRpbGVZfSkgZGlyZWN0bHkgYWRqYWNlbnQgdG8gcm9vbSBmbG9vciBhdCAoJHthZGpYfSwke2Fkall9KS4gUm9vbSBJRDogJHtyb29tLmlkIHx8ICdOL0EnfWApO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGFzc29jaWF0ZWRSb29tKSBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICAvLyDQrdGC0LDQvyAyOiDQldGB0LvQuCDQvdC1INC90LDQv9GA0Y/QvNGD0Y4sINGC0L4g0YfQtdGA0LXQtyDQvtC00L3RgyDQutC70LXRgtC60YMg0LrQvtGA0LjQtNC+0YDQsD9cclxuICAgIGlmICghYXNzb2NpYXRlZFJvb20pIHtcclxuICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2dldFNwYXduUG9pbnRJblJvb21PZkxpZnRdIExpZnQgbm90IGRpcmVjdGx5IGFkamFjZW50LiBDaGVja2luZyBuZWlnaGJvcnMgb2YgbmVpZ2hib3JzICh2aWEgMSBjb3JyaWRvciB0aWxlKS4uLmApO1xyXG4gICAgICBmb3IgKGNvbnN0IG5PdXRlciBvZiBjaGVja05laWdoYm9ycykge1xyXG4gICAgICAgIC8vIG5PdXRlciAtINC90LDQv9GA0LDQstC70LXQvdC40LUg0Log0LLQvtC30LzQvtC20L3QvtC5INC60LvQtdGC0LrQtSDQutC+0YDQuNC00L7RgNCwINGA0Y/QtNC+0Lwg0YEg0LvQuNGE0YLQvtC8XHJcbiAgICAgICAgY29uc3QgY29ycmlkb3JYID0gbGlmdFRpbGVYICsgbk91dGVyLmR4O1xyXG4gICAgICAgIGNvbnN0IGNvcnJpZG9yWSA9IGxpZnRUaWxlWSArIG5PdXRlci5keTtcclxuXHJcbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDRh9GC0L4g0Y3RgtCwINC/0YDQvtC80LXQttGD0YLQvtGH0L3QsNGPINC60LvQtdGC0LrQsCAtINC60L7RgNC40LTQvtGAXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgY29ycmlkb3JYIDwgMCB8fFxyXG4gICAgICAgICAgY29ycmlkb3JYID49IHRoaXMuY29scyB8fFxyXG4gICAgICAgICAgY29ycmlkb3JZIDwgMCB8fFxyXG4gICAgICAgICAgY29ycmlkb3JZID49IHRoaXMucm93cyB8fFxyXG4gICAgICAgICAgdGhpcy5tYXBbY29ycmlkb3JZXT8uW2NvcnJpZG9yWF0gIT09IFRJTEVfQ09SUklET1JcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBuSW5uZXIgb2YgY2hlY2tOZWlnaGJvcnMpIHtcclxuICAgICAgICAgIC8vIG5Jbm5lciAtINC90LDQv9GA0LDQstC70LXQvdC40LUg0L7RgiDQutC70LXRgtC60Lgg0LrQvtGA0LjQtNC+0YDQsCDQuiDQstC+0LfQvNC+0LbQvdC+0Lkg0LrQvtC80L3QsNGC0LVcclxuICAgICAgICAgIC8vINCd0LUg0YHQvNC+0YLRgNC40Lwg0L7QsdGA0LDRgtC90L4g0L3QsCDQuNGB0YXQvtC00L3Rg9GOINC60LvQtdGC0LrRgyDQu9C40YTRgtCwXHJcbiAgICAgICAgICBpZiAobklubmVyLmR4ID09PSAtbk91dGVyLmR4ICYmIG5Jbm5lci5keSA9PT0gLW5PdXRlci5keSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgY29uc3QgcG90ZW50aWFsUm9vbVggPSBjb3JyaWRvclggKyBuSW5uZXIuZHg7XHJcbiAgICAgICAgICBjb25zdCBwb3RlbnRpYWxSb29tWSA9IGNvcnJpZG9yWSArIG5Jbm5lci5keTtcclxuXHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHBvdGVudGlhbFJvb21YID49IDAgJiZcclxuICAgICAgICAgICAgcG90ZW50aWFsUm9vbVggPCB0aGlzLmNvbHMgJiZcclxuICAgICAgICAgICAgcG90ZW50aWFsUm9vbVkgPj0gMCAmJlxyXG4gICAgICAgICAgICBwb3RlbnRpYWxSb29tWSA8IHRoaXMucm93cyAmJlxyXG4gICAgICAgICAgICB0aGlzLm1hcFtwb3RlbnRpYWxSb29tWV0/Lltwb3RlbnRpYWxSb29tWF0gPT09IFRJTEVfUk9PTV9GTE9PUlxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgcm9vbSBvZiB0aGlzLnJvb21zKSB7XHJcbiAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcG90ZW50aWFsUm9vbVggPj0gcm9vbS54ICYmXHJcbiAgICAgICAgICAgICAgICBwb3RlbnRpYWxSb29tWCA8IHJvb20ueCArIHJvb20ud2lkdGggJiZcclxuICAgICAgICAgICAgICAgIHBvdGVudGlhbFJvb21ZID49IHJvb20ueSAmJlxyXG4gICAgICAgICAgICAgICAgcG90ZW50aWFsUm9vbVkgPCByb29tLnkgKyByb29tLmhlaWdodFxyXG4gICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgYXNzb2NpYXRlZFJvb20gPSByb29tO1xyXG4gICAgICAgICAgICAgICAgZW50cnlQb2ludFRvUm9vbSA9IHsgeDogcG90ZW50aWFsUm9vbVgsIHk6IHBvdGVudGlhbFJvb21ZIH07IC8vINCt0YLQviDRgtC+0YfQutCwINCy0YXQvtC00LAg0LIg0LrQvtC80L3QsNGC0YNcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbkZyb21Tb3VyY2VUb0VudHJ5UG9pbnQgPSB7IGR4OiBuSW5uZXIuZHgsIGR5OiBuSW5uZXIuZHkgfTsgLy8g0J3QsNC/0YDQsNCy0LvQtdC90LjQtSDQvtGCINC60L7RgNC40LTQvtGA0LAg0Log0Y3RgtC+0Lkg0YLQvtGH0LrQtVxyXG4gICAgICAgICAgICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2dldFNwYXduUG9pbnRJblJvb21PZkxpZnRdIExpZnQgbmVhciByb29tIHZpYSBjb3JyaWRvciAoJHtjb3JyaWRvclh9LCR7Y29ycmlkb3JZfSkuIEVudHJ5IHRvIHJvb20gYXQgKCR7cG90ZW50aWFsUm9vbVh9LCR7cG90ZW50aWFsUm9vbVl9KS4gUm9vbSBJRDogJHtyb29tLmlkIHx8ICdOL0EnfWApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoYXNzb2NpYXRlZFJvb20pIGJyZWFrOyAvLyDQndCw0YjQu9C4INC60L7QvNC90LDRgtGDINGH0LXRgNC10LcgbklubmVyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhc3NvY2lhdGVkUm9vbSkgYnJlYWs7IC8vINCd0LDRiNC70Lgg0LrQvtC80L3QsNGC0YMg0YfQtdGA0LXQtyBuT3V0ZXJcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghYXNzb2NpYXRlZFJvb20gfHwgIWVudHJ5UG9pbnRUb1Jvb20gfHwgIWRpcmVjdGlvbkZyb21Tb3VyY2VUb0VudHJ5UG9pbnQpIHtcclxuICAgICAgLy8gICBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLndhcm4oYCAgW2dldFNwYXduUG9pbnRJblJvb21PZkxpZnRdIENvdWxkIG5vdCBmaW5kIGFuIGFzc29jaWF0ZWQgcm9vbSBvciBlbnRyeSBwb2ludCBmb3IgbGlmdCBhdCAoJHtsaWZ0VGlsZVh9LCR7bGlmdFRpbGVZfSkuYCk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vINCi0LXQv9C10YDRjCBkaXJlY3Rpb25Gcm9tU291cmNlVG9FbnRyeVBvaW50IC0g0Y3RgtC+INC90LDQv9GA0LDQstC70LXQvdC40LUg0L7RgiBcItC00LLQtdGA0LhcIiAoZW50cnlQb2ludFRvUm9vbSkg0JLQk9Cb0KPQkdCsINC60L7QvNC90LDRgtGLLlxyXG4gICAgY29uc3QgaW53YXJkRHggPSBkaXJlY3Rpb25Gcm9tU291cmNlVG9FbnRyeVBvaW50LmR4O1xyXG4gICAgY29uc3QgaW53YXJkRHkgPSBkaXJlY3Rpb25Gcm9tU291cmNlVG9FbnRyeVBvaW50LmR5O1xyXG5cclxuICAgIC8vINCY0YnQtdC8INGC0L7Rh9C60YMg0L3QsCAocHJlZmVycmVkRGlzdGFuY2UgLSAxKSDRiNCw0LPQvtCyINCy0LPQu9GD0LHRjCDQvtGCIGVudHJ5UG9pbnRUb1Jvb21cclxuICAgIC8vIHByZWZlcnJlZERpc3RhbmNlID0gMiAtPiBkaXN0ID0gMSAoMSDRiNCw0LMg0L7RgiDQstGF0L7QtNCwKSwgZGlzdCA9IDAgKNGB0LDQvCDQstGF0L7QtClcclxuICAgIC8vIHByZWZlcnJlZERpc3RhbmNlID0gMSAtPiBkaXN0ID0gMCAo0YHQsNC8INCy0YXQvtC0KVxyXG4gICAgZm9yIChsZXQgZGlzdE9mZnNldCA9IHByZWZlcnJlZERpc3RhbmNlIC0gMTsgZGlzdE9mZnNldCA+PSAwOyBkaXN0T2Zmc2V0LS0pIHtcclxuICAgICAgY29uc3Qgc3Bhd25DYW5kaWRhdGVUaWxlWCA9IGVudHJ5UG9pbnRUb1Jvb20ueCArIGlud2FyZER4ICogZGlzdE9mZnNldDtcclxuICAgICAgY29uc3Qgc3Bhd25DYW5kaWRhdGVUaWxlWSA9IGVudHJ5UG9pbnRUb1Jvb20ueSArIGlud2FyZER5ICogZGlzdE9mZnNldDtcclxuICAgICAgLy8gaWYgKGlzRGVidWdDdXJyZW50Q2FsbCkgY29uc29sZS5sb2coYCAgW2dldFNwYXduUG9pbnRJblJvb21PZkxpZnRdIFRyeWluZyBjYW5kaWRhdGUgKCR7c3Bhd25DYW5kaWRhdGVUaWxlWH0sJHtzcGF3bkNhbmRpZGF0ZVRpbGVZfSkgYXQgZGlzdE9mZnNldCAke2Rpc3RPZmZzZXR9IGZyb20gZW50cnkgJHtKU09OLnN0cmluZ2lmeShlbnRyeVBvaW50VG9Sb29tKX1gKTtcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBzcGF3bkNhbmRpZGF0ZVRpbGVYID49IGFzc29jaWF0ZWRSb29tLnggJiZcclxuICAgICAgICBzcGF3bkNhbmRpZGF0ZVRpbGVYIDwgYXNzb2NpYXRlZFJvb20ueCArIGFzc29jaWF0ZWRSb29tLndpZHRoICYmXHJcbiAgICAgICAgc3Bhd25DYW5kaWRhdGVUaWxlWSA+PSBhc3NvY2lhdGVkUm9vbS55ICYmXHJcbiAgICAgICAgc3Bhd25DYW5kaWRhdGVUaWxlWSA8IGFzc29jaWF0ZWRSb29tLnkgKyBhc3NvY2lhdGVkUm9vbS5oZWlnaHQgJiZcclxuICAgICAgICB0aGlzLm1hcFtzcGF3bkNhbmRpZGF0ZVRpbGVZXT8uW3NwYXduQ2FuZGlkYXRlVGlsZVhdID09PSBUSUxFX1JPT01fRkxPT1JcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0LrQsDog0LXRgdGC0Ywg0LvQuCDQtdGJ0LUg0L7QtNC90LAg0LrQu9C10YLQutCwINC/0L7Qu9CwINC60L7QvNC90LDRgtGLINCX0JAg0Y3RgtC+0Lkg0LrQsNC90LTQuNC00LDRgtGB0LrQvtC5INGC0L7Rh9C60L7QuSAo0LIg0YLQvtC8INC20LUg0L3QsNC/0YDQsNCy0LvQtdC90LjQuCBpbndhcmQpXHJcbiAgICAgICAgLy8g0K3RgtC+INCz0LDRgNCw0L3RgtC40YDRg9C10YIsINGH0YLQviDQvNGLINC90LUg0YHQv9Cw0LLQvdC40LzRgdGPINCy0L/Qu9C+0YLQvdGD0Y4g0LogXCLQtNCw0LvRjNC90LXQuVwiINGB0YLQtdC90LUg0LrQvtC80L3QsNGC0YssINC10YHQu9C4INC60L7QvNC90LDRgtCwINGD0LfQutCw0Y8uXHJcbiAgICAgICAgY29uc3QgZnVydGhlckluWCA9IHNwYXduQ2FuZGlkYXRlVGlsZVggKyBpbndhcmREeDtcclxuICAgICAgICBjb25zdCBmdXJ0aGVySW5ZID0gc3Bhd25DYW5kaWRhdGVUaWxlWSArIGlud2FyZER5O1xyXG4gICAgICAgIGNvbnN0IGhhc1NwYWNlQmVoaW5kID1cclxuICAgICAgICAgIGZ1cnRoZXJJblggPj0gYXNzb2NpYXRlZFJvb20ueCAmJlxyXG4gICAgICAgICAgZnVydGhlckluWCA8IGFzc29jaWF0ZWRSb29tLnggKyBhc3NvY2lhdGVkUm9vbS53aWR0aCAmJlxyXG4gICAgICAgICAgZnVydGhlckluWSA+PSBhc3NvY2lhdGVkUm9vbS55ICYmXHJcbiAgICAgICAgICBmdXJ0aGVySW5ZIDwgYXNzb2NpYXRlZFJvb20ueSArIGFzc29jaWF0ZWRSb29tLmhlaWdodCAmJlxyXG4gICAgICAgICAgdGhpcy5tYXBbZnVydGhlckluWV0/LltmdXJ0aGVySW5YXSA9PT0gVElMRV9ST09NX0ZMT09SO1xyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB0aGlzLmlzVGlsZU9wZW5Fbm91Z2goc3Bhd25DYW5kaWRhdGVUaWxlWCwgc3Bhd25DYW5kaWRhdGVUaWxlWSwgMiwgdHJ1ZSkgJiZcclxuICAgICAgICAgIGhhc1NwYWNlQmVoaW5kXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAvLyAgIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0XSBTVUNDRVNTOiBGb3VuZCBzdWl0YWJsZSBzcGF3biBwb2ludCBpbiByb29tOiBUaWxlICgke3NwYXduQ2FuZGlkYXRlVGlsZVh9LCR7c3Bhd25DYW5kaWRhdGVUaWxlWX0pLiBIYXMgc3BhY2UgYmVoaW5kOiAke2hhc1NwYWNlQmVoaW5kfWApO1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDogKHNwYXduQ2FuZGlkYXRlVGlsZVggKyAwLjUpICogdGhpcy50aWxlU2l6ZSxcclxuICAgICAgICAgICAgeTogKHNwYXduQ2FuZGlkYXRlVGlsZVkgKyAwLjUpICogdGhpcy50aWxlU2l6ZSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0XSBDYW5kaWRhdGUgKCR7c3Bhd25DYW5kaWRhdGVUaWxlWH0sJHtzcGF3bkNhbmRpZGF0ZVRpbGVZfSkgbm90IHN1aXRhYmxlLiBPcGVuRW5vdWdoOiAke3RoaXMuaXNUaWxlT3BlbkVub3VnaChzcGF3bkNhbmRpZGF0ZVRpbGVYLCBzcGF3bkNhbmRpZGF0ZVRpbGVZLCAyLCB0cnVlKX0sIEhhc1NwYWNlQmVoaW5kOiAke2hhc1NwYWNlQmVoaW5kfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBpZiAoaXNEZWJ1Z0N1cnJlbnRDYWxsKSBjb25zb2xlLmxvZyhgICBbZ2V0U3Bhd25Qb2ludEluUm9vbU9mTGlmdF0gQ2FuZGlkYXRlICgke3NwYXduQ2FuZGlkYXRlVGlsZVh9LCR7c3Bhd25DYW5kaWRhdGVUaWxlWX0pIGlzIG5vdCB2YWxpZCByb29tIGZsb29yIG9yIG91dCBvZiByb29tIGJvdW5kcy5gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vINCV0YHQu9C4INC90LUg0L3QsNGI0LvQuCDQuNC00LXQsNC70YzQvdGD0Y4g0YLQvtGH0LrRgyDRgSDQv9GA0L7RgdGC0YDQsNC90YHRgtCy0L7QvCDQt9CwINGB0L/QuNC90L7QuSwg0L/RgNC+0LHRg9C10Lwg0YHQsNC8IGVudHJ5UG9pbnRUb1Jvb20gKNC10YHQu9C4INC+0L0g0L/QvtC00YXQvtC00LjRgilcclxuICAgIGlmICh0aGlzLmlzVGlsZU9wZW5Fbm91Z2goZW50cnlQb2ludFRvUm9vbS54LCBlbnRyeVBvaW50VG9Sb29tLnksIDIsIHRydWUpKSB7XHJcbiAgICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUubG9nKGAgIFtnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0XSBGYWxsYmFjazogVXNpbmcgZW50cnkgcG9pbnQgdG8gcm9vbSAoJHtlbnRyeVBvaW50VG9Sb29tLnh9LCR7ZW50cnlQb2ludFRvUm9vbS55fSkgYXMgaXQncyBvcGVuIGVub3VnaC5gKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB4OiAoZW50cnlQb2ludFRvUm9vbS54ICsgMC41KSAqIHRoaXMudGlsZVNpemUsXHJcbiAgICAgICAgeTogKGVudHJ5UG9pbnRUb1Jvb20ueSArIDAuNSkgKiB0aGlzLnRpbGVTaXplLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIChpc0RlYnVnQ3VycmVudENhbGwpIGNvbnNvbGUud2FybihgICBbZ2V0U3Bhd25Qb2ludEluUm9vbU9mTGlmdF0gRkFJTFVSRTogQ291bGQgbm90IGZpbmQgYW55IHN1aXRhYmxlIHNwYXduIHBvaW50IGluc2lkZSByb29tIGZvciBsaWZ0IGF0ICgke2xpZnRUaWxlWH0sJHtsaWZ0VGlsZVl9KS5gKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZmluZE5lYXJieVVuYW5zd2VyZWRCb29rKHdvcmxkWCwgd29ybGRZLCByYWRpdXMgPSB0aGlzLnRpbGVTaXplICogMC44KSB7XHJcbiAgICBpZiAoIXRoaXMuYm9va3MgfHwgdGhpcy5ib29rcy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xyXG4gICAgbGV0IGNsb3Nlc3RCb29rID0gbnVsbDtcclxuICAgIGxldCBtaW5EaXN0YW5jZVNxID0gcmFkaXVzICogcmFkaXVzO1xyXG5cclxuICAgIGZvciAoY29uc3QgYm9vayBvZiB0aGlzLmJvb2tzKSB7XHJcbiAgICAgIGlmICghYm9vay5pc0NvbGxlY3RlZCkge1xyXG4gICAgICAgIC8vINCf0YDQtdC00L/QvtC70LDQs9Cw0LXQvCwg0YfRgtC+INGDIEJvb2sg0LXRgdGC0Ywg0YHQstC+0LnRgdGC0LLQviBpc0NvbGxlY3RlZFxyXG4gICAgICAgIGNvbnN0IGR4ID0gYm9vay54IC0gd29ybGRYO1xyXG4gICAgICAgIGNvbnN0IGR5ID0gYm9vay55IC0gd29ybGRZO1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlU3EgPSBkeCAqIGR4ICsgZHkgKiBkeTtcclxuICAgICAgICBpZiAoZGlzdGFuY2VTcSA8IG1pbkRpc3RhbmNlU3EpIHtcclxuICAgICAgICAgIG1pbkRpc3RhbmNlU3EgPSBkaXN0YW5jZVNxO1xyXG4gICAgICAgICAgY2xvc2VzdEJvb2sgPSBib29rO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsb3Nlc3RCb29rO1xyXG4gIH1cclxuXHJcbiAgbWFya0Jvb2tBc0NvbGxlY3RlZChib29rVG9Db2xsZWN0KSB7XHJcbiAgICBpZiAoIWJvb2tUb0NvbGxlY3QgfHwgIXRoaXMuYm9va3MpIHJldHVybiBmYWxzZTtcclxuICAgIGNvbnN0IGJvb2sgPSB0aGlzLmJvb2tzLmZpbmQoKGIpID0+IGIuaWQgPT09IGJvb2tUb0NvbGxlY3QuaWQpOyAvLyDQmNGJ0LXQvCDQv9C+IElEXHJcbiAgICBpZiAoYm9vayAmJiAhYm9vay5pc0NvbGxlY3RlZCkge1xyXG4gICAgICBib29rLmlzQ29sbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgLy8gY29uc29sZS5sb2coYFtQcm9jTWFwIEYke3RoaXMuZmxvb3JOdW1iZXJ9XSBCb29rICR7Ym9vay5pZH0gbWFya2VkIGFzIGNvbGxlY3RlZC5gKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBmaW5kTmVhcmJ5TGlmdCh3b3JsZFgsIHdvcmxkWSwgcmFkaXVzID0gdGhpcy50aWxlU2l6ZSAqIExJRlRfSU5URVJBQ1RJT05fUkFESVVTX01VTFRJUExJRVIpIHtcclxuICAgIGlmICghdGhpcy5saWZ0UG9zaXRpb24pIHJldHVybiBudWxsO1xyXG4gICAgLy8g0KDQsNGB0YHRgtC+0Y/QvdC40LUg0L7RgiDRhtC10L3RgtGA0LAg0L/QtdGA0YHQvtC90LDQttCwINC00L4g0YbQtdC90YLRgNCwINC60LvQtdGC0LrQuCDQu9C40YTRgtCwXHJcbiAgICBjb25zdCBkeCA9IHdvcmxkWCAtIHRoaXMubGlmdFBvc2l0aW9uLng7IC8vIGxpZnRQb3NpdGlvbi54IC0g0LzQuNGA0L7QstGL0LUg0LrQvtC+0YDQtNC40L3QsNGC0YtcclxuICAgIGNvbnN0IGR5ID0gd29ybGRZIC0gdGhpcy5saWZ0UG9zaXRpb24ueTtcclxuICAgIGNvbnN0IGRpc3RhbmNlU3EgPSBkeCAqIGR4ICsgZHkgKiBkeTtcclxuICAgIHJldHVybiBkaXN0YW5jZVNxIDwgcmFkaXVzICogcmFkaXVzID8gdGhpcy5saWZ0UG9zaXRpb24gOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGlmdFBvc2l0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGlmdFBvc2l0aW9uOyAvLyDQktC+0LfQstGA0LDRidCw0LXRgiB7eCwgeSwgdGlsZVgsIHRpbGVZfVxyXG4gIH1cclxuXHJcbiAgZHJhdyhjdHgsIGJvb2tJbWFnZSA9IG51bGwpIHtcclxuICAgIGlmICghdGhpcy5tYXAgfHwgIXRoaXMucmVuZGVyZXIpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBtYXBEYXRhID0ge1xyXG4gICAgICBtYXA6IHRoaXMubWFwLFxyXG4gICAgICByb29tczogdGhpcy5yb29tcyxcclxuICAgICAgYm9va3M6IHRoaXMuYm9va3MsIC8vINCf0LXRgNC10LTQsNC10Lwg0LDQutGC0YPQsNC70YzQvdGL0Lkg0LzQsNGB0YHQuNCyINC60L3QuNCzXHJcbiAgICAgIGxpZnRQb3NpdGlvbjogdGhpcy5saWZ0UG9zaXRpb24sIC8vINCf0LXRgNC10LTQsNC10LwgdGlsZVgsIHRpbGVZINC4INC80LjRgNC+0LLRi9C1IHgseSDQu9C40YTRgtCwXHJcbiAgICAgIG9mZnNldFg6IHRoaXMub2Zmc2V0WCxcclxuICAgICAgb2Zmc2V0WTogdGhpcy5vZmZzZXRZLFxyXG4gICAgICBjb2xzOiB0aGlzLmNvbHMsXHJcbiAgICAgIHJvd3M6IHRoaXMucm93cyxcclxuICAgICAgdGlsZVNpemU6IHRoaXMudGlsZVNpemUsXHJcbiAgICB9O1xyXG4gICAgdGhpcy5yZW5kZXJlci5kcmF3KGN0eCwgbWFwRGF0YSwgYm9va0ltYWdlKTsgLy8gYm9va0ltYWdlIC0g0Y3RgtC+INGB0L/RgNCw0LnRgiDQtNC70Y8g0LrQvdC40LNcclxuICB9XHJcblxyXG4gIGxvZ01hcEdyaWQoKSB7XHJcbiAgICBpZiAoIXRoaXMubWFwKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbUHJvY01hcCBGJHt0aGlzLmZsb29yTnVtYmVyfV0gTWFwIGdyaWQgbm90IGF2YWlsYWJsZS5gKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coYC0tLSBNYXAgR3JpZCBGbG9vciAke3RoaXMuZmxvb3JOdW1iZXJ9ICgke3RoaXMuY29sc314JHt0aGlzLnJvd3N9KSAtLS1gKTtcclxuICAgIGxldCBoZWFkZXIgPSAnICAgJzsgLy8g0JTQu9GPINC90L7QvNC10YDQvtCyINGB0YLQvtC70LHRhtC+0LJcclxuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jb2xzOyBjKyspIGhlYWRlciArPSBjICUgMTAgPT09IDAgPyBNYXRoLmZsb29yKGMgLyAxMCkgOiAnICc7XHJcbiAgICBjb25zb2xlLmxvZyhoZWFkZXIpO1xyXG4gICAgaGVhZGVyID0gJyAgICc7XHJcbiAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY29sczsgYysrKSBoZWFkZXIgKz0gYyAlIDEwO1xyXG4gICAgY29uc29sZS5sb2coaGVhZGVyKTtcclxuXHJcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMucm93czsgeSsrKSB7XHJcbiAgICAgIGNvbnN0IHJvd051bSA9IHkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnICcpO1xyXG4gICAgICBjb25zdCByb3dTdHJpbmcgPSB0aGlzLm1hcFt5XVxyXG4gICAgICAgIC5tYXAoKHRpbGUpID0+IHtcclxuICAgICAgICAgIHN3aXRjaCAodGlsZSkge1xyXG4gICAgICAgICAgICBjYXNlIFRJTEVfV0FMTDpcclxuICAgICAgICAgICAgICByZXR1cm4gJyMnOyAvLyDQodGC0LXQvdCwXHJcbiAgICAgICAgICAgIGNhc2UgVElMRV9DT1JSSURPUjpcclxuICAgICAgICAgICAgICByZXR1cm4gJy4nOyAvLyDQmtC+0YDQuNC00L7RgFxyXG4gICAgICAgICAgICBjYXNlIFRJTEVfUk9PTV9GTE9PUjpcclxuICAgICAgICAgICAgICByZXR1cm4gJyAnOyAvLyDQn9C+0Lsg0LrQvtC80L3QsNGC0YtcclxuICAgICAgICAgICAgY2FzZSBUSUxFX0xJRlQ6XHJcbiAgICAgICAgICAgICAgcmV0dXJuICdMJzsgLy8g0JvQuNGE0YIgKNGF0L7RgtGPINC+0L0g0LzQvtC20LXRgiDQsdGL0YLRjCDQv9C10YDQtdC30LDQv9C40YHQsNC9INC60L7RgNC40LTQvtGA0L7QvCDQsiB0aGlzLm1hcClcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICByZXR1cm4gJz8nOyAvLyDQndC10LjQt9Cy0LXRgdGC0L3Ri9C5INGC0LDQudC7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuam9pbignJyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGAke3Jvd051bX0gJHtyb3dTdHJpbmd9YCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5saWZ0UG9zaXRpb24pIHtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYExpZnQgYWN0dWFsIHRpbGUgdHlwZSBpbiBtYXBbJHt0aGlzLmxpZnRQb3NpdGlvbi50aWxlWX1dWyR7dGhpcy5saWZ0UG9zaXRpb24udGlsZVh9XTogJHtcclxuICAgICAgICAgIHRoaXMubWFwW3RoaXMubGlmdFBvc2l0aW9uLnRpbGVZXT8uW3RoaXMubGlmdFBvc2l0aW9uLnRpbGVYXVxyXG4gICAgICAgIH1gXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGBMaWZ0IHJlcG9ydGVkIGF0IHRpbGU6ICgke3RoaXMubGlmdFBvc2l0aW9uLnRpbGVYfSwgJHt0aGlzLmxpZnRQb3NpdGlvbi50aWxlWX0pYFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJ0xpZnQgcG9zaXRpb24gbm90IHNldC4nKTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGAtLS0gRW5kIE1hcCBHcmlkIEZsb29yICR7dGhpcy5mbG9vck51bWJlcn0gLS0tYCk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIHNyYy9jb3JlL0xldmVsLmpzXHJcbmltcG9ydCB7IFByb2NlZHVyYWxNYXAgfSBmcm9tICcuLi9tYXAvUHJvY2VkdXJhbE1hcC5qcyc7XHJcbi8vIFJlbW92ZWQgVFJBTlNJVElPTl9aT05FX1JBRElVU19NVUxUSVBMSUVSIGltcG9ydFxyXG5cclxuLyoqXHJcbiAqINCa0LvQsNGB0YEgTGV2ZWwg0YPQv9GA0LDQstC70Y/QtdGCINGC0LXQutGD0YnQuNC8INGN0YLQsNC20L7QvCDQuCDQt9Cw0LPRgNGD0LfQutC+0Lkg0LrQsNGA0YIuXHJcbiAqINCb0L7Qs9C40LrQsCDQt9C+0L0g0L/QtdGA0LXRhdC+0LTQsCAodHJhbnNpdGlvbiB6b25lcykg0YPQtNCw0LvQtdC90LAsINGCLtC6LiDQu9C40YTRgiDRgNCw0LHQvtGC0LDQtdGCINC40L3QsNGH0LUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGV2ZWwge1xyXG4gIC8qKlxyXG4gICAqINCh0L7Qt9C00LDQtdGCINGN0LrQt9C10LzQv9C70Y/RgCBMZXZlbC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbkZsb29yPTFdIC0g0J3QvtC80LXRgCDRgdCw0LzQvtCz0L4g0L3QuNC20L3QtdCz0L4g0Y3RgtCw0LbQsC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gW21heEZsb29yPTNdIC0g0J3QvtC80LXRgCDRgdCw0LzQvtCz0L4g0LLQtdGA0YXQvdC10LPQviDRjdGC0LDQttCwLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKG1pbkZsb29yID0gMSwgbWF4Rmxvb3IgPSAzKSB7XHJcbiAgICBpZiAobWluRmxvb3IgPj0gbWF4Rmxvb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgIGBMZXZlbCBjb25zdHJ1Y3RvcjogbWluRmxvb3IgKCR7bWluRmxvb3J9KSBtdXN0IGJlIGxlc3MgdGhhbiBtYXhGbG9vciAoJHttYXhGbG9vcn0pLiBVc2luZyBkZWZhdWx0cyAxIGFuZCAzLmBcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5taW5GbG9vciA9IDE7XHJcbiAgICAgIHRoaXMubWF4Rmxvb3IgPSAzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5taW5GbG9vciA9IG1pbkZsb29yO1xyXG4gICAgICB0aGlzLm1heEZsb29yID0gbWF4Rmxvb3I7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jdXJyZW50Rmxvb3IgPSB0aGlzLm1pbkZsb29yO1xyXG4gICAgdGhpcy5jdXJyZW50TWFwID0gbnVsbDsgLy8gSW5zdGFuY2Ugb2YgUHJvY2VkdXJhbE1hcFxyXG4gICAgLy8gdGhpcy50cmFuc2l0aW9uWm9uZXMgPSBbXTsgLy8gUkVNT1ZFRCAtIE5vIGxvbmdlciBuZWVkZWQgZm9yIGxpZnRzXHJcbiAgICB0aGlzLnRpbGVTaXplID0gMzI7IC8vIERlZmF1bHQsIHdpbGwgYmUgdXBkYXRlZCBmcm9tIG1hcFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog0JDRgdC40L3RhdGA0L7QvdC90L4g0LfQsNCz0YDRg9C20LDQtdGCICjQs9C10L3QtdGA0LjRgNGD0LXRgikg0LrQsNGA0YLRgyDQtNC70Y8g0YPQutCw0LfQsNC90L3QvtCz0L4g0Y3RgtCw0LbQsC5cclxuICAgKiBBc3N1bWVzIFByb2NlZHVyYWxNYXAgY29uc3RydWN0b3IgaGFuZGxlcyBnZW5lcmF0aW9uLCBsaWZ0IHBsYWNlbWVudCxcclxuICAgKiBhbmQgdGhyb3dzIG9uIGNyaXRpY2FsIGZhaWx1cmUgKGUuZy4sIHVucmVhY2hhYmxlIGxpZnQpLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmbG9vck51bWJlciAtINCd0L7QvNC10YAg0Y3RgtCw0LbQsCDQtNC70Y8g0LfQsNCz0YDRg9C30LrQuC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gY2FudmFzV2lkdGggLSDQqNC40YDQuNC90LAg0LrQsNC90LLQsNGB0LAuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNhbnZhc0hlaWdodCAtINCS0YvRgdC+0YLQsCDQutCw0L3QstCw0YHQsC5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0g0J/RgNC+0LzQuNGBLCDQutC+0YLQvtGA0YvQuSDRgNCw0LfRgNC10YjQsNC10YLRgdGPINC/0L7RgdC70LUg0LfQsNCz0YDRg9C30LrQuCDRjdGC0LDQttCwLlxyXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBQcm9jZWR1cmFsTWFwIGdlbmVyYXRpb24gb3IgdmFsaWRhdGlvbiBmYWlscy5cclxuICAgKi9cclxuICBhc3luYyBsb2FkRmxvb3IoZmxvb3JOdW1iZXIsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpIHtcclxuICAgIGlmIChmbG9vck51bWJlciA8IHRoaXMubWluRmxvb3IgfHwgZmxvb3JOdW1iZXIgPiB0aGlzLm1heEZsb29yKSB7XHJcbiAgICAgIGNvbnN0IGVycm9yTXNnID0gYEF0dGVtcHRlZCB0byBsb2FkIGludmFsaWQgZmxvb3I6ICR7Zmxvb3JOdW1iZXJ9LiBBbGxvd2VkIHJhbmdlOiBbJHt0aGlzLm1pbkZsb29yfS0ke3RoaXMubWF4Rmxvb3J9XWA7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtMZXZlbF0gJHtlcnJvck1zZ31gKTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTXNnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZyhgW0xldmVsXSBMb2FkaW5nIGZsb29yICR7Zmxvb3JOdW1iZXJ9Li4uYCk7XHJcbiAgICB0aGlzLmN1cnJlbnRGbG9vciA9IGZsb29yTnVtYmVyO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIFByb2NlZHVyYWxNYXAgY29uc3RydWN0b3Igbm93IGhhbmRsZXMgZ2VuZXJhdGlvbiBBTkQgdmFsaWRhdGlvbiAobGlrZSBsaWZ0IHJlYWNoYWJpbGl0eSkuXHJcbiAgICAgIC8vIEl0IHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgZ2VuZXJhdGlvbiBmYWlscyBjcml0aWNhbGx5LlxyXG4gICAgICB0aGlzLmN1cnJlbnRNYXAgPSBuZXcgUHJvY2VkdXJhbE1hcChcclxuICAgICAgICBjYW52YXNXaWR0aCxcclxuICAgICAgICBjYW52YXNIZWlnaHQsXHJcbiAgICAgICAgdGhpcy5jdXJyZW50Rmxvb3IsXHJcbiAgICAgICAgdGhpcy5taW5GbG9vcixcclxuICAgICAgICB0aGlzLm1heEZsb29yXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBCYXNpYyB2YWxpZGF0aW9uIGFmdGVyIGNyZWF0aW9uIChlbnN1cmUgbWFwIG9iamVjdCBsb29rcyByZWFzb25hYmxlKVxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgIXRoaXMuY3VycmVudE1hcC50aWxlU2l6ZSB8fFxyXG4gICAgICAgICF0aGlzLmN1cnJlbnRNYXAubWFwIHx8XHJcbiAgICAgICAgIXRoaXMuY3VycmVudE1hcC5ib29rcyB8fCAvLyBib29rcyBzaG91bGQgZXhpc3QgKGV2ZW4gaWYgZW1wdHkpXHJcbiAgICAgICAgIXRoaXMuY3VycmVudE1hcC5nZXRMaWZ0UG9zaXRpb24oKSAvLyBMaWZ0IHBvc2l0aW9uIE1VU1QgZXhpc3QgYWZ0ZXIgc3VjY2Vzc2Z1bCBnZW5lcmF0aW9uXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICdbTGV2ZWxdIFByb2NlZHVyYWxNYXAgaW5zdGFuY2UgaXMgbWlzc2luZyBlc3NlbnRpYWwgcHJvcGVydGllcyBhZnRlciBjcmVhdGlvbiAodGlsZVNpemUsIG1hcCwgYm9va3MsIG9yIGxpZnRQb3NpdGlvbikuJ1xyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMudGlsZVNpemUgPSB0aGlzLmN1cnJlbnRNYXAudGlsZVNpemU7XHJcbiAgICAgIGNvbnN0IGxpZnRQb3MgPSB0aGlzLmN1cnJlbnRNYXAuZ2V0TGlmdFBvc2l0aW9uKCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGAgIFtMZXZlbF0gTWFwIGdlbmVyYXRlZCBmb3IgZmxvb3IgJHt0aGlzLmN1cnJlbnRGbG9vcn0uIFRpbGVTaXplOiAke3RoaXMudGlsZVNpemV9LiBMaWZ0IGF0IHRpbGUoJHtsaWZ0UG9zLnRpbGVYfSwgJHtsaWZ0UG9zLnRpbGVZfSkuYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gUkVNT1ZFRDogY3JlYXRlVHJhbnNpdGlvblpvbmVzKCkgY2FsbCBpcyBubyBsb25nZXIgbmVlZGVkLlxyXG5cclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYFtMZXZlbF0gRmxvb3IgJHtmbG9vck51bWJlcn0gbG9hZGVkIHN1Y2Nlc3NmdWxseS4gTWFwIHNpemU6ICR7dGhpcy5jdXJyZW50TWFwLmNvbHN9eCR7dGhpcy5jdXJyZW50TWFwLnJvd3N9LiAke3RoaXMuY3VycmVudE1hcC5ib29rcy5sZW5ndGh9IGJvb2tzIHBsYWNlZC5gXHJcbiAgICAgICk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIGBbTGV2ZWxdIENSSVRJQ0FMIEZBSUxVUkUgbG9hZGluZyBmbG9vciAke2Zsb29yTnVtYmVyfTogRmFpbGVkIHRvIGNyZWF0ZSBvciB2YWxpZGF0ZSBQcm9jZWR1cmFsTWFwOmAsXHJcbiAgICAgICAgZXJyb3JcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5jdXJyZW50TWFwID0gbnVsbDsgLy8gRW5zdXJlIHN0YXRlIGlzIGNsZWFuIG9uIGZhaWx1cmVcclxuICAgICAgLy8gUmV0aHJvdyB0aGUgZXJyb3IgZm9yIEdhbWUuanMgdG8gaGFuZGxlIChsaWtlbHkgc2hvdyBlcnJvciBtZXNzYWdlIGFuZCBzdG9wKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgYE1hcCBnZW5lcmF0aW9uL3ZhbGlkYXRpb24gZmFpbGVkIGZvciBmbG9vciAke2Zsb29yTnVtYmVyfS4gJHtlcnJvci5tZXNzYWdlIHx8IGVycm9yfWBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gYSByZXNvbHZlZCBwcm9taXNlIChnZW5lcmF0aW9uIGl0c2VsZiBpcyBzeW5jaHJvbm91cyB3aXRoaW4gdGhlIGNvbnN0cnVjdG9yKVxyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gUkVNT1ZFRDogY3JlYXRlVHJhbnNpdGlvblpvbmVzKCkgbWV0aG9kIGlzIG9ic29sZXRlLlxyXG5cclxuICAvLyBSRU1PVkVEOiBnZXRDdXJyZW50VHJhbnNpdGlvblpvbmUoKSBtZXRob2QgaXMgb2Jzb2xldGUuIExpZnQgaW50ZXJhY3Rpb24gY2hlY2tlZCBkaWZmZXJlbnRseS5cclxuXHJcbiAgLyoqXHJcbiAgICog0JLQvtC30LLRgNCw0YnQsNC10YIg0LzQsNGB0YHQuNCyINC+0LHRitC10LrRgtC+0LIg0LrQvdC40LMg0L3QsCDRgtC10LrRg9GJ0LXQuSDQutCw0YDRgtC1LlxyXG4gICAqIEByZXR1cm5zIHtBcnJheTxvYmplY3Q+fSDQnNCw0YHRgdC40LIg0L7QsdGK0LXQutGC0L7QsiDQutC90LjQsy5cclxuICAgKi9cclxuICBnZXRDdXJyZW50Qm9va3MoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFwID8gdGhpcy5jdXJyZW50TWFwLmJvb2tzIDogW107XHJcbiAgfVxyXG59XHJcbiIsIi8vIHNyYy9jb3JlL0dhbWVSZW5kZXJlci5qc1xyXG4vLyAoTm8gY2hhbmdlcyBuZWVkZWQgZnJvbSBwcmV2aW91cyBwcm92aWRlZCB2ZXJzaW9uLCBhc3N1bWluZyBpdCB3YXMgY29ycmVjdClcclxuaW1wb3J0IHsgQ2hhcmFjdGVyIH0gZnJvbSAnLi9DaGFyYWN0ZXIuanMnOyAvLyBPcHRpb25hbCBmb3IgdHlwZSBjaGVja3NcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lUmVuZGVyZXIge1xyXG4gIGNvbnN0cnVjdG9yKGdhbWUpIHtcclxuICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICB0aGlzLmNhbnZhcyA9IG51bGw7XHJcbiAgICB0aGlzLmN0eCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplQ2FudmFzKCkge1xyXG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKTtcclxuICAgIGlmICghdGhpcy5jYW52YXMpIHRocm93IG5ldyBFcnJvcihcIltSZW5kZXJlcl0gQ2FudmFzICdnYW1lLWNhbnZhcycgbm90IGZvdW5kIVwiKTtcclxuICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIGlmICghdGhpcy5jdHgpIHRocm93IG5ldyBFcnJvcignW1JlbmRlcmVyXSBGYWlsZWQgdG8gZ2V0IDJEIGNvbnRleHQuJyk7XHJcbiAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcclxuICAgIHRoaXMucmVzaXplQ2FudmFzKCk7XHJcbiAgICBjb25zb2xlLmxvZygnW1JlbmRlcmVyXSBDYW52YXMgaW5pdGlhbGl6ZWQuJyk7XHJcbiAgICByZXR1cm4geyBjYW52YXM6IHRoaXMuY2FudmFzLCBjdHg6IHRoaXMuY3R4IH07XHJcbiAgfVxyXG5cclxuICByZXNpemVDYW52YXMoKSB7XHJcbiAgICBpZiAoIXRoaXMuY2FudmFzKSByZXR1cm47XHJcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgaWYgKHRoaXMuZ2FtZS5jaGFyYWN0ZXIgJiYgdGhpcy5nYW1lLmxldmVsPy5jdXJyZW50TWFwKSB7XHJcbiAgICAgIHRoaXMuY2VudGVyQ2FtZXJhT25DaGFyYWN0ZXIoKTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGBbUmVuZGVyZXJdIENhbnZhcyByZXNpemVkIHRvICR7dGhpcy5jYW52YXMud2lkdGh9eCR7dGhpcy5jYW52YXMuaGVpZ2h0fWApO1xyXG4gIH1cclxuXHJcbiAgY2VudGVyQ2FtZXJhT25DaGFyYWN0ZXIoKSB7XHJcbiAgICBjb25zdCB7IGNoYXJhY3RlciwgbGV2ZWwsIGNhbnZhcyB9ID0gdGhpcy5nYW1lO1xyXG4gICAgaWYgKGNoYXJhY3RlciAmJiBsZXZlbD8uY3VycmVudE1hcCAmJiBjYW52YXMpIHtcclxuICAgICAgbGV2ZWwuY3VycmVudE1hcC5vZmZzZXRYID0gTWF0aC5mbG9vcihjYW52YXMud2lkdGggLyAyIC0gY2hhcmFjdGVyLngpO1xyXG4gICAgICBsZXZlbC5jdXJyZW50TWFwLm9mZnNldFkgPSBNYXRoLmZsb29yKGNhbnZhcy5oZWlnaHQgLyAyIC0gY2hhcmFjdGVyLnkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZHJhd0ZyYW1lKCkge1xyXG4gICAgaWYgKCF0aGlzLmN0eCB8fCAhdGhpcy5jYW52YXMpIHJldHVybjtcclxuICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcclxuICAgIGNvbnN0IG1hcCA9IHRoaXMuZ2FtZS5sZXZlbD8uY3VycmVudE1hcDtcclxuICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdhbWUuY2hhcmFjdGVyO1xyXG4gICAgaWYgKG1hcCkge1xyXG4gICAgICBtYXAuZHJhdyh0aGlzLmN0eCwgdGhpcy5nYW1lLmJvb2tJbWFnZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoY2hhciAmJiBtYXApIHtcclxuICAgICAgY2hhci5kcmF3KG1hcC5vZmZzZXRYLCBtYXAub2Zmc2V0WSk7XHJcbiAgICB9XHJcbiAgICAvLyB0aGlzLmRyYXdEZWJ1Z0luZm8oKTsgLy8gT3B0aW9uYWxcclxuICB9XHJcblxyXG4gIGRyYXdXaW5TY3JlZW4oKSB7XHJcbiAgICBpZiAoIXRoaXMuY3R4IHx8ICF0aGlzLmNhbnZhcykgcmV0dXJuO1xyXG4gICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ3JnYmEoMCwgMCwgMCwgMC44KSc7XHJcbiAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcclxuICAgIHRoaXMuY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgdGhpcy5jdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XHJcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnbGltZSc7XHJcbiAgICAvLyBDb25zaWRlciB1c2luZyBhIGZvbnQgYXZhaWxhYmxlIG9uIG1vc3Qgc3lzdGVtcyBvciBpbmNsdWRlIG9uZSB2aWEgQ1NTIEBmb250LWZhY2VcclxuICAgIHRoaXMuY3R4LmZvbnQgPSAnY2xhbXAoMzJweCwgOHZ3LCA0OHB4KSBcIlByZXNzIFN0YXJ0IDJQXCIsIGN1cnNpdmUsIEFyaWFsLCBzYW5zLXNlcmlmJztcclxuICAgIHRoaXMuY3R4LmZpbGxUZXh0KCdaV1lDScSYU1RXTyEnLCB0aGlzLmNhbnZhcy53aWR0aCAvIDIsIHRoaXMuY2FudmFzLmhlaWdodCAvIDIgLSA4MCk7IC8vIFRyYW5zbGF0ZWRcclxuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XHJcbiAgICB0aGlzLmN0eC5mb250ID0gJ2NsYW1wKDI0cHgsIDV2dywgMzJweCkgQXJpYWwsIHNhbnMtc2VyaWYnO1xyXG4gICAgdGhpcy5jdHguZmlsbFRleHQoXHJcbiAgICAgIGBaZWJyYW5vIHdzenlzdGtpZSAke3RoaXMuZ2FtZS50YXJnZXRCb29rc1RvV2lufSBrc2nEhcW8a2khYCwgLy8gVHJhbnNsYXRlZFxyXG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIsXHJcbiAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDJcclxuICAgICk7XHJcbiAgICB0aGlzLmN0eC5mb250ID0gJ2NsYW1wKDE4cHgsIDR2dywgMjRweCkgQXJpYWwsIHNhbnMtc2VyaWYnO1xyXG4gICAgdGhpcy5jdHguZmlsbFRleHQoJ1VuaXdlcnN5dGV0IHVyYXRvd2FueSEnLCB0aGlzLmNhbnZhcy53aWR0aCAvIDIsIHRoaXMuY2FudmFzLmhlaWdodCAvIDIgKyA2MCk7IC8vIFRyYW5zbGF0ZWRcclxuICAgIHRoaXMuY3R4LmZvbnQgPSAnY2xhbXAoMTRweCwgM3Z3LCAxOHB4KSBBcmlhbCwgc2Fucy1zZXJpZic7XHJcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnI2NjYyc7XHJcbiAgICB0aGlzLmN0eC5maWxsVGV4dChcclxuICAgICAgJyhPZMWbd2llxbwgc3Ryb27EmSwgYWJ5IHphZ3JhxIcgcG9ub3duaWUpJywgLy8gVHJhbnNsYXRlZFxyXG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIsXHJcbiAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAtIDUwXHJcbiAgICApO1xyXG4gIH1cclxuICAvLyBkcmF3RGVidWdJbmZvKCkgeyAuLi4gfSAvLyBPcHRpb25hbCBkZWJ1ZyBkcmF3aW5nXHJcbn1cclxuIiwiLy8gc3JjL2NvcmUvR2FtZXBsYXlNYW5hZ2VyLmpzXHJcbmltcG9ydCB7XHJcbiAgR2FtZVN0YXRlLFxyXG4gIExJRlRfQ09PTERPV05fTVMsXHJcbiAgVElMRV9XQUxMLFxyXG4gIFRJTEVfQ09SUklET1IsXHJcbiAgVElMRV9ST09NX0ZMT09SLFxyXG4gIFRJTEVfTElGVCxcclxuICBxdWVzdGlvbnMsXHJcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgVUlNYW5hZ2VyIH0gZnJvbSAnLi4vVUkvVUlNYW5hZ2VyLmpzJztcclxuaW1wb3J0IHsgQ2hhcmFjdGVyIH0gZnJvbSAnLi9DaGFyYWN0ZXIuanMnOyAvLyDQo9Cx0LXQtNC40YLQtdGB0YwsINGH0YLQviBDaGFyYWN0ZXIg0LjQvNC/0L7RgNGC0LjRgNC+0LLQsNC9XHJcblxyXG5jb25zdCBERUJVR19GTE9PUl9HTSA9IDM7IC8vINCU0LvRjyDQu9C+0LPQvtCyIEdhbWVwbGF5TWFuYWdlclxyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWVwbGF5TWFuYWdlciB7XHJcbiAgY29uc3RydWN0b3IoZ2FtZSkge1xyXG4gICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgIHRoaXMuaGFuZGxlQW5zd2VyID0gdGhpcy5oYW5kbGVBbnN3ZXIuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaGFuZGxlRmxvb3JTZWxlY3Rpb24gPSB0aGlzLmhhbmRsZUZsb29yU2VsZWN0aW9uLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUodGltZXN0YW1wKSB7XHJcbiAgICBpZiAodGhpcy5nYW1lLmdhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLlBMQVlJTkcpIHtcclxuICAgICAgdGhpcy51cGRhdGVQbGF5aW5nU3RhdGUodGltZXN0YW1wKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZVBsYXlpbmdTdGF0ZSh0aW1lc3RhbXApIHtcclxuICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdhbWUuY2hhcmFjdGVyO1xyXG4gICAgaWYgKCF0aGlzLmdhbWUubGV2ZWw/LmN1cnJlbnRNYXAgfHwgIWNoYXIgfHwgIXRoaXMuZ2FtZS5pbnB1dE1hbmFnZXIpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCB7IG1vdmVkIH0gPSB0aGlzLmhhbmRsZU1vdmVtZW50KCk7XHJcblxyXG4gICAgaWYgKGNoYXIgJiYgdHlwZW9mIGNoYXIudXBkYXRlQW5pbWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGNoYXIudXBkYXRlQW5pbWF0aW9uKHRpbWVzdGFtcCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFtb3ZlZCAmJiB0aGlzLmdhbWUuZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuUExBWUlORykge1xyXG4gICAgICB0aGlzLmhhbmRsZUludGVyYWN0aW9ucygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlTW92ZW1lbnQoKSB7XHJcbiAgICBjb25zdCBjaGFyID0gdGhpcy5nYW1lLmNoYXJhY3RlcjtcclxuICAgIGNvbnN0IG1hcCA9IHRoaXMuZ2FtZS5sZXZlbC5jdXJyZW50TWFwO1xyXG4gICAgY29uc3QgaW5wdXQgPSB0aGlzLmdhbWUuaW5wdXRNYW5hZ2VyO1xyXG4gICAgaWYgKCFjaGFyIHx8ICFtYXAgfHwgIWlucHV0KSByZXR1cm4geyBtb3ZlZDogZmFsc2UgfTtcclxuXHJcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBpbnB1dC5nZXRJbnB1dERpcmVjdGlvbigpO1xyXG4gICAgbGV0IGR4ID0gZGlyZWN0aW9uLnggKiBjaGFyLnNwZWVkO1xyXG4gICAgbGV0IGR5ID0gZGlyZWN0aW9uLnkgKiBjaGFyLnNwZWVkO1xyXG5cclxuICAgIGNvbnN0IGludGVuZGVkTW92ZSA9IGR4ICE9PSAwIHx8IGR5ICE9PSAwO1xyXG4gICAgbGV0IGFjdHVhbE1vdmVYID0gMDtcclxuICAgIGxldCBhY3R1YWxNb3ZlWSA9IDA7XHJcbiAgICBsZXQgbW92ZWQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoaW50ZW5kZWRNb3ZlKSB7XHJcbiAgICAgIGNvbnN0IGNhbk1vdmVYID0gZHggIT09IDAgJiYgIXRoaXMuY2hlY2tDb2xsaXNpb24oY2hhci54ICsgZHgsIGNoYXIueSk7XHJcbiAgICAgIGNvbnN0IGNhbk1vdmVZID0gZHkgIT09IDAgJiYgIXRoaXMuY2hlY2tDb2xsaXNpb24oY2hhci54LCBjaGFyLnkgKyBkeSk7XHJcblxyXG4gICAgICBpZiAoY2FuTW92ZVgpIGFjdHVhbE1vdmVYID0gZHg7XHJcbiAgICAgIGlmIChjYW5Nb3ZlWSkgYWN0dWFsTW92ZVkgPSBkeTtcclxuXHJcbiAgICAgIC8vINCj0LvRg9GH0YjQtdC90L3QsNGPINC+0LHRgNCw0LHQvtGC0LrQsCDQtNC40LDQs9C+0L3QsNC70YzQvdC+0Lkg0LrQvtC70LvQuNC30LjQuCAo0YHQutC+0LvRjNC20LXQvdC40LUpXHJcbiAgICAgIGlmIChkeCAhPT0gMCAmJiBkeSAhPT0gMCkge1xyXG4gICAgICAgIC8vINCV0YHQu9C4INC/0YvRgtCw0LvQuNGB0Ywg0LTQstC40LPQsNGC0YzRgdGPINC/0L4g0LTQuNCw0LPQvtC90LDQu9C4XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDb2xsaXNpb24oY2hhci54ICsgZHgsIGNoYXIueSArIGR5KSkge1xyXG4gICAgICAgICAgLy8g0Jgg0LTQuNCw0LPQvtC90LDQu9GMINC30LDQsdC70L7QutC40YDQvtCy0LDQvdCwXHJcbiAgICAgICAgICBpZiAoY2FuTW92ZVggJiYgIWNhbk1vdmVZKSB7XHJcbiAgICAgICAgICAgIC8vINCc0L7QttC10Lwg0L/QviBYLCDQvdC+INC90LUg0L/QviBZICjQtdGB0LvQuCDQsdGLINC00LLQuNCz0LDQu9C40YHRjCDRgtC+0LvRjNC60L4g0L/QviBZKVxyXG4gICAgICAgICAgICBhY3R1YWxNb3ZlWSA9IDA7IC8vINCU0LLQuNCz0LDQtdC80YHRjyDRgtC+0LvRjNC60L4g0L/QviBYXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGNhbk1vdmVZICYmICFjYW5Nb3ZlWCkge1xyXG4gICAgICAgICAgICAvLyDQnNC+0LbQtdC8INC/0L4gWSwg0L3QviDQvdC1INC/0L4gWFxyXG4gICAgICAgICAgICBhY3R1YWxNb3ZlWCA9IDA7IC8vINCU0LLQuNCz0LDQtdC80YHRjyDRgtC+0LvRjNC60L4g0L/QviBZXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjYW5Nb3ZlWCAmJiAhY2FuTW92ZVkpIHtcclxuICAgICAgICAgICAgLy8g0J3QtSDQvNC+0LbQtdC8INC90Lgg0L/QviBYLCDQvdC4INC/0L4gWSDQv9C+INC+0YLQtNC10LvRjNC90L7RgdGC0LhcclxuICAgICAgICAgICAgYWN0dWFsTW92ZVggPSAwO1xyXG4gICAgICAgICAgICBhY3R1YWxNb3ZlWSA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyDQldGB0LvQuCDQvNC+0LbQtdC8INC4INC/0L4gWCDQuCDQv9C+IFkg0L7RgtC00LXQu9GM0L3Qviwg0L3QviDQvdC1INC/0L4g0LTQuNCw0LPQvtC90LDQu9C4LCDRgtC+IGFjdHVhbE1vdmVYINC4IGFjdHVhbE1vdmVZINGD0LbQtSDRg9GB0YLQsNC90L7QstC70LXQvdGLINC/0YDQsNCy0LjQu9GM0L3QvlxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGFjdHVhbE1vdmVYICE9PSAwIHx8IGFjdHVhbE1vdmVZICE9PSAwKSB7XHJcbiAgICAgICAgY2hhci54ICs9IGFjdHVhbE1vdmVYO1xyXG4gICAgICAgIGNoYXIueSArPSBhY3R1YWxNb3ZlWTtcclxuICAgICAgICBtb3ZlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmIChNYXRoLmFicyhhY3R1YWxNb3ZlWCkgPj0gTWF0aC5hYnMoYWN0dWFsTW92ZVkpKSB7XHJcbiAgICAgICAgICBpZiAoYWN0dWFsTW92ZVggIT09IDApXHJcbiAgICAgICAgICAgIGNoYXIuY3VycmVudERpcmVjdGlvbiA9XHJcbiAgICAgICAgICAgICAgYWN0dWFsTW92ZVggPiAwID8gQ2hhcmFjdGVyLkRpcmVjdGlvbi5SSUdIVCA6IENoYXJhY3Rlci5EaXJlY3Rpb24uTEVGVDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGFjdHVhbE1vdmVZICE9PSAwKVxyXG4gICAgICAgICAgICBjaGFyLmN1cnJlbnREaXJlY3Rpb24gPVxyXG4gICAgICAgICAgICAgIGFjdHVhbE1vdmVZID4gMCA/IENoYXJhY3Rlci5EaXJlY3Rpb24uRE9XTiA6IENoYXJhY3Rlci5EaXJlY3Rpb24uVVA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjaGFyLmlzTW92aW5nID0gbW92ZWQ7XHJcbiAgICByZXR1cm4geyBtb3ZlZCB9O1xyXG4gIH1cclxuXHJcbiAgY2hlY2tDb2xsaXNpb24odGFyZ2V0WCwgdGFyZ2V0WSkge1xyXG4gICAgY29uc3QgbWFwID0gdGhpcy5nYW1lLmxldmVsPy5jdXJyZW50TWFwO1xyXG4gICAgY29uc3QgY2hhciA9IHRoaXMuZ2FtZS5jaGFyYWN0ZXI7XHJcbiAgICBpZiAoIW1hcCB8fCAhY2hhcikgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgY29uc3QgY29sbGlzaW9uQm94ID0gY2hhci5nZXRDb2xsaXNpb25Cb3godGFyZ2V0WCwgdGFyZ2V0WSk7XHJcbiAgICAvLyDQmtC70Y7Rh9C10LLRi9C1INGC0L7Rh9C60Lgg0LrQvtC70LvQsNC50LTQtdGA0LAg0LTQu9GPINC/0YDQvtCy0LXRgNC60LhcclxuICAgIGNvbnN0IHBvaW50c1RvQ2hlY2sgPSBbXHJcbiAgICAgIHsgeDogY29sbGlzaW9uQm94LmxlZnQsIHk6IGNvbGxpc2lvbkJveC50b3AgfSwgLy8g0JvQtdCy0YvQuSDQstC10YDRhdC90LjQuVxyXG4gICAgICB7IHg6IGNvbGxpc2lvbkJveC5yaWdodCwgeTogY29sbGlzaW9uQm94LnRvcCB9LCAvLyDQn9GA0LDQstGL0Lkg0LLQtdGA0YXQvdC40LlcclxuICAgICAgeyB4OiBjb2xsaXNpb25Cb3gubGVmdCwgeTogY29sbGlzaW9uQm94LmJvdHRvbSB9LCAvLyDQm9C10LLRi9C5INC90LjQttC90LjQuVxyXG4gICAgICB7IHg6IGNvbGxpc2lvbkJveC5yaWdodCwgeTogY29sbGlzaW9uQm94LmJvdHRvbSB9LCAvLyDQn9GA0LDQstGL0Lkg0L3QuNC20L3QuNC5XHJcbiAgICAgIC8vINCU0L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0LUg0YLQvtGH0LrQuCDQtNC70Y8g0LHQvtC70LXQtSDRgtC+0YfQvdC+0Lkg0L/RgNC+0LLQtdGA0LrQuCwg0L7RgdC+0LHQtdC90L3QviDQtNC70Y8g0YPQt9C60LjRhSDQv9GA0L7RhdC+0LTQvtCyXHJcbiAgICAgIHsgeDogdGFyZ2V0WCwgeTogY29sbGlzaW9uQm94LnRvcCB9LCAvLyDQptC10L3RgtGAINCy0LXRgNGF0L3QuNC5XHJcbiAgICAgIHsgeDogdGFyZ2V0WCwgeTogY29sbGlzaW9uQm94LmJvdHRvbSB9LCAvLyDQptC10L3RgtGAINC90LjQttC90LjQuVxyXG4gICAgICB7IHg6IGNvbGxpc2lvbkJveC5sZWZ0LCB5OiB0YXJnZXRZICsgY2hhci5yZW5kZXJTaXplICogY2hhci5jb2xsaXNpb25Cb3hGZWV0T2Zmc2V0UmF0aW8gfSwgLy8g0KHQtdGA0LXQtNC40L3QsCDQu9C10LLQvtC5INGB0YLQvtGA0L7QvdGLICjQvdCwINGD0YDQvtCy0L3QtSDQvdC+0LMpXHJcbiAgICAgIHsgeDogY29sbGlzaW9uQm94LnJpZ2h0LCB5OiB0YXJnZXRZICsgY2hhci5yZW5kZXJTaXplICogY2hhci5jb2xsaXNpb25Cb3hGZWV0T2Zmc2V0UmF0aW8gfSwgLy8g0KHQtdGA0LXQtNC40L3QsCDQv9GA0LDQstC+0Lkg0YHRgtC+0YDQvtC90YsgKNC90LAg0YPRgNC+0LLQvdC1INC90L7QsylcclxuICAgIF07XHJcblxyXG4gICAgZm9yIChjb25zdCBwb2ludCBvZiBwb2ludHNUb0NoZWNrKSB7XHJcbiAgICAgIGlmICghbWFwLmlzV2Fsa2FibGUocG9pbnQueCwgcG9pbnQueSkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhgQ29sbGlzaW9uIGF0IHdvcmxkICgke3BvaW50LngudG9GaXhlZCgxKX0sICR7cG9pbnQueS50b0ZpeGVkKDEpfSkgLT4gdGlsZSBub3Qgd2Fsa2FibGUuYCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUludGVyYWN0aW9ucygpIHtcclxuICAgIGNvbnN0IG1hcCA9IHRoaXMuZ2FtZS5sZXZlbD8uY3VycmVudE1hcDtcclxuICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdhbWUuY2hhcmFjdGVyO1xyXG4gICAgaWYgKCFtYXAgfHwgIWNoYXIgfHwgdGhpcy5nYW1lLmdhbWVTdGF0ZSAhPT0gR2FtZVN0YXRlLlBMQVlJTkcpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBuZWFyYnlCb29rID0gbWFwLmZpbmROZWFyYnlVbmFuc3dlcmVkQm9vayhjaGFyLngsIGNoYXIueSk7XHJcbiAgICBpZiAobmVhcmJ5Qm9vaykge1xyXG4gICAgICB0aGlzLmluaXRpYXRlUXVlc3Rpb24obmVhcmJ5Qm9vayk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMuZ2FtZS5saWZ0Q29vbGRvd25BY3RpdmUpIHtcclxuICAgICAgY29uc3QgbmVhcmJ5TGlmdCA9IG1hcC5maW5kTmVhcmJ5TGlmdChjaGFyLngsIGNoYXIueSk7XHJcbiAgICAgIGlmIChuZWFyYnlMaWZ0KSB7XHJcbiAgICAgICAgdGhpcy5pbml0aWF0ZUZsb29yU2VsZWN0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluaXRpYXRlUXVlc3Rpb24oYm9vaykge1xyXG4gICAgaWYgKHRoaXMuZ2FtZS5nYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5QTEFZSU5HKSByZXR1cm47XHJcblxyXG4gICAgdGhpcy5nYW1lLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuQVNLSU5HX1FVRVNUSU9OKTtcclxuICAgIGlmICh0aGlzLmdhbWUuY2hhcmFjdGVyKSB0aGlzLmdhbWUuY2hhcmFjdGVyLmlzTW92aW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLmdhbWUuY3VycmVudEJvb2tUYXJnZXQgPSBib29rO1xyXG5cclxuICAgIGlmICh0aGlzLmdhbWUuYXZhaWxhYmxlUXVlc3Rpb25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aGlzLmdhbWUuYXZhaWxhYmxlUXVlc3Rpb25zID0gWy4uLnF1ZXN0aW9uc107XHJcbiAgICAgIGlmICh0aGlzLmdhbWUuYXZhaWxhYmxlUXVlc3Rpb25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIFVJTWFuYWdlci5mbGFzaE1lc3NhZ2UoJ0LFgsSFZDogQnJhayBkb3N0xJlwbnljaCBweXRhxYQhJywgJ2Vycm9yJyk7XHJcbiAgICAgICAgdGhpcy5nYW1lLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuUExBWUlORyk7XHJcbiAgICAgICAgdGhpcy5nYW1lLmN1cnJlbnRCb29rVGFyZ2V0ID0gbnVsbDtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBxSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmdhbWUuYXZhaWxhYmxlUXVlc3Rpb25zLmxlbmd0aCk7XHJcbiAgICB0aGlzLmdhbWUuY3VycmVudFF1ZXN0aW9uRGF0YSA9IHRoaXMuZ2FtZS5hdmFpbGFibGVRdWVzdGlvbnMuc3BsaWNlKHFJbmRleCwgMSlbMF07XHJcbiAgICBVSU1hbmFnZXIuc2hvd1F1ZXN0aW9uKHRoaXMuZ2FtZS5jdXJyZW50UXVlc3Rpb25EYXRhKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUFuc3dlcihzZWxlY3RlZE9wdGlvbkluZGV4KSB7XHJcbiAgICBjb25zdCB7IGdhbWVTdGF0ZSwgY3VycmVudFF1ZXN0aW9uRGF0YSwgY3VycmVudEJvb2tUYXJnZXQsIGxldmVsIH0gPSB0aGlzLmdhbWU7XHJcblxyXG4gICAgaWYgKGdhbWVTdGF0ZSAhPT0gR2FtZVN0YXRlLkFTS0lOR19RVUVTVElPTiB8fCAhY3VycmVudFF1ZXN0aW9uRGF0YSB8fCAhY3VycmVudEJvb2tUYXJnZXQpIHtcclxuICAgICAgVUlNYW5hZ2VyLmhpZGVRdWVzdGlvbigpO1xyXG4gICAgICB0aGlzLmdhbWUuY3VycmVudEJvb2tUYXJnZXQgPSBudWxsO1xyXG4gICAgICB0aGlzLmdhbWUuY3VycmVudFF1ZXN0aW9uRGF0YSA9IG51bGw7XHJcbiAgICAgIGlmICh0aGlzLmdhbWUuZ2FtZVN0YXRlICE9PSBHYW1lU3RhdGUuR0FNRV9PVkVSKSB0aGlzLmdhbWUuc2V0R2FtZVN0YXRlKEdhbWVTdGF0ZS5QTEFZSU5HKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlzQ29ycmVjdCA9IHNlbGVjdGVkT3B0aW9uSW5kZXggPT09IGN1cnJlbnRRdWVzdGlvbkRhdGEuY29ycmVjdEFuc3dlcjtcclxuICAgIGlmIChpc0NvcnJlY3QpIHtcclxuICAgICAgVUlNYW5hZ2VyLmZsYXNoTWVzc2FnZSgnUHJhd2lkxYJvd28hJywgJ3N1Y2Nlc3MnLCAxNTAwKTtcclxuICAgICAgY29uc3QgY29sbGVjdGVkID0gbGV2ZWw/LmN1cnJlbnRNYXA/Lm1hcmtCb29rQXNDb2xsZWN0ZWQoY3VycmVudEJvb2tUYXJnZXQpO1xyXG4gICAgICBpZiAoY29sbGVjdGVkKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lLnRvdGFsQm9va3NDb2xsZWN0ZWRHbG9iYWxseSsrO1xyXG4gICAgICAgIFVJTWFuYWdlci51cGRhdGVTY29yZSh0aGlzLmdhbWUudG90YWxCb29rc0NvbGxlY3RlZEdsb2JhbGx5LCB0aGlzLmdhbWUudGFyZ2V0Qm9va3NUb1dpbik7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZS50b3RhbEJvb2tzQ29sbGVjdGVkR2xvYmFsbHkgPj0gdGhpcy5nYW1lLnRhcmdldEJvb2tzVG9XaW4pIHtcclxuICAgICAgICAgIFVJTWFuYWdlci5oaWRlUXVlc3Rpb24oKTtcclxuICAgICAgICAgIHRoaXMuZ2FtZS5fc2V0R2FtZU92ZXIodHJ1ZSk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIFVJTWFuYWdlci5mbGFzaE1lc3NhZ2UoJ0LFgsSFZCB6YmllcmFuaWEga3NpxIXFvGtpIScsICdlcnJvcicpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBVSU1hbmFnZXIuZmxhc2hNZXNzYWdlKCdOaWVwcmF3aWTFgm93YSBvZHBvd2llZMW6IScsICdlcnJvcicpO1xyXG4gICAgICB0aGlzLmdhbWUuYXZhaWxhYmxlUXVlc3Rpb25zLnB1c2goY3VycmVudFF1ZXN0aW9uRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgVUlNYW5hZ2VyLmhpZGVRdWVzdGlvbigpO1xyXG4gICAgdGhpcy5nYW1lLmN1cnJlbnRCb29rVGFyZ2V0ID0gbnVsbDtcclxuICAgIHRoaXMuZ2FtZS5jdXJyZW50UXVlc3Rpb25EYXRhID0gbnVsbDtcclxuICAgIGlmICh0aGlzLmdhbWUuZ2FtZVN0YXRlICE9PSBHYW1lU3RhdGUuR0FNRV9PVkVSKSB0aGlzLmdhbWUuc2V0R2FtZVN0YXRlKEdhbWVTdGF0ZS5QTEFZSU5HKTtcclxuICB9XHJcblxyXG4gIGluaXRpYXRlRmxvb3JTZWxlY3Rpb24oKSB7XHJcbiAgICBpZiAodGhpcy5nYW1lLmdhbWVTdGF0ZSAhPT0gR2FtZVN0YXRlLlBMQVlJTkcgfHwgdGhpcy5nYW1lLmxpZnRDb29sZG93bkFjdGl2ZSkgcmV0dXJuO1xyXG4gICAgdGhpcy5nYW1lLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuU0VMRUNUSU5HX0ZMT09SKTtcclxuICAgIGlmICh0aGlzLmdhbWUuY2hhcmFjdGVyKSB0aGlzLmdhbWUuY2hhcmFjdGVyLmlzTW92aW5nID0gZmFsc2U7XHJcbiAgICBVSU1hbmFnZXIuc2hvd0Zsb29yU2VsZWN0aW9uVUkoXHJcbiAgICAgIHRoaXMuZ2FtZS5sZXZlbC5taW5GbG9vcixcclxuICAgICAgdGhpcy5nYW1lLmxldmVsLm1heEZsb29yLFxyXG4gICAgICB0aGlzLmdhbWUubGV2ZWwuY3VycmVudEZsb29yXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlRmxvb3JTZWxlY3Rpb24oc2VsZWN0ZWRGbG9vcikge1xyXG4gICAgaWYgKHRoaXMuZ2FtZS5nYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5TRUxFQ1RJTkdfRkxPT1IpIHtcclxuICAgICAgVUlNYW5hZ2VyLmhpZGVGbG9vclNlbGVjdGlvblVJKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFVJTWFuYWdlci5oaWRlRmxvb3JTZWxlY3Rpb25VSSgpO1xyXG4gICAgaWYgKFxyXG4gICAgICBzZWxlY3RlZEZsb29yID09PSB0aGlzLmdhbWUubGV2ZWwuY3VycmVudEZsb29yIHx8XHJcbiAgICAgIHNlbGVjdGVkRmxvb3IgPCB0aGlzLmdhbWUubGV2ZWwubWluRmxvb3IgfHxcclxuICAgICAgc2VsZWN0ZWRGbG9vciA+IHRoaXMuZ2FtZS5sZXZlbC5tYXhGbG9vclxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuZ2FtZS5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLlBMQVlJTkcpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmhhbmRsZUxpZnRUcmFuc2l0aW9uKHNlbGVjdGVkRmxvb3IpLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgdGhpcy5nYW1lLl9oYW5kbGVGYXRhbEVycm9yKGBCxYLEhWQgcHJ6ZWrFm2NpYSBuYSBwacSZdHJvOiAke2Vyci5tZXNzYWdlfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBoYW5kbGVMaWZ0VHJhbnNpdGlvbih0YXJnZXRGbG9vcikge1xyXG4gICAgY29uc3QgZ2FtZSA9IHRoaXMuZ2FtZTtcclxuICAgIGNvbnN0IGlzRGVidWcgPSBnYW1lLmxldmVsPy5jdXJyZW50Rmxvb3IgPT09IERFQlVHX0ZMT09SX0dNIHx8IHRhcmdldEZsb29yID09PSBERUJVR19GTE9PUl9HTTtcclxuXHJcbiAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYFtHYW1lcGxheU1hbmFnZXIgRiR7dGFyZ2V0Rmxvb3J9IGhhbmRsZUxpZnRUcmFuc2l0aW9uXSBTdGFydGluZyB0cmFuc2l0aW9uLiBDb29sZG93bjogJHtnYW1lLmxpZnRDb29sZG93bkFjdGl2ZX1gXHJcbiAgICAgICk7XHJcbiAgICBpZiAoZ2FtZS5nYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5TRUxFQ1RJTkdfRkxPT1IgfHwgZ2FtZS5saWZ0Q29vbGRvd25BY3RpdmUpIHJldHVybjtcclxuXHJcbiAgICBnYW1lLnNldEdhbWVTdGF0ZShHYW1lU3RhdGUuVFJBTlNJVElPTklORyk7XHJcbiAgICBpZiAoZ2FtZS5jaGFyYWN0ZXIpIGdhbWUuY2hhcmFjdGVyLmlzTW92aW5nID0gZmFsc2U7XHJcbiAgICBVSU1hbmFnZXIuaGlkZVF1ZXN0aW9uKCk7XHJcbiAgICBVSU1hbmFnZXIuaGlkZUZsb29yU2VsZWN0aW9uVUkoKTtcclxuICAgIGdhbWUubGlmdENvb2xkb3duQWN0aXZlID0gdHJ1ZTtcclxuICAgIFVJTWFuYWdlci5mbGFzaE1lc3NhZ2UoYFByemVqxZtjaWUgbmEgcGnEmXRybyAke3RhcmdldEZsb29yfS4uLmAsICdpbmZvJywgTElGVF9DT09MRE9XTl9NUyAtIDIwMCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZ2FtZS5sZXZlbC5sb2FkRmxvb3IodGFyZ2V0Rmxvb3IsIGdhbWUuY2FudmFzLndpZHRoLCBnYW1lLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICBjb25zdCBuZXdNYXAgPSBnYW1lLmxldmVsLmN1cnJlbnRNYXA7XHJcbiAgICAgIGlmICghbmV3TWFwKSB0aHJvdyBuZXcgRXJyb3IoYE1hcCBvYmplY3QgaXMgbnVsbCBmb3IgZmxvb3IgJHt0YXJnZXRGbG9vcn0uYCk7XHJcblxyXG4gICAgICBjb25zdCBsaWZ0UG9zRGF0YSA9IG5ld01hcC5nZXRMaWZ0UG9zaXRpb24oKTtcclxuICAgICAgaWYgKCFsaWZ0UG9zRGF0YSkgdGhyb3cgbmV3IEVycm9yKGBObyBsaWZ0IHBvc2l0aW9uIGRhdGEgb24gbG9hZGVkIGZsb29yICR7dGFyZ2V0Rmxvb3J9IWApO1xyXG4gICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGAgIFtHTSBGJHt0YXJnZXRGbG9vcn0gTGlmdFRyYW5zaXRpb25dIExpZnQgdGlsZTogKCR7bGlmdFBvc0RhdGEudGlsZVh9LCR7XHJcbiAgICAgICAgICAgIGxpZnRQb3NEYXRhLnRpbGVZXHJcbiAgICAgICAgICB9KSwgV29ybGQ6KCR7bGlmdFBvc0RhdGEueC50b0ZpeGVkKDEpfSwke2xpZnRQb3NEYXRhLnkudG9GaXhlZCgxKX0pYFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICBsZXQgZmluYWxTcGF3blBvcyA9IG51bGw7XHJcblxyXG4gICAgICBmaW5hbFNwYXduUG9zID0gbmV3TWFwLmdldFNwYXduUG9pbnRJblJvb21PZkxpZnQobGlmdFBvc0RhdGEudGlsZVgsIGxpZnRQb3NEYXRhLnRpbGVZLCAyKTtcclxuICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICBgICBbR00gRiR7dGFyZ2V0Rmxvb3J9IExpZnRUcmFuc2l0aW9uXSBGcm9tIGdldFNwYXduUG9pbnRJblJvb21PZkxpZnQ6YCxcclxuICAgICAgICAgIGZpbmFsU3Bhd25Qb3MgPyB7IHg6IGZpbmFsU3Bhd25Qb3MueC50b0ZpeGVkKDEpLCB5OiBmaW5hbFNwYXduUG9zLnkudG9GaXhlZCgxKSB9IDogbnVsbFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICBpZiAoIWZpbmFsU3Bhd25Qb3MpIHtcclxuICAgICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgYCAgW0dNIEYke3RhcmdldEZsb29yfSBMaWZ0VHJhbnNpdGlvbl0gZ2V0U3Bhd25Qb2ludEluUm9vbU9mTGlmdCBmYWlsZWQuIFVzaW5nIGZpbmROZWFyZXN0V2Fsa2FibGVUaWxlLi4uYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICBmaW5hbFNwYXduUG9zID0gbmV3TWFwLmZpbmROZWFyZXN0V2Fsa2FibGVUaWxlKGxpZnRQb3NEYXRhLngsIGxpZnRQb3NEYXRhLnksIDUsIHRydWUsIHRydWUpO1xyXG4gICAgICAgIGlmIChpc0RlYnVnKVxyXG4gICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgIGAgIFtHTSBGJHt0YXJnZXRGbG9vcn0gTGlmdFRyYW5zaXRpb25dIEZyb20gZmluZE5lYXJlc3RXYWxrYWJsZVRpbGU6YCxcclxuICAgICAgICAgICAgZmluYWxTcGF3blBvcyA/IHsgeDogZmluYWxTcGF3blBvcy54LnRvRml4ZWQoMSksIHk6IGZpbmFsU3Bhd25Qb3MueS50b0ZpeGVkKDEpIH0gOiBudWxsXHJcbiAgICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWZpbmFsU3Bhd25Qb3MpIHtcclxuICAgICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgIGAgIFtHTSBGJHt0YXJnZXRGbG9vcn0gTGlmdFRyYW5zaXRpb25dIEFsbCBzcGF3biBtZXRob2RzIGZhaWxlZC4gVXNpbmcgcmFuZG9tIHNwYXduLi4uYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBlbWVyZ2VuY3lTcGF3biA9IG5ld01hcC5maW5kUmFuZG9tSW5pdGlhbFNwYXduUG9zaXRpb24oKTtcclxuICAgICAgICBpZiAoIWVtZXJnZW5jeVNwYXduKSB0aHJvdyBuZXcgRXJyb3IoYEVNRVJHRU5DWSBTUEFXTiBGQUlMRUQgb24gZmxvb3IgJHt0YXJnZXRGbG9vcn0hYCk7XHJcbiAgICAgICAgZmluYWxTcGF3blBvcyA9IGVtZXJnZW5jeVNwYXduO1xyXG4gICAgICAgIGlmIChpc0RlYnVnKVxyXG4gICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgIGAgIFtHTSBGJHt0YXJnZXRGbG9vcn0gTGlmdFRyYW5zaXRpb25dIEZyb20gZW1lcmdlbmN5U3Bhd246YCxcclxuICAgICAgICAgICAgZmluYWxTcGF3blBvcyA/IHsgeDogZmluYWxTcGF3blBvcy54LnRvRml4ZWQoMSksIHk6IGZpbmFsU3Bhd25Qb3MueS50b0ZpeGVkKDEpIH0gOiBudWxsXHJcbiAgICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBnYW1lLmNoYXJhY3Rlci54ID0gZmluYWxTcGF3blBvcy54O1xyXG4gICAgICBnYW1lLmNoYXJhY3Rlci55ID0gZmluYWxTcGF3blBvcy55O1xyXG4gICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGAgIFtHTSBGJHt0YXJnZXRGbG9vcn0gTGlmdFRyYW5zaXRpb25dIEZpbmFsIGxhbmRpbmc6ICgke2dhbWUuY2hhcmFjdGVyLngudG9GaXhlZChcclxuICAgICAgICAgICAgMVxyXG4gICAgICAgICAgKX0sICR7Z2FtZS5jaGFyYWN0ZXIueS50b0ZpeGVkKDEpfSlgXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGdhbWUuY2hhcmFjdGVyLmN1cnJlbnREaXJlY3Rpb24gPSBDaGFyYWN0ZXIuRGlyZWN0aW9uLkRPV047XHJcbiAgICAgIGdhbWUuY2hhcmFjdGVyLmlzTW92aW5nID0gZmFsc2U7XHJcbiAgICAgIGdhbWUucmVuZGVyZXI/LmNlbnRlckNhbWVyYU9uQ2hhcmFjdGVyKCk7XHJcbiAgICAgIHRoaXMuZW5zdXJlQ2hhcmFjdGVySXNPbldhbGthYmxlVGlsZShmYWxzZSk7IC8vIDwtLS0g0JTQntCR0JDQktCb0JXQndCeOiDQn9GA0L7QstC10YDQutCwINC/0L7RgdC70LUg0YLQtdC70LXQv9C+0YDRgtCw0YbQuNC4XHJcbiAgICAgIGdhbWUuc3RhcnRMaWZ0Q29vbGRvd25UaW1lcigpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgW0dNIEYke3RhcmdldEZsb29yfSBMaWZ0VHJhbnNpdGlvbl0gRXJyb3IgZHVyaW5nIHRyYW5zaXRpb246YCwgZXJyb3IpO1xyXG4gICAgICBnYW1lLmxpZnRDb29sZG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICBpZiAoZ2FtZS5nYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5HQU1FX09WRVIpIGdhbWUuc2V0R2FtZVN0YXRlKEdhbWVTdGF0ZS5QTEFZSU5HKTtcclxuICAgICAgZ2FtZS5faGFuZGxlRmF0YWxFcnJvcihgVHJhbnNpdGlvbiBlcnJvciB0byBmbG9vciAke3RhcmdldEZsb29yfTogJHtlcnJvci5tZXNzYWdlIHx8IGVycm9yfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZW5zdXJlQ2hhcmFjdGVySXNPbldhbGthYmxlVGlsZShhbGxvd1N0YW5kaW5nT25MaWZ0ID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdhbWUuY2hhcmFjdGVyO1xyXG4gICAgY29uc3QgbWFwID0gdGhpcy5nYW1lLmxldmVsPy5jdXJyZW50TWFwO1xyXG4gICAgaWYgKCFjaGFyIHx8ICFtYXApIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBjdXJyZW50VGlsZVggPSBNYXRoLmZsb29yKGNoYXIueCAvIG1hcC50aWxlU2l6ZSk7XHJcbiAgICBjb25zdCBjdXJyZW50VGlsZVkgPSBNYXRoLmZsb29yKGNoYXIueSAvIG1hcC50aWxlU2l6ZSk7XHJcbiAgICBjb25zdCBjdXJyZW50VGlsZVZhbHVlID1cclxuICAgICAgY3VycmVudFRpbGVYID49IDAgJiYgY3VycmVudFRpbGVYIDwgbWFwLmNvbHMgJiYgY3VycmVudFRpbGVZID49IDAgJiYgY3VycmVudFRpbGVZIDwgbWFwLnJvd3NcclxuICAgICAgICA/IG1hcC5tYXBbY3VycmVudFRpbGVZXT8uW2N1cnJlbnRUaWxlWF1cclxuICAgICAgICA6IFRJTEVfV0FMTDtcclxuXHJcbiAgICBjb25zdCBpc0NlbnRlclRpbGVXYWxrYWJsZUJ5TWFwID0gbWFwLmlzV2Fsa2FibGUoY2hhci54LCBjaGFyLnkpO1xyXG4gICAgY29uc3QgaXNMaWZ0ID0gY3VycmVudFRpbGVWYWx1ZSA9PT0gVElMRV9MSUZUO1xyXG4gICAgY29uc3QgaXNTYWZlVG9TdGFuZEhlcmUgPSBpc0NlbnRlclRpbGVXYWxrYWJsZUJ5TWFwICYmICghaXNMaWZ0IHx8IGFsbG93U3RhbmRpbmdPbkxpZnQpO1xyXG4gICAgY29uc3QgaXNDb2xsaWRpbmdXaXRoV2FsbCA9IHRoaXMuY2hlY2tDb2xsaXNpb24oY2hhci54LCBjaGFyLnkpOyAvLyDQn9GA0L7QstC10YDRj9C10Lwg0YLQtdC60YPRidGD0Y4g0L/QvtC30LjRhtC40Y5cclxuICAgIGNvbnN0IG5lZWRzTnVkZ2UgPSBpc0NvbGxpZGluZ1dpdGhXYWxsIHx8ICFpc1NhZmVUb1N0YW5kSGVyZTtcclxuXHJcbiAgICBpZiAobmVlZHNOdWRnZSkge1xyXG4gICAgICBjb25zdCBpc0RlYnVnID0gdGhpcy5nYW1lLmxldmVsPy5jdXJyZW50Rmxvb3IgPT09IERFQlVHX0ZMT09SX0dNO1xyXG4gICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICBgW0dhbWVwbGF5TWFuYWdlciBGJHt0aGlzLmdhbWUubGV2ZWwuY3VycmVudEZsb29yfSBBbnRpU3R1Y2tdIENoYXIgYXQgKCR7Y2hhci54LnRvRml4ZWQoXHJcbiAgICAgICAgICAgIDFcclxuICAgICAgICAgICl9LCR7Y2hhci55LnRvRml4ZWQoXHJcbiAgICAgICAgICAgIDFcclxuICAgICAgICAgICl9KSAtPiB0aWxlICgke2N1cnJlbnRUaWxlWH0sJHtjdXJyZW50VGlsZVl9KSBuZWVkcyBudWRnZS4gQ29sbGlkaW5nOiR7aXNDb2xsaWRpbmdXaXRoV2FsbH0sIFNhZmVTdGFuZDoke2lzU2FmZVRvU3RhbmRIZXJlfWBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgY29uc3Qgc2FmZVNwb3QgPSBtYXAuZmluZE5lYXJlc3RXYWxrYWJsZVRpbGUoY2hhci54LCBjaGFyLnksIDgsIHRydWUsIHRydWUpOyAvLyBleGNsdWRlTGlmdD10cnVlLCBhdm9pZE5hcnJvdz10cnVlXHJcblxyXG4gICAgICBpZiAoc2FmZVNwb3QpIHtcclxuICAgICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICBgICBbQW50aVN0dWNrXSBOdWRnaW5nIHRvIHNhZmUgc3BvdDogKCR7c2FmZVNwb3QueC50b0ZpeGVkKDEpfSwke3NhZmVTcG90LnkudG9GaXhlZChcclxuICAgICAgICAgICAgICAxXHJcbiAgICAgICAgICAgICl9KWBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgY2hhci54ID0gc2FmZVNwb3QueDtcclxuICAgICAgICBjaGFyLnkgPSBzYWZlU3BvdC55O1xyXG4gICAgICAgIHRoaXMuZ2FtZS5yZW5kZXJlcj8uY2VudGVyQ2FtZXJhT25DaGFyYWN0ZXIoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoaXNEZWJ1ZylcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgIGAgIFtBbnRpU3R1Y2tdIENSSVRJQ0FMOiBDb3VsZCBub3QgZmluZCBhbnkgc2FmZSBzcG90IHRvIG51ZGdlLiBUcnlpbmcgcmFuZG9tLmBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgZW1lcmdlbmN5U3BvdCA9IG1hcC5maW5kUmFuZG9tSW5pdGlhbFNwYXduUG9zaXRpb24oKTtcclxuICAgICAgICBpZiAoZW1lcmdlbmN5U3BvdCkge1xyXG4gICAgICAgICAgaWYgKGlzRGVidWcpXHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgICBgICBbQW50aVN0dWNrXSBFbWVyZ2VuY3kgbnVkZ2UgdG8gcmFuZG9tOiAoJHtlbWVyZ2VuY3lTcG90LngudG9GaXhlZChcclxuICAgICAgICAgICAgICAgIDFcclxuICAgICAgICAgICAgICApfSwke2VtZXJnZW5jeVNwb3QueS50b0ZpeGVkKDEpfSlgXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICBjaGFyLnggPSBlbWVyZ2VuY3lTcG90Lng7XHJcbiAgICAgICAgICBjaGFyLnkgPSBlbWVyZ2VuY3lTcG90Lnk7XHJcbiAgICAgICAgICB0aGlzLmdhbWUucmVuZGVyZXI/LmNlbnRlckNhbWVyYU9uQ2hhcmFjdGVyKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChpc0RlYnVnKVxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCcgIFtBbnRpU3R1Y2tdIEVWRU4gUkFORE9NIFNQQVdOIEZBSUxFRCEgR2FtZSBtaWdodCBiZSBicm9rZW4uJyk7XHJcbiAgICAgICAgICB0aGlzLmdhbWUuX2hhbmRsZUZhdGFsRXJyb3IoJ0FudGktU3R1Y2sgc3lzdGVtIGZhaWxlZCBjcml0aWNhbGx5LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLyBzcmMvYXVkaW8vQXVkaW9NYW5hZ2VyLmpzXHJcblxyXG5pbXBvcnQgdHJhY2sxU3JjIGZyb20gJy4uLy4uL2Fzc2V0cy9hdWRpby9iYWNrMS5tcDMnOyAvLyDQn9GA0LjQvNC10YAg0L/Rg9GC0LgsINC90LDRgdGC0YDQvtC50YLQtSDQv9C+0LQg0LLQsNGI0YMg0YHRgtGA0YPQutGC0YPRgNGDXHJcbmltcG9ydCB0cmFjazJTcmMgZnJvbSAnLi4vLi4vYXNzZXRzL2F1ZGlvL2JhY2syLm1wMyc7XHJcbmltcG9ydCB0cmFjazNTcmMgZnJvbSAnLi4vLi4vYXNzZXRzL2F1ZGlvL2JhY2szLm1wMyc7XHJcblxyXG5jb25zdCBERUZBVUxUX01VU0lDX1ZPTFVNRSA9IDAuNTtcclxuXHJcbi8vINCY0YHQv9C+0LvRjNC30YPQtdC8INC40LzQv9C+0YDRgtC40YDQvtCy0LDQvdC90YvQtSDQuNGB0YXQvtC00L3QuNC60LhcclxuY29uc3QgTVVTSUNfU09VUkNFUyA9IHtcclxuICAvLyDQn9C10YDQtdC40LzQtdC90L7QstCw0L3QviDQtNC70Y8g0Y/RgdC90L7RgdGC0LhcclxuICB0cmFjazE6IHRyYWNrMVNyYyxcclxuICB0cmFjazI6IHRyYWNrMlNyYyxcclxuICB0cmFjazM6IHRyYWNrM1NyYyxcclxufTtcclxuXHJcbi8vINCf0L7RgNGP0LTQvtC6LCDQsiDQutC+0YLQvtGA0L7QvCDRgtGA0LXQutC4INCx0YPQtNGD0YIg0LzQtdC90Y/RgtGM0YHRjyAo0LzQvtC20L3QviDQuNC30LzQtdC90LjRgtGMINC90LAg0LTRgNGD0LPRg9GOINC70L7Qs9C40LrRgylcclxuY29uc3QgVFJBQ0tfQ1lDTEVfT1JERVIgPSBbJ3RyYWNrMScsICd0cmFjazInLCAndHJhY2szJ107XHJcblxyXG5leHBvcnQgY2xhc3MgQXVkaW9NYW5hZ2VyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMubXVzaWNWb2x1bWUgPSBERUZBVUxUX01VU0lDX1ZPTFVNRTtcclxuICAgIHRoaXMuY3VycmVudE11c2ljRWxlbWVudCA9IG51bGw7XHJcbiAgICB0aGlzLmN1cnJlbnRUcmFja0tleSA9IG51bGw7XHJcbiAgICB0aGlzLmlzTXVzaWNQbGF5aW5nID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3Qgc2F2ZWRWb2x1bWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbXVzaWNWb2x1bWUnKTtcclxuICAgIGlmIChzYXZlZFZvbHVtZSAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLm11c2ljVm9sdW1lID0gcGFyc2VGbG9hdChzYXZlZFZvbHVtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5hdWRpb0VsZW1lbnRzID0ge307XHJcbiAgICB0aGlzLl9wcmVsb2FkVHJhY2tzKCk7XHJcbiAgfVxyXG5cclxuICBfcHJlbG9hZFRyYWNrcygpIHtcclxuICAgIGNvbnNvbGUubG9nKCdbQXVkaW9NYW5hZ2VyXSBQcmVsb2FkaW5nIHRyYWNrcyBmcm9tIGltcG9ydGVkIHNvdXJjZXMuLi4nKTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIE1VU0lDX1NPVVJDRVMpIHtcclxuICAgICAgaWYgKE1VU0lDX1NPVVJDRVMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgIGNvbnN0IGF1ZGlvUGF0aCA9IE1VU0lDX1NPVVJDRVNba2V5XTsgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0LjQvNC/0L7RgNGC0LjRgNC+0LLQsNC90L3Ri9C5INC/0YPRgtGMXHJcbiAgICAgICAgY29uc3QgYXVkaW8gPSBuZXcgQXVkaW8oYXVkaW9QYXRoKTtcclxuICAgICAgICBhdWRpby5wcmVsb2FkID0gJ2F1dG8nO1xyXG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50c1trZXldID0gYXVkaW87XHJcbiAgICAgICAgY29uc29sZS5sb2coYCAgUHJlbG9hZGVkICR7a2V5fSBmcm9tICR7YXVkaW9QYXRofWApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRNdXNpY1ZvbHVtZSh2b2x1bWUpIHtcclxuICAgIHRoaXMubXVzaWNWb2x1bWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2b2x1bWUpKTsgLy8g0J7Qs9GA0LDQvdC40YfQuNCy0LDQtdC8INC+0YIgMCDQtNC+IDFcclxuICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpY0VsZW1lbnQpIHtcclxuICAgICAgdGhpcy5jdXJyZW50TXVzaWNFbGVtZW50LnZvbHVtZSA9IHRoaXMubXVzaWNWb2x1bWU7XHJcbiAgICB9XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbXVzaWNWb2x1bWUnLCB0aGlzLm11c2ljVm9sdW1lLnRvU3RyaW5nKCkpOyAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LPRgNC+0LzQutC+0YHRgtGMXHJcbiAgICBjb25zb2xlLmxvZyhgW0F1ZGlvTWFuYWdlcl0gTXVzaWMgdm9sdW1lIHNldCB0bzogJHt0aGlzLm11c2ljVm9sdW1lfWApO1xyXG4gIH1cclxuXHJcbiAgZ2V0TXVzaWNWb2x1bWUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tdXNpY1ZvbHVtZTtcclxuICB9XHJcblxyXG4gIHBsYXlNdXNpYyh0cmFja0tleSwgbG9vcCA9IHRydWUpIHtcclxuICAgIGlmICghdGhpcy5hdWRpb0VsZW1lbnRzW3RyYWNrS2V5XSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oYFtBdWRpb01hbmFnZXJdIFRyYWNrIFwiJHt0cmFja0tleX1cIiBub3QgZm91bmQgb3Igbm90IHByZWxvYWRlZC5gKTtcclxuICAgICAgaWYgKE1VU0lDX1NPVVJDRVNbdHJhY2tLZXldKSB7XHJcbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INC90LDQu9C40YfQuNC1INCyIE1VU0lDX1NPVVJDRVNcclxuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudHNbdHJhY2tLZXldID0gbmV3IEF1ZGlvKE1VU0lDX1NPVVJDRVNbdHJhY2tLZXldKTsgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0LjQvNC/0L7RgNGC0LjRgNC+0LLQsNC90L3Ri9C5INC/0YPRgtGMXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgIGBbQXVkaW9NYW5hZ2VyXSBTb3VyY2UgZm9yIHRyYWNrIFwiJHt0cmFja0tleX1cIiBub3QgZGVmaW5lZCBpbiBNVVNJQ19TT1VSQ0VTLmBcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlzTXVzaWNQbGF5aW5nICYmIHRoaXMuY3VycmVudFRyYWNrS2V5ID09PSB0cmFja0tleSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnN0b3BNdXNpYygpO1xyXG5cclxuICAgIHRoaXMuY3VycmVudE11c2ljRWxlbWVudCA9IHRoaXMuYXVkaW9FbGVtZW50c1t0cmFja0tleV07XHJcbiAgICB0aGlzLmN1cnJlbnRNdXNpY0VsZW1lbnQudm9sdW1lID0gdGhpcy5tdXNpY1ZvbHVtZTtcclxuICAgIHRoaXMuY3VycmVudE11c2ljRWxlbWVudC5sb29wID0gbG9vcDtcclxuICAgIHRoaXMuY3VycmVudFRyYWNrS2V5ID0gdHJhY2tLZXk7XHJcblxyXG4gICAgdGhpcy5jdXJyZW50TXVzaWNFbGVtZW50XHJcbiAgICAgIC5wbGF5KClcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaXNNdXNpY1BsYXlpbmcgPSB0cnVlO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYFtBdWRpb01hbmFnZXJdIFBsYXlpbmcgbXVzaWM6ICR7dHJhY2tLZXl9IChWb2x1bWU6ICR7dGhpcy5jdXJyZW50TXVzaWNFbGVtZW50LnZvbHVtZX0pYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBbQXVkaW9NYW5hZ2VyXSBFcnJvciBwbGF5aW5nIFwiJHt0cmFja0tleX1cIjpgLCBlcnJvcik7XHJcbiAgICAgICAgLy8g0JTQvtCx0LDQstGM0YLQtSDQsdC+0LvRjNGI0LUg0LTQtdGC0LDQu9C10Lkg0LTQu9GPINC+0YLQu9Cw0LTQutC4INC/0L7Qu9C40YLQuNC60Lgg0LDQstGC0L7QstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40Y9cclxuICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgYCAgUGxheWJhY2sgZmFpbHVyZSBkZXRhaWxzOiB1c2VySW50ZXJhY3RlZCAoY2hlY2sgTWVudS5qcyksIGRvY3VtZW50Lmhhc0ZvY3VzKCk6ICR7ZG9jdW1lbnQuaGFzRm9jdXMoKX1gXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmlzTXVzaWNQbGF5aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TXVzaWNFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRUcmFja0tleSA9IG51bGw7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RvcE11c2ljKCkge1xyXG4gICAgaWYgKHRoaXMuY3VycmVudE11c2ljRWxlbWVudCkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRNdXNpY0VsZW1lbnQucGF1c2UoKTtcclxuICAgICAgdGhpcy5jdXJyZW50TXVzaWNFbGVtZW50LmN1cnJlbnRUaW1lID0gMDsgLy8g0KHQsdGA0L7RgSDQvdCwINC90LDRh9Cw0LvQvlxyXG4gICAgICB0aGlzLmlzTXVzaWNQbGF5aW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbQXVkaW9NYW5hZ2VyXSBTdG9wcGVkIG11c2ljOiAke3RoaXMuY3VycmVudFRyYWNrS2V5fWApO1xyXG4gICAgICAvLyDQndC1INC+0YfQuNGJ0LDQtdC8IGN1cnJlbnRNdXNpY0VsZW1lbnQg0LggY3VycmVudFRyYWNrS2V5INC30LTQtdGB0Ywg0L/QvtC70L3QvtGB0YLRjNGOLFxyXG4gICAgICAvLyDRh9GC0L7QsdGLINC80L7QttC90L4g0LHRi9C70L4g0LLQvtC30L7QsdC90L7QstC40YLRjCwg0LXRgdC70Lgg0L3Rg9C20L3Qviwg0L3QviDQtNC70Y8g0YHQvNC10L3RiyDRgtGA0LXQutCwINGN0YLQviDQntCaLlxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g0JLRi9C30YvQstCw0LXRgtGB0Y8g0L/RgNC4INGB0LzQtdC90LUg0Y3RgtCw0LbQsFxyXG4gIGNoYW5nZVRyYWNrRm9yRmxvb3IoZmxvb3JOdW1iZXIpIHtcclxuICAgIC8vINCf0YDQvtGB0YLQviDRhtC40LrQu9C40YfQtdGB0LrQuCDQvNC10L3Rj9C10Lwg0YLRgNC10LrQuC4g0K3RgtCw0LbQuCDQvtCx0YvRh9C90L4gMS3QuNC90LTQtdC60YHQuNGA0L7QstCw0L3QvdGL0LUuXHJcbiAgICAvLyBmbG9vck51bWJlciDQvNC+0LbQtdGCINCx0YvRgtGMINC70Y7QsdGL0LwsINC/0L7RjdGC0L7QvNGDINCx0LXRgNC10Lwg0L/QviDQvNC+0LTRg9C70Y4uXHJcbiAgICAvLyDQmNGB0L/QvtC70YzQt9GD0LXQvCAoZmxvb3JOdW1iZXIgLSAxKSDQtdGB0LvQuCDQstCw0YjQuCDRjdGC0LDQttC4INC90LDRh9C40L3QsNGO0YLRgdGPINGBIDEsINGH0YLQvtCx0Ysg0LjQvdC00LXQutGBINCx0YvQuyDRgSAwLlxyXG4gICAgLy8g0JXRgdC70Lgg0Y3RgtCw0LbQuCDQvNC+0LPRg9GCINCx0YvRgtGMIDAg0LjQu9C4INC+0YLRgNC40YbQsNGC0LXQu9GM0L3Ri9C80LgsINC90YPQttC90LAg0LTRgNGD0LPQsNGPINC70L7Qs9C40LrQsC5cclxuICAgIC8vINCf0YDQtdC00L/QvtC70L7QttC40LwsINGN0YLQsNC20LggPiAwLlxyXG4gICAgY29uc3QgYWRqdXN0ZWRGbG9vckluZGV4ID0gTWF0aC5tYXgoMCwgZmxvb3JOdW1iZXIgLSAxKTtcclxuICAgIGNvbnN0IHRyYWNrSW5kZXggPSBhZGp1c3RlZEZsb29ySW5kZXggJSBUUkFDS19DWUNMRV9PUkRFUi5sZW5ndGg7XHJcbiAgICBjb25zdCBuZXdUcmFja0tleSA9IFRSQUNLX0NZQ0xFX09SREVSW3RyYWNrSW5kZXhdO1xyXG5cclxuICAgIGlmIChuZXdUcmFja0tleSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgW0F1ZGlvTWFuYWdlcl0gRmxvb3IgJHtmbG9vck51bWJlcn0gLT4gTXVzaWMgdHJhY2s6ICR7bmV3VHJhY2tLZXl9YCk7XHJcbiAgICAgIHRoaXMucGxheU11c2ljKG5ld1RyYWNrS2V5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgW0F1ZGlvTWFuYWdlcl0gTm8gdHJhY2sgZm91bmQgZm9yIGZsb29yIGluZGV4ICR7dHJhY2tJbmRleH0uYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyDQnNC10YLQvtC0INC00LvRjyDQv9C10YDQstC+0L3QsNGH0LDQu9GM0L3QvtCz0L4g0LfQsNC/0YPRgdC60LAg0LzRg9C30YvQutC4LCDQvdCw0L/RgNC40LzQtdGALCDQv9GA0Lgg0YHRgtCw0YDRgtC1INC40LPRgNGLXHJcbiAgc3RhcnRJbml0aWFsTXVzaWMoaW5pdGlhbEZsb29yID0gMSkge1xyXG4gICAgLy8g0KPQsdC10LTQuNC80YHRjywg0YfRgtC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQstC30LDQuNC80L7QtNC10LnRgdGC0LLQvtCy0LDQuyDRgdC+INGB0YLRgNCw0L3QuNGG0LXQuSxcclxuICAgIC8vINC/0YDQtdC20LTQtSDRh9C10Lwg0L/Ri9GC0LDRgtGM0YHRjyDQstC+0YHQv9GA0L7QuNC30LLQtdGB0YLQuCDQt9Cy0YPQuiAo0LHRgNCw0YPQt9C10YDRiyDQsdC70L7QutC40YDRg9GO0YIg0LDQstGC0L7QstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40LUpLlxyXG4gICAgLy8g0K3RgtC+0YIg0LzQtdGC0L7QtCDQtNC+0LvQttC10L0g0LLRi9C30YvQstCw0YLRjNGB0Y8g0L/QvtGB0LvQtSDQutC70LjQutCwIFwiUGxheVwiINCyINCz0LvQsNCy0L3QvtC8INC80LXQvdGOLlxyXG4gICAgY29uc29sZS5sb2coJ1tBdWRpb01hbmFnZXJdIEF0dGVtcHRpbmcgdG8gc3RhcnQgaW5pdGlhbCBtdXNpYy4uLicpO1xyXG4gICAgdGhpcy5jaGFuZ2VUcmFja0ZvckZsb29yKGluaXRpYWxGbG9vcik7XHJcbiAgfVxyXG59XHJcbiIsIi8vIHNyYy9jb3JlL0dhbWUuanNcclxuaW1wb3J0IHsgSW5wdXRNYW5hZ2VyIH0gZnJvbSAnLi9JbnB1dE1hbmFnZXIuanMnO1xyXG5pbXBvcnQgeyBVSU1hbmFnZXIgfSBmcm9tICcuLi9VSS9VSU1hbmFnZXIuanMnO1xyXG5pbXBvcnQgeyBDaGFyYWN0ZXIgfSBmcm9tICcuL0NoYXJhY3Rlci5qcyc7XHJcbmltcG9ydCB7IExldmVsIH0gZnJvbSAnLi9MZXZlbC5qcyc7XHJcbmltcG9ydCB7XHJcbiAgR2FtZVN0YXRlLFxyXG4gIHF1ZXN0aW9ucyxcclxuICBUQVJHRVRfQk9PS1NfVE9fV0lOLFxyXG4gIExJRlRfQ09PTERPV05fTVMsXHJcbiAgLy8gVElMRV9XQUxMLCAvLyBOb3QgdXNlZCBkaXJlY3RseSBoZXJlLCBjYW4gYmUgcmVtb3ZlZCBpZiB0aGVyZSBhcmUgbm8gb3RoZXIgdXNlc1xyXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IEdhbWVSZW5kZXJlciB9IGZyb20gJy4vR2FtZVJlbmRlcmVyLmpzJztcclxuaW1wb3J0IHsgR2FtZXBsYXlNYW5hZ2VyIH0gZnJvbSAnLi9HYW1lcGxheU1hbmFnZXIuanMnO1xyXG5pbXBvcnQgeyBBdWRpb01hbmFnZXIgfSBmcm9tICcuLi9hdWRpby9BdWRpb01hbmFnZXIuanMnO1xyXG5cclxuLy8gSW1wb3J0eSB6YXNvYsOzd1xyXG5pbXBvcnQgcmVkU3ByaXRlIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvY2hhcmFjdGVyX3JlZC5wbmcnO1xyXG5pbXBvcnQgYmx1ZVNwcml0ZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL2NoYXJhY3Rlcl9ibHVlLnBuZyc7XHJcbmltcG9ydCB5ZWxsb3dTcHJpdGUgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9jaGFyYWN0ZXJfeWVsbG93LnBuZyc7XHJcbmltcG9ydCBncmVlblNwcml0ZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL2NoYXJhY3Rlcl9ncmVlbi5wbmcnO1xyXG5pbXBvcnQgYm9va1Nwcml0ZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL2Jvb2sucG5nJztcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lIHtcclxuICAvLyBTdGF0aWMgcHJvcGVydGllcyBmb3IgR2FtZSBPdmVyIHNjcmVlbiBpbmZvcm1hdGlvblxyXG5cclxuICBzdGF0aWMgQ1JFQVRPUl9OQU1FUyA9IFsnUmFmYcWCJywgJ0RpbWEnLCAnVmVuaWEnLCAnS2FjcGVyJ107XHJcbiAgc3RhdGljIENMQVNTX0FUVEVORElOR19JTkZPID0gJ0tsYXNhIDJQMlQgLyBQcm9qZWt0b3dhbmllIHN0cm9uIGludGVybmV0b3d5Y2gnO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjaGFyYWN0ZXJDb2xvcikge1xyXG4gICAgY29uc29sZS5sb2coYFtHYW1lXSBJbml0aWFsaXppbmcgd2l0aCBjaGFyYWN0ZXI6ICR7Y2hhcmFjdGVyQ29sb3J9YCk7XHJcbiAgICB0aGlzLmNoYXJhY3RlckNvbG9yID0gY2hhcmFjdGVyQ29sb3I7XHJcbiAgICB0aGlzLl9nYW1lU3RhdGUgPSBHYW1lU3RhdGUuTE9BRElORztcclxuICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy50b3RhbEJvb2tzQ29sbGVjdGVkR2xvYmFsbHkgPSAwO1xyXG4gICAgdGhpcy50YXJnZXRCb29rc1RvV2luID0gVEFSR0VUX0JPT0tTX1RPX1dJTjtcclxuICAgIHRoaXMuYXZhaWxhYmxlUXVlc3Rpb25zID0gW107XHJcbiAgICB0aGlzLmN1cnJlbnRCb29rVGFyZ2V0ID0gbnVsbDtcclxuICAgIHRoaXMuY3VycmVudFF1ZXN0aW9uRGF0YSA9IG51bGw7XHJcbiAgICB0aGlzLmxpZnRDb29sZG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5saWZ0Q29vbGRvd25UaW1lciA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5jYW52YXMgPSBudWxsO1xyXG4gICAgdGhpcy5jdHggPSBudWxsO1xyXG4gICAgdGhpcy5jaGFyYWN0ZXIgPSBudWxsO1xyXG4gICAgdGhpcy5sZXZlbCA9IG51bGw7XHJcbiAgICB0aGlzLmlucHV0TWFuYWdlciA9IG51bGw7XHJcbiAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcclxuICAgIHRoaXMuZ2FtZXBsYXlNYW5hZ2VyID0gbnVsbDtcclxuICAgIHRoaXMuYXVkaW9NYW5hZ2VyID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLnNwcml0ZXMgPSB7IHJlZDogcmVkU3ByaXRlLCBibHVlOiBibHVlU3ByaXRlLCB5ZWxsb3c6IHllbGxvd1Nwcml0ZSwgZ3JlZW46IGdyZWVuU3ByaXRlIH07XHJcbiAgICB0aGlzLmJvb2tJbWFnZSA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5nYW1lTG9vcCA9IHRoaXMuZ2FtZUxvb3AuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuX2hhbmRsZUZhdGFsRXJyb3IgPSB0aGlzLl9oYW5kbGVGYXRhbEVycm9yLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9ib3VuZEtleURvd25IYW5kbGVyID0gbnVsbDtcclxuICAgIHRoaXMuX2JvdW5kS2V5VXBIYW5kbGVyID0gbnVsbDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLl9pbml0aWFsaXplQ29yZUNvbXBvbmVudHMoKTtcclxuXHJcbiAgICAgIHRoaXMuYXVkaW9NYW5hZ2VyID0gbmV3IEF1ZGlvTWFuYWdlcigpO1xyXG4gICAgICBjb25zb2xlLmxvZygnW0dhbWVdIEF1ZGlvTWFuYWdlciBjcmVhdGVkLicpO1xyXG4gICAgICB0aGlzLmdhbWVwbGF5TWFuYWdlciA9IG5ldyBHYW1lcGxheU1hbmFnZXIodGhpcyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbR2FtZV0gR2FtZXBsYXlNYW5hZ2VyIGNyZWF0ZWQuJyk7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IEdhbWVSZW5kZXJlcih0aGlzKTtcclxuICAgICAgY29uc3QgeyBjYW52YXMsIGN0eCB9ID0gdGhpcy5yZW5kZXJlci5pbml0aWFsaXplQ2FudmFzKCk7XHJcbiAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgICAgY29uc29sZS5sb2coJ1tHYW1lXSBSZW5kZXJlciBhbmQgQ2FudmFzIGluaXRpYWxpemVkLicpO1xyXG5cclxuICAgICAgdGhpcy5faW5pdGlhbGl6ZVVJTWFuYWdlcigpO1xyXG4gICAgICBjb25zb2xlLmxvZygnW0dhbWVdIFVJTWFuYWdlciBzZXR1cCBpbml0aWF0ZWQuJyk7XHJcblxyXG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgICAgdGhpcy5fbG9hZEFzc2V0c0FuZFRoZW5TdGFydExvZ2ljKClcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0dhbWVdIEFzeW5jIGxvYWRpbmcgYW5kIGdhbWUgbG9naWMgc3RhcnQgc2VxdWVuY2UgY29tcGxldGVkLicpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgJ1tHYW1lXSBVbmhhbmRsZWQgZXJyb3IgZnJvbSBfbG9hZEFzc2V0c0FuZFRoZW5TdGFydExvZ2ljIGluIGNvbnN0cnVjdG9yOicsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgY29uc3QgbG9hZGluZ092ZXJsYXkgPSBVSU1hbmFnZXIuZ2V0TG9hZGluZ092ZXJsYXkoKTsgLy8gVcW8eXdhbXkgVUlNYW5hZ2VyYVxyXG4gICAgICAgICAgaWYgKGxvYWRpbmdPdmVybGF5KSBsb2FkaW5nT3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbR2FtZV0gU3luY2hyb25vdXMgY29yZSBpbml0aWFsaXphdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgICBhbGVydChgQ3JpdGljYWwgaW5pdGlhbGl6YXRpb24gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX0uIEdhbWUgY2Fubm90IHN0YXJ0LmApO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGYXRhbEVycm9yKGBJbml0aWFsaXphdGlvbiBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWAsIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBnYW1lU3RhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZ2FtZVN0YXRlO1xyXG4gIH1cclxuICBzZXRHYW1lU3RhdGUobmV3U3RhdGUpIHtcclxuICAgIGlmICh0aGlzLl9nYW1lU3RhdGUgIT09IG5ld1N0YXRlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbR2FtZSBTdGF0ZV0gJHt0aGlzLl9nYW1lU3RhdGV9IC0+ICR7bmV3U3RhdGV9YCk7XHJcbiAgICAgIHRoaXMuX2dhbWVTdGF0ZSA9IG5ld1N0YXRlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2luaXRpYWxpemVDb3JlQ29tcG9uZW50cygpIHtcclxuICAgIHRoaXMuaW5wdXRNYW5hZ2VyID0gbmV3IElucHV0TWFuYWdlcigpO1xyXG4gICAgdGhpcy5sZXZlbCA9IG5ldyBMZXZlbCgxLCAzKTsgLy8gUHJ6eWvFgmFkOiBwacSZdHJhIG9kIDEgZG8gM1xyXG4gIH1cclxuXHJcbiAgX2luaXRpYWxpemVVSU1hbmFnZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMuZ2FtZXBsYXlNYW5hZ2VyKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0dhbWVdIEdhbWVwbGF5TWFuYWdlciBpcyBOT1QgZGVmaW5lZCB3aGVuIF9pbml0aWFsaXplVUlNYW5hZ2VyIGlzIGNhbGxlZCEnKTtcclxuICAgIH1cclxuICAgIGlmICghdGhpcy5pbnB1dE1hbmFnZXIpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbR2FtZV0gSW5wdXRNYW5hZ2VyIGlzIE5PVCBkZWZpbmVkIHdoZW4gX2luaXRpYWxpemVVSU1hbmFnZXIgaXMgY2FsbGVkIScpO1xyXG4gICAgfVxyXG4gICAgVUlNYW5hZ2VyLnNldEdhbWVwbGF5TWFuYWdlcih0aGlzLmdhbWVwbGF5TWFuYWdlcik7XHJcbiAgICBVSU1hbmFnZXIuaW5pdGlhbGl6ZVVJKHRoaXMuaW5wdXRNYW5hZ2VyKTtcclxuICB9XHJcblxyXG4gIF9hZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB0aGlzLnJlbmRlcmVyPy5yZXNpemVDYW52YXMoKSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBfbG9hZEFzc2V0c0FuZFRoZW5TdGFydExvZ2ljKCkge1xyXG4gICAgY29uc3QgbG9hZGluZ092ZXJsYXkgPSBVSU1hbmFnZXIuZ2V0TG9hZGluZ092ZXJsYXkoKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuc2V0R2FtZVN0YXRlKEdhbWVTdGF0ZS5MT0FESU5HKTtcclxuXHJcbiAgICAgIGF3YWl0IHRoaXMuX2xvYWRBc3NldHMoKTtcclxuICAgICAgYXdhaXQgdGhpcy5fc3RhcnRHYW1lTG9naWMoKTtcclxuXHJcbiAgICAgIGlmIChsb2FkaW5nT3ZlcmxheSkgbG9hZGluZ092ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW0dhbWVdIEFzc2V0IGxvYWRpbmcgb3IgZ2FtZSBsb2dpYyBzdGFydCBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgICBpZiAobG9hZGluZ092ZXJsYXkpIGxvYWRpbmdPdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgICAgdGhpcy5faGFuZGxlRmF0YWxFcnJvcihgQXNzZXQvU3RhcnQgTG9naWMgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBfbG9hZEFzc2V0cygpIHtcclxuICAgIGNvbnNvbGUubG9nKCdbR2FtZV0gTG9hZGluZyBhc3NldHMuLi4nKTtcclxuICAgIGNvbnN0IHByb21pc2VzID0gW107XHJcbiAgICBjb25zdCBzcHJpdGVQYXRoID0gdGhpcy5zcHJpdGVzW3RoaXMuY2hhcmFjdGVyQ29sb3JdIHx8IHRoaXMuc3ByaXRlcy5yZWQ7XHJcblxyXG4gICAgaWYgKCF0aGlzLmN0eCkgdGhyb3cgbmV3IEVycm9yKCdDYW52YXMgY29udGV4dCBub3QgYXZhaWxhYmxlIGZvciBDaGFyYWN0ZXIgY3JlYXRpb24uJyk7XHJcbiAgICB0aGlzLmNoYXJhY3RlciA9IG5ldyBDaGFyYWN0ZXIodGhpcy5jdHgsIHNwcml0ZVBhdGgsIHtcclxuICAgICAgc3BlZWQ6IDMsXHJcbiAgICAgIGZyYW1lU2l6ZTogMzIsXHJcbiAgICAgIHNjYWxlOiAyLFxyXG4gICAgICBhbmltYXRpb25TcGVlZDogMTUwLFxyXG4gICAgICBmcmFtZUNvdW50OiA0LFxyXG4gICAgfSk7XHJcbiAgICBwcm9taXNlcy5wdXNoKFxyXG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIuc3ByaXRlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAgIFtBc3NldHNdIENoYXJhY3RlciBzcHJpdGUgbG9hZGVkOiAke3Nwcml0ZVBhdGh9YCk7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zcHJpdGUub25lcnJvciA9IChlcnIpID0+XHJcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBGYWlsZWQgdG8gbG9hZCBjaGFyYWN0ZXIgc3ByaXRlOiAke3Nwcml0ZVBhdGh9LiBEZXRhaWxzOiAke2Vycn1gKSk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChib29rU3ByaXRlKSB7XHJcbiAgICAgIHRoaXMuYm9va0ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgIHRoaXMuYm9va0ltYWdlLnNyYyA9IGJvb2tTcHJpdGU7XHJcbiAgICAgIHByb21pc2VzLnB1c2goXHJcbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgIHRoaXMuYm9va0ltYWdlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYCAgW0Fzc2V0c10gQm9vayBpbWFnZSBsb2FkZWQ6ICR7Ym9va1Nwcml0ZX1gKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHRoaXMuYm9va0ltYWdlLm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgICBgIFtBc3NldHNdIEZhaWxlZCB0byBsb2FkIGJvb2sgaW1hZ2U6ICR7Ym9va1Nwcml0ZX0uIFVzaW5nIGZhbGxiYWNrIHJlbmRlcmluZy5gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuYm9va0ltYWdlID0gbnVsbDtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS53YXJuKCdbQXNzZXRzXSBObyBib29rIHNwcml0ZSBwYXRoIHByb3ZpZGVkLiBCb29rIHdpbGwgdXNlIGZhbGxiYWNrIHJlbmRlcmluZy4nKTtcclxuICAgICAgdGhpcy5ib29rSW1hZ2UgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuICAgIGNvbnNvbGUubG9nKCdbR2FtZV0gQWxsIGFzc2V0cyBsb2FkZWQgc3VjY2Vzc2Z1bGx5LicpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgX3N0YXJ0R2FtZUxvZ2ljKCkge1xyXG4gICAgY29uc29sZS5sb2coJ1tHYW1lXSBTdGFydGluZyBjb3JlIGdhbWUgbG9naWMuLi4nKTtcclxuICAgIGlmIChcclxuICAgICAgIXRoaXMubGV2ZWwgfHxcclxuICAgICAgIXRoaXMuY2hhcmFjdGVyIHx8XHJcbiAgICAgICF0aGlzLmNhbnZhcyB8fFxyXG4gICAgICAhdGhpcy5yZW5kZXJlciB8fFxyXG4gICAgICAhdGhpcy5nYW1lcGxheU1hbmFnZXIgfHxcclxuICAgICAgIXRoaXMuYXVkaW9NYW5hZ2VyXHJcbiAgICApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3RhcnQgZ2FtZSAtIGVzc2VudGlhbCBjb21wb25lbnRzIGFyZSBtaXNzaW5nLicpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0R2FtZVN0YXRlKEdhbWVTdGF0ZS5MT0FESU5HX0xFVkVMKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCB0aGlzLmxldmVsLmxvYWRGbG9vcih0aGlzLmxldmVsLm1pbkZsb29yLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgY29uc3QgY3VycmVudE1hcCA9IHRoaXMubGV2ZWwuY3VycmVudE1hcDtcclxuICAgICAgaWYgKCFjdXJyZW50TWFwKSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGluaXRpYWwgbWFwLiBNYXAgb2JqZWN0IGlzIG51bGwuJyk7XHJcblxyXG4gICAgICBjb25zdCBzdGFydFBvcyA9IGN1cnJlbnRNYXAuZmluZFJhbmRvbUluaXRpYWxTcGF3blBvc2l0aW9uKCk7XHJcbiAgICAgIGlmICghc3RhcnRQb3MpIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZpbmQgYSB2YWxpZCBzdGFydGluZyBwb3NpdGlvbiBvbiB0aGUgbWFwIScpO1xyXG4gICAgICB0aGlzLmNoYXJhY3Rlci54ID0gc3RhcnRQb3MueDtcclxuICAgICAgdGhpcy5jaGFyYWN0ZXIueSA9IHN0YXJ0UG9zLnk7XHJcbiAgICAgIHRoaXMuY2hhcmFjdGVyLmN1cnJlbnREaXJlY3Rpb24gPSBDaGFyYWN0ZXIuRGlyZWN0aW9uLkRPV047XHJcbiAgICAgIHRoaXMuY2hhcmFjdGVyLmlzTW92aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLmdhbWVwbGF5TWFuYWdlci5lbnN1cmVDaGFyYWN0ZXJJc09uV2Fsa2FibGVUaWxlKGZhbHNlKTtcclxuXHJcbiAgICAgIHRoaXMudG90YWxCb29rc0NvbGxlY3RlZEdsb2JhbGx5ID0gMDtcclxuICAgICAgdGhpcy5hdmFpbGFibGVRdWVzdGlvbnMgPSBbLi4ucXVlc3Rpb25zXTtcclxuICAgICAgdGhpcy5saWZ0Q29vbGRvd25BY3RpdmUgPSBmYWxzZTtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubGlmdENvb2xkb3duVGltZXIpO1xyXG4gICAgICB0aGlzLmxpZnRDb29sZG93blRpbWVyID0gbnVsbDtcclxuICAgICAgdGhpcy5jdXJyZW50Qm9va1RhcmdldCA9IG51bGw7XHJcbiAgICAgIHRoaXMuY3VycmVudFF1ZXN0aW9uRGF0YSA9IG51bGw7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyLmNlbnRlckNhbWVyYU9uQ2hhcmFjdGVyKCk7XHJcblxyXG4gICAgICBVSU1hbmFnZXIudXBkYXRlU2NvcmUodGhpcy50b3RhbEJvb2tzQ29sbGVjdGVkR2xvYmFsbHksIHRoaXMudGFyZ2V0Qm9va3NUb1dpbik7XHJcbiAgICAgIFVJTWFuYWdlci5zaG93R2FtZVVJKCk7XHJcblxyXG4gICAgICB0aGlzLl9ib3VuZEtleURvd25IYW5kbGVyID0gdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQodGhpcyk7XHJcbiAgICAgIHRoaXMuX2JvdW5kS2V5VXBIYW5kbGVyID0gdGhpcy5oYW5kbGVLZXlVcC5iaW5kKHRoaXMpO1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2JvdW5kS2V5RG93bkhhbmRsZXIpO1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9ib3VuZEtleVVwSGFuZGxlcik7XHJcblxyXG4gICAgICB0aGlzLmF1ZGlvTWFuYWdlci5zdGFydEluaXRpYWxNdXNpYyh0aGlzLmxldmVsLmN1cnJlbnRGbG9vcik7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbR2FtZV0gSW5pdGlhbCBtdXNpYyBzdGFydGVkIGZvciBmbG9vciAke3RoaXMubGV2ZWwuY3VycmVudEZsb29yfWApO1xyXG5cclxuICAgICAgdGhpcy5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLlBMQVlJTkcpO1xyXG4gICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmdhbWVMb29wKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnW0dhbWVdIEdhbWUgbG9naWMgc3RhcnRlZC4gTG9vcCBpcyBydW5uaW5nLicpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbR2FtZV0gRXJyb3IgZHVyaW5nIF9zdGFydEdhbWVMb2dpYzonLCBlcnJvcik7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUZhdGFsRXJyb3IoYExldmVsIHN0YXJ0IHByb2Nlc3MgZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2V0R2FtZU92ZXIod2luID0gdHJ1ZSkge1xyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuR0FNRV9PVkVSKSByZXR1cm47XHJcblxyXG4gICAgdGhpcy5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLkdBTUVfT1ZFUik7XHJcbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgaWYgKHRoaXMuY2hhcmFjdGVyKSB0aGlzLmNoYXJhY3Rlci5pc01vdmluZyA9IGZhbHNlO1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubGlmdENvb2xkb3duVGltZXIpO1xyXG5cclxuICAgIGlmICh0aGlzLmF1ZGlvTWFuYWdlcikge1xyXG4gICAgICB0aGlzLmF1ZGlvTWFuYWdlci5zdG9wTXVzaWMoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fYm91bmRLZXlEb3duSGFuZGxlcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9ib3VuZEtleURvd25IYW5kbGVyKTtcclxuICAgIGlmICh0aGlzLl9ib3VuZEtleVVwSGFuZGxlcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fYm91bmRLZXlVcEhhbmRsZXIpO1xyXG4gICAgdGhpcy5fYm91bmRLZXlEb3duSGFuZGxlciA9IG51bGw7XHJcbiAgICB0aGlzLl9ib3VuZEtleVVwSGFuZGxlciA9IG51bGw7XHJcblxyXG4gICAgLy8gV3l3b8WCeXdhbmUgd2V3bsSFdHJ6IHNob3dHYW1lT3ZlclNjcmVlblxyXG4gICAgLy8gV3l3b8WCeXdhbmUgd2V3bsSFdHJ6IHNob3dHYW1lT3ZlclNjcmVlblxyXG4gICAgLy8gV3l3b8WCeXdhbmUgd2V3bsSFdHJ6IHNob3dHYW1lT3ZlclNjcmVlblxyXG5cclxuICAgIFVJTWFuYWdlci5zaG93R2FtZU92ZXJTY3JlZW4od2luLCBHYW1lLkNSRUFUT1JfTkFNRVMsIEdhbWUuQ0xBU1NfQVRURU5ESU5HX0lORk8pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGBbR2FtZV0gR2FtZSBPdmVyLiBXaW46ICR7d2lufWApO1xyXG4gIH1cclxuXHJcbiAgc3RvcEdhbWUoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnW0dhbWVdIEV4cGxpY2l0IHN0b3BHYW1lIHJlcXVlc3RlZC4nKTtcclxuICAgIHRoaXMuX3NldEdhbWVPdmVyKGZhbHNlKTtcclxuICAgIGNvbnNvbGUubG9nKCdbR2FtZV0gR2FtZSBzdG9wcGVkLicpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUZhdGFsRXJyb3IobWVzc2FnZSwgc2hvd0FsZXJ0ID0gdHJ1ZSkge1xyXG4gICAgY29uc29sZS5lcnJvcignW0dhbWVdIEZBVEFMIEVSUk9SOicsIG1lc3NhZ2UpO1xyXG4gICAgaWYgKHNob3dBbGVydCAmJiB0aGlzLmdhbWVTdGF0ZSAhPT0gR2FtZVN0YXRlLkdBTUVfT1ZFUikge1xyXG4gICAgICBpZiAoVUlNYW5hZ2VyLmZsYXNoTWVzc2FnZUNvbnRhaW5lciAmJiBVSU1hbmFnZXIuZmxhc2hNZXNzYWdlKSB7XHJcbiAgICAgICAgVUlNYW5hZ2VyLmZsYXNoTWVzc2FnZShgRkFUQUwgRVJST1I6ICR7bWVzc2FnZX1gLCAnZXJyb3InLCAxNTAwMCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWxlcnQoYEZBVEFMIEVSUk9SOiAke21lc3NhZ2V9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIFVwZXduaWpteSBzacSZLCDFvGUgZ3JhIHByemVjaG9kemkgdyBzdGFuIEdBTUVfT1ZFUiBpIHBva2F6dWplIG9kcG93aWVkbmkgZWtyYW4uXHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5HQU1FX09WRVIpIHtcclxuICAgICAgdGhpcy5fc2V0R2FtZU92ZXIoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlS2V5RG93bihlKSB7XHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUgIT09IEdhbWVTdGF0ZS5QTEFZSU5HIHx8ICF0aGlzLmlucHV0TWFuYWdlcikgcmV0dXJuO1xyXG4gICAgbGV0IGtleUhhbmRsZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0IGtleSA9IGUua2V5LnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAoWydhcnJvd3VwJywgJ3cnXS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgIHRoaXMuaW5wdXRNYW5hZ2VyLnNldEtleSgndXAnLCB0cnVlKTtcclxuICAgICAga2V5SGFuZGxlZCA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYgKFsnYXJyb3dkb3duJywgJ3MnXS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgIHRoaXMuaW5wdXRNYW5hZ2VyLnNldEtleSgnZG93bicsIHRydWUpO1xyXG4gICAgICBrZXlIYW5kbGVkID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoWydhcnJvd2xlZnQnLCAnYSddLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgdGhpcy5pbnB1dE1hbmFnZXIuc2V0S2V5KCdsZWZ0JywgdHJ1ZSk7XHJcbiAgICAgIGtleUhhbmRsZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmIChbJ2Fycm93cmlnaHQnLCAnZCddLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgdGhpcy5pbnB1dE1hbmFnZXIuc2V0S2V5KCdyaWdodCcsIHRydWUpO1xyXG4gICAgICBrZXlIYW5kbGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChrZXlIYW5kbGVkKSBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVLZXlVcChlKSB7XHJcbiAgICBpZiAoIXRoaXMuaW5wdXRNYW5hZ2VyKSByZXR1cm47XHJcbiAgICBjb25zdCBrZXkgPSBlLmtleS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKFsnYXJyb3d1cCcsICd3J10uaW5jbHVkZXMoa2V5KSkgdGhpcy5pbnB1dE1hbmFnZXIuc2V0S2V5KCd1cCcsIGZhbHNlKTtcclxuICAgIGVsc2UgaWYgKFsnYXJyb3dkb3duJywgJ3MnXS5pbmNsdWRlcyhrZXkpKSB0aGlzLmlucHV0TWFuYWdlci5zZXRLZXkoJ2Rvd24nLCBmYWxzZSk7XHJcbiAgICBlbHNlIGlmIChbJ2Fycm93bGVmdCcsICdhJ10uaW5jbHVkZXMoa2V5KSkgdGhpcy5pbnB1dE1hbmFnZXIuc2V0S2V5KCdsZWZ0JywgZmFsc2UpO1xyXG4gICAgZWxzZSBpZiAoWydhcnJvd3JpZ2h0JywgJ2QnXS5pbmNsdWRlcyhrZXkpKSB0aGlzLmlucHV0TWFuYWdlci5zZXRLZXkoJ3JpZ2h0JywgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgZ2FtZUxvb3AodGltZXN0YW1wKSB7XHJcbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nIHx8IHRoaXMuZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuR0FNRV9PVkVSKSByZXR1cm47XHJcbiAgICB0aGlzLmdhbWVwbGF5TWFuYWdlcj8udXBkYXRlKHRpbWVzdGFtcCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyPy5jZW50ZXJDYW1lcmFPbkNoYXJhY3RlcigpO1xyXG4gICAgdGhpcy5yZW5kZXJlcj8uZHJhd0ZyYW1lKCk7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5nYW1lTG9vcCk7XHJcbiAgfVxyXG5cclxuICBzdGFydExpZnRDb29sZG93blRpbWVyKCkge1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubGlmdENvb2xkb3duVGltZXIpO1xyXG4gICAgY29uc29sZS5sb2coYFtHYW1lXSBTdGFydGluZyBsaWZ0IGNvb2xkb3duIHRpbWVyOiAke0xJRlRfQ09PTERPV05fTVN9bXMuYCk7XHJcbiAgICB0aGlzLmxpZnRDb29sZG93blRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMubGlmdENvb2xkb3duQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgIHRoaXMubGlmdENvb2xkb3duVGltZXIgPSBudWxsO1xyXG4gICAgICBpZiAodGhpcy5nYW1lU3RhdGUgPT09IEdhbWVTdGF0ZS5UUkFOU0lUSU9OSU5HKSB7XHJcbiAgICAgICAgdGhpcy5zZXRHYW1lU3RhdGUoR2FtZVN0YXRlLlBMQVlJTkcpO1xyXG4gICAgICAgIFVJTWFuYWdlci5mbGFzaE1lc3NhZ2UoYEFycml2ZWQgYXQgZmxvb3IgJHt0aGlzLmxldmVsPy5jdXJyZW50Rmxvb3J9YCwgJ3N1Y2Nlc3MnLCAxNTAwKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICBgW0dhbWVUaW1lcl0gTGlmdCBjb29sZG93biBlbmRlZCwgYnV0IGdhbWUgc3RhdGUgaXMgJHt0aGlzLmdhbWVTdGF0ZX0uIE5vIHN0YXRlIGNoYW5nZSBhcHBsaWVkLmBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9LCBMSUZUX0NPT0xET1dOX01TKTtcclxuICB9XHJcbn1cclxuIiwiLy8gc3JjL1VJL01lbnUuanNcclxuaW1wb3J0IHsgR2FtZSB9IGZyb20gJy4uL0NvcmUvR2FtZS5qcyc7XHJcbmltcG9ydCB7IFVJTWFuYWdlciB9IGZyb20gJy4vVUlNYW5hZ2VyLmpzJztcclxuXHJcbmxldCBjdXJyZW50R2FtZUluc3RhbmNlID0gbnVsbDtcclxuXHJcbmNsYXNzIE1lbnUge1xyXG4gIGNvbnN0cnVjdG9yKGNoYXJhY3RlckltYWdlU291cmNlcykge1xyXG4gICAgdGhpcy5jaGFyYWN0ZXJJbWFnZVNvdXJjZXMgPSBjaGFyYWN0ZXJJbWFnZVNvdXJjZXM7XHJcbiAgICB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyID0gbnVsbDtcclxuICAgIHRoaXMudXNlckludGVyYWN0ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMub3ZlcmxheSA9IG51bGw7XHJcbiAgICB0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlID0gbnVsbDsgLy8gVG8gc3RvcmUgQXVkaW9NYW5hZ2VyXHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tNZW51XSBDb25zdHJ1Y3RvciBjYWxsZWQuIEluaXRpYWxpemluZyBlbGVtZW50cy4uLicpO1xyXG4gICAgdGhpcy5pbml0aWFsaXplRWxlbWVudHMoKTtcclxuXHJcbiAgICBpZiAodGhpcy5jaGFyYWN0ZXJQYW5lbCkge1xyXG4gICAgICB0aGlzLnNldHVwQ2hhcmFjdGVySW1hZ2VzKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdbTWVudSBDb25zdHJ1Y3Rvcl0gQ1JJVElDQUw6IHRoaXMuY2hhcmFjdGVyUGFuZWwgaXMgbnVsbCBBRlRFUiBpbml0aWFsaXplRWxlbWVudHMuIENhbm5vdCBzZXR1cCBpbWFnZXMuJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdbTWVudV0gQWRkaW5nIGV2ZW50IGxpc3RlbmVycy4uLicpO1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gICAgY29uc29sZS5sb2coJ1tNZW51XSBJbnN0YW5jZSBjcmVhdGVkLicpO1xyXG4gIH1cclxuXHJcbiAgLy8gTWV0aG9kIHRvIGJlIGNhbGxlZCBmcm9tIEdhbWUuanMgdG8gcGFzcyBBdWRpb01hbmFnZXJcclxuICBzZXRBdWRpb01hbmFnZXIoYXVkaW9NYW5hZ2VyKSB7XHJcbiAgICB0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlID0gYXVkaW9NYW5hZ2VyO1xyXG4gICAgY29uc29sZS5sb2coJ1tNZW51XSBBdWRpb01hbmFnZXIgaW5zdGFuY2UgcmVjZWl2ZWQuJyk7XHJcbiAgICAvLyBJbml0aWFsaXplIHZvbHVtZSBzbGlkZXIgdmFsdWUgaWYgQXVkaW9NYW5hZ2VyIGlzIG5vdyBhdmFpbGFibGVcclxuICAgIGlmICh0aGlzLm11c2ljVm9sdW1lICYmIHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UpIHtcclxuICAgICAgLy8gVm9sdW1lIGZyb20gQXVkaW9NYW5hZ2VyIGlzIDAtMSwgc2xpZGVyIGlzIDAtMTAwXHJcbiAgICAgIHRoaXMubXVzaWNWb2x1bWUudmFsdWUgPSB0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlLmdldE11c2ljVm9sdW1lKCkgKiAxMDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplRWxlbWVudHMoKSB7XHJcbiAgICB0aGlzLm1lbnVDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1jb250YWluZXInKTtcclxuICAgIGlmICghdGhpcy5tZW51Q29udGFpbmVyKSBjb25zb2xlLmVycm9yKCdbTWVudSBJbml0XSBDUklUSUNBTDogLm1lbnUtY29udGFpbmVyIG5vdCBmb3VuZCEnKTtcclxuXHJcbiAgICB0aGlzLnNldHRpbmdzQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzLWJ1dHRvbicpO1xyXG4gICAgdGhpcy5wbGF5QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXktYnV0dG9uJyk7XHJcbiAgICB0aGlzLmNoYXJhY3RlckJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGFyYWN0ZXItYnV0dG9uJyk7XHJcblxyXG4gICAgaWYgKCF0aGlzLnBsYXlCdXR0b24pIGNvbnNvbGUud2FybignW01lbnUgSW5pdF0gLnBsYXktYnV0dG9uIG5vdCBmb3VuZC4nKTtcclxuICAgIGVsc2UgdGhpcy5wbGF5QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICBpZiAoIXRoaXMuY2hhcmFjdGVyQnV0dG9uKSBjb25zb2xlLndhcm4oJ1tNZW51IEluaXRdIC5jaGFyYWN0ZXItYnV0dG9uIG5vdCBmb3VuZC4nKTtcclxuXHJcbiAgICB0aGlzLnNldHRpbmdzUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MtcGFuZWwnKTtcclxuICAgIGlmICh0aGlzLnNldHRpbmdzUGFuZWwpIHtcclxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3NQYW5lbC5wYXJlbnROb2RlICE9PSBkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnNldHRpbmdzUGFuZWwpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubXVzaWNWb2x1bWUgPSB0aGlzLnNldHRpbmdzUGFuZWwucXVlcnlTZWxlY3RvcignI211c2ljLXZvbHVtZScpOyAvLyBUaGlzIGlzIHRoZSBzbGlkZXJcclxuICAgICAgdGhpcy5zZnhWb2x1bWUgPSB0aGlzLnNldHRpbmdzUGFuZWwucXVlcnlTZWxlY3RvcignI3NmeC12b2x1bWUnKTtcclxuICAgICAgdGhpcy5jbG9zZVNldHRpbmdzQnV0dG9uID0gdGhpcy5zZXR0aW5nc1BhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5wYW5lbC1jbG9zZS1idXR0b24nKTtcclxuXHJcbiAgICAgIC8vIEluaXRpYWxpemUgc2xpZGVyIHZhbHVlIGlmIGF1ZGlvTWFuYWdlckluc3RhbmNlIGlzIGFscmVhZHkgc29tZWhvdyBzZXRcclxuICAgICAgLy8gKHRob3VnaCB0eXBpY2FsbHkgaXQgd29uJ3QgYmUgYXQgdGhpcyBleGFjdCBwb2ludClcclxuICAgICAgaWYgKHRoaXMubXVzaWNWb2x1bWUgJiYgdGhpcy5hdWRpb01hbmFnZXJJbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMubXVzaWNWb2x1bWUudmFsdWUgPSB0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlLmdldE11c2ljVm9sdW1lKCkgKiAxMDA7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignW01lbnUgSW5pdF0gLnNldHRpbmdzLXBhbmVsIG5vdCBmb3VuZC4nKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNoYXJhY3RlclBhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYXJhY3Rlci1wYW5lbCcpO1xyXG4gICAgaWYgKHRoaXMuY2hhcmFjdGVyUGFuZWwpIHtcclxuICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyUGFuZWwucGFyZW50Tm9kZSAhPT0gZG9jdW1lbnQuYm9keSkge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jaGFyYWN0ZXJQYW5lbCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5jaGFyYWN0ZXJHcmlkID0gdGhpcy5jaGFyYWN0ZXJQYW5lbC5xdWVyeVNlbGVjdG9yKCcuY2hhcmFjdGVyLWdyaWQnKTtcclxuICAgICAgdGhpcy5jbG9zZUNoYXJhY3RlclBhbmVsQnV0dG9uID0gdGhpcy5jaGFyYWN0ZXJQYW5lbC5xdWVyeVNlbGVjdG9yKCcucGFuZWwtY2xvc2UtYnV0dG9uJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbTWVudSBJbml0XSBDUklUSUNBTDogLmNoYXJhY3Rlci1wYW5lbCBub3QgZm91bmQgZHVyaW5nIGluaXRpYWxpemF0aW9uIScpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheS5jbGFzc05hbWUgPSAnc2VsZWN0ZWQtY2hhcmFjdGVyLWRpc3BsYXknO1xyXG5cclxuICAgIGNvbnN0IG1haW5NZW51QnV0dG9uc0NvbnRhaW5lciA9IHRoaXMubWVudUNvbnRhaW5lclxyXG4gICAgICA/IHRoaXMubWVudUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcubWFpbi1tZW51LWJ1dHRvbnMnKVxyXG4gICAgICA6IG51bGw7XHJcblxyXG4gICAgaWYgKHRoaXMucGxheUJ1dHRvbiAmJiB0aGlzLnBsYXlCdXR0b24ucGFyZW50Tm9kZSkge1xyXG4gICAgICB0aGlzLnBsYXlCdXR0b24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5zZWxlY3RlZENoYXJhY3RlckRpc3BsYXksIHRoaXMucGxheUJ1dHRvbik7XHJcbiAgICB9IGVsc2UgaWYgKG1haW5NZW51QnV0dG9uc0NvbnRhaW5lcikge1xyXG4gICAgICBtYWluTWVudUJ1dHRvbnNDb250YWluZXIuaW5zZXJ0QmVmb3JlKFxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5LFxyXG4gICAgICAgIG1haW5NZW51QnV0dG9uc0NvbnRhaW5lci5jaGlsZHJlblsxXSB8fCBudWxsXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMubWVudUNvbnRhaW5lcikge1xyXG4gICAgICB0aGlzLm1lbnVDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5zZWxlY3RlZENoYXJhY3RlckRpc3BsYXkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAnW01lbnUgSW5pdF0gQ2Fubm90IGFwcGVuZCBzZWxlY3RlZENoYXJhY3RlckRpc3BsYXk6IG5vIHN1aXRhYmxlIHBhcmVudCBmb3VuZC4nXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0dXBDaGFyYWN0ZXJJbWFnZXMoKSB7XHJcbiAgICBpZiAoIXRoaXMuY2hhcmFjdGVyUGFuZWwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLmNoYXJhY3RlckltYWdlU291cmNlcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2hhcmFjdGVyQ2FyZHMgPSB0aGlzLmNoYXJhY3RlclBhbmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jaGFyYWN0ZXItY2FyZCcpO1xyXG4gICAgaWYgKGNoYXJhY3RlckNhcmRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY2hhcmFjdGVyQ2FyZHMuZm9yRWFjaCgoY2FyZCkgPT4ge1xyXG4gICAgICBjb25zdCBjaGFyYWN0ZXJLZXkgPSBjYXJkLmRhdGFzZXQuY2hhcmFjdGVyO1xyXG4gICAgICBjb25zdCBpbWdFbGVtZW50ID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuY2hhcmFjdGVyLXByZXZpZXcgaW1nJyk7XHJcblxyXG4gICAgICBpZiAoaW1nRWxlbWVudCAmJiB0aGlzLmNoYXJhY3RlckltYWdlU291cmNlc1tjaGFyYWN0ZXJLZXldKSB7XHJcbiAgICAgICAgaW1nRWxlbWVudC5zcmMgPSB0aGlzLmNoYXJhY3RlckltYWdlU291cmNlc1tjaGFyYWN0ZXJLZXldO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUZpcnN0SW50ZXJhY3Rpb24oKSB7XHJcbiAgICBpZiAoIXRoaXMudXNlckludGVyYWN0ZWQpIHtcclxuICAgICAgdGhpcy51c2VySW50ZXJhY3RlZCA9IHRydWU7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbTWVudV0gRmlyc3QgdXNlciBpbnRlcmFjdGlvbiBkZXRlY3RlZC4nKTtcclxuICAgICAgLy8gTm8gbmVlZCB0byBleHBsaWNpdGx5IGluaXQgQXVkaW9NYW5hZ2VyIGhlcmUsIEdhbWUuanMgd2lsbCBoYW5kbGUgaXRcclxuICAgICAgLy8gd2hlbiBzdGFydEdhbWUgaXMgY2FsbGVkLlxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBjb25zdCBhZGRJbnRlcmFjdGl2ZUxpc3RlbmVyID0gKGVsZW1lbnQsIGV2ZW50VHlwZSwgaGFuZGxlckZuKSA9PiB7XHJcbiAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmhhbmRsZUZpcnN0SW50ZXJhY3Rpb24oKTtcclxuICAgICAgICAgIGhhbmRsZXJGbi5jYWxsKHRoaXMsIGV2ZW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBhZGRJbnRlcmFjdGl2ZUxpc3RlbmVyKHRoaXMuc2V0dGluZ3NCdXR0b24sICdjbGljaycsIHRoaXMudG9nZ2xlU2V0dGluZ3MpO1xyXG4gICAgYWRkSW50ZXJhY3RpdmVMaXN0ZW5lcih0aGlzLnBsYXlCdXR0b24sICdjbGljaycsIHRoaXMuc3RhcnRHYW1lKTtcclxuICAgIGFkZEludGVyYWN0aXZlTGlzdGVuZXIodGhpcy5jaGFyYWN0ZXJCdXR0b24sICdjbGljaycsIHRoaXMub3BlbkNoYXJhY3Rlck1vZGFsKTtcclxuXHJcbiAgICBpZiAodGhpcy5jbG9zZVNldHRpbmdzQnV0dG9uKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VTZXR0aW5nc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuY2xvc2VTZXR0aW5ncygpKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmNsb3NlQ2hhcmFjdGVyUGFuZWxCdXR0b24pIHtcclxuICAgICAgdGhpcy5jbG9zZUNoYXJhY3RlclBhbmVsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jbG9zZUNoYXJhY3Rlck1vZGFsKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm11c2ljVm9sdW1lKSB7XHJcbiAgICAgIHRoaXMubXVzaWNWb2x1bWUuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlKSB7XHJcbiAgICAgICAgICAvLyBTbGlkZXIgdmFsdWUgaXMgMC0xMDAsIEF1ZGlvTWFuYWdlciBleHBlY3RzIDAtMVxyXG4gICAgICAgICAgY29uc3QgbmV3Vm9sdW1lID0gcGFyc2VGbG9hdChlLnRhcmdldC52YWx1ZSkgLyAxMDA7XHJcbiAgICAgICAgICB0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlLnNldE11c2ljVm9sdW1lKG5ld1ZvbHVtZSk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgW01lbnVdIE11c2ljIHZvbHVtZSBjaGFuZ2VkIHZpYSBzbGlkZXIgdG86ICR7bmV3Vm9sdW1lfWApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1tNZW51XSBNdXNpYyB2b2x1bWUgc2xpZGVyIGNoYW5nZWQsIGJ1dCBBdWRpb01hbmFnZXIgbm90IGF2YWlsYWJsZS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc2Z4Vm9sdW1lKSB7XHJcbiAgICAgIC8vIFNGWCB2b2x1bWUgbGlzdGVuZXIgKGlmIHlvdSBpbXBsZW1lbnQgU0ZYIGxhdGVyKVxyXG4gICAgICAvLyB0aGlzLnNmeFZvbHVtZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7XHJcbiAgICAgIC8vICAgaWYgKHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UgJiYgdHlwZW9mIHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2Uuc2V0U2Z4Vm9sdW1lID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIC8vICAgICB0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlLnNldFNmeFZvbHVtZShwYXJzZUZsb2F0KGUudGFyZ2V0LnZhbHVlKSAvIDEwMCk7XHJcbiAgICAgIC8vICAgfVxyXG4gICAgICAvLyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5jaGFyYWN0ZXJHcmlkKSB7XHJcbiAgICAgIHRoaXMuY2hhcmFjdGVyR3JpZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNsaWNrZWRDYXJkID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5jaGFyYWN0ZXItY2FyZCcpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGNsaWNrZWRDYXJkICYmXHJcbiAgICAgICAgICB0aGlzLmNoYXJhY3RlclBhbmVsICYmXHJcbiAgICAgICAgICB0aGlzLmNoYXJhY3RlclBhbmVsLmNsYXNzTGlzdC5jb250YWlucygndmlzaWJsZScpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICB0aGlzLmhhbmRsZUZpcnN0SW50ZXJhY3Rpb24oKTtcclxuICAgICAgICAgIHRoaXMuc2VsZWN0Q2hhcmFjdGVyKGNsaWNrZWRDYXJkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb3BlbkNoYXJhY3Rlck1vZGFsKCkge1xyXG4gICAgaWYgKCF0aGlzLmNoYXJhY3RlclBhbmVsIHx8ICF0aGlzLmNoYXJhY3RlckdyaWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jaGFyYWN0ZXJQYW5lbC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3NQYW5lbD8uY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJykpIHtcclxuICAgICAgdGhpcy5jbG9zZVNldHRpbmdzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLm92ZXJsYXkpIHtcclxuICAgICAgdGhpcy5vdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRoaXMub3ZlcmxheS5jbGFzc05hbWUgPSAnY2hhcmFjdGVyLW1vZGFsLW92ZXJsYXknO1xyXG4gICAgICB0aGlzLm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcy5vdmVybGF5KSB7XHJcbiAgICAgICAgICB0aGlzLmNsb3NlQ2hhcmFjdGVyTW9kYWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLm92ZXJsYXkuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2VDaGFyYWN0ZXJNb2RhbCgpIHtcclxuICAgIGlmICh0aGlzLmNoYXJhY3RlclBhbmVsKSB7XHJcbiAgICAgIHRoaXMuY2hhcmFjdGVyUGFuZWwuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMub3ZlcmxheSkge1xyXG4gICAgICB0aGlzLm92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2VsZWN0Q2hhcmFjdGVyKGNhcmRFbGVtZW50KSB7XHJcbiAgICBpZiAoIXRoaXMuY2hhcmFjdGVyR3JpZCB8fCAhY2FyZEVsZW1lbnQ/LmRhdGFzZXQ/LmNoYXJhY3Rlcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBzZWxlY3RlZENoYXJLZXkgPSBjYXJkRWxlbWVudC5kYXRhc2V0LmNoYXJhY3RlcjtcclxuXHJcbiAgICB0aGlzLmNoYXJhY3RlckdyaWRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jaGFyYWN0ZXItY2FyZCcpXHJcbiAgICAgIC5mb3JFYWNoKChjKSA9PiBjLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJykpO1xyXG4gICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcclxuICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIgPSBzZWxlY3RlZENoYXJLZXk7XHJcblxyXG4gICAgaWYgKHRoaXMucGxheUJ1dHRvbikge1xyXG4gICAgICB0aGlzLnBsYXlCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheSgpO1xyXG4gICAgdGhpcy5jbG9zZUNoYXJhY3Rlck1vZGFsKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVTZWxlY3RlZENoYXJhY3RlckRpc3BsYXkoKSB7XHJcbiAgICBpZiAoIXRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5KSByZXR1cm47XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyICYmXHJcbiAgICAgIHRoaXMuY2hhcmFjdGVySW1hZ2VTb3VyY2VzICYmXHJcbiAgICAgIHRoaXMuY2hhcmFjdGVySW1hZ2VTb3VyY2VzW3RoaXMuc2VsZWN0ZWRDaGFyYWN0ZXJdXHJcbiAgICApIHtcclxuICAgICAgY29uc3QgY2hhcmFjdGVyS2V5ID0gdGhpcy5zZWxlY3RlZENoYXJhY3RlcjtcclxuICAgICAgY29uc3QgaW1nU3JjID0gdGhpcy5jaGFyYWN0ZXJJbWFnZVNvdXJjZXNbY2hhcmFjdGVyS2V5XTtcclxuICAgICAgbGV0IGRpc3BsYXllZE5hbWUgPSBjaGFyYWN0ZXJLZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjaGFyYWN0ZXJLZXkuc2xpY2UoMSkgKyAnIFN0dWRlbnQnO1xyXG5cclxuICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyR3JpZCkge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ2FyZEVsZW1lbnRIMyA9IHRoaXMuY2hhcmFjdGVyR3JpZC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgYC5jaGFyYWN0ZXItY2FyZFtkYXRhLWNoYXJhY3Rlcj1cIiR7Y2hhcmFjdGVyS2V5fVwiXSBoM2BcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChzZWxlY3RlZENhcmRFbGVtZW50SDMpIHtcclxuICAgICAgICAgIGRpc3BsYXllZE5hbWUgPSBzZWxlY3RlZENhcmRFbGVtZW50SDMudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5LmlubmVySFRNTCA9IGA8aW1nIHNyYz1cIiR7aW1nU3JjfVwiIGFsdD1cIiR7ZGlzcGxheWVkTmFtZX1cIiBzdHlsZT1cIndpZHRoOjMycHg7aGVpZ2h0OjMycHg7dmVydGljYWwtYWxpZ246bWlkZGxlO21hcmdpbi1yaWdodDo4cHg7IGJvcmRlci1yYWRpdXM6NTAlOyBvYmplY3QtZml0OmNvdmVyOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNDQ0O1wiPiA8c3BhbiBzdHlsZT1cImZvbnQtd2VpZ2h0OmJvbGQ7XCI+JHtkaXNwbGF5ZWROYW1lfTwvc3Bhbj5gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZENoYXJhY3RlckRpc3BsYXkuaW5uZXJIVE1MID1cclxuICAgICAgICAnPHNwYW4gc3R5bGU9XCJjb2xvcjojYWFhO1wiPk5vIGNoYXJhY3RlciBzZWxlY3RlZDwvc3Bhbj4nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlU2V0dGluZ3MoKSB7XHJcbiAgICBpZiAoIXRoaXMuc2V0dGluZ3NQYW5lbCkgcmV0dXJuO1xyXG4gICAgY29uc3QgaXNWaXNpYmxlID0gdGhpcy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC5jb250YWlucygndmlzaWJsZScpO1xyXG4gICAgaWYgKGlzVmlzaWJsZSkge1xyXG4gICAgICB0aGlzLmNsb3NlU2V0dGluZ3MoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMub3BlblNldHRpbmdzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvcGVuU2V0dGluZ3MoKSB7XHJcbiAgICBpZiAodGhpcy5zZXR0aW5nc1BhbmVsKSB7XHJcbiAgICAgIHRoaXMuc2V0dGluZ3NQYW5lbC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICAgIGlmICh0aGlzLmNoYXJhY3RlclBhbmVsPy5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2VDaGFyYWN0ZXJNb2RhbCgpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIEVuc3VyZSBzbGlkZXIgcmVmbGVjdHMgY3VycmVudCB2b2x1bWUgd2hlbiBwYW5lbCBvcGVuc1xyXG4gICAgICBpZiAodGhpcy5tdXNpY1ZvbHVtZSAmJiB0aGlzLmF1ZGlvTWFuYWdlckluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5tdXNpY1ZvbHVtZS52YWx1ZSA9IHRoaXMuYXVkaW9NYW5hZ2VySW5zdGFuY2UuZ2V0TXVzaWNWb2x1bWUoKSAqIDEwMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xvc2VTZXR0aW5ncygpIHtcclxuICAgIGlmICh0aGlzLnNldHRpbmdzUGFuZWwgJiYgdGhpcy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC5jb250YWlucygndmlzaWJsZScpKSB7XHJcbiAgICAgIHRoaXMuc2V0dGluZ3NQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBzdGFydEdhbWUoKSB7XHJcbiAgICBpZiAoIXRoaXMuc2VsZWN0ZWRDaGFyYWN0ZXIpIHtcclxuICAgICAgVUlNYW5hZ2VyLmZsYXNoTWVzc2FnZSgnUGxlYXNlIHNlbGVjdCBhIGNoYXJhY3RlciBmaXJzdCEnLCAnd2FybmluZycsIDI1MDApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbG9hZGluZ092ZXJsYXkgPSBVSU1hbmFnZXIuZ2V0TG9hZGluZ092ZXJsYXkoKTtcclxuICAgIGlmIChsb2FkaW5nT3ZlcmxheSkgbG9hZGluZ092ZXJsYXkuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG5cclxuICAgIGlmICh0aGlzLm1lbnVDb250YWluZXIpIHtcclxuICAgICAgdGhpcy5tZW51Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAobG9hZGluZ092ZXJsYXkpIGxvYWRpbmdPdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdhbWVDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKTtcclxuICAgIGlmIChnYW1lQ2FudmFzKSB7XHJcbiAgICAgIGdhbWVDYW52YXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbTWVudV0gQ1JJVElDQUw6ICNnYW1lLWNhbnZhcyBub3QgZm91bmQhJyk7XHJcbiAgICAgIGlmICh0aGlzLm1lbnVDb250YWluZXIpIHRoaXMubWVudUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICBpZiAobG9hZGluZ092ZXJsYXkpIGxvYWRpbmdPdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChjdXJyZW50R2FtZUluc3RhbmNlICYmIHR5cGVvZiBjdXJyZW50R2FtZUluc3RhbmNlLnN0b3BHYW1lID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgY3VycmVudEdhbWVJbnN0YW5jZS5zdG9wR2FtZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIEdhbWUgY29uc3RydWN0b3Igd2lsbCBjcmVhdGUgQXVkaW9NYW5hZ2VyXHJcbiAgICAgIGN1cnJlbnRHYW1lSW5zdGFuY2UgPSBuZXcgR2FtZSh0aGlzLnNlbGVjdGVkQ2hhcmFjdGVyKTtcclxuXHJcbiAgICAgIC8vIFBhc3MgdGhlIEF1ZGlvTWFuYWdlciBmcm9tIHRoZSBuZXcgZ2FtZSBpbnN0YW5jZSB0byB0aGlzIE1lbnUgaW5zdGFuY2VcclxuICAgICAgaWYgKGN1cnJlbnRHYW1lSW5zdGFuY2UgJiYgY3VycmVudEdhbWVJbnN0YW5jZS5hdWRpb01hbmFnZXIpIHtcclxuICAgICAgICB0aGlzLnNldEF1ZGlvTWFuYWdlcihjdXJyZW50R2FtZUluc3RhbmNlLmF1ZGlvTWFuYWdlcik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgJ1tNZW51IHN0YXJ0R2FtZV0gRmFpbGVkIHRvIGdldCBBdWRpb01hbmFnZXIgZnJvbSBuZXcgR2FtZSBpbnN0YW5jZSB0byBzZXQgaXQgaW4gTWVudS4nXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW01lbnVdIENyaXRpY2FsIGVycm9yIGR1cmluZyBnYW1lIGluaXRpYWxpemF0aW9uOicsIGVycm9yKTtcclxuICAgICAgVUlNYW5hZ2VyLmZsYXNoTWVzc2FnZShgR2FtZSBTdGFydCBGYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InLCAxMDAwMCk7XHJcbiAgICAgIGlmICh0aGlzLm1lbnVDb250YWluZXIpIHRoaXMubWVudUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICBpZiAoZ2FtZUNhbnZhcykgZ2FtZUNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICBpZiAobG9hZGluZ092ZXJsYXkpIGxvYWRpbmdPdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgICAgY3VycmVudEdhbWVJbnN0YW5jZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IE1lbnUsIGN1cnJlbnRHYW1lSW5zdGFuY2UgfTsgLy8gRXhwb3J0IGN1cnJlbnRHYW1lSW5zdGFuY2UgaWYgbmVlZGVkIGV4dGVybmFsbHlcclxuIiwiLy8g0J/QoNCV0JTQn9Ce0JvQkNCT0JDQldCc0J7QlSDQoNCQ0KHQn9Ce0JvQntCW0JXQndCY0JU6IGpzL21haW4uanMgKNC10YHQu9C4IGVudHJ5INCyIHdlYnBhY2suY29uZmlnLmpzICcuL2pzL21haW4uanMnKVxyXG4vLyDQmNCb0Jggc3JjL21haW4uanMgKNC10YHQu9C4IGVudHJ5ICcuL3NyYy9tYWluLmpzJylcclxuXHJcbi8vINCV0YHQu9C4INGN0YLQvtGCINGE0LDQudC7INC90LDRhdC+0LTQuNGC0YHRjyDQsiAvanMsINCwINC/0LDQv9C60LAgL3NyYyDQvdCwINGC0L7QvCDQttC1INGD0YDQvtCy0L3QtTpcclxuaW1wb3J0IHsgTWVudSB9IGZyb20gJy4vVUkvTWVudS5qcyc7XHJcbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xyXG5pbXBvcnQgcmVkU3R1ZGVudEltZyBmcm9tICcuLi9hc3NldHMvaW1hZ2VzL3JlZC5wbmcnO1xyXG5pbXBvcnQgYmx1ZVN0dWRlbnRJbWcgZnJvbSAnLi4vYXNzZXRzL2ltYWdlcy9ibHVlLnBuZyc7XHJcbmltcG9ydCB5ZWxsb3dTdHVkZW50SW1nIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMveWVsbG93LnBuZyc7XHJcbmltcG9ydCBncmVlblN0dWRlbnRJbWcgZnJvbSAnLi4vYXNzZXRzL2ltYWdlcy9ncmVlbi5wbmcnO1xyXG5cclxuLy8g0JXRgdC70Lgg0Y3RgtC+0YIg0YTQsNC50Lsg0L3QsNGF0L7QtNC40YLRgdGPINCyIC9zcmMgKNC4IHdlYnBhY2sgZW50cnkg0LHRi9C7INC40LfQvNC10L3QtdC9KTpcclxuLypcclxuaW1wb3J0IHsgTWVudSB9IGZyb20gJy4vVUkvTWVudS5qcyc7XHJcbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnOyAvLyDQktC+0LfQvNC+0LbQvdC+LCDQv9GD0YLRjCDQuiBDU1Mg0YLQvtC20LUg0L3Rg9C20L3QviDQsdGD0LTQtdGCINC40LfQvNC10L3QuNGC0YwsINC90LDQv9GA0LjQvNC10YAsICcuL2Nzcy9zdHlsZXMuY3NzJyDQtdGB0LvQuCBDU1Mg0LIgc3JjL2Nzc1xyXG5pbXBvcnQgcmVkU3R1ZGVudEltZyBmcm9tICcuL2Fzc2V0cy9pbWFnZXMvY2hhcmFjdGVyX3JlZC5wbmcnO1xyXG5pbXBvcnQgYmx1ZVN0dWRlbnRJbWcgZnJvbSAnLi9hc3NldHMvaW1hZ2VzL2NoYXJhY3Rlcl9ibHVlLnBuZyc7XHJcbmltcG9ydCB5ZWxsb3dTdHVkZW50SW1nIGZyb20gJy4vYXNzZXRzL2ltYWdlcy9jaGFyYWN0ZXJfeWVsbG93LnBuZyc7XHJcbmltcG9ydCBncmVlblN0dWRlbnRJbWcgZnJvbSAnLi9hc3NldHMvaW1hZ2VzL2NoYXJhY3Rlcl9ncmVlbi5wbmcnO1xyXG4qL1xyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICBjb25zb2xlLmxvZygnW21haW4uanNdIERPTUNvbnRlbnRMb2FkZWQuIEluaXRpYWxpemluZyBNZW51Li4uJyk7XHJcblxyXG4gIGNvbnN0IGNoYXJhY3RlckltYWdlU291cmNlcyA9IHtcclxuICAgIHJlZDogcmVkU3R1ZGVudEltZyxcclxuICAgIGJsdWU6IGJsdWVTdHVkZW50SW1nLFxyXG4gICAgeWVsbG93OiB5ZWxsb3dTdHVkZW50SW1nLFxyXG4gICAgZ3JlZW46IGdyZWVuU3R1ZGVudEltZyxcclxuICB9O1xyXG5cclxuICBuZXcgTWVudShjaGFyYWN0ZXJJbWFnZVNvdXJjZXMpO1xyXG59KTtcclxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJnIiwiZ2xvYmFsVGhpcyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJkb2N1bWVudCIsImN1cnJlbnRTY3JpcHQiLCJ0YWdOYW1lIiwidG9VcHBlckNhc2UiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsZW5ndGgiLCJpIiwidGVzdCIsIkVycm9yIiwicmVwbGFjZSIsInAiLCJJbnB1dE1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsImtleXMiLCJ1cCIsImRvd24iLCJsZWZ0IiwicmlnaHQiLCJzZXRLZXkiLCJrZXkiLCJpc1ByZXNzZWQiLCJoYXNPd25Qcm9wZXJ0eSIsImdldElucHV0RGlyZWN0aW9uIiwieCIsInkiLCJHYW1lU3RhdGUiLCJMT0FESU5HIiwiTUVOVSIsIlBMQVlJTkciLCJBU0tJTkdfUVVFU1RJT04iLCJTRUxFQ1RJTkdfRkxPT1IiLCJUUkFOU0lUSU9OSU5HIiwiR0FNRV9PVkVSIiwicXVlc3Rpb25zIiwicXVlc3Rpb24iLCJvcHRpb25zIiwiY29ycmVjdEFuc3dlciIsIlVJTWFuYWdlciIsInN0YXRpYyIsInNldEdhbWVwbGF5TWFuYWdlciIsIm1hbmFnZXIiLCJnYW1lcGxheU1hbmFnZXJJbnN0YW5jZSIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImluaXRpYWxpemVVSSIsImlucHV0TWFuYWdlciIsImNyZWF0ZUNvbnRyb2xzIiwiY3JlYXRlUXVlc3Rpb25VSSIsImNyZWF0ZUZsb29yU2VsZWN0aW9uVUkiLCJlbnN1cmVGbGFzaE1lc3NhZ2VDb250YWluZXIiLCJjcmVhdGVHYW1lT3ZlclNjcmVlbiIsIndhcm4iLCJjb250cm9sc0NvbnRhaW5lciIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiY2xhc3NMaXN0IiwiYWRkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwiZGlyZWN0aW9uIiwiaWNvbiIsImdyaWRBcmVhIiwiZm9yRWFjaCIsImJ0biIsImNsYXNzTmFtZSIsInRleHRDb250ZW50Iiwic3R5bGUiLCJkYXRhc2V0Iiwic3RhcnRQcmVzcyIsInByZXZlbnREZWZhdWx0IiwiZW5kUHJlc3MiLCJyZW1vdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicGFzc2l2ZSIsInNjb3JlRGlzcGxheUNvbnRhaW5lciIsInNjb3JlRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0YXJnZXRFbGVtZW50Iiwic2NvcmVEaXYiLCJxdWVzdGlvbk92ZXJsYXkiLCJxdWVzdGlvblRleHRFbGVtZW50IiwiYW5zd2VyQnV0dG9uc0NvbnRhaW5lciIsImZsb29yU2VsZWN0aW9uUGFuZWwiLCJmbG9vckJ1dHRvbnNDb250YWluZXIiLCJmbGFzaE1lc3NhZ2VDb250YWluZXIiLCJmbGFzaE1lc3NhZ2UiLCJtZXNzYWdlIiwidHlwZSIsImR1cmF0aW9uIiwiY29udGFpbmVyIiwibWVzc2FnZUVsZW1lbnQiLCJtZXNzYWdlSWQiLCJEYXRlIiwibm93IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwiZmxhc2hNZXNzYWdlVGltZW91dHMiLCJzZXRUaW1lb3V0IiwiaGFuZGxlVHJhbnNpdGlvbkVuZCIsImV2ZW50IiwicHJvcGVydHlOYW1lIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwib25jZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRMb2FkaW5nT3ZlcmxheSIsImxvYWRpbmdPdmVybGF5RWxlbWVudCIsImxvYWRpbmdUZXh0IiwiZ2FtZU92ZXJTY3JlZW5FbGVtZW50IiwiZ2FtZU92ZXJUaXRsZUVsZW1lbnQiLCJjcmVhdG9yTmFtZXNMaXN0RWxlbWVudCIsImNsYXNzSW5mb0VsZW1lbnQiLCJyZXR1cm5Ub01lbnVCdXR0b25FbGVtZW50IiwicmVsb2FkIiwic2hvd0dhbWVPdmVyU2NyZWVuIiwiaXNXaW4iLCJjcmVhdG9ycyIsImNsYXNzSW5mb1RleHQiLCJuYW1lIiwibGkiLCJoaWRlR2FtZVVJIiwiaGlkZVF1ZXN0aW9uIiwiaGlkZUZsb29yU2VsZWN0aW9uVUkiLCJoaWRlR2FtZU92ZXJTY3JlZW4iLCJzaG93UXVlc3Rpb24iLCJxdWVzdGlvbkRhdGEiLCJoYW5kbGVBbnN3ZXIiLCJvcHRpb25UZXh0IiwiaW5kZXgiLCJidXR0b24iLCJzZWxlY3RlZEluZGV4IiwicGFyc2VJbnQiLCJ0YXJnZXQiLCJzaG93Rmxvb3JTZWxlY3Rpb25VSSIsIm1pbkZsb29yIiwibWF4Rmxvb3IiLCJjdXJyZW50Rmxvb3IiLCJoYW5kbGVGbG9vclNlbGVjdGlvbiIsImZsb29yIiwiZGlzYWJsZWQiLCJ1cGRhdGVTY29yZSIsInNjb3JlIiwic2hvd0dhbWVVSSIsImNhbnZhcyIsIm1lbnVDb250YWluZXIiLCJzY29yZURpc3BsYXkiLCJkaXNwbGF5IiwiY29udGFpbnMiLCJDaGFyYWN0ZXIiLCJET1dOIiwiUklHSFQiLCJVUCIsIkxFRlQiLCJjdHgiLCJzcHJpdGVVcmwiLCJzcHJpdGUiLCJJbWFnZSIsImZyYW1lU2l6ZSIsImZyYW1lQ291bnQiLCJzY2FsZSIsInJlbmRlclNpemUiLCJzcGVlZCIsImFuaW1hdGlvblNwZWVkIiwiY29sbGlzaW9uQm94V2lkdGhSYXRpbyIsImNvbGxpc2lvbkJveEhlaWdodFJhdGlvIiwiY29sbGlzaW9uQm94RmVldE9mZnNldFJhdGlvIiwiY3VycmVudERpcmVjdGlvbiIsIkRpcmVjdGlvbiIsImN1cnJlbnRGcmFtZSIsImlzTW92aW5nIiwibGFzdEZyYW1lVGltZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJ1cGRhdGVBbmltYXRpb24iLCJ0aW1lc3RhbXAiLCJnZXRDb2xsaXNpb25Cb3giLCJwb3NYIiwicG9zWSIsIndpZHRoIiwiaGVpZ2h0IiwiaGFsZldpZHRoIiwiZmVldE9mZnNldFkiLCJ0b3AiLCJib3R0b20iLCJkcmF3Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjb21wbGV0ZSIsIm5hdHVyYWxIZWlnaHQiLCJmcmFtZVgiLCJmcmFtZVkiLCJzY3JlZW5YIiwic2NyZWVuWSIsImRyYXdJbWFnZSIsIkJvb2siLCJ0aWxlU2l6ZSIsInNpemUiLCJjb2xsZWN0ZWQiLCJpc0NvbGxlY3RlZCIsImJvb2tJbWFnZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0Iiwic3Ryb2tlU3R5bGUiLCJzdHJva2VSZWN0IiwiZm9udCIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsImZpbGxUZXh0IiwicmFuZG9tSW50IiwibWluIiwibWF4IiwiY2VpbCIsInNpbXBsZUhhc2giLCJzZWVkIiwiaCIsImltdWwiLCJhZGp1c3RDb2xvckJyaWdodG5lc3MiLCJoZXhDb2xvciIsImZhY3RvciIsInIiLCJzbGljZSIsImIiLCJyb3VuZCIsInBhZFN0YXJ0IiwiTWFwUmVuZGVyZXIiLCJ0aWxlQ29sb3JzIiwiYmFzZVdhbGxDb2xvciIsImJhc2VDb3JyaWRvckNvbG9yIiwiYmFzZVJvb21GbG9vckNvbG9yIiwibGlmdENvbG9yIiwiZXJyb3JDb2xvciIsInJlc2V0Q29sb3JDYWNoZSIsImdldFRpbGVDb2xvciIsImMiLCJ0aWxlVmFsdWUiLCJyb29tcyIsImNvbG9yIiwibWFwRGF0YSIsIm1hcCIsImJvb2tzIiwibGlmdFBvc2l0aW9uIiwiY29scyIsInJvd3MiLCJjdXJyZW50T2Zmc2V0WCIsImN1cnJlbnRPZmZzZXRZIiwic3RhcnRDb2wiLCJlbmRDb2wiLCJzdGFydFJvdyIsImVuZFJvdyIsInNhdmUiLCJkcmF3QmFzZVRpbGVzIiwiZHJhd1Jvb21EZXRhaWxzIiwiZHJhd0xpZnREZXRhaWxzIiwiZHJhd0Jvb2tzIiwicmVzdG9yZSIsInNoYWRvd0NvbG9yIiwid2FsbEVkZ2VDb2xvckRhcmsiLCJ3YWxsRWRnZUNvbG9yTGlnaHQiLCJ3YWxsVG9wRWRnZUNvbG9yIiwidW5kZWZpbmVkIiwiZWRnZVNpemUiLCJyb29tIiwiY29sIiwicm93Iiwicm9vbVNjcmVlblgiLCJyb29tU2NyZWVuWSIsInJvb21TY3JlZW5XIiwicm9vbVNjcmVlbkgiLCJmbG9vckNvbG9yIiwiZmxvb3JOdW0iLCJmbG9vck51bWJlciIsInJvb21TZWVkIiwiYnJpZ2h0bmVzc0ZhY3RvciIsImxpbmVXaWR0aCIsImRyYXdSb29tRGVjb3JhdGlvbnMiLCJ0aWxlWCIsInRpbGVZIiwiYnV0dG9uUmFkaXVzIiwiYnV0dG9uWCIsImJ1dHRvblkiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGwiLCJ3IiwidHMiLCJtYXJnaW4iLCJvYmpNYXJnaW4iLCJkcmF3UmVjdCIsInJ4IiwicnkiLCJydyIsInJoIiwib3V0bGluZSIsInNjcmVlblciLCJzY3JlZW5IIiwiZHJhd0NpcmNsZSIsImN4IiwiY3kiLCJyYWRpdXMiLCJzdHJva2UiLCJkZXNrVyIsImRlc2tIIiwiY2hhaXJIIiwic3BhY2VYIiwic3BhY2VZIiwicm93WSIsImNvbFgiLCJ0YWJsZVciLCJ0YWJsZUgiLCJjYWJpbmV0VyIsInNoZWxmVyIsInNoZWxmU3BhY2luZyIsInN4Iiwic2hlbGZZIiwibW92ZVRvIiwibGluZVRvIiwidGFibGVMaWJYIiwibGFiVGFibGVIIiwibWV0YWxTaGVsZlciLCJtZXRhbFNoZWxmSCIsImJveFNpemUiLCJkZWZhdWx0Qm9va1NpemUiLCJib29rIiwiYm9va1NpemUiLCJjb25zaXN0ZW50TGlmdENvb3JkcyIsIkRFRkFVTFRfR0VOX1BBUkFNUyIsIm1pblJvb21TaXplIiwibWF4Um9vbVNpemUiLCJjb3JyaWRvclRoaWNrbmVzcyIsIm51bVJvb21zIiwibWF4Um9vbUF0dGVtcHRzIiwicm9vbVR5cGVXZWlnaHRzIiwiY2xhc3Nyb29tIiwib2ZmaWNlIiwibGlicmFyeSIsImd5bSIsInV0aWxpdHkiLCJfY2FydmVDb3JyaWRvckJldHdlZW4iLCJyb29tQSIsInJvb21CIiwiY2VudGVyVGlsZVgiLCJheCIsImNlbnRlclRpbGVZIiwiYXkiLCJieCIsImJ5IiwiX2NhcnZlSG9yaXpvbnRhbENvcnJpZG9yIiwiX2NhcnZlVmVydGljYWxDb3JyaWRvciIsImMxIiwiYzIiLCJyMSIsInIyIiwiX2dldFRpbGVPcGVubmVzc0RldGFpbHMiLCJpc1RpbGVXYWxrYWJsZSIsImN1cnJlbnRNYXAiLCJtYXBDb2xzIiwibWFwUm93cyIsInRpbGVWYWwiLCJvcGVuU2lkZXMiLCJuZWlnaGJvckRlbHRhcyIsImR4IiwiZHkiLCJ3YWxrYWJsZU5laWdoYm9yRmxhZ3MiLCJpc0Nob2tlcG9pbnQiLCJOIiwiUyIsIlciLCJFIiwiX2ZvcmNlQ29ubmVjdGlvblRvUG9pbnQiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsImRpcmVjdGlvbnMiLCJpc0FkamFjZW50VG9XYWxrYWJsZSIsImFkamFjZW50V2Fsa2FibGVDb29yZCIsIm54IiwibnkiLCJuZWlnaGJvclRpbGUiLCJxdWV1ZSIsInZpc2l0ZWQiLCJTZXQiLCJiZnNQYXRoYWJsZSIsInRhcmdldFdhbGthYmxlIiwiY2xvc2VzdFdhbGthYmxlIiwibWluRm91bmREaXN0IiwiSW5maW5pdHkiLCJjdXJyWCIsImN1cnJZIiwiZGlzdCIsInNoaWZ0IiwibmV4dFgiLCJuZXh0WSIsImhhcyIsImluY2x1ZGVzIiwicHVzaCIsIl9pc0xpZnRSZWFjaGFibGUiLCJyZWFjaGFibGUiLCJtYXBHcmlkIiwic3RhcnRYIiwic3RhcnRZIiwid2Fsa2FibGVUaWxlVmFsdWVzIiwicGVyZm9ybUJGUyIsIlByb2NlZHVyYWxNYXAiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsInJlbmRlcmVyIiwiZ2VuZXJhdGlvblBhcmFtcyIsImJvb2tzUGVyTWFwIiwibGFiIiwic3RvcmFnZSIsImdlbmVyYXRpb25Db25maWciLCJjb25maWciLCJ1c2VyUGFyYW1zIiwiZ2VuUGFyYW1zIiwiR1lNX0NIQU5DRV9PTl9GSVJTVF9GTE9PUiIsIkFycmF5IiwiZnJvbSIsInJvb21BdHRlbXB0cyIsIndlaWdodGVkVHlwZXMiLCJ0b3RhbFdlaWdodCIsIndlaWdodCIsInJvb21XaWR0aCIsInJvb21IZWlnaHQiLCJyb29tQ29sIiwicm9vbVJvdyIsIm5ld1Jvb20iLCJjb25uZWN0ZWQiLCJvdmVybGFwcyIsImJ1ZmZlciIsImV4aXN0aW5nUm9vbSIsIl9wbGFjZVJvb21zIiwiY29ubmVjdGVkU2V0IiwidW5jb25uZWN0ZWRSb29tcyIsImJlc3REaXN0YW5jZVNxIiwiYmVzdFVuY29ubmVjdGVkUm9vbSIsImJlc3RDb25uZWN0ZWRSb29tSWQiLCJiZXN0VW5jb25uZWN0ZWRJbmRleCIsInJvb21VIiwicm9vbUMiLCJkaXN0U3EiLCJiZXN0Q29ubmVjdGVkUm9vbSIsImZpbmQiLCJzcGxpY2UiLCJfY29ubmVjdFJvb21zQmV0dGVyIiwicGxhY2VkTGlmdERhdGEiLCJjdXJyZW50Q29uc2lzdGVudENvb3JkcyIsInJvb21zTGlzdCIsImNvb3Jkc1RvVXNlIiwibmV3bHlGb3VuZENvb3JkcyIsImNlbnRlclgiLCJjZW50ZXJZIiwiYmVzdFNwb3RDYW5kaWRhdGUiLCJzdGFydEludGVybmFsQ29sIiwiZW5kSW50ZXJuYWxDb2wiLCJzdGFydEludGVybmFsUm93IiwiZW5kSW50ZXJuYWxSb3ciLCJjdXJyZW50U2NvcmUiLCJkZXRhaWxzU2VsZiIsIndvcnN0QWNjZXNzUGVuYWx0eUZyb21OZWlnaGJvcnMiLCJudW1BY3R1YWxBY2Nlc3NQb2ludHMiLCJkZWx0YSIsIm5jQWNjZXNzIiwibnJBY2Nlc3MiLCJhY2Nlc3NUaWxlVHlwZSIsImRldGFpbHNBY2Nlc3NUaWxlIiwiZGVidWdfcm9vbSIsInRvRml4ZWQiLCJfZmluZExpZnRQbGFjZW1lbnRMb2NhdGlvbiIsInNhZmVGYWxsYmFja1giLCJzYWZlRmFsbGJhY2tZIiwibGlmdFdvcmxkUG9zIiwicG9zaXRpb24iLCJjb29yZHMiLCJfcGxhY2VMaWZ0IiwiX2Vuc3VyZU1hcEJvcmRlcnMiLCJlcnJvck1zZyIsImdlbmVyYXRlTGV2ZWxEYXRhIiwicGxhY2VCb29rc1JlbGlhYmx5IiwicG90ZW50aWFsTG9jYXRpb25zIiwicGxhY2VkQ29vcmRzIiwiaXNMaWZ0VGlsZSIsImJvb2tzUGxhY2VkIiwicmFuZG9tSW5kZXgiLCJjb29yZEtleSIsImJvb2tXb3JsZFgiLCJib29rV29ybGRZIiwiYm9va0lkIiwiaXNXYWxrYWJsZSIsIndvcmxkWCIsIndvcmxkWSIsImZpbmRSYW5kb21Jbml0aWFsU3Bhd25Qb3NpdGlvbiIsInN1aXRhYmxlVGlsZXMiLCJpc0xpZnQiLCJpc1RpbGVPcGVuRW5vdWdoIiwibWluT3BlblNpZGVzIiwiYXZvaWRPbmVUaWxlV2lkZVBhc3NhZ2VzIiwib3BlblNpZGVzQ291bnQiLCJpc09wZW5TaWRlIiwiZGlyTGFiZWwiLCJuZWlnaGJvclgiLCJuZWlnaGJvclkiLCJuZWlnaGJvclRpbGVWYWx1ZSIsImZpbmROZWFyZXN0V2Fsa2FibGVUaWxlIiwidGFyZ2V0V29ybGRYIiwidGFyZ2V0V29ybGRZIiwibWF4UmFkaXVzIiwiZXhjbHVkZUxpZnQiLCJ0YXJnZXRUaWxlWCIsInRhcmdldFRpbGVZIiwidGFyZ2V0U2FmZVRpbGVzIiwic3RhcnRUaWxlVmFsdWUiLCJtaW5TaWRlc0ZvckluaXRpYWwiLCJjdXJyZW50UmFkaXVzTWluT3BlblNpZGVzIiwiYWJzIiwiY2hlY2tYIiwiY2hlY2tZIiwiYmZzV2Fsa2FibGVQYXRoVGlsZXMiLCJnZXRTcGF3blBvaW50SW5Sb29tT2ZMaWZ0IiwibGlmdFRpbGVYIiwibGlmdFRpbGVZIiwicHJlZmVycmVkRGlzdGFuY2UiLCJhc3NvY2lhdGVkUm9vbSIsImVudHJ5UG9pbnRUb1Jvb20iLCJkaXJlY3Rpb25Gcm9tU291cmNlVG9FbnRyeVBvaW50IiwiY2hlY2tOZWlnaGJvcnMiLCJuIiwiYWRqWCIsImFkalkiLCJuT3V0ZXIiLCJjb3JyaWRvclgiLCJjb3JyaWRvclkiLCJuSW5uZXIiLCJwb3RlbnRpYWxSb29tWCIsInBvdGVudGlhbFJvb21ZIiwiaW53YXJkRHgiLCJpbndhcmREeSIsImRpc3RPZmZzZXQiLCJzcGF3bkNhbmRpZGF0ZVRpbGVYIiwic3Bhd25DYW5kaWRhdGVUaWxlWSIsImZ1cnRoZXJJblgiLCJmdXJ0aGVySW5ZIiwiaGFzU3BhY2VCZWhpbmQiLCJmaW5kTmVhcmJ5VW5hbnN3ZXJlZEJvb2siLCJjbG9zZXN0Qm9vayIsIm1pbkRpc3RhbmNlU3EiLCJkaXN0YW5jZVNxIiwibWFya0Jvb2tBc0NvbGxlY3RlZCIsImJvb2tUb0NvbGxlY3QiLCJmaW5kTmVhcmJ5TGlmdCIsImdldExpZnRQb3NpdGlvbiIsImxvZ01hcEdyaWQiLCJoZWFkZXIiLCJyb3dOdW0iLCJyb3dTdHJpbmciLCJ0aWxlIiwiam9pbiIsIkxldmVsIiwibG9hZEZsb29yIiwibGlmdFBvcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiZ2V0Q3VycmVudEJvb2tzIiwiR2FtZVJlbmRlcmVyIiwiZ2FtZSIsImluaXRpYWxpemVDYW52YXMiLCJnZXRDb250ZXh0IiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwicmVzaXplQ2FudmFzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2hhcmFjdGVyIiwibGV2ZWwiLCJjZW50ZXJDYW1lcmFPbkNoYXJhY3RlciIsImRyYXdGcmFtZSIsImNsZWFyUmVjdCIsImNoYXIiLCJkcmF3V2luU2NyZWVuIiwidGFyZ2V0Qm9va3NUb1dpbiIsIkdhbWVwbGF5TWFuYWdlciIsImJpbmQiLCJ1cGRhdGUiLCJnYW1lU3RhdGUiLCJ1cGRhdGVQbGF5aW5nU3RhdGUiLCJtb3ZlZCIsImhhbmRsZU1vdmVtZW50IiwiaGFuZGxlSW50ZXJhY3Rpb25zIiwiaW5wdXQiLCJhY3R1YWxNb3ZlWCIsImFjdHVhbE1vdmVZIiwiY2FuTW92ZVgiLCJjaGVja0NvbGxpc2lvbiIsImNhbk1vdmVZIiwiY29sbGlzaW9uQm94IiwicG9pbnRzVG9DaGVjayIsInBvaW50IiwibmVhcmJ5Qm9vayIsImluaXRpYXRlUXVlc3Rpb24iLCJsaWZ0Q29vbGRvd25BY3RpdmUiLCJpbml0aWF0ZUZsb29yU2VsZWN0aW9uIiwic2V0R2FtZVN0YXRlIiwiY3VycmVudEJvb2tUYXJnZXQiLCJhdmFpbGFibGVRdWVzdGlvbnMiLCJxSW5kZXgiLCJjdXJyZW50UXVlc3Rpb25EYXRhIiwic2VsZWN0ZWRPcHRpb25JbmRleCIsInRvdGFsQm9va3NDb2xsZWN0ZWRHbG9iYWxseSIsIl9zZXRHYW1lT3ZlciIsInNlbGVjdGVkRmxvb3IiLCJoYW5kbGVMaWZ0VHJhbnNpdGlvbiIsImNhdGNoIiwiZXJyIiwiX2hhbmRsZUZhdGFsRXJyb3IiLCJ0YXJnZXRGbG9vciIsImlzRGVidWciLCJMSUZUX0NPT0xET1dOX01TIiwibmV3TWFwIiwibGlmdFBvc0RhdGEiLCJmaW5hbFNwYXduUG9zIiwiZW1lcmdlbmN5U3Bhd24iLCJlbnN1cmVDaGFyYWN0ZXJJc09uV2Fsa2FibGVUaWxlIiwic3RhcnRMaWZ0Q29vbGRvd25UaW1lciIsImFsbG93U3RhbmRpbmdPbkxpZnQiLCJjdXJyZW50VGlsZVgiLCJjdXJyZW50VGlsZVkiLCJjdXJyZW50VGlsZVZhbHVlIiwiaXNTYWZlVG9TdGFuZEhlcmUiLCJpc0NvbGxpZGluZ1dpdGhXYWxsIiwic2FmZVNwb3QiLCJlbWVyZ2VuY3lTcG90IiwiTVVTSUNfU09VUkNFUyIsInRyYWNrMSIsInRyYWNrMiIsInRyYWNrMyIsIlRSQUNLX0NZQ0xFX09SREVSIiwiQXVkaW9NYW5hZ2VyIiwibXVzaWNWb2x1bWUiLCJjdXJyZW50TXVzaWNFbGVtZW50IiwiY3VycmVudFRyYWNrS2V5IiwiaXNNdXNpY1BsYXlpbmciLCJzYXZlZFZvbHVtZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZUZsb2F0IiwiYXVkaW9FbGVtZW50cyIsIl9wcmVsb2FkVHJhY2tzIiwiYXVkaW9QYXRoIiwiYXVkaW8iLCJBdWRpbyIsInByZWxvYWQiLCJzZXRNdXNpY1ZvbHVtZSIsInZvbHVtZSIsInNldEl0ZW0iLCJnZXRNdXNpY1ZvbHVtZSIsInBsYXlNdXNpYyIsInRyYWNrS2V5IiwibG9vcCIsInN0b3BNdXNpYyIsInBsYXkiLCJ0aGVuIiwiaGFzRm9jdXMiLCJwYXVzZSIsImN1cnJlbnRUaW1lIiwiY2hhbmdlVHJhY2tGb3JGbG9vciIsInRyYWNrSW5kZXgiLCJuZXdUcmFja0tleSIsInN0YXJ0SW5pdGlhbE11c2ljIiwiaW5pdGlhbEZsb29yIiwiR2FtZSIsImNoYXJhY3RlckNvbG9yIiwiX2dhbWVTdGF0ZSIsImlzUnVubmluZyIsImxpZnRDb29sZG93blRpbWVyIiwiZ2FtZXBsYXlNYW5hZ2VyIiwiYXVkaW9NYW5hZ2VyIiwic3ByaXRlcyIsInJlZCIsImJsdWUiLCJ5ZWxsb3ciLCJncmVlbiIsImdhbWVMb29wIiwiX2JvdW5kS2V5RG93bkhhbmRsZXIiLCJfYm91bmRLZXlVcEhhbmRsZXIiLCJfaW5pdGlhbGl6ZUNvcmVDb21wb25lbnRzIiwiX2luaXRpYWxpemVVSU1hbmFnZXIiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJfbG9hZEFzc2V0c0FuZFRoZW5TdGFydExvZ2ljIiwibG9hZGluZ092ZXJsYXkiLCJhbGVydCIsIm5ld1N0YXRlIiwiX2xvYWRBc3NldHMiLCJfc3RhcnRHYW1lTG9naWMiLCJwcm9taXNlcyIsInNwcml0ZVBhdGgiLCJyZWplY3QiLCJhbGwiLCJMT0FESU5HX0xFVkVMIiwic3RhcnRQb3MiLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlS2V5VXAiLCJ3aW4iLCJDUkVBVE9SX05BTUVTIiwiQ0xBU1NfQVRURU5ESU5HX0lORk8iLCJzdG9wR2FtZSIsInNob3dBbGVydCIsImtleUhhbmRsZWQiLCJ0b0xvd2VyQ2FzZSIsImN1cnJlbnRHYW1lSW5zdGFuY2UiLCJNZW51IiwiY2hhcmFjdGVySW1hZ2VTb3VyY2VzIiwic2VsZWN0ZWRDaGFyYWN0ZXIiLCJ1c2VySW50ZXJhY3RlZCIsIm92ZXJsYXkiLCJhdWRpb01hbmFnZXJJbnN0YW5jZSIsImluaXRpYWxpemVFbGVtZW50cyIsImNoYXJhY3RlclBhbmVsIiwic2V0dXBDaGFyYWN0ZXJJbWFnZXMiLCJhZGRFdmVudExpc3RlbmVycyIsInNldEF1ZGlvTWFuYWdlciIsInZhbHVlIiwic2V0dGluZ3NCdXR0b24iLCJwbGF5QnV0dG9uIiwiY2hhcmFjdGVyQnV0dG9uIiwic2V0dGluZ3NQYW5lbCIsInNmeFZvbHVtZSIsImNsb3NlU2V0dGluZ3NCdXR0b24iLCJjaGFyYWN0ZXJHcmlkIiwiY2xvc2VDaGFyYWN0ZXJQYW5lbEJ1dHRvbiIsInNlbGVjdGVkQ2hhcmFjdGVyRGlzcGxheSIsIm1haW5NZW51QnV0dG9uc0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsImNoaWxkcmVuIiwidXBkYXRlU2VsZWN0ZWRDaGFyYWN0ZXJEaXNwbGF5IiwiY2hhcmFjdGVyQ2FyZHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2FyZCIsImNoYXJhY3RlcktleSIsImltZ0VsZW1lbnQiLCJoYW5kbGVGaXJzdEludGVyYWN0aW9uIiwiYWRkSW50ZXJhY3RpdmVMaXN0ZW5lciIsImVsZW1lbnQiLCJldmVudFR5cGUiLCJoYW5kbGVyRm4iLCJjYWxsIiwidG9nZ2xlU2V0dGluZ3MiLCJzdGFydEdhbWUiLCJvcGVuQ2hhcmFjdGVyTW9kYWwiLCJjbG9zZVNldHRpbmdzIiwiY2xvc2VDaGFyYWN0ZXJNb2RhbCIsIm5ld1ZvbHVtZSIsImNsaWNrZWRDYXJkIiwiY2xvc2VzdCIsInNlbGVjdENoYXJhY3RlciIsImNhcmRFbGVtZW50Iiwic2VsZWN0ZWRDaGFyS2V5IiwiaW1nU3JjIiwiZGlzcGxheWVkTmFtZSIsImNoYXJBdCIsInNlbGVjdGVkQ2FyZEVsZW1lbnRIMyIsIm9wZW5TZXR0aW5ncyIsImdhbWVDYW52YXMiXSwic291cmNlUm9vdCI6IiJ9