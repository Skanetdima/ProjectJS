(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var i=e.g.document;if(!t&&i&&(i.currentScript&&"SCRIPT"===i.currentScript.tagName.toUpperCase()&&(t=i.currentScript.src),!t)){var o=i.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&(!t||!/^http(s?):/.test(t));)t=o[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();class t{constructor(){this.keys={up:!1,down:!1,left:!1,right:!1}}setKey(e,t){this.keys.hasOwnProperty(e)&&(this.keys[e]=t)}getInputDirection(){let e=0,t=0;return this.keys.up&&(t-=1),this.keys.down&&(t+=1),this.keys.left&&(e-=1),this.keys.right&&(e+=1),{x:e,y:t}}}class i{static scoreElement=null;static targetElement=null;static controlsContainer=null;static questionOverlay=null;static questionTextElement=null;static answerButtonsContainer=null;static floorSelectionPanel=null;static floorButtonsContainer=null;static flashMessageContainer=null;static gameplayManagerInstance=null;static flashMessageTimeouts={};static setGameplayManager(e){e?(this.gameplayManagerInstance=e,console.log("[UIManager] GameplayManager instance registered successfully with UIManager.")):console.error("[UIManager] Attempted to set GameplayManager instance to null or undefined!")}static initializeUI(e){console.log("[UIManager] Initializing base UI elements (controls, panels)..."),e||console.error("[UIManager] InputManager is required for initializeUI to create controls."),this.createControls(e),this.createQuestionUI(),this.createFloorSelectionUI(),this.ensureFlashMessageContainer(),this.gameplayManagerInstance||console.warn("[UIManager] WARNING: GameplayManager instance is NOT SET at the end of initializeUI. Ensure Game.js calls UIManager.setGameplayManager() *before* UIManager.initializeUI() or related show methods."),console.log("[UIManager] Base UI element initialization complete.")}static createControls(e){this.controlsContainer=document.getElementById("controls-container"),this.controlsContainer||(this.controlsContainer=document.createElement("div"),this.controlsContainer.id="controls-container",this.controlsContainer.classList.add("controls-container"),document.body.appendChild(this.controlsContainer)),this.controlsContainer.innerHTML="",[{direction:"up",icon:"↑",gridArea:"up"},{direction:"left",icon:"←",gridArea:"left"},{direction:"right",icon:"→",gridArea:"right"},{direction:"down",icon:"↓",gridArea:"down"}].forEach((({direction:t,icon:i,gridArea:o})=>{const a=document.createElement("button");if(a.className=`control-btn ${t}`,a.textContent=i,a.style.gridArea=o,a.dataset.direction=t,e){const i=i=>{e.setKey(t,!0),a.classList.add("active"),i.preventDefault()},o=i=>{e.keys[t]&&e.setKey(t,!1),a.classList.remove("active"),i.preventDefault()};a.addEventListener("touchstart",i,{passive:!1}),a.addEventListener("touchend",o,{passive:!1}),a.addEventListener("touchcancel",o,{passive:!1}),a.addEventListener("mousedown",i),a.addEventListener("mouseup",o),a.addEventListener("mouseleave",o)}this.controlsContainer.appendChild(a)}));const t=document.getElementById("score-display");if(t)this.scoreElement=t.querySelector("#score-value"),this.targetElement=t.querySelector("#score-target"),this.scoreElement&&(this.scoreElement.textContent="0"),this.targetElement&&(this.targetElement.textContent="?");else{const e=document.createElement("div");e.id="score-display",e.classList.add("score-display"),e.innerHTML='Books: <span id="score-value">0</span> / <span id="score-target">?</span>',document.body.appendChild(e),this.scoreElement=e.querySelector("#score-value"),this.targetElement=e.querySelector("#score-target")}}static createQuestionUI(){this.questionOverlay=document.getElementById("question-overlay"),this.questionOverlay||(this.questionOverlay=document.createElement("div"),this.questionOverlay.id="question-overlay",this.questionOverlay.classList.add("ui-panel"),this.questionOverlay.innerHTML='\n        <div id="blackboard-content">\n          <h2>Question</h2>\n          <div id="question-box">\n            <p id="question-text"></p>\n            <div id="answer-buttons"></div>\n          </div>\n        </div>',document.body.appendChild(this.questionOverlay)),this.questionTextElement=this.questionOverlay.querySelector("#question-text"),this.answerButtonsContainer=this.questionOverlay.querySelector("#answer-buttons"),this.questionTextElement&&this.answerButtonsContainer||console.error("[UIManager] Failed to find/create child elements of question UI!")}static createFloorSelectionUI(){this.floorSelectionPanel=document.getElementById("floor-selection-ui"),this.floorSelectionPanel||(this.floorSelectionPanel=document.createElement("div"),this.floorSelectionPanel.id="floor-selection-ui",this.floorSelectionPanel.classList.add("ui-panel"),this.floorSelectionPanel.innerHTML='\n        <h2>Select Floor</h2>\n        <div id="floor-buttons-container"></div>',document.body.appendChild(this.floorSelectionPanel)),this.floorButtonsContainer=this.floorSelectionPanel.querySelector("#floor-buttons-container"),this.floorButtonsContainer||console.error("[UIManager] Failed to find/create floor buttons container!")}static ensureFlashMessageContainer(){return this.flashMessageContainer=document.getElementById("flash-message-container"),this.flashMessageContainer||(this.flashMessageContainer=document.createElement("div"),this.flashMessageContainer.id="flash-message-container",document.body.appendChild(this.flashMessageContainer)),this.flashMessageContainer}static flashMessage(e,t="info",i=3e3){const o=this.ensureFlashMessageContainer();if(!o)return void console.error("[UIManager] Flash message container not found or creatable.");const a=document.createElement("div");a.textContent=e,a.className="flash-message",a.classList.add(`flash-${t}`);const s=`flash-${Date.now()}-${Math.random().toString(36).substr(2,5)}`;a.id=s,o.appendChild(a),requestAnimationFrame((()=>{a.classList.add("visible")})),clearTimeout(this.flashMessageTimeouts[s]),this.flashMessageTimeouts[s]=setTimeout((()=>{a.classList.remove("visible");const e=e=>{"opacity"!==e.propertyName&&"transform"!==e.propertyName||(a.parentNode&&a.parentNode.removeChild(a),delete this.flashMessageTimeouts[s])};a.addEventListener("transitionend",e,{once:!0}),setTimeout((()=>{a.parentNode&&(a.removeEventListener("transitionend",e),a.parentNode.removeChild(a)),delete this.flashMessageTimeouts[s]}),500)}),i)}static showQuestion(e){if(this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer||(console.error("[UIManager] Question UI not ready. Call createQuestionUI() or initializeUI()."),this.createQuestionUI(),this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer))if(e){if(!this.gameplayManagerInstance||"function"!=typeof this.gameplayManagerInstance.handleAnswer)return console.error("[UIManager] CRITICAL: GameplayManager or its handleAnswer method is not set or invalid! Cannot show question."),this.flashMessage("Error: Game interaction system failed (Q). Cannot display question.","error",5e3),void this.hideQuestion();this.questionTextElement.textContent=e.question,this.answerButtonsContainer.innerHTML="",e.options.forEach(((e,t)=>{const i=document.createElement("button");i.textContent=e,i.dataset.index=t,i.classList.add("answer-button"),i.addEventListener("click",(e=>{const t=parseInt(e.target.dataset.index,10);this.gameplayManagerInstance.handleAnswer(t)})),this.answerButtonsContainer.appendChild(i)})),this.questionOverlay.classList.add("visible")}else console.error("[UIManager] Cannot show question - no questionData provided.")}static hideQuestion(){this.questionOverlay&&(this.questionOverlay.classList.remove("visible"),this.questionTextElement&&(this.questionTextElement.textContent=""),this.answerButtonsContainer&&(this.answerButtonsContainer.innerHTML=""))}static showFloorSelectionUI(e,t,i){if(this.floorSelectionPanel&&this.floorButtonsContainer||(console.error("[UIManager] Floor selection UI not ready. Call createFloorSelectionUI() or initializeUI()."),this.createFloorSelectionUI(),this.floorSelectionPanel&&this.floorButtonsContainer)){if(!this.gameplayManagerInstance||"function"!=typeof this.gameplayManagerInstance.handleFloorSelection)return console.error("[UIManager] CRITICAL: GameplayManager or its handleFloorSelection method is not set or invalid! Cannot show floor selection."),this.flashMessage("Error: Game interaction system failed (F). Cannot display floor selection.","error",5e3),void this.hideFloorSelectionUI();this.floorButtonsContainer.innerHTML="";for(let o=e;o<=t;o++){const e=document.createElement("button");e.textContent=`Floor ${o}`,e.classList.add("floor-button"),e.dataset.floor=o,o===i?(e.disabled=!0,e.classList.add("current")):e.addEventListener("click",(()=>{this.gameplayManagerInstance.handleFloorSelection(o)})),this.floorButtonsContainer.appendChild(e)}this.floorSelectionPanel.classList.add("visible")}}static hideFloorSelectionUI(){this.floorSelectionPanel&&this.floorSelectionPanel.classList.remove("visible")}static updateScore(e,t){this.scoreElement||(this.scoreElement=document.getElementById("score-value")),this.targetElement||(this.targetElement=document.getElementById("score-target")),this.scoreElement&&(this.scoreElement.textContent=e),this.targetElement&&(this.targetElement.textContent=t)}static showGameUI(){const e=document.getElementById("game-canvas")||document.getElementById("gameCanvas"),t=document.getElementById("menu-container"),i=document.getElementById("score-display");e?e.style.display="block":console.warn("[UIManager] Canvas element not found to show."),t&&!t.classList.contains("hidden")&&(console.warn("[UIManager] Menu container was not hidden before showing game UI. Hiding it now."),t.classList.add("hidden")),this.controlsContainer?this.controlsContainer.classList.add("visible"):console.warn("[UIManager] Controls container not found to show."),i?i.classList.add("visible"):console.warn("[UIManager] Score display not found to show."),this.hideQuestion(),this.hideFloorSelectionUI()}static hideGameUI(){const e=document.getElementById("game-canvas")||document.getElementById("gameCanvas"),t=document.getElementById("score-display");e&&(e.style.display="none"),this.controlsContainer&&this.controlsContainer.classList.remove("visible"),t&&t.classList.remove("visible"),this.hideQuestion(),this.hideFloorSelectionUI()}}class o{static Direction={DOWN:0,RIGHT:1,UP:2,LEFT:3};constructor(e,t,i={}){this.ctx=e,this.sprite=new Image,this.frameSize=i.frameSize||32,this.frameCount=i.frameCount||4,this.scale=i.scale||2,this.renderSize=this.frameSize*this.scale,this.speed=i.speed||3,this.animationSpeed=i.animationSpeed||150,this.collisionBoxWidthRatio=i.collisionBoxWidthRatio||.4,this.collisionBoxHeightRatio=i.collisionBoxHeightRatio||.2,this.collisionBoxFeetOffsetRatio=i.collisionBoxFeetOffsetRatio||.4,this.x=0,this.y=0,this.currentDirection=o.Direction.DOWN,this.currentFrame=0,this.isMoving=!1,this.lastFrameTime=0,this.sprite.onload=()=>{console.log(`[Character] Sprite loaded successfully: ${t}`)},this.sprite.onerror=()=>{console.error(`[Character] Failed to load sprite: ${t}`)},this.sprite.src=t}updateAnimation(e){if(!this.isMoving)return this.currentFrame=0,void(this.lastFrameTime=e);this.lastFrameTime||(this.lastFrameTime=e),e-this.lastFrameTime>this.animationSpeed&&(this.currentFrame=(this.currentFrame+1)%this.frameCount,this.lastFrameTime=e)}getCollisionBox(e,t){const i=this.renderSize*this.collisionBoxWidthRatio,o=this.renderSize*this.collisionBoxHeightRatio,a=i/2,s=this.renderSize*this.collisionBoxFeetOffsetRatio;return{top:t+s-o/2,bottom:t+s+o/2,left:e-a,right:e+a,width:i,height:o}}draw(e,t){if(!this.sprite.complete||0===this.sprite.naturalHeight)return;const i=this.currentFrame*this.frameSize,o=this.currentDirection*this.frameSize,a=Math.floor(this.x-this.renderSize/2+e),s=Math.floor(this.y-this.renderSize/2+t);try{this.ctx.drawImage(this.sprite,i,o,this.frameSize,this.frameSize,a,s,this.renderSize,this.renderSize)}catch(e){console.error("[Character] Error drawing sprite:",e)}}}class a{constructor(e,t,i,o){this.x=e,this.y=t,this.id=i,this.tileSize=o,this.size=.6*o,this.collected=!1,this.isCollected=!1}draw(e,t,i,o){const a=Math.floor(this.x+t-this.size/2),s=Math.floor(this.y+i-this.size/2);o?e.drawImage(o,a,s,this.size,this.size):(e.fillStyle="#8d6e63",e.fillRect(a,s,this.size,this.size),e.strokeStyle="#5d4037",e.strokeRect(a,s,this.size,this.size),e.fillStyle="#eee",e.font=.6*this.size+"px Arial",e.textAlign="center",e.textBaseline="middle",e.fillText("?",a+this.size/2,s+this.size/2+2))}}const s={LOADING:"LOADING",MENU:"MENU",PLAYING:"PLAYING",ASKING_QUESTION:"ASKING_QUESTION",SELECTING_FLOOR:"SELECTING_FLOOR",TRANSITIONING:"TRANSITIONING",GAME_OVER:"GAME_OVER"},n=[{question:"Który język programowania jest znany ze swojej wszechstronności i używany zarówno w backendzie (Node.js), jak i frontendzie?",options:["Python","Java","JavaScript","C#"],correctAnswer:2},{question:"Co oznacza skrót HTML?",options:["HyperText Markup Language","High Transfer Machine Language","Hyperlink and Text Management Language","Home Tool Markup Language"],correctAnswer:0},{question:"Która struktura danych działa na zasadzie LIFO (Last-In, First-Out)?",options:["Kolejka (Queue)","Stos (Stack)","Lista (List)","Drzewo (Tree)"],correctAnswer:1},{question:"Jak nazywa się proces znajdowania i naprawiania błędów w kodzie?",options:["Kompilacja","Testowanie","Debugowanie","Refaktoryzacja"],correctAnswer:2},{question:"Który paradygmat programowania opiera się na koncepcji 'obiektów', które mogą zawierać dane i kod?",options:["Programowanie funkcyjne","Programowanie proceduralne","Programowanie obiektowe","Programowanie logiczne"],correctAnswer:2},{question:"Co oznacza CSS?",options:["Cascading Style Sheets","Computer Style Syntax","Creative Styling System","Colorful Style Scripts"],correctAnswer:0},{question:"Który operator w JavaScript służy do ścisłego porównania (wartość i typ)?",options:["==","=","===","!="],correctAnswer:2},{question:"Jak nazywa się popularny system kontroli wersji używany przez programistów?",options:["Subversion (SVN)","Git","Mercurial","CVS"],correctAnswer:1},{question:"Który typ pętli w większości języków programowania jest najbardziej odpowiedni do iteracji po elementach tablicy, gdy nie znamy ich liczby?",options:["for","while","do...while","foreach (lub for...of)"],correctAnswer:3},{question:"Co to jest API?",options:["Advanced Programming Interface","Application Programming Interface","Automated Program Interaction","Algorithmic Processing Input"],correctAnswer:1}];function r(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e}function l(e){let t=3735928559^e;return t=Math.imul(t^t>>>16,2246822507),t=Math.imul(t^t>>>13,3266489909),(t^=t>>>16)>>>0}function c(e,t){if(!e||"string"!=typeof e||e.length<7)return e;let i=parseInt(e.slice(1,3),16),o=parseInt(e.slice(3,5),16),a=parseInt(e.slice(5,7),16);return i=Math.min(255,Math.max(0,Math.round(i*t))),o=Math.min(255,Math.max(0,Math.round(o*t))),a=Math.min(255,Math.max(0,Math.round(a*t))),`#${i.toString(16).padStart(2,"0")}${o.toString(16).padStart(2,"0")}${a.toString(16).padStart(2,"0")}`}class h{constructor(e){this.tileSize=e,this.tileColors={},this.baseWallColor="#1c1e22",this.baseCorridorColor="#a0a0a0",this.baseRoomFloorColor="#c0c0c0",this.liftColor="#707080",this.errorColor="#ff00ff"}resetColorCache(){this.tileColors={}}getTileColor(e,t,i,o){const a=`${e},${t}`;if(this.tileColors[a])return this.tileColors[a];let s;switch(i){case 0:s=this.baseWallColor;break;case 1:s=this.baseCorridorColor;break;case 2:s=this.baseRoomFloorColor;break;case 3:s=this.liftColor;break;default:s=this.errorColor}return this.tileColors[a]=s,s}draw(e,t,i=null){const{map:o,rooms:a,books:s,liftPosition:n,offsetX:r,offsetY:l,cols:c,rows:h}=t,d=Math.floor(r),u=Math.floor(l),m=Math.max(0,Math.floor(-d/this.tileSize)-1),g=Math.min(c,Math.ceil((-d+e.canvas.width)/this.tileSize)+1),f=Math.max(0,Math.floor(-u/this.tileSize)-1),p=Math.min(h,Math.ceil((-u+e.canvas.height)/this.tileSize)+1);e.save(),this.drawBaseTiles(e,o,a,d,u,c,h,f,p,m,g),this.drawRoomDetails(e,o,a,n,d,u,c,h,f,p,m,g),this.drawLiftDetails(e,n,d,u),this.drawBooks(e,s,d,u,i),e.restore()}drawBaseTiles(e,t,i,o,a,s,n,r,l,c,h){e.save(),e.shadowColor="transparent";const d="#383838",u="#606060",m="#757575";for(let g=r;g<l;g++)for(let r=c;r<h;r++){const l=t[g]?.[r];if(void 0===l)continue;const c=Math.floor(r*this.tileSize+o),h=Math.floor(g*this.tileSize+a),f=this.getTileColor(g,r,l,i);if(e.fillStyle=f,e.fillRect(c,h,this.tileSize,this.tileSize),0===l){e.fillStyle="rgba(0,0,0,0.06)";for(let t=0;t<5;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1);const i=2;g>0&&0!==t[g-1]?.[r]&&(e.fillStyle=m,e.fillRect(c,h,this.tileSize,i)),g<n-1&&0!==t[g+1]?.[r]&&(e.fillStyle=d,e.fillRect(c,h+this.tileSize-i,this.tileSize,i)),r>0&&0!==t[g]?.[r-1]&&(e.fillStyle=u,e.fillRect(c,h+i,i,this.tileSize-i)),r<s-1&&0!==t[g]?.[r+1]&&(e.fillStyle=d,e.fillRect(c+this.tileSize-i,h+i,i,this.tileSize-i)),g>0&&r>0&&0!==t[g-1]?.[r]&&0!==t[g]?.[r-1]&&0!==t[g-1]?.[r-1]&&(e.fillStyle=u,e.fillRect(c,h,i,i)),g>0&&r<s-1&&0!==t[g-1]?.[r]&&0!==t[g]?.[r+1]&&0!==t[g-1]?.[r+1]&&(e.fillStyle=m,e.fillRect(c+this.tileSize-i,h,i,i))}else if(1===l){e.fillStyle="rgba(255,255,255,0.03)";for(let t=0;t<3;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1)}}e.restore()}drawRoomDetails(e,t,i,o,a,s,n,r,h,d,u,m){e.save(),e.shadowColor="transparent";for(const o of i){if(o.col+o.width<u||o.col>m||o.row+o.height<h||o.row>d)continue;const i=Math.floor(o.col*this.tileSize+a),n=Math.floor(o.row*this.tileSize+s),r=o.width*this.tileSize,g=o.height*this.tileSize;let f=this.baseRoomFloorColor;const p="number"==typeof this.floorNumber?this.floorNumber:0;let y=l(o.id)+100*p;switch(o.type){case"classroom":f=c("#a0c8e0",.9+l(y)%11/100);break;case"office":f=c("#f0e8c0",.9+l(y+1)%11/100);break;case"library":f=c("#d8c0a8",.9+l(y+2)%11/100);break;case"gym":f=c("#b0d0b0",.9+l(y+3)%11/100);break;case"lab":f=c("#e0e0ff",.9+l(y+4)%11/100);break;case"storage":f=c("#b0a090",.9+l(y+5)%11/100);break;case"utility":f=c("#b0b0b0",.9+l(y+6)%11/100)}for(let i=Math.max(o.row,h);i<Math.min(o.row+o.height,d);i++)for(let n=Math.max(o.col,u);n<Math.min(o.col+o.width,m);n++){const r=t[i]?.[n];if(2===r){const t=Math.floor(n*this.tileSize+a),r=Math.floor(i*this.tileSize+s),h=.98+(l(5e3*i+3*n+y)%11-5)/100;e.fillStyle=c(f,h),e.fillRect(t,r,this.tileSize,this.tileSize),"lab"===o.type&&(e.strokeStyle="rgba(0,0,0,0.08)",e.lineWidth=1,e.strokeRect(t+.5,r+.5,this.tileSize-1,this.tileSize-1))}}this.drawRoomDecorations(e,o,i,n,r,g)}e.restore()}drawLiftDetails(e,t,i,o){if(!t)return;const a=Math.floor(t.tileX*this.tileSize+i),s=Math.floor(t.tileY*this.tileSize+o);if(a+this.tileSize<0||a>e.canvas.width||s+this.tileSize<0||s>e.canvas.height)return;e.save(),e.shadowColor="transparent",e.strokeStyle="#d0d0d0",e.lineWidth=1,e.strokeRect(a+.5,s+.5,this.tileSize-1,this.tileSize-1),e.strokeStyle="#404040",e.strokeRect(a+1.5,s+1.5,this.tileSize-3,this.tileSize-3);const n=.15*this.tileSize,r=a+.8*this.tileSize,l=s+.5*this.tileSize;e.fillStyle="#444",e.beginPath(),e.arc(r,l,n,0,2*Math.PI),e.fill(),e.fillStyle="#ff4444",e.beginPath(),e.arc(r,l,.8*n,0,2*Math.PI),e.fill(),e.fillStyle="rgba(255, 255, 255, 0.5)",e.beginPath(),e.arc(r-.2*n,l-.2*n,.3*n,0,2*Math.PI),e.fill(),e.restore()}drawRoomDecorations(e,t,i,o,a,s){const n=this.tileSize,r=.2*n,l=.1*n;e.lineWidth=1,e.strokeStyle="#444";const c=(t,a,s,n,r,l=!0)=>{e.fillStyle=r;const c=Math.floor(i+t),h=Math.floor(o+a),d=Math.floor(s),u=Math.floor(n);e.fillRect(c,h,d,u),l&&e.strokeRect(c+.5,h+.5,d-1,u-1)},h=(t,a,s,n,r=!0)=>{e.fillStyle=n;const l=Math.floor(i+t),c=Math.floor(o+a);e.beginPath(),e.arc(l,c,Math.floor(s),0,2*Math.PI),e.fill(),r&&e.stroke()};switch(t.type){case"classroom":e.strokeStyle="#5d4037";const t=.6*n,d=.4*n,u=.25*n,m=1*n,g=.9*n;c(.25*a,r,.5*a,.2*n,"#333",!0),c(.25*a+2,r+2,.5*a-4,.2*n-4,"#4CAF50",!1);for(let e=0;;e++){const i=r+.5*n+e*g;if(i+d+u>s-r)break;for(let e=0;;e++){const o=r+e*m;if(o+t>a-r)break;c(o,i,t,d,"#8B4513"),c(o+.1*t,i+d+l,.8*t,u,"#6a4a3a")}}break;case"office":e.strokeStyle="#5d4037";const f=Math.min(.6*a,2.5*n),p=Math.min(.4*s,1.2*n);c(r,r,f,p,"#a0522d"),c(r+f+l,r+.1*p,.6*n,.6*n,"#444");const y=.8*n;c(a-r-y,r,y,s-2*r,"#6B4F41"),c(r+l,r+l,.5*n,.4*n,"#333"),c(r+l+.1*n,r+l+.4*n+2,.3*n,.1*n,"#555");break;case"library":e.strokeStyle="#402a10";const w=.6*n,M=1.5*n;for(let t=r;t<a-r-w;t+=M){c(t,r,w,s-2*r,"#654321"),e.strokeStyle="rgba(0,0,0,0.3)";for(let a=r+.5*n;a<s-r;a+=.7*n)e.beginPath(),e.moveTo(i+t,o+a),e.lineTo(i+t+w,o+a),e.stroke();e.strokeStyle="#402a10"}if(a>1.5*M){const e=w+r+(a-2*w-2*r-1.5*n)/2;e>w+r&&(c(e,.3*s,1.5*n,.4*s,"#966F33"),c(e+.2*n,.3*s-.3*n,.5*n,.25*n,"#6a4a3a"),c(e+.2*n,.3*s+.4*s+l,.5*n,.25*n,"#6a4a3a"))}break;case"gym":e.strokeStyle="#555",c(r,r,.4*a,.3*s,"#778899"),c(a-r-.3*a,s-r-.4*s,.3*a,.4*s,"#778899"),c(.6*a,r,.8*n,1.8*n,"#333"),c(.6*a+.1*n,r+.1*n,.6*n,1.6*n,"#555",!1),c(r,.5*s,1.5*n,.4*n,"#8B4513"),c(a-r-.5*n,r,.5*n,1.5*n,"#444"),h(a-r-.25*n,r+.3*n,.15*n,"#666"),h(a-r-.25*n,r+.7*n,.15*n,"#666"),h(a-r-.25*n,r+1.1*n,.15*n,"#666");break;case"lab":e.strokeStyle="#668";const S=.8*n;c(r,r,a-2*r,S,"#d0d0d8"),c(r,s-r-S,a-2*r,S,"#d0d0d8"),c(r+.2*n,r+.1*n,.5*n,.5*n,"#4a90e2"),c(r+1*n,r+.1*n,.3*n,.6*n,"#f5a623"),h(a-2*r-.4*n,r+.5*S,.2*n,"#e04040",!0),c(.4*a,r+S+l,n,s-2*r-2*S-2*l,"#a0a0b0");break;case"storage":e.strokeStyle="#4d4030";const b=a-2*r,v=.5*n;c(r,r,b,v,"#9e9e9e"),c(r,s-r-v,b,v,"#9e9e9e");const C=.6*n;c(r+.2*n,r+v+l,C,C,"#bf8f6f"),c(r+1*n,r+v+l,C,C,"#bf8f6f"),c(a-r-1.5*C,r+v+3*l,1.2*C,.8*C,"#bf8f6f"),c(a-r-n,s-r-n,.8*n,.8*n,"#6a4a3a");break;default:e.strokeStyle="#5d4037",c(.1*a,.15*s,.3*a,.25*s,"#A0522D"),c(.6*a,.5*s,.3*a,.4*s,"#A0522D"),c(a-r-.5*n,r,.5*n,s-2*r,"#777"),e.strokeStyle="#555",e.lineWidth=3,e.beginPath(),e.moveTo(i+r,o+.8*s),e.lineTo(i+a-r,o+.8*s),e.stroke(),e.beginPath(),e.moveTo(i+.7*a,o+r),e.lineTo(i+.7*a,o+s-r),e.stroke(),e.lineWidth=1}}drawBooks(e,t,i,o,a){if(!t||0===t.length)return;const s=.6*this.tileSize;for(const n of t)if(!n.isCollected&&!n.collected){const t=n.size||s,r=Math.floor(n.x+i-t/2),l=Math.floor(n.y+o-t/2);r+t>0&&r<e.canvas.width&&l+t>0&&l<e.canvas.height&&("function"==typeof n.draw?n.draw(e,i,o,a):a?e.drawImage(a,r,l,t,t):(e.fillStyle="#8d6e63",e.fillRect(r,l,t,t),e.strokeStyle="#5d4037",e.lineWidth=1,e.strokeRect(r+.5,l+.5,t-1,t-1)))}}}let d=null;const u={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,roomTypeWeights:{classroom:50,office:25,library:15,gym:0,utility:10}};function m(e,t,i,o,a){const{centerTileX:s,centerTileY:n}=t,{centerTileX:r,centerTileY:l}=i;Math.random()<.5?(g(e,n,s,r,o,a),f(e,r,n,l,o,a)):(f(e,s,n,l,o,a),g(e,l,s,r,o,a))}function g(e,t,i,o,a,s){if(t<0||t>=s)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(a-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[t]?.[i]&&(e[t][i]=1)}function f(e,t,i,o,a,s){if(t<0||t>=a)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(s-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[i]?.[t]&&(e[i][t]=1)}function p(e,t,i,o,a){console.log(`  [MapGen Connect] Trying to connect wall at tile(${t}, ${i}) to walkable area...`);const s=[[0,-1],[0,1],[-1,0],[1,0]];let n=!1,r=null;for(const[o,a]of s){const s=t+o,l=i+a,c=e[l]?.[s];if(1===c||2===c||3===c){n=!0,r={x:s,y:l};break}}if(n)return console.log(`  [MapGen Connect] Target(${t}, ${i}) is adjacent to walkable at (${r.x}, ${r.y}). Setting target to Corridor.`),e[i][t]=1,!0;console.log("  [MapGen Connect] Target not adjacent. Searching nearest walkable (Corridor/Floor) via BFS...");const l=[[t,i,0]],c=new Set([`${t},${i}`]),h=[0,1,2,3],d=[1,2];let u=null,m=1/0;for(;l.length>0;){const[t,i,n]=l.shift();if(!(n>=m))for(const[r,g]of s){const s=t+r,f=i+g,p=`${s},${f}`;if(s>=0&&s<o&&f>=0&&f<a&&!c.has(p)){const t=e[f]?.[s];c.add(p),d.includes(t)?n+1<m&&(m=n+1,u={x:s,y:f,dist:m},console.log(`    [BFS] Found potential target at (${s}, ${f}), dist ${m}`)):h.includes(t)&&n+1<m&&l.push([s,f,n+1])}}}return u?(console.log(`  [MapGen Connect] Found closest walkable at tile(${u.x}, ${u.y}) distance ${u.dist}. Carving path...`),g(e,i,t,u.x,o,a),f(e,u.x,i,u.y,o,a),console.log("  [MapGen Connect] Carved path attempt finished."),1===e[i][t]||2===e[i][t]?(console.log(`    [Verify] Target tile (${t},${i}) is now walkable (Type: ${e[i][t]})`),!0):(console.warn(`  [MapGen Connect] Carving done, but target tile(${t}, ${i}) is still WALL (Value: ${e[i][t]}). Setting manually.`),e[i][t]=1,!0)):(console.error(`  [MapGen Connect] FAILED to find ANY nearby walkable (Corridor/Floor) via BFS from wall at tile(${t}, ${i}). Cannot connect.`),!1)}function y(e,t,i,o){if(!t)return!1;const{tileX:a,tileY:s}=t;if(s<0||s>=o||a<0||a>=i||3!==e[s]?.[a])return console.error(`[MapValidation Reachability] Invalid lift position provided: (${a}, ${s})`),!1;const{reachable:n}=function(e,t,i,o,a,s){const n=[[t,i]],r=new Set([`${t},${i}`]),l=[[0,-1],[0,1],[-1,0],[1,0]];let c=!1;for(e[i];n.length>0;){const[t,i]=n.shift();for(const[h,d]of l){const l=t+h,u=i+d,m=`${l},${u}`;if(l>=0&&l<o&&u>=0&&u<a&&!r.has(m)){const t=e[u]?.[l];r.add(m),s.includes(t)&&(n.push([l,u]),1!==t&&2!==t||(c=!0))}}}return{reachable:c}}(e,a,s,i,o,[1,2,3]);return n||console.error(`[MapValidation Reachability] FAILED. Lift at tile(${a}, ${s}) is isolated from corridors/rooms.`),n}class w{constructor(e,t,i,o,a){this.tileSize=32,this.cols=40,this.rows=30,this.width=this.cols*this.tileSize,this.height=this.rows*this.tileSize,this.offsetX=0,this.offsetY=0,this.floorNumber=i,this.minFloor=o,this.maxFloor=a,this.map=null,this.rooms=[],this.books=[],this.liftPosition=null,this.renderer=new h(this.tileSize);const s={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,booksPerMap:5,roomTypeWeights:{classroom:50,office:25,library:15,lab:10,storage:5,utility:10}};try{const e={cols:this.cols,rows:this.rows,floorNumber:this.floorNumber,minFloor:this.minFloor,maxFloor:this.maxFloor,tileSize:this.tileSize,generationParams:s},{map:t,rooms:i,liftPosition:o}=function(e){const{cols:t,rows:i,floorNumber:o,minFloor:a,tileSize:s,generationParams:n}=e,l={...u,...n};l.roomTypeWeights.gym=o===a?60:0,o===a&&(d=null,console.log(`[MapGen Floor ${o}] Reset consistent lift coords for the first floor.`)),console.log(`[MapGen Floor ${o}] Starting map generation (${t}x${i})...`);const c=Array.from({length:i},(()=>Array(t).fill(0))),h=[];let g=null;!function(e,t,i,o,a){const{minRoomSize:s,maxRoomSize:n,numRooms:l,maxRoomAttempts:c,roomTypeWeights:h}=a;let d=0;const u=[];let m=0;for(const e in h){const t=h[e];if(t>0){m+=t;for(let i=0;i<t;i++)u.push(e)}}for(0===u.length&&(u.push("utility"),console.warn("[MapGen Rooms] No room type weights provided or all are zero. Defaulting to 'utility'."));t.length<l&&d<c;){d++;const a=r(s,n),l=r(s,n),c=r(1,i-a-1),h=r(1,o-l-1),m={col:c,row:h,width:a,height:l,type:u[r(0,u.length-1)],id:`room_${t.length+1}`,centerTileX:Math.floor(c+a/2),centerTileY:Math.floor(h+l/2),connected:!1};let g=!1;const f=2;for(const e of t)if(m.col<e.col+e.width+f&&m.col+m.width+f>e.col&&m.row<e.row+e.height+f&&m.row+m.height+f>e.row){g=!0;break}if(!g){t.push(m);for(let t=m.row;t<m.row+m.height;t++)for(let a=m.col;a<m.col+m.width;a++)t>=0&&t<o&&a>=0&&a<i&&(e[t][a]=2)}}t.length<l?console.warn(`[MapGen Rooms] Placed only ${t.length}/${l} rooms after ${d} attempts.`):console.log(`[MapGen Rooms] Placed ${t.length} rooms after ${d} attempts.`)}(c,h,t,i,l),h.length<2&&o!==a?console.warn(`[MapGen Floor ${o}] Placed only ${h.length} rooms. Expect limited connectivity.`):h.length>=2&&function(e,t,i,o){if(t.length<2)return;console.log(`[MapGen Connect] Connecting ${t.length} rooms (improved)...`);const a=new Set([t[0].id]);let s=t.slice(1);for(;s.length>0;){let n=1/0,r=null,l=null,c=-1;for(let e=0;e<s.length;e++){const i=s[e];for(const o of t)if(a.has(o.id)){const t=i.centerTileX-o.centerTileX,a=i.centerTileY-o.centerTileY,s=t*t+a*a;s<n&&(n=s,r=i,l=o.id,c=e)}}if(!r||null===l){console.error("[MapGen Connect] Could not find next pair of rooms to connect. Breaking loop. Remaining unconnected:",s.map((e=>e.id)));break}{const n=t.find((e=>e.id===l));if(!n){console.error(`[MapGen Connect] Error: Could not find connected room with ID ${l}. Skipping connection.`),s.splice(c,1);continue}m(e,n,r,i,o),a.add(r.id),s.splice(c,1)}}console.log(`[MapGen Connect] Finished connecting rooms. Connected count: ${a.size}`)}(c,h,t,i);try{const e=function(e,t,i,o,a,s,n){let r=n,l=null;if(o!==a||r){if(!r&&o>a)throw new Error(`[MapGen Lift] Missing consistent coordinates for floor ${o}.`)}else console.log(`[MapGen Floor ${o}] Finding initial lift placement location...`),r=function(e,t,i){const o=Math.floor(t/2),a=Math.floor(i/2);let s=null,n=1/0;const r=Math.max(o,a);console.log(`  [MapGen FindLift] Searching for lift spot, max radius ${r}...`);for(let l=0;l<=r;l++){for(let r=-l;r<=l;r++)for(let c=-l;c<=l;c++){if(l>0&&Math.abs(c)<l&&Math.abs(r)<l)continue;const h=o+c,d=a+r;if(d>=1&&d<i-1&&h>=1&&h<t-1){const t=e[d][h];if(1===t||2===t){let t=!1;const i=[[0,-1],[0,1],[-1,0],[1,0]];for(const[o,a]of i){const i=h+o,s=d+a,n=e[s]?.[i];if(1===n||2===n||3===n){t=!0;break}}if(t){const e=c*c+r*r;e<n&&(n=e,s={tileX:h,tileY:d})}}}}if(s)return console.log(`  [MapGen FindLift] Selected best spot at tile(${s.tileX}, ${s.tileY}) radius ${l}.`),s}return console.warn("[MapGen FindLift] No suitable CORRIDOR or ROOM_FLOOR location found near center."),null}(e,t,i),r||(console.warn(`[MapGen Floor ${o}] No ideal lift location found. Forcing placement near center.`),r={tileX:Math.floor(t/2),tileY:Math.floor(i/2)}),console.log(`[MapGen Floor ${o}] Established consistent lift coords at tile(${r.tileX}, ${r.tileY})`),l=r;const{tileX:c,tileY:h}=r;if(h<0||h>=i||c<0||c>=t)throw new Error(`[MapGen Lift] Coords (${c}, ${h}) are outside map bounds on floor ${o}.`);0===e[h][c]?(console.warn(`[MapGen Floor ${o}] Lift location tile(${c}, ${h}) is a wall. Forcing connection...`),p(e,c,h,t,i)?(console.log("  [MapGen Lift Connect] Connection attempt finished for wall at lift location."),0===e[h][c]&&(console.warn(`  [MapGen Lift Connect] Force connection completed, but target tile (${c},${h}) remained WALL. Setting to CORRIDOR.`),e[h][c]=1)):console.error(`[MapGen Lift Connect] FAILED to connect wall at lift location tile(${c}, ${h}). Lift might be isolated.`)):console.log(`  [MapGen Lift] Lift location tile(${c}, ${h}) is already walkable (Type: ${e[h][c]}).`),e[h][c]=3;const d={x:(c+.5)*s,y:(h+.5)*s,tileX:c,tileY:h};return console.log(`[MapGen Floor ${o}] Placed/Confirmed lift at tile(${c}, ${h}). World: (${d.x.toFixed(1)}, ${d.y.toFixed(1)})`),{position:d,coords:l||r}}(c,t,i,o,a,s,d);g=e.position,e.coords&&(d=e.coords)}catch(e){throw console.error(`[MapGen Floor ${o}] CRITICAL: Lift placement failed:`,e),new Error(`Lift placement failed on floor ${o}: ${e.message}`)}if(function(e,t,i){console.log("  [MapGen] Ensuring map borders are walls.");for(let o=0;o<t;o++)void 0!==e[0]?.[o]&&(e[0][o]=0),void 0!==e[i-1]?.[o]&&(e[i-1][o]=0);for(let o=0;o<i;o++)void 0!==e[o]?.[0]&&(e[o][0]=0),void 0!==e[o]?.[t-1]&&(e[o][t-1]=0)}(c,t,i),g&&!y(c,g,t,i)){if(console.warn(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) initially unreachable. Attempting final force connection.`),!p(c,g.tileX,g.tileY,t,i)||!y(c,g,t,i)){const e=`CRITICAL: Placed lift at tile(${g.tileX}, ${g.tileY}) is UNREACHABLE even after force connect! Generation failed.`;throw console.error(`[MapGen Floor ${o}] ${e}`),new Error(`Lift is unreachable on floor ${o}. Cannot proceed.`)}console.log(`[MapValidation Floor ${o}] Lift connection successful after second attempt.`)}else{if(!g)throw new Error(`Map generated without a valid lift position on floor ${o}.`);console.log(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) is reachable.`)}return console.log(`[MapGen Floor ${o}] Map generation completed successfully.`),{map:c,rooms:h,liftPosition:g}}(e);this.map=t,this.rooms=i,this.liftPosition=o,this.renderer.resetColorCache(),this.placeBooksReliably(s.booksPerMap),console.log(`[ProcMap Piętro ${this.floorNumber}] Inicjalizacja zakończona. ${this.rooms.length} pokoi, Winda: ${this.liftPosition?`OK w (${this.liftPosition.tileX}, ${this.liftPosition.tileY})`:"BŁĄD"}, ${this.books.length} książek.`)}catch(e){throw console.error(`[ProcMap Piętro ${this.floorNumber}] BŁĄD KRYTYCZNY podczas generowania mapy lub konfiguracji:`,e),e}}placeBooksReliably(e){this.books=[];const t=[],i=new Set;console.log(`[ProcMap Piętro ${this.floorNumber}] Umieszczanie do ${e} książek...`);for(let e=0;e<this.rows;e++)for(let i=0;i<this.cols;i++){const o=this.map[e]?.[i],a=this.liftPosition&&e===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||t.push({r:e,c:i})}let o=0;for(;o<e&&t.length>0;){const e=Math.floor(Math.random()*t.length),{r:s,c:n}=t.splice(e,1)[0],r=`${n},${s}`;if((1===this.map[s]?.[n]||2===this.map[s]?.[n])&&!i.has(r)){const e=(n+.5)*this.tileSize,t=(s+.5)*this.tileSize,l=`book_${this.floorNumber}_${o+1}`;this.books.push(new a(e,t,l,this.tileSize)),i.add(r),o++}}o<e?console.warn(`[ProcMap Książki] Umieszczono tylko ${o}/${e} książek.`):console.log(`[ProcMap Książki] Umieszczono ${o} książek.`)}isWalkable(e,t){if(!this.map)return!1;const i=Math.floor(e/this.tileSize),o=Math.floor(t/this.tileSize);if(i<0||i>=this.cols||o<0||o>=this.rows)return!1;const a=this.map[o]?.[i];return 1===a||2===a||3===a}findRandomInitialSpawnPosition(){if(!this.map)return;const e=[];for(let t=1;t<this.rows-1;t++)for(let i=1;i<this.cols-1;i++){const o=this.map[t]?.[i],a=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||0!==this.map[t-1]?.[i]&&0!==this.map[t+1]?.[i]&&0!==this.map[t]?.[i-1]&&0!==this.map[t]?.[i+1]&&e.push({r:t,c:i})}if(0===e.length){console.warn("[MapGen Spawn] Nie znaleziono 'otwartych' punktów startowych, używam dowolnego przechodniego kafelka nie będącego windą.");for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++){const o=this.map[t]?.[i],a=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||e.push({r:t,c:i})}}if(0===e.length)return void console.error("[MapGen Spawn] KRYTYCZNY: Nie znaleziono odpowiednich kafelków startowych (podłoga/korytarz niebędący windą)!");const{r:t,c:i}=e[Math.floor(Math.random()*e.length)],o=(i+.5)*this.tileSize,a=(t+.5)*this.tileSize;return console.log(`[MapGen Spawn] Znaleziono początkowy spawn na kratce(${i}, ${t})`),{x:o,y:a}}findNearestWalkableTile(e,t,i=8,o=!1){if(!this.map)return null;const a=Math.floor(e/this.tileSize),s=Math.floor(t/this.tileSize);console.log(`[MapUtil] Szukanie najbliższej BEZPIECZNEJ kratki (excludeLift=${o}) blisko świata(${e.toFixed(1)}, ${t.toFixed(1)}) -> kratka(${a}, ${s})`);const n=[1,2],r=this.map[s]?.[a];if(n.includes(r)&&(!o||3!==r))return console.log(`  [MapUtil] Kratka docelowa (${a}, ${s}) jest już bezpieczna.`),{x:(a+.5)*this.tileSize,y:(s+.5)*this.tileSize};for(let e=1;e<=i;e++)for(let t=-e;t<=e;t++)for(let i=-e;i<=e;i++){if(Math.abs(i)<e&&Math.abs(t)<e)continue;const o=a+i,n=s+t;if(o<0||o>=this.cols||n<0||n>=this.rows)continue;const r=this.map[n]?.[o];if(1===r||2===r)return console.log(`  [MapUtil] Znaleziono bezpieczną kratkę przez wyszukiwanie promieniowe na kratce(${o}, ${n})`),{x:(o+.5)*this.tileSize,y:(n+.5)*this.tileSize}}console.warn(`[MapUtil] Wyszukiwanie promieniowe nie powiodło się (maxPromień ${i}). Rozpoczynam BFS od kratki(${a}, ${s})...`);const l=[[a,s]],c=new Set([`${a},${s}`]),h=[[0,-1],[0,1],[-1,0],[1,0]],d=[1,2,3];for(;l.length>0;){const[e,t]=l.shift();for(const[i,a]of h){const s=e+i,r=t+a,h=`${s},${r}`;if(s>=0&&s<this.cols&&r>=0&&r<this.rows&&!c.has(h)){const e=this.map[r]?.[s];if(c.add(h),n.includes(e)&&(!o||3!==e))return console.log(`  [MapUtil] Znaleziono bezpieczną kratkę przez BFS na (${s}, ${r})`),{x:(s+.5)*this.tileSize,y:(r+.5)*this.tileSize};d.includes(e)&&l.push([s,r])}}}return console.error(`[MapUtil] KRYTYCZNA PORAŻKA: BFS nie mógł znaleźć ŻADNEJ bezpiecznej przechodniej kratki (Korytarz/Podłoga Pokoju, excludeLift=${o}) zaczynając od kratki(${a}, ${s})!`),null}findNearbyUnansweredBook(e,t,i=.8*this.tileSize){if(!this.books)return null;let o=null,a=i*i;for(const i of this.books)if(!i.isCollected&&!i.collected){const s=i.x-e,n=i.y-t,r=s*s+n*n;r<a&&(a=r,o=i)}return o}markBookAsCollected(e){if(!e||!this.books)return!1;const t=this.books.find((t=>t===e||t.id===e.id));return!(!t||t.isCollected||t.collected||(t.isCollected=!0,t.collected=!0,console.log(`[Map] Oznaczono książkę ${t.id} jako zebraną.`),0))}findNearbyLift(e,t,i=.7*this.tileSize){if(!this.liftPosition)return null;const o=e-this.liftPosition.x,a=t-this.liftPosition.y;return o*o+a*a<i*i?this.liftPosition:null}getLiftPosition(){return this.liftPosition}draw(e,t=null){if(!this.map||!this.renderer)return;const i={map:this.map,rooms:this.rooms,books:this.books,liftPosition:this.liftPosition,offsetX:this.offsetX,offsetY:this.offsetY,cols:this.cols,rows:this.rows,tileSize:this.tileSize};this.renderer.draw(e,i,t)}logMapGrid(){if(!this.map)return void console.log("Siatka mapy niedostępna.");console.log(`--- Siatka Mapy Piętro ${this.floorNumber} (${this.cols}x${this.rows}) ---`);let e="   ";for(let t=0;t<this.cols;t++)e+=t%10==0?Math.floor(t/10):" ";console.log(e),e="   ";for(let t=0;t<this.cols;t++)e+=t%10;console.log(e);for(let e=0;e<this.rows;e++){const t=e.toString().padStart(2," "),i=this.map[e].map((e=>{switch(e){case 0:return"#";case 1:return".";case 2:return" ";case 3:return"L";default:return"?"}})).join("");console.log(`${t} ${i}`)}this.liftPosition?console.log(`Winda na kratce: (${this.liftPosition.tileX}, ${this.liftPosition.tileY})`):console.log("Pozycja windy nie ustawiona."),console.log(`--- Koniec Siatki Mapy Piętro ${this.floorNumber} ---`)}}class M{constructor(e=1,t=3){e>=t?(console.warn(`Level constructor: minFloor (${e}) must be less than maxFloor (${t}). Using defaults 1 and 3.`),this.minFloor=1,this.maxFloor=3):(this.minFloor=e,this.maxFloor=t),this.currentFloor=this.minFloor,this.currentMap=null,this.tileSize=32}async loadFloor(e,t,i){if(e<this.minFloor||e>this.maxFloor){const t=`Attempted to load invalid floor: ${e}. Allowed range: [${this.minFloor}-${this.maxFloor}]`;throw console.error(`[Level] ${t}`),new Error(t)}console.log(`[Level] Loading floor ${e}...`),this.currentFloor=e;try{if(this.currentMap=new w(t,i,this.currentFloor,this.minFloor,this.maxFloor),!(this.currentMap.tileSize&&this.currentMap.map&&this.currentMap.books&&this.currentMap.getLiftPosition()))throw new Error("[Level] ProceduralMap instance is missing essential properties after creation (tileSize, map, books, or liftPosition).");this.tileSize=this.currentMap.tileSize;const o=this.currentMap.getLiftPosition();console.log(`  [Level] Map generated for floor ${this.currentFloor}. TileSize: ${this.tileSize}. Lift at tile(${o.tileX}, ${o.tileY}).`),console.log(`[Level] Floor ${e} loaded successfully. Map size: ${this.currentMap.cols}x${this.currentMap.rows}. ${this.currentMap.books.length} books placed.`)}catch(t){throw console.error(`[Level] CRITICAL FAILURE loading floor ${e}: Failed to create or validate ProceduralMap:`,t),this.currentMap=null,new Error(`Map generation/validation failed for floor ${e}. ${t.message||t}`)}return Promise.resolve()}getCurrentBooks(){return this.currentMap?this.currentMap.books:[]}}class S{constructor(e){this.game=e,this.canvas=null,this.ctx=null}initializeCanvas(){if(this.canvas=document.getElementById("game-canvas"),!this.canvas)throw new Error("[Renderer] Canvas 'game-canvas' not found!");if(this.ctx=this.canvas.getContext("2d"),!this.ctx)throw new Error("[Renderer] Failed to get 2D context.");return this.ctx.imageSmoothingEnabled=!1,this.resizeCanvas(),console.log("[Renderer] Canvas initialized."),{canvas:this.canvas,ctx:this.ctx}}resizeCanvas(){this.canvas&&(this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.game.character&&this.game.level?.currentMap&&this.centerCameraOnCharacter(),console.log(`[Renderer] Canvas resized to ${this.canvas.width}x${this.canvas.height}`))}centerCameraOnCharacter(){const{character:e,level:t,canvas:i}=this.game;e&&t?.currentMap&&i&&(t.currentMap.offsetX=Math.floor(i.width/2-e.x),t.currentMap.offsetY=Math.floor(i.height/2-e.y))}drawFrame(){if(!this.ctx||!this.canvas)return;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const e=this.game.level?.currentMap,t=this.game.character;e&&e.draw(this.ctx,this.game.bookImage),t&&e&&t.draw(e.offsetX,e.offsetY)}drawWinScreen(){this.ctx&&this.canvas&&(this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle="lime",this.ctx.font='clamp(32px, 8vw, 48px) "Press Start 2P", cursive, Arial, sans-serif',this.ctx.fillText("ZWYCIĘSTWO!",this.canvas.width/2,this.canvas.height/2-80),this.ctx.fillStyle="white",this.ctx.font="clamp(24px, 5vw, 32px) Arial, sans-serif",this.ctx.fillText(`Zebrano wszystkie ${this.game.targetBooksToWin} książki!`,this.canvas.width/2,this.canvas.height/2),this.ctx.font="clamp(18px, 4vw, 24px) Arial, sans-serif",this.ctx.fillText("Uniwersytet uratowany!",this.canvas.width/2,this.canvas.height/2+60),this.ctx.font="clamp(14px, 3vw, 18px) Arial, sans-serif",this.ctx.fillStyle="#ccc",this.ctx.fillText("(Odśwież stronę, aby zagrać ponownie)",this.canvas.width/2,this.canvas.height-50))}}class b{constructor(e){this.game=e,this.handleAnswer=this.handleAnswer.bind(this),this.handleFloorSelection=this.handleFloorSelection.bind(this)}update(e){this.game.gameState===s.PLAYING&&this.updatePlayingState(e)}updatePlayingState(e){const t=this.game.character;if(!this.game.level?.currentMap||!t||!this.game.inputManager)return;const{moved:i}=this.handleMovement();t&&"function"==typeof t.updateAnimation&&t.updateAnimation(e),i||this.game.gameState!==s.PLAYING||this.handleInteractions()}handleMovement(){const e=this.game.character,t=this.game.level.currentMap,i=this.game.inputManager;if(!e||!t||!i)return{moved:!1};const a=i.getInputDirection();let s=a.x*e.speed,n=a.y*e.speed,r=0,l=0,c=!1;if(0!==s||0!==n){const t=0!==s&&!this.checkCollision(e.x+s,e.y),i=0!==n&&!this.checkCollision(e.x,e.y+n);t&&(r=s),i&&(l=n),0!==s&&0!==n&&this.checkCollision(e.x+s,e.y+n)&&(t?l=0:i?r=0:(r=0,l=0)),0===r&&0===l||(e.x+=r,e.y+=l,c=!0,Math.abs(r)>=Math.abs(l)?0!==r&&(e.currentDirection=r>0?o.Direction.RIGHT:o.Direction.LEFT):0!==l&&(e.currentDirection=l>0?o.Direction.DOWN:o.Direction.UP))}return e.isMoving=c,{moved:c}}checkCollision(e,t){const i=this.game.level?.currentMap,o=this.game.character;if(!i||!o)return!0;const a=o.getCollisionBox(e,t),s=[{x:a.left,y:a.top},{x:a.right,y:a.top},{x:a.left,y:a.bottom},{x:a.right,y:a.bottom},{x:e,y:a.bottom},{x:e,y:a.top},{x:a.left,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio},{x:a.right,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio}];for(const e of s)if(!i.isWalkable(e.x,e.y))return!0;return!1}handleInteractions(){const e=this.game.level?.currentMap,t=this.game.character;if(!e||!t||this.game.gameState!==s.PLAYING)return;const i=e.findNearbyUnansweredBook(t.x,t.y);i?this.initiateQuestion(i):this.game.liftCooldownActive||e.findNearbyLift(t.x,t.y)&&this.initiateFloorSelection()}initiateQuestion(e){if(this.game.gameState!==s.PLAYING)return;if(this.game.setGameState(s.ASKING_QUESTION),this.game.character&&(this.game.character.isMoving=!1),this.game.currentBookTarget=e,0===this.game.availableQuestions.length&&(this.game.availableQuestions=[...n],0===this.game.availableQuestions.length))return i.flashMessage("Błąd: Brak dostępnych pytań!","error"),this.game.setGameState(s.PLAYING),void(this.game.currentBookTarget=null);const t=Math.floor(Math.random()*this.game.availableQuestions.length);this.game.currentQuestionData=this.game.availableQuestions.splice(t,1)[0],i.showQuestion(this.game.currentQuestionData)}handleAnswer(e){const{gameState:t,currentQuestionData:o,currentBookTarget:a,level:n}=this.game;if(t!==s.ASKING_QUESTION||!o||!a)return i.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,void(this.game.gameState!==s.GAME_OVER&&this.game.setGameState(s.PLAYING));if(e===o.correctAnswer){i.flashMessage("Prawidłowo!","success",1500);const e=n?.currentMap?.markBookAsCollected(a);if(e){if(this.game.totalBooksCollectedGlobally++,i.updateScore(this.game.totalBooksCollectedGlobally,this.game.targetBooksToWin),this.game.totalBooksCollectedGlobally>=this.game.targetBooksToWin)return i.hideQuestion(),void this.game._setGameOver(!0)}else i.flashMessage("Błąd zbierania książki!","error")}else i.flashMessage("Nieprawidłowa odpowiedź!","error"),this.game.availableQuestions.push(o);i.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,this.game.gameState!==s.GAME_OVER&&this.game.setGameState(s.PLAYING)}initiateFloorSelection(){this.game.gameState!==s.PLAYING||this.game.liftCooldownActive||(this.game.setGameState(s.SELECTING_FLOOR),this.game.character&&(this.game.character.isMoving=!1),i.showFloorSelectionUI(this.game.level.minFloor,this.game.level.maxFloor,this.game.level.currentFloor))}handleFloorSelection(e){this.game.gameState===s.SELECTING_FLOOR?(i.hideFloorSelectionUI(),e===this.game.level.currentFloor||e<this.game.level.minFloor||e>this.game.level.maxFloor?this.game.setGameState(s.PLAYING):this.handleLiftTransition(e).catch((e=>{this.game._handleFatalError(`Błąd przejścia na piętro: ${e.message}`)}))):i.hideFloorSelectionUI()}async handleLiftTransition(e){const t=this.game;if(t.gameState!==s.SELECTING_FLOOR||t.liftCooldownActive)t.gameState!==s.GAME_OVER&&t.gameState!==s.PLAYING&&t.gameState!==s.TRANSITIONING&&t.setGameState(s.PLAYING);else{t.setGameState(s.TRANSITIONING),t.character&&(t.character.isMoving=!1),i.hideQuestion(),i.hideFloorSelectionUI(),t.liftCooldownActive=!0,i.flashMessage(`Przejście na piętro ${e}...`,"info",1800);try{await t.level.loadFloor(e,t.canvas.width,t.canvas.height);const i=t.level.currentMap;if(!i)throw new Error(`Nie udało się załadować mapy dla piętra ${e}. Obiekt mapy jest null.`);const a=i.getLiftPosition();if(!a)throw new Error(`Brak pozycji windy na załadowanym piętrze ${e}!`);const s=i.findNearestWalkableTile(a.x,a.y,3,!0);if(s)t.character.x=s.x,t.character.y=s.y,console.log(`[LiftTransition] Lądowanie obok windy w: (${t.character.x.toFixed(1)}, ${t.character.y.toFixed(1)})`);else{console.warn(`[LiftTransition] Nie znaleziono bezpiecznego miejsca obok windy na (${a.tileX}, ${a.tileY}). Szukam losowego...`);const o=i.findRandomInitialSpawnPosition();if(!o)throw new Error(`Nie można znaleźć ŻADNEGO bezpiecznego miejsca do lądowania na piętrze ${e}!`);t.character.x=o.x,t.character.y=o.y,console.log(`[LiftTransition] Awaryjne lądowanie w losowym miejscu: (${t.character.x.toFixed(1)}, ${t.character.y.toFixed(1)})`)}t.character.currentDirection=o.Direction.DOWN,t.character.isMoving=!1,t.renderer?.centerCameraOnCharacter(),t.startLiftCooldownTimer()}catch(i){console.error(`[LiftTransition] Błąd podczas przejścia na piętro ${e}:`,i),t.liftCooldownActive=!1,t.gameState!==s.GAME_OVER&&t.setGameState(s.PLAYING),t._handleFatalError(`Krytyczny błąd podczas przejścia na piętro ${e}: ${i.message||i}`)}}}ensureCharacterIsOnWalkableTile(e=!1){const t=this.game.character,i=this.game.level?.currentMap;if(!t||!i)return;const o=Math.floor(t.x/i.tileSize),a=Math.floor(t.y/i.tileSize),s=o>=0&&o<i.cols&&a>=0&&a<i.rows?i.map[a]?.[o]:0;let n=i.isWalkable(t.x,t.y)&&(!(3===s)||e);const r=this.checkCollision(t.x,t.y);if(r||!n){console.warn(`[AntiStuck] Postać w świecie(${t.x.toFixed(1)}, ${t.y.toFixed(1)}) / kratce(${o}, ${a}) utknęła (kolizja: ${r}, isSafeToStand: ${n}, tileValue: ${s}, allowLift: ${e}). Próba wypchnięcia.`);const l=i.findNearestWalkableTile(t.x,t.y,8,!0);if(l)console.log(`[AntiStuck] Wypychamy postać do bezpiecznego miejsca: świat(${l.x.toFixed(1)}, ${l.y.toFixed(1)})`),t.x=l.x,t.y=l.y,this.game.renderer?.centerCameraOnCharacter();else{console.error(`[AntiStuck] BŁĄD KRYTYCZNY: Nie udało się znaleźć bezpiecznego przechodniego miejsca (korytarz/pokój) w pobliżu kratki (${o}, ${a})! Postać może pozostać w teksturze.`);const e=i.findRandomInitialSpawnPosition();e?(console.warn(`[AntiStuck] Wyjście awaryjne: Przenosimy na LOSOWĄ bezpieczną kratkę świat(${e.x.toFixed(1)}, ${e.y.toFixed(1)})`),t.x=e.x,t.y=e.y,this.game.renderer?.centerCameraOnCharacter()):(console.error("[AntiStuck] W ogóle nie znaleziono bezpiecznych kratek! Gra może być zepsuta."),this.game._handleFatalError("Błąd krytyczny: Nie można znaleźć bezpiecznego miejsca dla postaci!"))}}}}const v=e.p+"assets/images/character_rede709519cf9b780c45fdb.png",C=e.p+"assets/images/character_bluece4c2defaf23e82f5910.png",z=e.p+"assets/images/character_yellow668dedc80c468984f233.png",k=e.p+"assets/images/character_green668dedc80c468984f233.png",$=e.p+"assets/images/booka54431ef16a38389c12e.png";class L{constructor(e){console.log(`[Game] Initializing with character: ${e}`),this.characterColor=e,this._gameState=s.LOADING,this.isRunning=!1,this.totalBooksCollectedGlobally=0,this.targetBooksToWin=15,this.availableQuestions=[],this.currentBookTarget=null,this.currentQuestionData=null,this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.canvas=null,this.ctx=null,this.character=null,this.level=null,this.inputManager=null,this.renderer=null,this.gameplayManager=null,this.sprites={red:v,blue:C,yellow:z,green:k},this.bookImage=null,this.gameLoop=this.gameLoop.bind(this),this._handleFatalError=this._handleFatalError.bind(this),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null;try{this._initializeCoreComponents(),this.gameplayManager=new b(this),console.log("[Game] GameplayManager created."),this.renderer=new S(this);const{canvas:e,ctx:t}=this.renderer.initializeCanvas();this.canvas=e,this.ctx=t,console.log("[Game] Renderer and Canvas initialized."),this._initializeUIManager(),console.log("[Game] UIManager setup initiated."),this._addEventListeners(),this._loadAssetsAndThenStartLogic().then((()=>{console.log("[Game] Async loading and game logic start sequence completed.")})).catch((e=>{console.error("[Game] Unhandled error from _loadAssetsAndThenStartLogic in constructor:",e);const t=document.querySelector(".loading-overlay");t&&t.classList.remove("visible")}))}catch(e){console.error("[Game] Synchronous core initialization failed:",e),alert(`Critical initialization error: ${e.message}. Game cannot start.`),this._handleFatalError(`Initialization error: ${e.message}`,!1)}}get gameState(){return this._gameState}setGameState(e){this._gameState!==e&&(console.log(`[Game State] ${this._gameState} -> ${e}`),this._gameState=e)}_initializeCoreComponents(){this.inputManager=new t,this.level=new M(1,3)}_initializeUIManager(){if(!this.gameplayManager)throw new Error("[Game] GameplayManager is NOT defined when _initializeUIManager is called!");if(!this.inputManager)throw new Error("[Game] InputManager is NOT defined when _initializeUIManager is called!");i.setGameplayManager(this.gameplayManager),i.initializeUI(this.inputManager)}_addEventListeners(){window.addEventListener("resize",(()=>this.renderer?.resizeCanvas()))}async _loadAssetsAndThenStartLogic(){const e=document.querySelector(".loading-overlay");try{this.setGameState(s.LOADING),await this._loadAssets(),await this._startGameLogic(),e&&e.classList.remove("visible")}catch(t){throw console.error("[Game] Asset loading or game logic start failed:",t),e&&e.classList.remove("visible"),this._handleFatalError(`Asset/Start Logic Error: ${t.message}`),t}}async _loadAssets(){console.log("[Game] Loading assets...");const e=[],t=this.sprites[this.characterColor]||this.sprites.red;if(!this.ctx)throw new Error("Canvas context not available for Character creation.");this.character=new o(this.ctx,t,{speed:3,frameSize:32,scale:2,animationSpeed:150,frameCount:4}),e.push(new Promise(((e,i)=>{this.character.sprite.onload=()=>{console.log(`  [Assets] Character sprite loaded: ${t}`),e()},this.character.sprite.onerror=e=>i(new Error(`Failed to load character sprite: ${t}. Details: ${e}`))}))),$?(this.bookImage=new Image,this.bookImage.src=$,e.push(new Promise((e=>{this.bookImage.onload=()=>{console.log(`  [Assets] Book image loaded: ${$}`),e()},this.bookImage.onerror=()=>{console.warn(` [Assets] Failed to load book image: ${$}. Using fallback rendering.`),this.bookImage=null,e()}})))):(console.warn("[Assets] No book sprite path provided. Book will use fallback rendering."),this.bookImage=null),await Promise.all(e),console.log("[Game] All assets loaded successfully.")}async _startGameLogic(){if(console.log("[Game] Starting core game logic..."),!(this.level&&this.character&&this.canvas&&this.renderer&&this.gameplayManager))throw new Error("Cannot start game - essential components are missing.");this.setGameState(s.LOADING_LEVEL);try{await this.level.loadFloor(this.level.minFloor,this.canvas.width,this.canvas.height);const e=this.level.currentMap;if(!e)throw new Error("Failed to load initial map. Map object is null.");const t=e.findRandomInitialSpawnPosition();if(!t)throw new Error("Failed to find a valid starting position on the map!");this.character.x=t.x,this.character.y=t.y,this.character.currentDirection=o.Direction.DOWN,this.character.isMoving=!1,this.gameplayManager.ensureCharacterIsOnWalkableTile(!1),this.totalBooksCollectedGlobally=0,this.availableQuestions=[...n],this.liftCooldownActive=!1,clearTimeout(this.liftCooldownTimer),this.liftCooldownTimer=null,this.currentBookTarget=null,this.currentQuestionData=null,this.renderer.centerCameraOnCharacter(),i.updateScore(this.totalBooksCollectedGlobally,this.targetBooksToWin),i.showGameUI(),this._boundKeyDownHandler=this.handleKeyDown.bind(this),this._boundKeyUpHandler=this.handleKeyUp.bind(this),window.addEventListener("keydown",this._boundKeyDownHandler),window.addEventListener("keyup",this._boundKeyUpHandler),this.setGameState(s.PLAYING),this.isRunning||(this.isRunning=!0,requestAnimationFrame(this.gameLoop),console.log("[Game] Game logic started. Loop is running."))}catch(e){throw console.error("[Game] Error during _startGameLogic:",e),this._handleFatalError(`Level start process error: ${e.message}`),e}}_setGameOver(e=!0){if(this.gameState!==s.GAME_OVER){if(this.setGameState(s.GAME_OVER),this.isRunning=!1,this.character&&(this.character.isMoving=!1),clearTimeout(this.liftCooldownTimer),this._boundKeyDownHandler&&window.removeEventListener("keydown",this._boundKeyDownHandler),this._boundKeyUpHandler&&window.removeEventListener("keyup",this._boundKeyUpHandler),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null,i.hideGameUI(),i.hideQuestion(),i.hideFloorSelectionUI(),e)requestAnimationFrame((()=>this.renderer?.drawWinScreen()));else{const e=document.getElementById("menu-container");e&&e.classList.remove("hidden")}console.log(`[Game] Game Over. Win: ${e}`)}}stopGame(){console.log("[Game] Explicit stopGame requested."),this._setGameOver(!1),console.log("[Game] Game stopped.")}_handleFatalError(e,t=!0){console.error("[Game] FATAL ERROR:",e),t&&this.gameState!==s.GAME_OVER&&(i.flashMessageContainer&&i.flashMessage?i.flashMessage(`FATAL ERROR: ${e}`,"error",15e3):alert(`FATAL ERROR: ${e}`)),this._setGameOver(!1)}handleKeyDown(e){if(this.gameState!==s.PLAYING||!this.inputManager)return;let t=!1;const i=e.key.toLowerCase();["arrowup","w"].includes(i)?(this.inputManager.setKey("up",!0),t=!0):["arrowdown","s"].includes(i)?(this.inputManager.setKey("down",!0),t=!0):["arrowleft","a"].includes(i)?(this.inputManager.setKey("left",!0),t=!0):["arrowright","d"].includes(i)&&(this.inputManager.setKey("right",!0),t=!0),t&&e.preventDefault()}handleKeyUp(e){if(!this.inputManager)return;const t=e.key.toLowerCase();["arrowup","w"].includes(t)?this.inputManager.setKey("up",!1):["arrowdown","s"].includes(t)?this.inputManager.setKey("down",!1):["arrowleft","a"].includes(t)?this.inputManager.setKey("left",!1):["arrowright","d"].includes(t)&&this.inputManager.setKey("right",!1)}gameLoop(e){this.isRunning&&this.gameState!==s.GAME_OVER&&(this.gameplayManager?.update(e),this.renderer?.centerCameraOnCharacter(),this.renderer?.drawFrame(),requestAnimationFrame(this.gameLoop))}startLiftCooldownTimer(){clearTimeout(this.liftCooldownTimer),console.log("[Game] Starting lift cooldown timer: 2000ms."),this.liftCooldownTimer=setTimeout((()=>{this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.gameState===s.TRANSITIONING?(this.setGameState(s.PLAYING),i.flashMessage(`Arrived at floor ${this.level?.currentFloor}`,"success",1500)):console.warn(`[GameTimer] Lift cooldown ended, but game state is ${this.gameState}. No state change applied.`)}),2e3)}}let I=null;class x{constructor(){this.selectedCharacter=null,this.userInteracted=!1,console.log("[Menu] Constructor called. Initializing elements..."),this.initializeElements(),console.log("[Menu] Adding event listeners..."),this.addEventListeners(),console.log("[Menu] Instance created.")}initializeElements(){this.menuContainer=document.querySelector(".menu-container"),this.menuContainer||console.error("[Menu] CRITICAL: .menu-container not found!"),this.settingsButton=document.querySelector(".settings-button"),this.playButton=document.querySelector(".play-button"),this.characterButton=document.querySelector(".character-button"),this.playButton||console.warn("[Menu] .play-button not found."),this.characterButton||console.warn("[Menu] .character-button not found."),this.settingsPanel=document.querySelector(".settings-panel"),this.settingsPanel?(this.settingsPanel.parentNode!==document.body&&(document.body.appendChild(this.settingsPanel),console.log("[Menu Debug] Moved .settings-panel to document.body")),this.musicVolume=this.settingsPanel.querySelector("#music-volume"),this.sfxVolume=this.settingsPanel.querySelector("#sfx-volume"),this.closeSettingsButton=this.settingsPanel.querySelector(".panel-close-button"),this.musicVolume||console.warn("[Menu] #music-volume not found in .settings-panel"),this.sfxVolume||console.warn("[Menu] #sfx-volume not found in .settings-panel"),this.closeSettingsButton||console.warn("[Menu] .panel-close-button not found in .settings-panel")):console.warn("[Menu] .settings-panel not found."),this.characterPanel=document.querySelector(".character-panel"),this.characterPanel?(this.characterPanel.parentNode!==document.body&&(document.body.appendChild(this.characterPanel),console.log("[Menu Debug] Moved .character-panel to document.body")),this.characterGrid=this.characterPanel.querySelector(".character-grid"),this.characterGrid?this.characterGrid.addEventListener("click",(e=>{console.log("[Menu Debug] Character grid clicked. Target:",e.target);const t=e.target.closest(".character-card");console.log("[Menu Debug] Clicked card element:",t),this.characterPanel?(console.log("[Menu Debug] Character panel current classList:",this.characterPanel.classList.value),console.log("[Menu Debug] Character panel .visible class present?:",this.characterPanel.classList.contains("visible"))):console.error("[Menu Debug] CRITICAL: this.characterPanel is null/undefined inside characterGrid click listener."),t&&this.characterPanel&&this.characterPanel.classList.contains("visible")?(console.log("[Menu Debug] Conditions for selectCharacter met. Calling selectCharacter..."),this.handleFirstInteraction(),this.selectCharacter(t)):(console.warn("[Menu Debug] Conditions for selectCharacter NOT met."),t||console.log("[Menu Debug] Reason: No .character-card found at or above the click target."),this.characterPanel||console.log("[Menu Debug] Reason: this.characterPanel is null/undefined."),this.characterPanel&&!this.characterPanel.classList.contains("visible")&&console.log('[Menu Debug] Reason: Character panel does not have "visible" class.'))})):console.warn("[Menu] .character-grid not found in .character-panel"),this.closeCharacterPanelButton=this.characterPanel.querySelector(".panel-close-button"),this.closeCharacterPanelButton||console.warn("[Menu] .panel-close-button not found in .character-panel")):console.error("[Menu] CRITICAL: .character-panel not found during initialization!"),this.selectedCharacterDisplay=document.createElement("div"),this.selectedCharacterDisplay.className="selected-character-display";const e=this.menuContainer?this.menuContainer.querySelector(".main-menu-buttons"):null;this.playButton&&this.playButton.parentNode?this.playButton.parentNode.insertBefore(this.selectedCharacterDisplay,this.playButton):e?e.insertBefore(this.selectedCharacterDisplay,e.children[1]||null):this.menuContainer?(this.menuContainer.appendChild(this.selectedCharacterDisplay),console.warn("[Menu] .main-menu-buttons container not found. Appended selectedCharacterDisplay to .menu-container.")):console.error("[Menu] Cannot append selectedCharacterDisplay: no suitable parent found."),this.updateSelectedCharacterDisplay()}handleFirstInteraction(){this.userInteracted||(this.userInteracted=!0,console.log("[Menu] First user interaction detected."))}addEventListeners(){const e=(e,t,i)=>{e&&e.addEventListener(t,(e=>{this.handleFirstInteraction(),i(e)}))};e(this.settingsButton,"click",(()=>this.toggleSettings())),e(this.playButton,"click",(()=>this.startGame())),e(this.characterButton,"click",(()=>this.openCharacterModal())),this.closeSettingsButton&&this.closeSettingsButton.addEventListener("click",(()=>this.closeSettings())),this.closeCharacterPanelButton&&this.closeCharacterPanelButton.addEventListener("click",(()=>this.closeCharacterModal())),this.musicVolume&&this.musicVolume.addEventListener("input",(e=>{console.log("Music volume changed (audio disabled)")})),this.sfxVolume&&this.sfxVolume.addEventListener("input",(e=>{console.log("SFX volume changed (audio disabled)")}))}openCharacterModal(){console.log("[Menu Debug] openCharacterModal() called."),this.characterPanel&&this.characterGrid?(console.log("[Menu] Opening character modal."),this.characterPanel.classList.add("visible"),console.log('[Menu Debug] "visible" class ADDED to characterPanel. Current classes:',this.characterPanel.classList.value),this.settingsPanel?.classList.contains("visible")&&this.closeSettings(),this.overlay||(this.overlay=document.createElement("div"),this.overlay.className="character-modal-overlay",this.overlay.addEventListener("click",(e=>{e.target===this.overlay?(console.log("[Menu Debug] Overlay clicked, closing character modal."),this.closeCharacterModal()):console.log("[Menu Debug] Click was on something other than overlay itself. Target:",e.target)})),document.body.appendChild(this.overlay),console.log("[Menu Debug] Overlay created and appended to body.")),this.overlay.classList.add("visible"),console.log('[Menu Debug] "visible" class ADDED to overlay. Current classes:',this.overlay.classList.value)):console.warn("[Menu] Character panel or grid not found, cannot open modal. Check initialization logs.")}closeCharacterModal(){console.log("[Menu Debug] closeCharacterModal() called."),this.characterPanel&&(this.characterPanel.classList.remove("visible"),console.log('[Menu Debug] "visible" class REMOVED from characterPanel. Current classes:',this.characterPanel.classList.value)),this.overlay&&(this.overlay.classList.remove("visible"),console.log('[Menu Debug] "visible" class REMOVED from overlay. Current classes:',this.overlay.classList.value)),console.log("[Menu] Character modal closed.")}selectCharacter(e){console.log("[Menu Debug] selectCharacter() called with card:",e),this.characterGrid&&e?.dataset?.character?(console.log(`[Menu] Character selected: ${e.dataset.character}`),this.characterGrid.querySelectorAll(".character-card").forEach((e=>e.classList.remove("selected"))),e.classList.add("selected"),this.selectedCharacter=e.dataset.character,this.playButton?(this.playButton.disabled=!1,console.log("[Menu] Play button enabled.")):console.warn("[Menu] Play button not found to enable."),this.updateSelectedCharacterDisplay(),this.closeCharacterModal()):console.warn("[Menu] Cannot select character: invalid card or missing data attribute. Grid:",this.characterGrid,"Card:",e)}updateSelectedCharacterDisplay(){if(this.selectedCharacterDisplay)if(console.log("[Menu Debug] updateSelectedCharacterDisplay() called. Selected character:",this.selectedCharacter),this.selectedCharacter&&this.characterGrid){const e=this.characterGrid.querySelector(`.character-card[data-character="${this.selectedCharacter}"]`);if(e){const t=e.querySelector("img"),i=e.querySelector("h3"),o=t?t.src:"",a=i?i.textContent:"Character";this.selectedCharacterDisplay.innerHTML=`<img src="${o}" alt="${a}" style="width:40px;height:40px;vertical-align:middle;margin-right:0.75rem; border-radius:50%; object-fit:cover; background-color: #333;"> <span>${a}</span>`,console.log(`[Menu] Updated display for: ${a}`)}else this.selectedCharacterDisplay.innerHTML='<span style="color:#aaa;">Selected character data not found in grid.</span>',console.warn(`[Menu] Could not find .character-card[data-character="${this.selectedCharacter}"] in characterGrid for display update.`)}else this.selectedCharacterDisplay.innerHTML='<span style="color:#aaa;">No character selected</span>',this.characterGrid||console.warn("[Menu Debug] updateSelectedCharacterDisplay: characterGrid not found.");else console.warn("[Menu Debug] updateSelectedCharacterDisplay: selectedCharacterDisplay element not found.")}toggleSettings(){this.settingsPanel?(console.log("[Menu] Toggling settings panel."),this.settingsPanel.classList.contains("visible")?this.closeSettings():this.openSettings()):console.warn("[Menu Debug] toggleSettings: settingsPanel not found.")}openSettings(){this.settingsPanel?(console.log("[Menu] Opening settings panel."),this.settingsPanel.classList.add("visible"),this.characterPanel?.classList.contains("visible")&&this.closeCharacterModal()):console.warn("[Menu Debug] openSettings: settingsPanel not found.")}closeSettings(){this.settingsPanel&&this.settingsPanel.classList.contains("visible")&&(console.log("[Menu] Closing settings panel."),this.settingsPanel.classList.remove("visible"))}async startGame(){if(!this.selectedCharacter)return i.flashMessage("Please select a character first!","warning",2500),void console.warn("[Menu] startGame: No character selected.");console.log("[Menu] Preparing to start game.");const e=document.querySelector(".loading-overlay");if(e&&e.classList.add("visible"),!this.menuContainer)return console.error("[Menu] CRITICAL: .menu-container not found for hiding!"),void(e&&e.classList.remove("visible"));this.menuContainer.classList.add("hidden"),console.log(`[Menu] Attempting to start game with character: ${this.selectedCharacter}`);try{I?.stopGame&&I.stopGame(),I=new L(this.selectedCharacter)}catch(t){console.error("[Menu] Critical error during game initialization:",t),i.flashMessage(`Game Start Failed: ${t.message}`,"error",1e4),this.menuContainer&&this.menuContainer.classList.remove("hidden"),e&&e.classList.remove("visible"),I=null}}}document.addEventListener("DOMContentLoaded",(()=>{console.log("[main.js] DOMContentLoaded. Initializing Menu..."),new x}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,