(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var i=e.g.document;if(!t&&i&&(i.currentScript&&"SCRIPT"===i.currentScript.tagName.toUpperCase()&&(t=i.currentScript.src),!t)){var o=i.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&(!t||!/^http(s?):/.test(t));)t=o[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();class t{constructor(){this.keys={up:!1,down:!1,left:!1,right:!1}}setKey(e,t){this.keys.hasOwnProperty(e)&&(this.keys[e]=t)}getInputDirection(){let e=0,t=0;return this.keys.up&&(t-=1),this.keys.down&&(t+=1),this.keys.left&&(e-=1),this.keys.right&&(e+=1),{x:e,y:t}}}const i={LOADING:"LOADING",MENU:"MENU",PLAYING:"PLAYING",ASKING_QUESTION:"ASKING_QUESTION",SELECTING_FLOOR:"SELECTING_FLOOR",TRANSITIONING:"TRANSITIONING",GAME_OVER:"GAME_OVER"},o=[{question:"Który język programowania jest znany ze swojej wszechstronności i używany zarówno w backendzie (Node.js), jak i frontendzie?",options:["Python","Java","JavaScript","C#"],correctAnswer:2},{question:"Co oznacza skrót HTML?",options:["HyperText Markup Language","High Transfer Machine Language","Hyperlink and Text Management Language","Home Tool Markup Language"],correctAnswer:0},{question:"Która struktura danych działa na zasadzie LIFO (Last-In, First-Out)?",options:["Kolejka (Queue)","Stos (Stack)","Lista (List)","Drzewo (Tree)"],correctAnswer:1},{question:"Jak nazywa się proces znajdowania i naprawiania błędów w kodzie?",options:["Kompilacja","Testowanie","Debugowanie","Refaktoryzacja"],correctAnswer:2},{question:"Który paradygmat programowania opiera się na koncepcji 'obiektów', które mogą zawierać dane i kod?",options:["Programowanie funkcyjne","Programowanie proceduralne","Programowanie obiektowe","Programowanie logiczne"],correctAnswer:2},{question:"Co oznacza CSS?",options:["Cascading Style Sheets","Computer Style Syntax","Creative Styling System","Colorful Style Scripts"],correctAnswer:0},{question:"Który operator w JavaScript służy do ścisłego porównania (wartość i typ)?",options:["==","=","===","!="],correctAnswer:2},{question:"Jak nazywa się popularny system kontroli wersji używany przez programistów?",options:["Subversion (SVN)","Git","Mercurial","CVS"],correctAnswer:1},{question:"Który typ pętli w większości języków programowania jest najbardziej odpowiedni do iteracji po elementach tablicy, gdy nie znamy ich liczby?",options:["for","while","do...while","foreach (lub for...of)"],correctAnswer:3},{question:"Co to jest API?",options:["Advanced Programming Interface","Application Programming Interface","Automated Program Interaction","Algorithmic Processing Input"],correctAnswer:1},{question:"Co to jest PLC i do czego najczęściej służy w automatyce?",options:["Programowalny Logic Controller, do sterowania procesami przemysłowymi","Personal Learning Computer, do nauki programowania","Power Line Communication, do przesyłu danych przez sieć elektryczną","Project Lifecycle Cost, do zarządzania kosztami projektu"],correctAnswer:0},{question:"Za co odpowiada przysłona (apertura) w aparacie fotograficznym?",options:["Kontrolę czasu naświetlania","Regulację głębi ostrości i ilości wpadającego światła","Ustawienie balansu bieli","Stabilizację obrazu"],correctAnswer:1},{question:"Który element komputera jest odpowiedzialny za tymczasowe przechowywanie danych używanych przez procesor?",options:["Dysk twardy (HDD/SSD)","Karta graficzna (GPU)","Pamięć RAM","Płyta główna"],correctAnswer:2},{question:"W jakim języku programowania najczęściej pisane są skrypty po stronie serwera (backend)?",options:["HTML","CSS","SQL","PHP, Python lub Node.js (JavaScript)"],correctAnswer:3},{question:"Jaki typ sygnału charakteryzuje się płynną zmianą wartości w czasie, w przeciwieństwie do sygnału cyfrowego?",options:["Binarny","Analogowy","Zero-jedynkowy","Impulsowy"],correctAnswer:1},{question:"Który parametr ustawia czułość matrycy aparatu na światło i wpływa na poziom szumów na zdjęciu?",options:["Czas naświetlania","Przysłona","ISO","Ogniskowa"],correctAnswer:2},{question:"Co to jest adres IP w sieci komputerowej?",options:["Unikalny identyfikator urządzenia w sieci","Nazwa użytkownika do logowania","Adres strony internetowej","Typ kabla sieciowego"],correctAnswer:0},{question:"Czym różni się instrukcja warunkowa `if` od pętli `while` w programowaniu?",options:["`if` powtarza blok kodu, `while` sprawdza warunek jednokrotnie","`if` sprawdza warunek jednokrotnie, `while` powtarza blok kodu dopóki warunek jest prawdziwy","Nie ma między nimi różnicy","`if` służy tylko do deklarowania zmiennych, `while` do operacji matematycznych"],correctAnswer:1},{question:"Do czego najczęściej służy czujnik ciśnienia w systemie automatyki?",options:["Pomiaru temperatury","Pomiaru odległości","Pomiaru siły","Pomiaru ciśnienia"],correctAnswer:3},{question:"Co oznacza zasada trójpodziału w kompozycji fotograficznej?",options:["Dzielenie obrazu na 3 równe części pionowo i poziomo i umieszczanie kluczowych elementów na liniach lub ich przecięciach","Używanie tylko 3 głównych kolorów w kadrze","Robienie zawsze 3 zdjęć tej samej sceny","Balansowanie 3 głównych obiektów w kadrze"],correctAnswer:0},{question:"Jaka jest podstawowa rola systemu operacyjnego?",options:["Tworzenie grafiki komputerowej","Zarządzanie zasobami sprzętowymi i programowymi komputera","Pisanie kodu programów","Przeglądanie Internetu"],correctAnswer:1},{question:"Jakiego typu danych najczęściej użyjesz do przechowywania wieku osoby (liczba całkowita)?",options:["String (ciąg znaków)","Boolean (wartość logiczna)","Float (liczba zmiennoprzecinkowa)","Integer (liczba całkowita)"],correctAnswer:3},{question:"Element wykonawczy (aktuator) w systemie automatyki to urządzenie, które...",options:["Odczytuje dane z czujników","Wykonuje komendy ze sterownika, aby wykonać fizyczne działanie (np. ruch)","Przechowuje dane historyczne","Służy do komunikacji z operatorem"],correctAnswer:1},{question:"Który format pliku graficznego jest bezstratny i często używany w profesjonalnej edycji, zachowując maksymalną jakość kosztem rozmiaru?",options:["JPEG","GIF","PNG","RAW"],correctAnswer:3},{question:"Co chroni sieć komputerową przed nieautoryzowanym dostępem z zewnątrz?",options:["Router","Switch","Modem","Firewall (zapora sieciowa)"],correctAnswer:3},{question:"Co to jest IDE (Integrated Development Environment) w kontekście programowania?",options:["System operacyjny","Narzędzie do zarządzania bazą danych","Zintegrowane środowisko programistyczne (edytor kodu, kompilator, debugger w jednym)","Protokół sieciowy"],correctAnswer:2},{question:"Przykładem czujnika zbliżeniowego, wykrywającego obecność obiektu bez fizycznego kontaktu, może być:",options:["Termometr","Fotokomórka","Manometr (czujnik ciśnienia)","Akcelerometr"],correctAnswer:1},{question:"Do czego służy balans bieli (white balance) w aparacie fotograficznym?",options:["Do regulacji ostrości","Do korekcji kolorów, aby biały wyglądał na biały niezależnie od źródła światła","Do ustawiania czasu naświetlania","Do dodawania efektów specjalnych"],correctAnswer:1},{question:"Który protokół jest używany do bezpiecznego (szyfrowanego) przesyłania stron internetowych?",options:["HTTP","FTP","SMTP","HTTPS"],correctAnswer:3},{question:"Co to jest zmienna w programowaniu?",options:["Funkcja wykonująca określone zadanie","Typ pętli","Nazwane miejsce w pamięci komputera służące do przechowywania danych","Polecenie wyświetlające tekst na ekranie"],correctAnswer:2}];class a{static scoreElement=null;static targetElement=null;static controlsContainer=null;static questionOverlay=null;static questionTextElement=null;static answerButtonsContainer=null;static floorSelectionPanel=null;static floorButtonsContainer=null;static flashMessageContainer=null;static loadingOverlayElement=null;static gameOverScreenElement=null;static gameOverTitleElement=null;static creatorNamesListElement=null;static classInfoElement=null;static returnToMenuButtonElement=null;static leaderboardBody=null;static gameplayManagerInstance=null;static flashMessageTimeouts={};static timerElement=null;static gameStartTime=0;static timerIntervalId=null;static leaderboardData=[];static setGameplayManager(e){e?(this.gameplayManagerInstance=e,console.log("[UIManager] GameplayManager instance registered.")):console.error("[UIManager] Attempted to set GameplayManager to null/undefined!")}static initializeUI(e){console.log("[UIManager] Initializing in-game UI elements..."),e||console.warn("[UIManager] InputManager not provided. On-screen controls may not function."),this.createControls(e),this.createQuestionUI(),this.createFloorSelectionUI(),this.ensureFlashMessageContainer(),this.getLoadingOverlay(),this.createGameOverScreen(),this.initializeTimer(),this.gameplayManagerInstance||console.warn("[UIManager] WARNING: GameplayManager not set by end of initializeUI. Interactive UI may fail."),console.log("[UIManager] In-game UI initialization complete.")}static createControls(e){this.controlsContainer=document.getElementById("controls-container"),this.controlsContainer||(this.controlsContainer=document.createElement("div"),this.controlsContainer.id="controls-container",this.controlsContainer.classList.add("controls-container"),document.body.appendChild(this.controlsContainer)),this.controlsContainer.innerHTML="",[{direction:"up",icon:"↑",gridArea:"up"},{direction:"left",icon:"←",gridArea:"left"},{direction:"right",icon:"→",gridArea:"right"},{direction:"down",icon:"↓",gridArea:"down"}].forEach((({direction:t,icon:i,gridArea:o})=>{const a=document.createElement("button");if(a.className=`control-btn ${t}`,a.textContent=i,a.style.gridArea=o,a.dataset.direction=t,e){const i=i=>{e.setKey(t,!0),a.classList.add("active"),i.preventDefault()},o=i=>{e.keys[t]&&e.setKey(t,!1),a.classList.remove("active"),i.preventDefault()};a.addEventListener("touchstart",i,{passive:!1}),a.addEventListener("touchend",o,{passive:!1}),a.addEventListener("touchcancel",o,{passive:!1}),a.addEventListener("mousedown",i),a.addEventListener("mouseup",o),a.addEventListener("mouseleave",o)}this.controlsContainer.appendChild(a)}));const t=document.getElementById("score-display");if(t)this.scoreElement=t.querySelector("#score-value"),this.targetElement=t.querySelector("#score-target");else{const e=document.createElement("div");e.id="score-display",e.classList.add("score-display"),e.innerHTML='Książki: <span id="score-value">0</span> / <span id="score-target">?</span>',document.body.appendChild(e),this.scoreElement=e.querySelector("#score-value"),this.targetElement=e.querySelector("#score-target")}this.scoreElement&&(this.scoreElement.textContent="0"),this.targetElement&&(this.targetElement.textContent="?")}static createQuestionUI(){this.questionOverlay=document.getElementById("question-overlay"),this.questionOverlay||(this.questionOverlay=document.createElement("div"),this.questionOverlay.id="question-overlay",this.questionOverlay.classList.add("ui-panel"),this.questionOverlay.innerHTML='<div id="blackboard-content"><h2>Question</h2><div id="question-box"><p id="question-text"></p><div id="answer-buttons"></div></div></div>',document.body.appendChild(this.questionOverlay)),this.questionTextElement=this.questionOverlay.querySelector("#question-text"),this.answerButtonsContainer=this.questionOverlay.querySelector("#answer-buttons"),this.questionTextElement&&this.answerButtonsContainer||console.error("[UIManager] Failed to find/create question UI children.")}static createFloorSelectionUI(){this.floorSelectionPanel=document.getElementById("floor-selection-ui"),this.floorSelectionPanel||(this.floorSelectionPanel=document.createElement("div"),this.floorSelectionPanel.id="floor-selection-ui",this.floorSelectionPanel.classList.add("ui-panel"),this.floorSelectionPanel.innerHTML='<h2>Select Floor</h2><div id="floor-buttons-container"></div>',document.body.appendChild(this.floorSelectionPanel)),this.floorButtonsContainer=this.floorSelectionPanel.querySelector("#floor-buttons-container"),this.floorButtonsContainer||console.error("[UIManager] Failed to find/create floor buttons container.")}static ensureFlashMessageContainer(){return this.flashMessageContainer=document.getElementById("flash-message-container"),this.flashMessageContainer||(this.flashMessageContainer=document.createElement("div"),this.flashMessageContainer.id="flash-message-container",document.body.appendChild(this.flashMessageContainer)),this.flashMessageContainer}static flashMessage(e,t="info",i=3e3){const o=this.ensureFlashMessageContainer();if(!o)return void console.error("[UIManager] Flash msg container not found.");const a=document.createElement("div");a.textContent=e,a.className="flash-message",a.classList.add(`flash-${t}`);const s=`flash-${Date.now()}-${Math.random().toString(36).substr(2,5)}`;a.id=s,o.appendChild(a),requestAnimationFrame((()=>a.classList.add("visible"))),clearTimeout(this.flashMessageTimeouts[s]),this.flashMessageTimeouts[s]=setTimeout((()=>{a.classList.remove("visible");const e=e=>{"opacity"!==e.propertyName&&"transform"!==e.propertyName||(a.parentNode&&a.parentNode.removeChild(a),delete this.flashMessageTimeouts[s])};a.addEventListener("transitionend",e,{once:!0}),setTimeout((()=>{a.parentNode&&(a.removeEventListener("transitionend",e),a.parentNode.removeChild(a)),delete this.flashMessageTimeouts[s]}),500)}),i)}static getLoadingOverlay(){if(!this.loadingOverlayElement&&(this.loadingOverlayElement=document.getElementById("loading-overlay"),!this.loadingOverlayElement)){this.loadingOverlayElement=document.createElement("div"),this.loadingOverlayElement.id="loading-overlay",this.loadingOverlayElement.className="loading-overlay";const e=document.createElement("p");e.textContent="Loading...",this.loadingOverlayElement.appendChild(e),document.body.appendChild(this.loadingOverlayElement),console.log("[UIManager] Loading overlay created.")}return this.loadingOverlayElement}static createGameOverScreen(){this.gameOverScreenElement=document.getElementById("game-over-screen"),this.gameOverScreenElement?(this.gameOverTitleElement=this.gameOverScreenElement.querySelector("#game-over-title"),this.creatorNamesListElement=this.gameOverScreenElement.querySelector("#creator-names"),this.classInfoElement=this.gameOverScreenElement.querySelector("#class-info"),this.returnToMenuButtonElement=this.gameOverScreenElement.querySelector("#return-to-menu-button"),this.leaderboardBody=this.gameOverScreenElement.querySelector("#leaderboard-body"),this.gameOverTitleElement&&this.creatorNamesListElement&&this.classInfoElement&&this.returnToMenuButtonElement&&this.leaderboardBody?(this.returnToMenuButtonElement.addEventListener("click",(()=>window.location.reload())),console.log("[UIManager] Game Over screen elements initialized.")):console.error("[UIManager] Failed to find Game Over screen children or leaderboard body.")):console.error("[UIManager] CRIT: #game-over-screen not in HTML!")}static showGameOverScreen(e,t=[],i=""){this.gameOverScreenElement||(console.error("[UIManager] Game Over Screen not init, creating."),this.createGameOverScreen(),this.gameOverScreenElement)?(this.gameOverTitleElement&&(this.gameOverTitleElement.textContent=e?"Brawo uciekłeś!":"Koniec gry",this.gameOverTitleElement.className=e?"win-title":"lose-title"),this.creatorNamesListElement&&(this.creatorNamesListElement.innerHTML="",t.forEach((e=>{const t=document.createElement("li");t.textContent=e,this.creatorNamesListElement.appendChild(t)}))),this.classInfoElement&&(this.classInfoElement.textContent=i),this.updateLeaderboard(),this.gameOverScreenElement.classList.add("visible"),this.hideGameUI(),this.hideQuestion(),this.hideFloorSelectionUI()):console.error("[UIManager] Still unable to show Game Over screen.")}static hideGameOverScreen(){this.gameOverScreenElement&&this.gameOverScreenElement.classList.remove("visible")}static showQuestion(e){if(this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer||(console.error("[UIManager] Question UI not ready, creating."),this.createQuestionUI(),this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer))if(e){if(!this.gameplayManagerInstance?.handleAnswer)return console.error("[UIManager] CRIT: GameplayManager/handleAnswer not set/invalid!"),this.flashMessage("Error: Game interaction (Q) failed.","error",5e3),void this.hideQuestion();this.questionTextElement.textContent=e.question,this.answerButtonsContainer.innerHTML="",e.options.forEach(((e,t)=>{const i=document.createElement("button");i.textContent=e,i.dataset.index=t.toString(),i.classList.add("answer-button"),i.addEventListener("click",(e=>this.gameplayManagerInstance.handleAnswer(parseInt(e.target.dataset.index,10)))),this.answerButtonsContainer.appendChild(i)})),this.questionOverlay.classList.add("visible")}else console.error("[UIManager] No questionData to show.")}static hideQuestion(){this.questionOverlay&&(this.questionOverlay.classList.remove("visible"),this.questionTextElement&&(this.questionTextElement.textContent=""),this.answerButtonsContainer&&(this.answerButtonsContainer.innerHTML=""))}static showFloorSelectionUI(e,t,i){if(this.floorSelectionPanel&&this.floorButtonsContainer||(console.error("[UIManager] Floor selection UI not ready, creating."),this.createFloorSelectionUI(),this.floorSelectionPanel&&this.floorButtonsContainer)){if(!this.gameplayManagerInstance?.handleFloorSelection)return console.error("[UIManager] CRIT: GameplayManager/handleFloorSelection not set/invalid!"),this.flashMessage("Error: Game interaction (F) failed.","error",5e3),void this.hideFloorSelectionUI();this.floorButtonsContainer.innerHTML="";for(let o=e;o<=t;o++){const e=document.createElement("button");e.textContent=`Floor ${o}`,e.classList.add("floor-button"),e.dataset.floor=o.toString(),o===i?(e.disabled=!0,e.classList.add("current")):e.addEventListener("click",(()=>this.gameplayManagerInstance.handleFloorSelection(o))),this.floorButtonsContainer.appendChild(e)}this.floorSelectionPanel.classList.add("visible")}}static hideFloorSelectionUI(){this.floorSelectionPanel&&this.floorSelectionPanel.classList.remove("visible")}static updateScore(e,t){this.scoreElement||(this.scoreElement=document.getElementById("score-value")),this.targetElement||(this.targetElement=document.getElementById("score-target")),this.scoreElement&&(this.scoreElement.textContent=e.toString()),this.targetElement&&(this.targetElement.textContent=t.toString())}static showGameUI(){console.log("[UIManager] Showing Game UI...");const e=document.getElementById("game-canvas"),t=document.getElementById("score-display");e?e.style.display="block":console.warn("[UIManager] #game-canvas not found."),this.controlsContainer?this.controlsContainer.classList.add("visible"):console.warn("[UIManager] Controls container not found."),t?(t.style.display="flex",t.classList.add("visible")):console.warn("[UIManager] Score display not found."),this.timerElement&&(this.timerElement.style.display="block"),this.hideQuestion(),this.hideFloorSelectionUI(),this.hideGameOverScreen()}static hideGameUI(){console.log("[UIManager] Hiding Game UI...");const e=document.getElementById("game-canvas"),t=document.getElementById("score-display");e&&(e.style.display="none"),this.controlsContainer&&this.controlsContainer.classList.remove("visible"),t&&(t.style.display="none",t.classList.remove("visible")),this.timerElement&&(this.timerElement.style.display="none")}static initializeTimer(){this.timerElement||(this.timerElement=document.getElementById("game-timer"),this.timerElement)||(this.timerElement=document.createElement("div"),this.timerElement.id="game-timer",this.timerElement.classList.add("game-timer"),(document.getElementById("game-container")||document.body).appendChild(this.timerElement),console.log("[UIManager] Timer element dynamically created.")),this.timerElement.textContent="Czas: 0:00",this.timerElement.style.display="none";const e=localStorage.getItem("gameLeaderboard");try{this.leaderboardData=e?JSON.parse(e):[]}catch(e){console.error("[UIManager] Error parsing leaderboard from localStorage:",e),this.leaderboardData=[],localStorage.removeItem("gameLeaderboard")}console.log("[UIManager] Timer and leaderboard data initialized.")}static startTimer(){this.timerIntervalId&&(cancelAnimationFrame(this.timerIntervalId),this.timerIntervalId=null);const e=this.gameplayManagerInstance?.game;e&&e.gameState===i.PLAYING?(this.gameStartTime=Date.now(),console.log(`[UIManager] Game timer starting. Start time: ${this.gameStartTime}. State: ${e.gameState}`),this.updateTimer()):console.warn(`[UIManager] Timer start denied. Game: ${!!e}, State: ${e?.gameState}. Expected PLAYING.`)}static updateTimer(){const e=this.gameplayManagerInstance?.game;if(!this.gameStartTime||!e||e.gameState!==i.PLAYING&&e.gameState!==i.ASKING_QUESTION&&e.gameState!==i.SELECTING_FLOOR&&e.gameState!==i.TRANSITIONING)return void(this.timerIntervalId&&(cancelAnimationFrame(this.timerIntervalId),this.timerIntervalId=null));const t=Math.floor((Date.now()-this.gameStartTime)/1e3),o=Math.floor(t/60),a=t%60;this.timerElement&&(this.timerElement.textContent=`Czas: ${o}:${a.toString().padStart(2,"0")}`),this.timerIntervalId=requestAnimationFrame((()=>this.updateTimer()))}static stopTimer(e){if(!this.gameStartTime)return;this.timerIntervalId&&(cancelAnimationFrame(this.timerIntervalId),this.timerIntervalId=null);const t=(Date.now()-this.gameStartTime)/1e3;if(console.log(`[UIManager] Czas zatrzymany. Czas: ${t.toFixed(3)}s. Wygrana: ${e}`),e){this.leaderboardData.push({name:`Podejście ${this.leaderboardData.length+1}`,time:t,date:(new Date).toLocaleDateString()}),this.leaderboardData.sort(((e,t)=>e.time-t.time));try{localStorage.setItem("gameLeaderboard",JSON.stringify(this.leaderboardData.slice(0,10)))}catch(e){console.error("[UIManager] Failed to save leaderboard:",e)}}this.gameStartTime=0}static updateLeaderboard(){if(!this.leaderboardBody){const e=document.getElementById("game-over-screen");if(e&&(this.leaderboardBody=e.querySelector("#leaderboard-body")),!this.leaderboardBody)return}this.leaderboardBody.innerHTML="";const e=this.leaderboardData.slice(0,10);if(0===e.length){const e=this.leaderboardBody.insertRow().insertCell();e.colSpan=3,e.textContent="No records yet.",e.style.textAlign="center"}else e.forEach((e=>{const t=Math.floor(e.time/60),i=Math.floor(e.time%60),o=Math.floor(1e3*e.time%1e3),a=this.leaderboardBody.insertRow();a.insertCell().textContent=e.name,a.insertCell().textContent=`${t}:${i.toString().padStart(2,"0")}.${o.toString().padStart(3,"0")}`,a.insertCell().textContent=e.date}))}}class s{static Direction={DOWN:0,RIGHT:1,UP:2,LEFT:3};constructor(e,t,i={}){this.ctx=e,this.sprite=new Image,this.frameSize=i.frameSize||32,this.frameCount=i.frameCount||4,this.scale=i.scale||2,this.renderSize=this.frameSize*this.scale,this.speed=i.speed||3,this.animationSpeed=i.animationSpeed||150,this.collisionBoxWidthRatio=i.collisionBoxWidthRatio||.4,this.collisionBoxHeightRatio=i.collisionBoxHeightRatio||.2,this.collisionBoxFeetOffsetRatio=i.collisionBoxFeetOffsetRatio||.4,this.x=0,this.y=0,this.currentDirection=s.Direction.DOWN,this.currentFrame=0,this.isMoving=!1,this.lastFrameTime=0,this.sprite.onload=()=>{console.log(`[Character] Sprite loaded successfully: ${t}`)},this.sprite.onerror=()=>{console.error(`[Character] Failed to load sprite: ${t}`)},this.sprite.src=t}updateAnimation(e){if(!this.isMoving)return this.currentFrame=0,void(this.lastFrameTime=e);this.lastFrameTime||(this.lastFrameTime=e),e-this.lastFrameTime>this.animationSpeed&&(this.currentFrame=(this.currentFrame+1)%this.frameCount,this.lastFrameTime=e)}getCollisionBox(e,t){const i=this.renderSize*this.collisionBoxWidthRatio,o=this.renderSize*this.collisionBoxHeightRatio,a=i/2,s=this.renderSize*this.collisionBoxFeetOffsetRatio;return{top:t+s-o/2,bottom:t+s+o/2,left:e-a,right:e+a,width:i,height:o}}draw(e,t){if(!this.sprite.complete||0===this.sprite.naturalHeight)return;const i=this.currentFrame*this.frameSize,o=this.currentDirection*this.frameSize,a=Math.floor(this.x-this.renderSize/2+e),s=Math.floor(this.y-this.renderSize/2+t);try{this.ctx.drawImage(this.sprite,i,o,this.frameSize,this.frameSize,a,s,this.renderSize,this.renderSize)}catch(e){console.error("[Character] Error drawing sprite:",e)}}}class n{constructor(e,t,i,o){this.x=e,this.y=t,this.id=i,this.tileSize=o,this.size=.6*o,this.collected=!1,this.isCollected=!1}draw(e,t,i,o){const a=Math.floor(this.x+t-this.size/2),s=Math.floor(this.y+i-this.size/2);o?e.drawImage(o,a,s,this.size,this.size):(e.fillStyle="#8d6e63",e.fillRect(a,s,this.size,this.size),e.strokeStyle="#5d4037",e.strokeRect(a,s,this.size,this.size),e.fillStyle="#eee",e.font=.6*this.size+"px Arial",e.textAlign="center",e.textBaseline="middle",e.fillText("?",a+this.size/2,s+this.size/2+2))}}function r(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e}function l(e){let t=3735928559^e;return t=Math.imul(t^t>>>16,2246822507),t=Math.imul(t^t>>>13,3266489909),(t^=t>>>16)>>>0}function c(e,t){if(!e||"string"!=typeof e||e.length<7)return e;let i=parseInt(e.slice(1,3),16),o=parseInt(e.slice(3,5),16),a=parseInt(e.slice(5,7),16);return i=Math.min(255,Math.max(0,Math.round(i*t))),o=Math.min(255,Math.max(0,Math.round(o*t))),a=Math.min(255,Math.max(0,Math.round(a*t))),`#${i.toString(16).padStart(2,"0")}${o.toString(16).padStart(2,"0")}${a.toString(16).padStart(2,"0")}`}class h{constructor(e){this.tileSize=e,this.tileColors={},this.baseWallColor="#1c1e22",this.baseCorridorColor="#a0a0a0",this.baseRoomFloorColor="#c0c0c0",this.liftColor="#707080",this.errorColor="#ff00ff"}resetColorCache(){this.tileColors={}}getTileColor(e,t,i,o){const a=`${e},${t}`;if(this.tileColors[a])return this.tileColors[a];let s;switch(i){case 0:s=this.baseWallColor;break;case 1:s=this.baseCorridorColor;break;case 2:s=this.baseRoomFloorColor;break;case 3:s=this.liftColor;break;default:s=this.errorColor}return this.tileColors[a]=s,s}draw(e,t,i=null){const{map:o,rooms:a,books:s,liftPosition:n,offsetX:r,offsetY:l,cols:c,rows:h}=t,d=Math.floor(r),m=Math.floor(l),u=Math.max(0,Math.floor(-d/this.tileSize)-1),g=Math.min(c,Math.ceil((-d+e.canvas.width)/this.tileSize)+1),f=Math.max(0,Math.floor(-m/this.tileSize)-1),p=Math.min(h,Math.ceil((-m+e.canvas.height)/this.tileSize)+1);e.save(),this.drawBaseTiles(e,o,a,d,m,c,h,f,p,u,g),this.drawRoomDetails(e,o,a,n,d,m,c,h,f,p,u,g),this.drawLiftDetails(e,n,d,m),this.drawBooks(e,s,d,m,i),e.restore()}drawBaseTiles(e,t,i,o,a,s,n,r,l,c,h){e.save(),e.shadowColor="transparent";const d="#383838",m="#606060",u="#757575";for(let g=r;g<l;g++)for(let r=c;r<h;r++){const l=t[g]?.[r];if(void 0===l)continue;const c=Math.floor(r*this.tileSize+o),h=Math.floor(g*this.tileSize+a),f=this.getTileColor(g,r,l,i);if(e.fillStyle=f,e.fillRect(c,h,this.tileSize,this.tileSize),0===l){e.fillStyle="rgba(0,0,0,0.06)";for(let t=0;t<5;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1);const i=2;g>0&&0!==t[g-1]?.[r]&&(e.fillStyle=u,e.fillRect(c,h,this.tileSize,i)),g<n-1&&0!==t[g+1]?.[r]&&(e.fillStyle=d,e.fillRect(c,h+this.tileSize-i,this.tileSize,i)),r>0&&0!==t[g]?.[r-1]&&(e.fillStyle=m,e.fillRect(c,h+i,i,this.tileSize-i)),r<s-1&&0!==t[g]?.[r+1]&&(e.fillStyle=d,e.fillRect(c+this.tileSize-i,h+i,i,this.tileSize-i)),g>0&&r>0&&0!==t[g-1]?.[r]&&0!==t[g]?.[r-1]&&0!==t[g-1]?.[r-1]&&(e.fillStyle=m,e.fillRect(c,h,i,i)),g>0&&r<s-1&&0!==t[g-1]?.[r]&&0!==t[g]?.[r+1]&&0!==t[g-1]?.[r+1]&&(e.fillStyle=u,e.fillRect(c+this.tileSize-i,h,i,i))}else if(1===l){e.fillStyle="rgba(255,255,255,0.03)";for(let t=0;t<3;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1)}}e.restore()}drawRoomDetails(e,t,i,o,a,s,n,r,h,d,m,u){e.save(),e.shadowColor="transparent";for(const o of i){if(o.col+o.width<m||o.col>u||o.row+o.height<h||o.row>d)continue;const i=Math.floor(o.col*this.tileSize+a),n=Math.floor(o.row*this.tileSize+s),r=o.width*this.tileSize,g=o.height*this.tileSize;let f=this.baseRoomFloorColor;const p="number"==typeof this.floorNumber?this.floorNumber:0;let y=l(o.id)+100*p;switch(o.type){case"classroom":f=c("#a0c8e0",.9+l(y)%11/100);break;case"office":f=c("#f0e8c0",.9+l(y+1)%11/100);break;case"library":f=c("#d8c0a8",.9+l(y+2)%11/100);break;case"gym":f=c("#b0d0b0",.9+l(y+3)%11/100);break;case"lab":f=c("#e0e0ff",.9+l(y+4)%11/100);break;case"storage":f=c("#b0a090",.9+l(y+5)%11/100);break;case"utility":f=c("#b0b0b0",.9+l(y+6)%11/100)}for(let i=Math.max(o.row,h);i<Math.min(o.row+o.height,d);i++)for(let n=Math.max(o.col,m);n<Math.min(o.col+o.width,u);n++){const r=t[i]?.[n];if(2===r){const t=Math.floor(n*this.tileSize+a),r=Math.floor(i*this.tileSize+s),h=.98+(l(5e3*i+3*n+y)%11-5)/100;e.fillStyle=c(f,h),e.fillRect(t,r,this.tileSize,this.tileSize),"lab"===o.type&&(e.strokeStyle="rgba(0,0,0,0.08)",e.lineWidth=1,e.strokeRect(t+.5,r+.5,this.tileSize-1,this.tileSize-1))}}this.drawRoomDecorations(e,o,i,n,r,g)}e.restore()}drawLiftDetails(e,t,i,o){if(!t)return;const a=Math.floor(t.tileX*this.tileSize+i),s=Math.floor(t.tileY*this.tileSize+o);if(a+this.tileSize<0||a>e.canvas.width||s+this.tileSize<0||s>e.canvas.height)return;e.save(),e.shadowColor="transparent",e.strokeStyle="#d0d0d0",e.lineWidth=1,e.strokeRect(a+.5,s+.5,this.tileSize-1,this.tileSize-1),e.strokeStyle="#404040",e.strokeRect(a+1.5,s+1.5,this.tileSize-3,this.tileSize-3);const n=.15*this.tileSize,r=a+.8*this.tileSize,l=s+.5*this.tileSize;e.fillStyle="#444",e.beginPath(),e.arc(r,l,n,0,2*Math.PI),e.fill(),e.fillStyle="#ff4444",e.beginPath(),e.arc(r,l,.8*n,0,2*Math.PI),e.fill(),e.fillStyle="rgba(255, 255, 255, 0.5)",e.beginPath(),e.arc(r-.2*n,l-.2*n,.3*n,0,2*Math.PI),e.fill(),e.restore()}drawRoomDecorations(e,t,i,o,a,s){const n=this.tileSize,r=.2*n,l=.1*n;e.lineWidth=1,e.strokeStyle="#444";const c=(t,a,s,n,r,l=!0)=>{e.fillStyle=r;const c=Math.floor(i+t),h=Math.floor(o+a),d=Math.floor(s),m=Math.floor(n);e.fillRect(c,h,d,m),l&&e.strokeRect(c+.5,h+.5,d-1,m-1)},h=(t,a,s,n,r=!0)=>{e.fillStyle=n;const l=Math.floor(i+t),c=Math.floor(o+a);e.beginPath(),e.arc(l,c,Math.floor(s),0,2*Math.PI),e.fill(),r&&e.stroke()};switch(t.type){case"classroom":e.strokeStyle="#5d4037";const t=.6*n,d=.4*n,m=.25*n,u=1*n,g=.9*n;c(.25*a,r,.5*a,.2*n,"#333",!0),c(.25*a+2,r+2,.5*a-4,.2*n-4,"#4CAF50",!1);for(let e=0;;e++){const i=r+.5*n+e*g;if(i+d+m>s-r)break;for(let e=0;;e++){const o=r+e*u;if(o+t>a-r)break;c(o,i,t,d,"#8B4513"),c(o+.1*t,i+d+l,.8*t,m,"#6a4a3a")}}break;case"office":e.strokeStyle="#5d4037";const f=Math.min(.6*a,2.5*n),p=Math.min(.4*s,1.2*n);c(r,r,f,p,"#a0522d"),c(r+f+l,r+.1*p,.6*n,.6*n,"#444");const y=.8*n;c(a-r-y,r,y,s-2*r,"#6B4F41"),c(r+l,r+l,.5*n,.4*n,"#333"),c(r+l+.1*n,r+l+.4*n+2,.3*n,.1*n,"#555");break;case"library":e.strokeStyle="#402a10";const w=.6*n,S=1.5*n;for(let t=r;t<a-r-w;t+=S){c(t,r,w,s-2*r,"#654321"),e.strokeStyle="rgba(0,0,0,0.3)";for(let a=r+.5*n;a<s-r;a+=.7*n)e.beginPath(),e.moveTo(i+t,o+a),e.lineTo(i+t+w,o+a),e.stroke();e.strokeStyle="#402a10"}if(a>1.5*S){const e=w+r+(a-2*w-2*r-1.5*n)/2;e>w+r&&(c(e,.3*s,1.5*n,.4*s,"#966F33"),c(e+.2*n,.3*s-.3*n,.5*n,.25*n,"#6a4a3a"),c(e+.2*n,.3*s+.4*s+l,.5*n,.25*n,"#6a4a3a"))}break;case"gym":e.strokeStyle="#555",c(r,r,.4*a,.3*s,"#778899"),c(a-r-.3*a,s-r-.4*s,.3*a,.4*s,"#778899"),c(.6*a,r,.8*n,1.8*n,"#333"),c(.6*a+.1*n,r+.1*n,.6*n,1.6*n,"#555",!1),c(r,.5*s,1.5*n,.4*n,"#8B4513"),c(a-r-.5*n,r,.5*n,1.5*n,"#444"),h(a-r-.25*n,r+.3*n,.15*n,"#666"),h(a-r-.25*n,r+.7*n,.15*n,"#666"),h(a-r-.25*n,r+1.1*n,.15*n,"#666");break;case"lab":e.strokeStyle="#668";const M=.8*n;c(r,r,a-2*r,M,"#d0d0d8"),c(r,s-r-M,a-2*r,M,"#d0d0d8"),c(r+.2*n,r+.1*n,.5*n,.5*n,"#4a90e2"),c(r+1*n,r+.1*n,.3*n,.6*n,"#f5a623"),h(a-2*r-.4*n,r+.5*M,.2*n,"#e04040",!0),c(.4*a,r+M+l,n,s-2*r-2*M-2*l,"#a0a0b0");break;case"storage":e.strokeStyle="#4d4030";const v=a-2*r,b=.5*n;c(r,r,v,b,"#9e9e9e"),c(r,s-r-b,v,b,"#9e9e9e");const C=.6*n;c(r+.2*n,r+b+l,C,C,"#bf8f6f"),c(r+1*n,r+b+l,C,C,"#bf8f6f"),c(a-r-1.5*C,r+b+3*l,1.2*C,.8*C,"#bf8f6f"),c(a-r-n,s-r-n,.8*n,.8*n,"#6a4a3a");break;default:e.strokeStyle="#5d4037",c(.1*a,.15*s,.3*a,.25*s,"#A0522D"),c(.6*a,.5*s,.3*a,.4*s,"#A0522D"),c(a-r-.5*n,r,.5*n,s-2*r,"#777"),e.strokeStyle="#555",e.lineWidth=3,e.beginPath(),e.moveTo(i+r,o+.8*s),e.lineTo(i+a-r,o+.8*s),e.stroke(),e.beginPath(),e.moveTo(i+.7*a,o+r),e.lineTo(i+.7*a,o+s-r),e.stroke(),e.lineWidth=1}}drawBooks(e,t,i,o,a){if(!t||0===t.length)return;const s=.6*this.tileSize;for(const n of t)if(!n.isCollected&&!n.collected){const t=n.size||s,r=Math.floor(n.x+i-t/2),l=Math.floor(n.y+o-t/2);r+t>0&&r<e.canvas.width&&l+t>0&&l<e.canvas.height&&("function"==typeof n.draw?n.draw(e,i,o,a):a?e.drawImage(a,r,l,t,t):(e.fillStyle="#8d6e63",e.fillRect(r,l,t,t),e.strokeStyle="#5d4037",e.lineWidth=1,e.strokeRect(r+.5,l+.5,t-1,t-1)))}}}let d=null;const m={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,roomTypeWeights:{classroom:50,office:25,library:15,gym:0,utility:10,lab:10,storage:5}};function u(e,t,i,o,a){const{centerTileX:s,centerTileY:n}=t,{centerTileX:r,centerTileY:l}=i;Math.random()<.5?(g(e,n,s,r,o,a),f(e,r,n,l,o,a)):(f(e,s,n,l,o,a),g(e,l,s,r,o,a))}function g(e,t,i,o,a,s){if(t<0||t>=s)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(a-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[t]?.[i]&&(e[t][i]=1)}function f(e,t,i,o,a,s){if(t<0||t>=a)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(s-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[i]?.[t]&&(e[i][t]=1)}function p(e,t,i,o,a){const s=(e,t)=>{if(e<0||e>=o||t<0||t>=a)return!1;const s=i[t]?.[e];return 1===s||2===s||3===s};let n=0;const r=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];let l=[!1,!1,!1,!1];for(let i=0;i<r.length;i++)s(e+r[i].dx,t+r[i].dy)&&(n++,l[i]=!0);return{openSides:n,isChokepoint:2===n&&(l[0]&&l[1]&&!l[2]&&!l[3]||l[2]&&l[3]&&!l[0]&&!l[1])}}function y(e,t,i,o,a){console.log(`  [MapGen Connect] Forcing connection to (${t},${i})...`);const s=[[0,-1],[0,1],[-1,0],[1,0]];for(const[o,a]of s){const s=e[i+a]?.[t+o];if(1===s||2===s||3===s)return 0===e[i][t]&&(e[i][t]=1),!0}const n=[[t,i,0]],r=new Set([`${t},${i}`]),l=[0,1,2,3],c=[1,2];let h=null,d=1/0;for(;n.length>0;){const[t,i,m]=n.shift();if(!(m>=d&&h))for(const[u,g]of s){const s=t+u,f=i+g,p=`${s},${f}`;if(s>=0&&s<o&&f>=0&&f<a&&!r.has(p)){const t=e[f]?.[s];r.add(p),c.includes(t)?m+1<=d&&(d=m+1,h={x:s,y:f,dist:d}):l.includes(t)&&(m+1<d||!h)&&n.push([s,f,m+1])}}}return h?(console.log(`  [MapGen Connect] Closest walkable @(${h.x},${h.y}), dist ${h.dist}. Carving...`),g(e,i,t,h.x,o,a),f(e,h.x,i,h.y,o,a),1===e[i][t]||2===e[i][t]||(console.warn(`  [MapGen Connect] Carved, but target (${t},${i}) not Corridor/Floor (is ${e[i][t]}).`),0!==e[i][t])):(console.error(`  [MapGen Connect] FAILED to find ANY walkable from (${t},${i}).`),!1)}function w(e,t,i,o){if(!t)return!1;const{tileX:a,tileY:s}=t;if(s<0||s>=o||a<0||a>=i||3!==e[s]?.[a])return console.error(`[MapVal Reach] Invalid lift @(${a},${s}) or not LIFT.`),!1;const{reachable:n}=function(e,t,i,o,a,s){const n=[[t,i]],r=new Set([`${t},${i}`]),l=[[0,-1],[0,1],[-1,0],[1,0]];let c=!1;for(e[i];n.length>0;){const[t,i]=n.shift();for(const[h,d]of l){const l=t+h,m=i+d,u=`${l},${m}`;if(l>=0&&l<o&&m>=0&&m<a&&!r.has(u)){const t=e[m]?.[l];r.add(u),s.includes(t)&&(n.push([l,m]),1!==t&&2!==t||(c=!0))}}}return{reachable:c}}(e,a,s,i,o,[1,2,3]);return n||console.error(`[MapVal Reach] FAILED. Lift @(${a},${s}) isolated.`),n}function S(e,t,i){if(!e)return void console.log("[DEBUG MAP] null map.");console.log("--- DEBUG MAP GRID ---");let o="   ";for(let e=0;e<t;e++)o+=e%10==0?Math.floor(e/10):" ";console.log(o),o="   ";for(let e=0;e<t;e++)o+=e%10;console.log(o);for(let t=0;t<i;t++){if(!e[t]){console.log(`${t.toString().padStart(2," ")} [ROW UNDEF]`);continue}const i=e[t].map((e=>{switch(e){case 0:return"#";case 1:return".";case 2:return" ";case 3:return"L";default:return"?"}})).join("");console.log(`${t.toString().padStart(2," ")} ${i}`)}console.log("--- END DEBUG MAP GRID ---")}class M{constructor(e,t,i,o,a){this.tileSize=32,this.cols=40,this.rows=30,this.width=this.cols*this.tileSize,this.height=this.rows*this.tileSize,this.offsetX=0,this.offsetY=0,this.floorNumber=i,this.minFloor=o,this.maxFloor=a,this.map=null,this.rooms=[],this.books=[],this.liftPosition=null,this.renderer=new h(this.tileSize),this.renderer.floorNumber=this.floorNumber;const s={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,booksPerMap:5,roomTypeWeights:{classroom:50,office:25,library:15,lab:10,storage:5,utility:10,gym:0}};try{const e={cols:this.cols,rows:this.rows,floorNumber:this.floorNumber,minFloor:this.minFloor,maxFloor:this.maxFloor,tileSize:this.tileSize,generationParams:s},{map:t,rooms:i,liftPosition:o}=function(e){const{cols:t,rows:i,floorNumber:o,minFloor:a,tileSize:s,generationParams:n}=e,l={...m,...n};l.floorNumber=o,l.roomTypeWeights.gym=o===a?60:0,o===a&&(d=null,console.log(`[MapGen Floor ${o}] Reset consistent lift coords for the first floor.`)),console.log(`[MapGen Floor ${o}] Starting map generation (${t}x${i})...`);const c=Array.from({length:i},(()=>Array(t).fill(0))),h=[];let g=null;if(function(e,t,i,o,a){const{minRoomSize:s,maxRoomSize:n,numRooms:l,maxRoomAttempts:c,roomTypeWeights:h}=a;let d=0;const m=[];for(const e in h){const t=h[e];if(t>0)for(let i=0;i<t;i++)m.push(e)}for(0===m.length&&(m.push("utility"),console.warn("[MapGen Rooms] No room types. Defaulting to 'utility'."));t.length<l&&d<c;){d++;const l=r(s,n),c=r(s,n),h=r(1,i-l-2),u=r(1,o-c-2),g={col:h,row:u,width:l,height:c,type:m[r(0,m.length-1)],id:`room_f${a.floorNumber}_${t.length+1}`,centerTileX:Math.floor(h+l/2),centerTileY:Math.floor(u+c/2),connected:!1,x:h,y:u};let f=!1;const p=2;for(const e of t)if(g.col<e.col+e.width+p&&g.col+g.width+p>e.col&&g.row<e.row+e.height+p&&g.row+g.height+p>e.row){f=!0;break}if(!f){t.push(g);for(let t=g.row;t<g.row+g.height;t++)for(let a=g.col;a<g.col+g.width;a++)t>=0&&t<o&&a>=0&&a<i&&(e[t][a]=2)}}t.length<l?console.warn(`[MapGen Rooms] Placed ${t.length}/${l} rooms.`):console.log(`[MapGen Rooms] Placed ${t.length} rooms.`)}(c,h,t,i,l),h.length<1){const e=`[MapGen Floor ${o}] CRITICAL: No rooms generated. Cannot place lift.`;throw console.error(e),new Error(e)}h.length>=2?function(e,t,i,o){if(t.length<2)return;console.log(`[MapGen Connect] Connecting ${t.length} rooms...`);const a=new Set([t[0].id]);let s=t.slice(1);for(;s.length>0;){let n=1/0,r=null,l=null,c=-1;for(let e=0;e<s.length;e++){const i=s[e];for(const o of t)if(a.has(o.id)){const t=i.centerTileX-o.centerTileX,a=i.centerTileY-o.centerTileY,s=t*t+a*a;s<n&&(n=s,r=i,l=o.id,c=e)}}if(!r||null===l){console.error("[MapGen Connect] Could not find next pair. Remaining:",s.map((e=>e.id)));break}{const n=t.find((e=>e.id===l));if(!n){console.error(`[MapGen Connect] Error finding connected room ${l}.`),s.splice(c,1);continue}u(e,n,r,i,o),a.add(r.id),s.splice(c,1)}}console.log(`[MapGen Connect] Finished. Connected: ${a.size}`)}(c,h,t,i):console.warn(`[MapGen Floor ${o}] Only 1 room generated. No corridors needed between rooms.`);try{const e=function(e,t,i,o,a,s,n,r){let l=n,c=null;if(o===a){if(console.log(`[MapGen F${o}] Finding initial IN-ROOM lift loc...`),l=function(e,t,i,o){if(console.log("  [MapGen FindLift V6] Searching for lift spot INSIDE a room..."),!o||0===o.length)return console.warn("  [MapGen FindLift V6] No rooms. Placement will fail."),null;const a=[];for(const s of o){const o=s.col+1,n=s.col+s.width-2,r=s.row+1,l=s.row+s.height-2;if(o<=n&&r<=l){for(let c=r;c<=l;c++)for(let r=o;r<=n;r++)if(2===e[c]?.[r]){const o=p(r,c,e,t,i);!o.isChokepoint&&o.openSides>=2&&a.push({tileX:r,tileY:c,room:s})}}else{const o=s.centerTileX,n=s.centerTileY;if(o>=s.col&&o<s.col+s.width&&n>=s.row&&n<s.row+s.height&&2===e[n]?.[o]){const r=p(o,n,e,t,i);!r.isChokepoint&&r.openSides>=1&&a.push({tileX:o,tileY:n,room:s})}}}if(a.length>0){const e=Math.floor(t/2),o=Math.floor(i/2);a.sort(((t,i)=>(t.tileX-e)**2+(t.tileY-o)**2-((i.tileX-e)**2+(i.tileY-o)**2)));const s=a[0];return console.log(`  [MapGen FindLift V6] Selected IN ROOM (${s.room.id}) @(${s.tileX},${s.tileY}).`),{tileX:s.tileX,tileY:s.tileY}}return console.warn("[MapGen FindLift V6] No suitable IN-ROOM location. Will fail."),null}(e,t,i,r),!l)throw new Error(`[MapGen F${o}] CRIT: No valid IN-ROOM lift loc on minFloor.`);console.log(`[MapGen F${o}] Established consistent IN-ROOM lift @(${l.tileX},${l.tileY})`),c=l}else if(!l)throw new Error(`[MapGen Lift] CRIT: Missing consistent lift coords for F${o}.`);const{tileX:h,tileY:d}=l;if(d<0||d>=i||h<0||h>=t)throw new Error(`[MapGen Lift] Coords (${h},${d}) out of bounds F${o}.`);const m=e[d]?.[h];0===e[d][h]&&(console.warn(`[MapGen F${o}] Lift loc (${h},${d}) is WALL. Forcing connection...`),y(e,h,d,t,i)||0!==e[d][h]||console.error(`[MapGen LiftConnect] FAILED to connect wall @(${h},${d}) & it REMAINED WALL.`)),e[d][h]=3;let u=null;for(const e of r)if(h>=e.col&&h<e.col+e.width&&d>=e.row&&d<e.row+e.height&&2===m){u=e,console.log(`  [MapGen Lift F${o}] Lift @(${h},${d}) is on TILE_ROOM_FLOOR within existing room ${e.id}.`);break}if(!u){const s=u?`Original tile was ${m}, not TILE_ROOM_FLOOR.`:"Not in existing room region";console.warn(`[MapGen F${o}] Lift @(${h},${d}) will use carved alcove. Reason: ${s}`),o===a&&2!==m&&console.error(`[MapGen F${o}] CRITICAL MISMATCH on minFloor! _findLiftPlacementLocation selected (${h},${d}) which was type ${m}, not TILE_ROOM_FLOOR. This indicates a flaw in _findLiftPlacementLocation.`);const n=3,l=Math.max(1,h-Math.floor(n/2)),c=Math.max(1,d-Math.floor(n/2)),g={col:l,row:c,width:Math.min(n,t-1-l),height:Math.min(n,i-1-c),type:"lift_alcove",id:`room_f${o}_liftalcove_${h}_${d}`,centerTileX:h,centerTileY:d,connected:!0,x:l,y:c};for(let o=g.row;o<g.row+g.height;o++)for(let a=g.col;a<g.col+g.width;a++)3!==e[o]?.[a]&&o>0&&o<i-1&&a>0&&a<t-1&&(e[o][a]=2);r.push(g),u=g}if(!u){const a=`[MapGen Lift F${o}] CRIT: Could NOT associate lift @(${h},${d}) with any room object even after alcove attempt.`;throw console.error(a),S(e,t,i),new Error(a)}const g={x:(h+.5)*s,y:(d+.5)*s,tileX:h,tileY:d,roomId:u.id};return console.log(`[MapGen F${o}] Placed lift @(${h},${d}) in room ${u.id}. World:(${g.x.toFixed(1)},${g.y.toFixed(1)})`),{position:g,coords:c||l}}(c,t,i,o,a,s,d,h);g=e.position,e.coords&&(d=e.coords)}catch(e){throw console.error(`[MapGen Floor ${o}] CRITICAL: Lift placement failed:`,e),new Error(`Lift placement failed on floor ${o}: ${e.message}`)}if(function(e,t,i){for(let o=0;o<t;o++)e[0][o]=0,e[i-1][o]=0;for(let o=0;o<i;o++)e[o][0]=0,e[o][t-1]=0}(c,t,i),g&&!w(c,g,t,i)){if(console.warn(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) initially unreachable. Attempting final force connection.`),!y(c,g.tileX,g.tileY,t,i)||!w(c,g,t,i)){const e=`CRITICAL: Placed lift at tile(${g.tileX}, ${g.tileY}) is UNREACHABLE even after force connect! Generation failed.`;throw console.error(`[MapGen Floor ${o}] ${e}`),S(c,t,i),new Error(`Lift is unreachable on floor ${o}. Cannot proceed.`)}console.log(`[MapValidation Floor ${o}] Lift connection successful after second attempt.`)}else{if(!g)throw new Error(`Map generated without a valid lift position on floor ${o}.`);console.log(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) is reachable.`)}return console.log(`[MapGen Floor ${o}] Map generation completed successfully.`),{map:c,rooms:h,liftPosition:g}}(e);this.map=t,this.rooms=i,this.liftPosition=o,this.renderer.resetColorCache(),this.placeBooksReliably(s.booksPerMap),null===this.floorNumber&&(console.log(`[ProcMap F${this.floorNumber}] Init complete. Lift@(${o?.tileX},${o?.tileY}). Rooms: ${this.rooms.length}`),this.logMapGrid())}catch(e){throw console.error(`[ProcMap F${this.floorNumber}] CRIT ERR during map gen/setup:`,e),e}}placeBooksReliably(e){this.books=[];const t=[],i=new Set;for(let e=0;e<this.rows;e++)for(let i=0;i<this.cols;i++){const o=this.map[e]?.[i],a=this.liftPosition&&e===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||a||t.push({r:e,c:i})}let o=0;for(;o<e&&t.length>0;){const e=Math.floor(Math.random()*t.length),{r:a,c:s}=t.splice(e,1)[0],r=`${s},${a}`;if((1===this.map[a]?.[s]||2===this.map[a]?.[s])&&!i.has(r)){const e=`book_f${this.floorNumber}_${o+1}`;this.books.push(new n((s+.5)*this.tileSize,(a+.5)*this.tileSize,e,this.tileSize)),i.add(r),o++}}}isWalkable(e,t){if(!this.map)return!1;const i=Math.floor(e/this.tileSize),o=Math.floor(t/this.tileSize);if(i<0||i>=this.cols||o<0||o>=this.rows)return!1;const a=this.map[o]?.[i];return 1===a||2===a||3===a}findRandomInitialSpawnPosition(e=null){if(!this.map)return;const t=[],i=e?{width:e.collisionBoxWidth,height:e.collisionBoxHeight}:{width:.6*this.tileSize,height:.8*this.tileSize},o=(e,t)=>{const o=(e+.5)*this.tileSize,a=(t+.5)*this.tileSize,s=this.map[t]?.[e],n=this.liftPosition&&t===this.liftPosition.tileY&&e===this.liftPosition.tileX;if(1!==s&&2!==s||n)return!1;const r=i.width/2,l=i.height/2,c=[{x:o-r,y:a-l},{x:o+r,y:a-l},{x:o-r,y:a+l},{x:o+r,y:a+l},{x:o,y:a-l},{x:o,y:a+l},{x:o-r,y:a},{x:o+r,y:a}];for(const e of c)if(!this.isWalkable(e.x,e.y))return!1;return!0};for(let e=1;e<this.rows-1;e++)for(let i=1;i<this.cols-1;i++)o(i,e)&&this.isTileOpenEnough(i,e,2,!0)&&t.push({r:e,c:i});if(0===t.length){console.warn(`[ProcMap F${this.floorNumber} Spawn] No ideal open spots found, checking all valid tiles.`);for(let e=0;e<this.rows;e++)for(let i=0;i<this.cols;i++)o(i,e)&&t.push({r:e,c:i})}if(0===t.length){console.error(`[ProcMap F${this.floorNumber} Spawn] CRITICAL: No suitable spawn tiles found after thorough check!`);for(const e of this.rooms)for(let t=0;t<e.height;t++)for(let i=0;i<e.width;i++){const o=e.y+t,a=e.x+i;if(2===this.map[o]?.[a])return console.warn(`[ProcMap F${this.floorNumber} Spawn] EMERGENCY FALLBACK to first room floor tile: (${a},${o})`),{x:(a+.5)*this.tileSize,y:(o+.5)*this.tileSize}}return}const{r:a,c:s}=t[Math.floor(Math.random()*t.length)];return console.log(`[ProcMap F${this.floorNumber} Spawn] Selected spawn tile: (${s},${a})`),{x:(s+.5)*this.tileSize,y:(a+.5)*this.tileSize}}isTileOpenEnough(e,t,i=2,o=!1){if(!this.map)return!1;let a=0;const s=[[0,-1],[0,1],[-1,0],[1,0]],n=[!1,!1,!1,!1];for(let i=0;i<s.length;i++){const o=e+s[i][0],r=t+s[i][1];if(o>=0&&o<this.cols&&r>=0&&r<this.rows){const e=this.map[r]?.[o];1!==e&&2!==e&&3!==e||(a++,n[i]=!0)}}return!(a<i||o&&2===a&&(n[0]&&n[1]&&!n[2]&&!n[3]||n[2]&&n[3]&&!n[0]&&!n[1]))}findNearestWalkableTile(e,t,i=8,o=!1,a=!1){if(!this.map)return null;const s=Math.floor(e/this.tileSize),n=Math.floor(t/this.tileSize),r=[1,2];if(s>=0&&s<this.cols&&n>=0&&n<this.rows){const e=this.map[n][s];if(r.includes(e)&&(!o||3!==e)&&this.isTileOpenEnough(s,n,2,a))return{x:(s+.5)*this.tileSize,y:(n+.5)*this.tileSize}}for(let e=1;e<=i;e++)for(let t=-e;t<=e;t++)for(let i=-e;i<=e;i++){if(Math.abs(i)<e&&Math.abs(t)<e)continue;const l=s+i,c=n+t;if(l<0||l>=this.cols||c<0||c>=this.rows)continue;const h=this.map[c]?.[l];if(r.includes(h)&&(!o||3!==h)&&this.isTileOpenEnough(l,c,2,a))return{x:(l+.5)*this.tileSize,y:(c+.5)*this.tileSize}}const l=[[s,n]],c=new Set([`${s},${n}`]),h=[1,2,3];for(;l.length>0;){const[e,t]=l.shift();for(const[i,s]of[[0,-1],[0,1],[-1,0],[1,0]]){const n=e+i,d=t+s,m=`${n},${d}`;if(n>=0&&n<this.cols&&d>=0&&d<this.rows&&!c.has(m)){const e=this.map[d]?.[n];if(c.add(m),r.includes(e)&&(!o||3!==e)&&this.isTileOpenEnough(n,d,2,a))return{x:(n+.5)*this.tileSize,y:(d+.5)*this.tileSize};h.includes(e)&&l.push([n,d])}}}return null}getRoomContainingTile(e,t){if(!this.rooms||0===this.rooms.length)return null;for(const i of this.rooms)if(e>=i.col&&e<i.col+i.width&&t>=i.row&&t<i.row+i.height){const o=this.map[t]?.[e];if(3===o||2===o&&"lift_alcove"!==i.type)return i;if("lift_alcove"===i.type&&3===o)return i}return null}getRoomCenter(e){return e?{x:(e.col+e.width/2)*this.tileSize,y:(e.row+e.height/2)*this.tileSize}:null}getSpawnPointInRoomOfLift(e,t,i=1){const o=this.getRoomContainingTile(e,t);if(!o)return null;const a=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}],s=[];for(const i of a){const a=e+i.dx,n=t+i.dy;a>=o.col&&a<o.col+o.width&&n>=o.row&&n<o.row+o.height&&2===this.map[n]?.[a]&&this.isTileOpenEnough(a,n,2,!0)&&s.push({x:(a+.5)*this.tileSize,y:(n+.5)*this.tileSize})}return s.length>0?s[0]:this.getRoomCenter(o)}findNearbyUnansweredBook(e,t,i=.8*this.tileSize){if(!this.books||0===this.books.length)return null;let o=null,a=i*i;for(const i of this.books)if(!i.isCollected){const s=i.x-e,n=i.y-t,r=s*s+n*n;r<a&&(a=r,o=i)}return o}markBookAsCollected(e){if(!e||!this.books)return!1;const t=this.books.find((t=>t.id===e.id));return!(!t||t.isCollected||(t.isCollected=!0,0))}findNearbyLift(e,t,i=.7*this.tileSize){if(!this.liftPosition)return null;const o=e-this.liftPosition.x,a=t-this.liftPosition.y;return o*o+a*a<i*i?this.liftPosition:null}getLiftPosition(){return this.liftPosition}draw(e,t=null){this.map&&this.renderer&&this.renderer.draw(e,{map:this.map,rooms:this.rooms,books:this.books,liftPosition:this.liftPosition,offsetX:this.offsetX,offsetY:this.offsetY,cols:this.cols,rows:this.rows,tileSize:this.tileSize},t)}logMapGrid(){if(!this.map)return void console.log(`[ProcMap F${this.floorNumber}] Map grid N/A.`);console.log(`--- Map Grid F${this.floorNumber} (${this.cols}x${this.rows}) ---`);let e="   ";for(let t=0;t<this.cols;t++)e+=t%10==0?Math.floor(t/10):" ";console.log(e),e="   ";for(let t=0;t<this.cols;t++)e+=t%10;console.log(e);for(let e=0;e<this.rows;e++){const t=e.toString().padStart(2," "),i=this.map[e].map((e=>{switch(e){case 0:return"#";case 1:return".";case 2:return" ";case 3:return"L";default:return"?"}})).join("");console.log(`${t} ${i}`)}this.liftPosition?console.log(`Lift tile map[${this.liftPosition.tileY}][${this.liftPosition.tileX}]: ${this.map[this.liftPosition.tileY]?.[this.liftPosition.tileX]}. Reported @(${this.liftPosition.tileX},${this.liftPosition.tileY})`):console.log("Lift N/A."),console.log(`--- End Map Grid F${this.floorNumber} ---`)}}class v{constructor(e=1,t=3){e>=t?(console.warn(`Level constructor: minFloor (${e}) must be less than maxFloor (${t}). Using defaults 1 and 3.`),this.minFloor=1,this.maxFloor=3):(this.minFloor=e,this.maxFloor=t),this.currentFloor=this.minFloor,this.currentMap=null,this.tileSize=32}async loadFloor(e,t,i){if(e<this.minFloor||e>this.maxFloor){const t=`Attempted to load invalid floor: ${e}. Allowed range: [${this.minFloor}-${this.maxFloor}]`;throw console.error(`[Level] ${t}`),new Error(t)}console.log(`[Level] Loading floor ${e}...`),this.currentFloor=e;try{if(this.currentMap=new M(t,i,this.currentFloor,this.minFloor,this.maxFloor),!(this.currentMap.tileSize&&this.currentMap.map&&this.currentMap.books&&this.currentMap.getLiftPosition()))throw new Error("[Level] ProceduralMap instance is missing essential properties after creation (tileSize, map, books, or liftPosition).");this.tileSize=this.currentMap.tileSize;const o=this.currentMap.getLiftPosition();console.log(`  [Level] Map generated for floor ${this.currentFloor}. TileSize: ${this.tileSize}. Lift at tile(${o.tileX}, ${o.tileY}).`),console.log(`[Level] Floor ${e} loaded successfully. Map size: ${this.currentMap.cols}x${this.currentMap.rows}. ${this.currentMap.books.length} books placed.`)}catch(t){throw console.error(`[Level] CRITICAL FAILURE loading floor ${e}: Failed to create or validate ProceduralMap:`,t),this.currentMap=null,new Error(`Map generation/validation failed for floor ${e}. ${t.message||t}`)}return Promise.resolve()}getCurrentBooks(){return this.currentMap?this.currentMap.books:[]}}class b{constructor(e){this.game=e,this.canvas=null,this.ctx=null}initializeCanvas(){if(this.canvas=document.getElementById("game-canvas"),!this.canvas)throw new Error("[Renderer] Canvas 'game-canvas' not found!");if(this.ctx=this.canvas.getContext("2d"),!this.ctx)throw new Error("[Renderer] Failed to get 2D context.");return this.ctx.imageSmoothingEnabled=!1,this.resizeCanvas(),console.log("[Renderer] Canvas initialized."),{canvas:this.canvas,ctx:this.ctx}}resizeCanvas(){this.canvas&&(this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.game.character&&this.game.level?.currentMap&&this.centerCameraOnCharacter(),console.log(`[Renderer] Canvas resized to ${this.canvas.width}x${this.canvas.height}`))}centerCameraOnCharacter(){const{character:e,level:t,canvas:i}=this.game;e&&t?.currentMap&&i&&(t.currentMap.offsetX=Math.floor(i.width/2-e.x),t.currentMap.offsetY=Math.floor(i.height/2-e.y))}drawFrame(){if(!this.ctx||!this.canvas)return;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const e=this.game.level?.currentMap,t=this.game.character;e&&e.draw(this.ctx,this.game.bookImage),t&&e&&t.draw(e.offsetX,e.offsetY)}drawWinScreen(){this.ctx&&this.canvas&&(this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle="lime",this.ctx.font='clamp(32px, 8vw, 48px) "Press Start 2P", cursive, Arial, sans-serif',this.ctx.fillText("ZWYCIĘSTWO!",this.canvas.width/2,this.canvas.height/2-80),this.ctx.fillStyle="white",this.ctx.font="clamp(24px, 5vw, 32px) Arial, sans-serif",this.ctx.fillText(`Zebrano wszystkie ${this.game.targetBooksToWin} książki!`,this.canvas.width/2,this.canvas.height/2),this.ctx.font="clamp(18px, 4vw, 24px) Arial, sans-serif",this.ctx.fillText("Uniwersytet uratowany!",this.canvas.width/2,this.canvas.height/2+60),this.ctx.font="clamp(14px, 3vw, 18px) Arial, sans-serif",this.ctx.fillStyle="#ccc",this.ctx.fillText("(Odśwież stronę, aby zagrać ponownie)",this.canvas.width/2,this.canvas.height-50))}}const C=null;class I{constructor(e){this.game=e,this.handleAnswer=this.handleAnswer.bind(this),this.handleFloorSelection=this.handleFloorSelection.bind(this)}update(e){this.game.gameState===i.PLAYING&&this.updatePlayingState(e)}updatePlayingState(e){const t=this.game.character;if(!this.game.level?.currentMap||!t||!this.game.inputManager)return;const{moved:o}=this.handleMovement();t?.updateAnimation&&t.updateAnimation(e),o||this.game.gameState!==i.PLAYING||this.handleInteractions()}handleMovement(){const e=this.game.character,t=this.game.level.currentMap,i=this.game.inputManager;if(!e||!t||!i)return{moved:!1};const o=i.getInputDirection();let a=o.x*e.speed,n=o.y*e.speed,r=0,l=0,c=!1;if(0!==a||0!==n){const t=0!==a&&!this.checkCollision(e.x+a,e.y),i=0!==n&&!this.checkCollision(e.x,e.y+n);t&&(r=a),i&&(l=n),0!==a&&0!==n&&this.checkCollision(e.x+a,e.y+n)&&(t&&!i?l=0:i&&!t?r=0:t||i||(r=0,l=0)),0===r&&0===l||(e.x+=r,e.y+=l,c=!0,Math.abs(r)>=Math.abs(l)?0!==r&&(e.currentDirection=r>0?s.Direction.RIGHT:s.Direction.LEFT):0!==l&&(e.currentDirection=l>0?s.Direction.DOWN:s.Direction.UP))}return e.isMoving=c,{moved:c}}checkCollision(e,t){const i=this.game.level?.currentMap,o=this.game.character;if(!i||!o)return!0;const a=o.getCollisionBox(e,t),s=[{x:a.left,y:a.top},{x:a.right,y:a.top},{x:a.left,y:a.bottom},{x:a.right,y:a.bottom},{x:e,y:a.top},{x:e,y:a.bottom},{x:a.left,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio},{x:a.right,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio}];for(const e of s)if(!i.isWalkable(e.x,e.y))return!0;return!1}handleInteractions(){const e=this.game.level?.currentMap,t=this.game.character;if(!e||!t||this.game.gameState!==i.PLAYING)return;const o=e.findNearbyUnansweredBook(t.x,t.y);o?this.initiateQuestion(o):this.game.liftCooldownActive||e.findNearbyLift(t.x,t.y)&&this.initiateFloorSelection()}initiateQuestion(e){if(this.game.gameState!==i.PLAYING)return;if(this.game.setGameState(i.ASKING_QUESTION),this.game.character&&(this.game.character.isMoving=!1),this.game.currentBookTarget=e,0===this.game.availableQuestions.length&&(this.game.availableQuestions=[...o],0===this.game.availableQuestions.length))return a.flashMessage("Brak pytań!","error"),this.game.setGameState(i.PLAYING),void(this.game.currentBookTarget=null);const t=Math.floor(Math.random()*this.game.availableQuestions.length);this.game.currentQuestionData=this.game.availableQuestions.splice(t,1)[0],a.showQuestion(this.game.currentQuestionData)}handleAnswer(e){const{gameState:t,currentQuestionData:o,currentBookTarget:s,level:n}=this.game;if(t!==i.ASKING_QUESTION||!o||!s)return a.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,void(this.game.gameState!==i.GAME_OVER&&this.game.setGameState(i.PLAYING));if(e===o.correctAnswer)if(a.flashMessage("Prawidłowo!","success",1500),n?.currentMap?.markBookAsCollected(s)){if(this.game.totalBooksCollectedGlobally++,a.updateScore(this.game.totalBooksCollectedGlobally,this.game.targetBooksToWin),this.game.totalBooksCollectedGlobally>=this.game.targetBooksToWin)return a.hideQuestion(),void this.game._setGameOver(!0)}else a.flashMessage("Błąd zbierania!","error");else a.flashMessage("Nieprawidłowa!","error"),this.game.availableQuestions.push(o);a.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,this.game.gameState!==i.GAME_OVER&&this.game.setGameState(i.PLAYING)}initiateFloorSelection(){this.game.gameState!==i.PLAYING||this.game.liftCooldownActive||(this.game.setGameState(i.SELECTING_FLOOR),this.game.character&&(this.game.character.isMoving=!1),a.showFloorSelectionUI(this.game.level.minFloor,this.game.level.maxFloor,this.game.level.currentFloor))}handleFloorSelection(e){this.game.gameState===i.SELECTING_FLOOR?(a.hideFloorSelectionUI(),e===this.game.level.currentFloor||e<this.game.level.minFloor||e>this.game.level.maxFloor?this.game.setGameState(i.PLAYING):this.handleLiftTransition(e).catch((e=>{this.game._handleFatalError(`Błąd przejścia: ${e.message}`)}))):a.hideFloorSelectionUI()}async handleLiftTransition(e){const t=this.game,o=this.game.level?.currentFloor===C||e===C;if(o&&console.log(`[GM F${e} LiftTrans] Start. Cooldown:${t.liftCooldownActive}`),t.liftCooldownActive&&t.gameState!==i.SELECTING_FLOOR)o&&console.warn(`[GM F${e} LiftTrans] Aborted: Cooldown or invalid state (${t.gameState})`);else{t.gameState===i.SELECTING_FLOOR?t.setGameState(i.TRANSITIONING):t.gameState!==i.TRANSITIONING&&(console.warn(`[GM F${e} LiftTrans] Unexpected state ${t.gameState}. Forcing TRANSITIONING.`),t.setGameState(i.TRANSITIONING)),t.character&&(t.character.isMoving=!1),a.hideQuestion(),a.hideFloorSelectionUI(),t.liftCooldownActive=!0,a.flashMessage(`Przejście na piętro ${e}...`,"info",1800);try{await t.level.loadFloor(e,t.canvas.width,t.canvas.height);const i=t.level.currentMap;if(!i)throw new Error(`Map instance null for F${e}.`);const a=i.getLiftPosition();if(!a)throw new Error(`No lift pos data on F${e}!`);o&&console.log(`  [GM F${e} LiftTrans] Lift @(${a.tileX},${a.tileY})`);let n=null;const r=i.getRoomContainingTile(a.tileX,a.tileY);if(r?(o&&console.log(`  [GM F${e} LiftTrans] Lift in room ${r.id||"N/A"}. Spawning center.`),n=i.getRoomCenter(r),n||(console.error(`  [GM F${e} LiftTrans] CRIT: getRoomCenter null for room ${r.id||"N/A"}. Fallback.`),n=i.getSpawnPointInRoomOfLift(a.tileX,a.tileY,1))):(console.error(`  [GM F${e} LiftTrans] CRIT: Lift @(${a.tileX},${a.tileY}) NOT in any room! Fallback near lift.`),n=i.getSpawnPointInRoomOfLift(a.tileX,a.tileY,1)||i.findNearestWalkableTile(a.x,a.y,3,!0,!1)),n||(n={x:a.x,y:a.y}),!n)throw new Error(`PANIC: No spawn pos for F${e}.`);t.character.x=n.x,t.character.y=n.y,o&&console.log(`  [GM F${e} LiftTrans] Initial land (pre-nudge):(${t.character.x.toFixed(1)},${t.character.y.toFixed(1)})`),t.character.currentDirection=s.Direction.DOWN,t.character.isMoving=!1,this.ensureCharacterIsOnWalkableTile(!1),o&&console.log(`  [GM F${e} LiftTrans] Final pos (post-nudge):(${t.character.x.toFixed(1)},${t.character.y.toFixed(1)})`),t.renderer?.centerCameraOnCharacter(),t.startLiftCooldownTimer()}catch(o){console.error(`[GM F${e} LiftTrans] Error:`,o),t.liftCooldownActive=!1,t.gameState!==i.TRANSITIONING&&t.gameState!==i.SELECTING_FLOOR||t.setGameState(i.PLAYING),this.game._handleFatalError(`Transition error to F${e}: ${o.message||o}`)}}}ensureCharacterIsOnWalkableTile(e=!1){const t=this.game.character,i=this.game.level?.currentMap;if(!t||!i)return;const o=Math.floor(t.x/i.tileSize),a=Math.floor(t.y/i.tileSize),s=o>=0&&o<i.cols&&a>=0&&a<i.rows?i.map[a]?.[o]:0,n=3===s,r=i.isWalkable(t.x,t.y)&&(!n||e),l=this.checkCollision(t.x,t.y),c=l||!r,h=this.game.level?.currentFloor===C;if(c){h&&console.warn(`[GM F${this.game.level.currentFloor} AntiStuck] Char@(${t.x.toFixed(1)},${t.y.toFixed(1)}) tile ${s}(${o},${a}) needs nudge. Collide:${l},SafeStand:${r}(allowLift:${e})`);let c=i.findNearestWalkableTile(t.x,t.y,8,!0,!0);if(c||(h&&console.warn("  [AntiStuck] Initial (avoidNarrow) failed. Retrying allowNarrow..."),c=i.findNearestWalkableTile(t.x,t.y,8,!0,!1)),c||!n||e||(h&&console.warn("  [AntiStuck] AllowNarrow failed. Trying any spot incl. lift..."),c=i.findNearestWalkableTile(t.x,t.y,3,!1,!1)),c)h&&console.log(`  [AntiStuck] Nudging to safe:(${c.x.toFixed(1)},${c.y.toFixed(1)})`),t.x=c.x,t.y=c.y,this.game.renderer?.centerCameraOnCharacter();else{h&&console.error("  [AntiStuck] CRIT: No safe nudge spot. Random map spawn...");const e=i.findRandomInitialSpawnPosition();e?(h&&console.warn(`  [AntiStuck] Emergency random:(${e.x.toFixed(1)},${e.y.toFixed(1)})`),t.x=e.x,t.y=e.y,this.game.renderer?.centerCameraOnCharacter()):(h&&console.error("  [AntiStuck] EVEN RANDOM SPAWN FAILED! Unrecoverable."),this.game._handleFatalError("Anti-Stuck system failed: No spawnable tiles found."))}}}}const z={track1:e.p+"assets/audio/back126c4c9e8849503fadb12.mp3",track2:e.p+"assets/audio/back2ddba92be3cd8ac98633a.mp3",track3:e.p+"assets/audio/back381530afe1194de9f2bb1.mp3"},k=["track1","track2","track3"];class E{constructor(){this.musicVolume=.5,this.currentMusicElement=null,this.currentTrackKey=null,this.isMusicPlaying=!1;const e=localStorage.getItem("musicVolume");null!==e&&(this.musicVolume=parseFloat(e)),this.audioElements={},this._preloadTracks()}_preloadTracks(){console.log("[AudioManager] Preloading tracks from imported sources...");for(const e in z)if(z.hasOwnProperty(e)){const t=z[e],i=new Audio(t);i.preload="auto",this.audioElements[e]=i,console.log(`  Preloaded ${e} from ${t}`)}}setMusicVolume(e){this.musicVolume=Math.max(0,Math.min(1,e)),this.currentMusicElement&&(this.currentMusicElement.volume=this.musicVolume),localStorage.setItem("musicVolume",this.musicVolume.toString()),console.log(`[AudioManager] Music volume set to: ${this.musicVolume}`)}getMusicVolume(){return this.musicVolume}playMusic(e,t=!0){if(!this.audioElements[e]){if(console.warn(`[AudioManager] Track "${e}" not found or not preloaded.`),!z[e])return void console.error(`[AudioManager] Source for track "${e}" not defined in MUSIC_SOURCES.`);this.audioElements[e]=new Audio(z[e])}this.isMusicPlaying&&this.currentTrackKey===e||(this.stopMusic(),this.currentMusicElement=this.audioElements[e],this.currentMusicElement.volume=this.musicVolume,this.currentMusicElement.loop=t,this.currentTrackKey=e,this.currentMusicElement.play().then((()=>{this.isMusicPlaying=!0,console.log(`[AudioManager] Playing music: ${e} (Volume: ${this.currentMusicElement.volume})`)})).catch((t=>{console.error(`[AudioManager] Error playing "${e}":`,t),console.error(`  Playback failure details: userInteracted (check Menu.js), document.hasFocus(): ${document.hasFocus()}`),this.isMusicPlaying=!1,this.currentMusicElement=null,this.currentTrackKey=null})))}stopMusic(){this.currentMusicElement&&(this.currentMusicElement.pause(),this.currentMusicElement.currentTime=0,this.isMusicPlaying=!1,console.log(`[AudioManager] Stopped music: ${this.currentTrackKey}`))}changeTrackForFloor(e){const t=Math.max(0,e-1)%k.length,i=k[t];i?(console.log(`[AudioManager] Floor ${e} -> Music track: ${i}`),this.playMusic(i)):console.warn(`[AudioManager] No track found for floor index ${t}.`)}startInitialMusic(e=1){console.log("[AudioManager] Attempting to start initial music..."),this.changeTrackForFloor(e)}}const L=e.p+"assets/images/character_red9229918d5325fcdf2e6e.png",T=e.p+"assets/images/character_blue7b9b140f7eb486e8a968.png",$=e.p+"assets/images/character_yellowff53afbc44f903d97313.png",x=e.p+"assets/images/character_green007c77c97eef8cbb1e94.png",F=e.p+"assets/images/booka54431ef16a38389c12e.png";class G{static CREATOR_NAMES=["Rafał","Dima","Venia","Kacper"];static CLASS_ATTENDING_INFO="Klasa 2P2T / Projektowanie stron internetowych";constructor(e){if(console.log(`[Game] Initializing with character: ${e}`),!e){const e="[Game] CRITICAL: Game initialized without a characterColor!";throw console.error(e),alert("Game cannot start: no character was selected."),new Error(e)}this.characterColor=e,this._gameState=i.IDLE,this.isRunning=!1,this.totalBooksCollectedGlobally=0,this.targetBooksToWin=15,this.availableQuestions=[],this.currentBookTarget=null,this.currentQuestionData=null,this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.canvas=null,this.ctx=null,this.character=null,this.level=null,this.inputManager=null,this.renderer=null,this.gameplayManager=null,this.audioManager=null,this.sprites={red:L,blue:T,yellow:$,green:x},this.bookImage=null,this.gameLoop=this.gameLoop.bind(this),this._handleFatalError=this._handleFatalError.bind(this),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null;try{this._initializeCoreComponents(),this.audioManager=new E,console.log("[Game] AudioManager created."),this.gameplayManager=new I(this),console.log("[Game] GameplayManager created."),this.renderer=new b(this);const{canvas:e,ctx:t}=this.renderer.initializeCanvas();this.canvas=e,this.ctx=t,console.log("[Game] Renderer and Canvas initialized."),a.setGameplayManager(this.gameplayManager),a.initializeUI(this.inputManager),console.log("[Game] UIManager for in-game UI initialized."),this._addEventListeners(),console.log("[Game] Core components initialized. Waiting for triggerGameStart() from Menu.")}catch(e){console.error("[Game] Synchronous core initialization failed:",e),alert(`Critical initialization error: ${e.message}. Game cannot start.`)}}get gameState(){return this._gameState}setGameState(e){this._gameState!==e&&(console.log(`[Game State] ${this._gameState} -> ${e}`),this._gameState=e)}_initializeCoreComponents(){this.inputManager=new t,this.level=new v(1,3)}_addEventListeners(){window.addEventListener("resize",(()=>this.renderer?.resizeCanvas()))}async triggerGameStart(){if(this.gameState!==i.IDLE)return void console.warn(`[Game] triggerGameStart called but game state is ${this.gameState}. Aborting.`);console.log(`[Game] triggerGameStart received for character: ${this.characterColor}. Starting asset loading...`);const e=a.getLoadingOverlay();e&&e.classList.add("visible");try{await this._loadAssetsAndThenStartLogic(),console.log("[Game] Game start sequence completed successfully.")}catch(t){console.error("[Game] Error during _loadAssetsAndThenStartLogic (from triggerGameStart):",t),e&&e.classList.remove("visible"),this.gameState!==i.GAME_OVER&&this._handleFatalError(`Game start process failed: ${t.message}`)}}async _loadAssetsAndThenStartLogic(){const e=a.getLoadingOverlay();try{this.setGameState(i.LOADING),e&&!e.classList.contains("visible")&&e.classList.add("visible"),await this._loadAssets(),await this._startGameLogic(),e&&e.classList.remove("visible")}catch(t){throw console.error("[Game] _loadAssetsAndThenStartLogic failed:",t),e&&e.classList.remove("visible"),this._handleFatalError(`Asset loading or game logic start error: ${t.message}`),t}}async _loadAssets(){console.log("[Game] Loading assets...");const e=[],t=this.characterColor||"red",i=this.sprites[t];if(!i)throw new Error(`Sprite path for character color "${t}" is undefined.`);if(console.log(`[Game] Using sprite: ${i} for character ${t}`),!this.ctx)throw new Error("Canvas context not available for Character creation.");this.character=new s(this.ctx,i,{speed:3,frameSize:32,scale:2,animationSpeed:150,frameCount:4}),e.push(new Promise(((e,t)=>{this.character.sprite.onload=()=>{console.log(`  [Assets] Character sprite loaded: ${i}`),e()},this.character.sprite.onerror=e=>t(new Error(`Failed to load character sprite: ${i}. Details: ${e.message||e}`))}))),F?(this.bookImage=new Image,this.bookImage.src=F,e.push(new Promise((e=>{this.bookImage.onload=()=>{console.log(`  [Assets] Book image loaded: ${F}`),e()},this.bookImage.onerror=()=>{console.warn(` [Assets] Failed to load book image: ${F}. Using fallback.`),this.bookImage=null,e()}})))):(console.warn("[Assets] No book sprite. Fallback rendering will be used."),this.bookImage=null),await Promise.all(e),console.log("[Game] All visual assets loaded successfully.")}async _startGameLogic(){if(console.log("[Game] Starting core game logic..."),!(this.level&&this.character&&this.canvas&&this.renderer&&this.gameplayManager&&this.audioManager))throw new Error("Cannot start game - essential components missing.");this.setGameState(i.LOADING_LEVEL);try{await this.level.loadFloor(this.level.minFloor,this.canvas.width,this.canvas.height);const e=this.level.currentMap;if(!e)throw new Error("Failed to load initial map.");const t=e.findRandomInitialSpawnPosition(this.character);if(!t)throw new Error("Failed to find a valid starting position on the map!");this.character.x=t.x,this.character.y=t.y,this.character.currentDirection=s.Direction.DOWN,this.character.isMoving=!1,this.gameplayManager.ensureCharacterIsOnWalkableTile(!1),this.totalBooksCollectedGlobally=0,this.availableQuestions=[...o],this.liftCooldownActive=!1,clearTimeout(this.liftCooldownTimer),this.liftCooldownTimer=null,this.currentBookTarget=null,this.currentQuestionData=null,this.renderer.centerCameraOnCharacter(),a.updateScore(this.totalBooksCollectedGlobally,this.targetBooksToWin),a.showGameUI(),this._boundKeyDownHandler=this.handleKeyDown.bind(this),this._boundKeyUpHandler=this.handleKeyUp.bind(this),window.addEventListener("keydown",this._boundKeyDownHandler),window.addEventListener("keyup",this._boundKeyUpHandler),this.audioManager.startInitialMusic(this.level.currentFloor),console.log(`[Game] Initial music started for floor ${this.level.currentFloor}`),this.setGameState(i.PLAYING),a.startTimer(),this.isRunning||(this.isRunning=!0,requestAnimationFrame(this.gameLoop),console.log("[Game] Game logic started. Game loop is running."))}catch(e){throw console.error("[Game] Error during _startGameLogic:",e),this._handleFatalError(`Level start process error: ${e.message}`),e}}_setGameOver(e=!0){this.gameState!==i.GAME_OVER&&(console.log(`[Game] Game Over. Win: ${e}`),this.setGameState(i.GAME_OVER),this.isRunning=!1,this.character&&(this.character.isMoving=!1),clearTimeout(this.liftCooldownTimer),this.audioManager&&this.audioManager.stopMusic(),this._boundKeyDownHandler&&window.removeEventListener("keydown",this._boundKeyDownHandler),this._boundKeyUpHandler&&window.removeEventListener("keyup",this._boundKeyUpHandler),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null,a.stopTimer(e),a.showGameOverScreen(e,G.CREATOR_NAMES,G.CLASS_ATTENDING_INFO))}stopGame(){console.log("[Game] Explicit stopGame requested."),this.gameState!==i.GAME_OVER?this._setGameOver(!1):console.log("[Game] stopGame called, but game is already over.")}_handleFatalError(e,t=!0){console.error("[Game] FATAL ERROR:",e),t&&this.gameState!==i.GAME_OVER&&a.flashMessage(`FATAL ERROR: ${e}`,"error",15e3),this.gameState!==i.GAME_OVER&&this._setGameOver(!1)}handleKeyDown(e){if(this.gameState!==i.PLAYING||!this.inputManager)return;let t=!1;const o=e.key.toLowerCase();["arrowup","w"].includes(o)?(this.inputManager.setKey("up",!0),t=!0):["arrowdown","s"].includes(o)?(this.inputManager.setKey("down",!0),t=!0):["arrowleft","a"].includes(o)?(this.inputManager.setKey("left",!0),t=!0):["arrowright","d"].includes(o)&&(this.inputManager.setKey("right",!0),t=!0),t&&e.preventDefault()}handleKeyUp(e){if(!this.inputManager)return;const t=e.key.toLowerCase();["arrowup","w"].includes(t)?this.inputManager.setKey("up",!1):["arrowdown","s"].includes(t)?this.inputManager.setKey("down",!1):["arrowleft","a"].includes(t)?this.inputManager.setKey("left",!1):["arrowright","d"].includes(t)&&this.inputManager.setKey("right",!1)}gameLoop(e){this.isRunning&&this.gameState!==i.GAME_OVER&&(this.gameplayManager?.update(e),this.renderer?.centerCameraOnCharacter(),this.renderer?.drawFrame(),requestAnimationFrame(this.gameLoop))}startLiftCooldownTimer(){clearTimeout(this.liftCooldownTimer),console.log("[Game] Starting lift cooldown: 2000ms."),this.liftCooldownTimer=setTimeout((()=>{this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.gameState===i.TRANSITIONING?(this.setGameState(i.PLAYING),a.flashMessage(`Arrived at floor ${this.level?.currentFloor}`,"success",1500)):console.warn(`[GameTimer] Lift cooldown ended, but state is ${this.gameState}. No state change.`)}),2e3)}}let A=null;class P{constructor(e){this.characterImageSources=e,this.selectedCharacter=null,this.userInteracted=!1,this.overlay=null,this.audioManagerInstance=null,console.log("[Menu] Constructor called. Initializing elements..."),this.initializeElements(),this.characterPanel&&this.characterGrid?this.setupCharacterImages():console.error("[Menu Constructor] CRITICAL: characterPanel or characterGrid is null AFTER initializeElements. Cannot setup images."),console.log("[Menu] Adding event listeners..."),this.addEventListeners(),this.show(),console.log("[Menu] Instance created and displayed.")}setAudioManager(e){if(this.audioManagerInstance=e,console.log("[Menu] AudioManager instance received in Menu."),this.musicVolume&&this.audioManagerInstance)this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume();else if(this.musicVolume){const e=localStorage.getItem("musicVolume");this.musicVolume.value=null!==e?100*parseFloat(e):50}}initializeElements(){if(this.menuContainer=document.querySelector(".menu-container"),!this.menuContainer)return void console.error("[Menu Init] CRITICAL: .menu-container not found!");this.settingsButton=this.menuContainer.querySelector(".settings-button"),this.playButton=this.menuContainer.querySelector(".play-button"),this.characterButton=this.menuContainer.querySelector(".character-button"),this.playButton?this.playButton.disabled=!0:console.warn("[Menu Init] .play-button not found."),this.characterButton||console.warn("[Menu Init] .character-button not found."),this.settingsButton||console.warn("[Menu Init] .settings-button not found."),this.settingsPanel=document.querySelector(".settings-panel"),this.settingsPanel?(this.settingsPanel.parentNode!==document.body&&this.settingsPanel.parentNode!==this.menuContainer&&document.body.appendChild(this.settingsPanel.parentNode.removeChild(this.settingsPanel)),this.musicVolume=this.settingsPanel.querySelector("#music-volume"),this.sfxVolume=this.settingsPanel.querySelector("#sfx-volume"),this.closeSettingsButton=this.settingsPanel.querySelector(".panel-close-button"),this.musicVolume||console.warn("[Menu Init] #music-volume slider not found in settings panel."),this.closeSettingsButton||console.warn("[Menu Init] .panel-close-button not found in settings panel.")):console.warn("[Menu Init] .settings-panel not found."),this.characterPanel=document.querySelector(".character-panel"),this.characterPanel?(this.characterPanel.parentNode!==document.body&&this.characterPanel.parentNode!==this.menuContainer&&document.body.appendChild(this.characterPanel.parentNode.removeChild(this.characterPanel)),this.characterGrid=this.characterPanel.querySelector(".character-grid"),this.closeCharacterPanelButton=this.characterPanel.querySelector(".panel-close-button"),this.characterGrid||console.error("[Menu Init] CRITICAL: .character-grid not found in character panel!"),this.closeCharacterPanelButton||console.warn("[Menu Init] .panel-close-button not found in character panel.")):console.error("[Menu Init] CRITICAL: .character-panel not found!");let e=this.menuContainer.querySelector(".main-menu-buttons");this.selectedCharacterDisplay=e?e.querySelector(".selected-character-display"):null,this.selectedCharacterDisplay||(this.selectedCharacterDisplay=document.createElement("div"),this.selectedCharacterDisplay.className="selected-character-display",this.playButton&&this.playButton.parentNode?this.playButton.parentNode.insertBefore(this.selectedCharacterDisplay,this.playButton):e?e.insertBefore(this.selectedCharacterDisplay,e.children[1]||null):this.menuContainer.appendChild(this.selectedCharacterDisplay)),this.updateSelectedCharacterDisplay()}setupCharacterImages(){if(!this.characterPanel||!this.characterGrid)return void console.warn("[Menu setupCharacterImages] Character panel or grid not found.");if(!this.characterImageSources||0===Object.keys(this.characterImageSources).length)return void console.warn("[Menu setupCharacterImages] No character image sources provided.");const e=this.characterGrid.querySelectorAll(".character-card");0!==e.length?e.forEach((e=>{const t=e.dataset.character,i=e.querySelector(".character-preview img");i&&this.characterImageSources[t]?i.src=this.characterImageSources[t]:i&&(console.warn(`[Menu setupCharacterImages] Image element found, but no source for character: ${t}`),i.alt=`${t} preview not available`)})):console.warn("[Menu setupCharacterImages] No character cards found in the grid.")}handleFirstInteraction(){this.userInteracted||(this.userInteracted=!0,console.log("[Menu] First user interaction recorded."))}addEventListeners(){const e=(e,t,i)=>{e&&e.addEventListener(t,(e=>{this.handleFirstInteraction(),i.call(this,e)}))};if(e(this.settingsButton,"click",this.toggleSettings),e(this.playButton,"click",this.startGame),e(this.characterButton,"click",this.openCharacterModal),this.closeSettingsButton?this.closeSettingsButton.addEventListener("click",(()=>this.closeSettings())):this.settingsPanel&&console.warn("[Menu addEventListeners] Close button for settings panel not found."),this.closeCharacterPanelButton?this.closeCharacterPanelButton.addEventListener("click",(()=>this.closeCharacterModal())):this.characterPanel&&console.warn("[Menu addEventListeners] Close button for character panel not found."),this.musicVolume){if(!this.audioManagerInstance){const e=localStorage.getItem("musicVolume");this.musicVolume.value=null!==e?100*parseFloat(e):50}this.musicVolume.addEventListener("input",(e=>{this.handleFirstInteraction();const t=parseFloat(e.target.value)/100;this.audioManagerInstance?(this.audioManagerInstance.setMusicVolume(t),console.log(`[Menu] Music volume changed via slider to: ${t}`)):(localStorage.setItem("musicVolume",t.toString()),console.warn("[Menu] Music volume slider changed, AudioManager not available. Saved to localStorage."))}))}this.sfxVolume,this.characterGrid&&this.characterGrid.addEventListener("click",(e=>{const t=e.target.closest(".character-card");t&&this.characterPanel&&this.characterPanel.classList.contains("visible")&&(this.handleFirstInteraction(),this.selectCharacter(t))}))}openCharacterModal(){this.characterPanel?(this.characterPanel.classList.add("visible"),this.settingsPanel?.classList.contains("visible")&&this.closeSettings(),this._ensureOverlay().classList.add("visible")):console.error("Character panel not found.")}closeCharacterModal(){this.characterPanel?.classList.remove("visible"),this.overlay?.classList.remove("visible")}selectCharacter(e){this.characterGrid&&e?.dataset?.character&&(this.selectedCharacter=e.dataset.character,this.characterGrid.querySelectorAll(".character-card").forEach((e=>e.classList.remove("selected"))),e.classList.add("selected"),this.playButton&&(this.playButton.disabled=!1),this.updateSelectedCharacterDisplay(),this.closeCharacterModal(),a.flashMessage(`Character ${this.selectedCharacter.charAt(0).toUpperCase()+this.selectedCharacter.slice(1)} selected!`,"success",2e3))}updateSelectedCharacterDisplay(){if(this.selectedCharacterDisplay)if(this.selectedCharacter&&this.characterImageSources&&this.characterImageSources[this.selectedCharacter]){const e=this.selectedCharacter,t=this.characterImageSources[e];let i=e.charAt(0).toUpperCase()+e.slice(1);if(this.characterGrid){const t=this.characterGrid.querySelector(`.character-card[data-character="${e}"] h3`);t&&(i=t.textContent)}this.selectedCharacterDisplay.innerHTML=`<img src="${t}" alt="${i}" class="selected-char-preview-img"> <span class="selected-char-name char-name-${e}">${i}</span>`}else this.selectedCharacterDisplay.innerHTML='<span style="color:#aaa;">No character selected</span>'}toggleSettings(){this.settingsPanel&&(this.settingsPanel.classList.contains("visible")?this.closeSettings():this.openSettings())}openSettings(){if(this.settingsPanel){if(this.settingsPanel.classList.add("visible"),this.characterPanel?.classList.contains("visible")&&this.closeCharacterModal(),this._ensureOverlay().classList.add("visible"),this.musicVolume&&this.audioManagerInstance)this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume();else if(this.musicVolume){const e=localStorage.getItem("musicVolume");this.musicVolume.value=e?100*parseFloat(e):50}}else console.error("Settings panel not found.")}closeSettings(){this.settingsPanel?.classList.remove("visible"),this.overlay?.classList.remove("visible")}_ensureOverlay(){return this.overlay||(this.overlay=document.createElement("div"),this.overlay.className="ui-modal-overlay",this.overlay.addEventListener("click",(e=>{e.target===this.overlay&&(this.characterPanel?.classList.contains("visible")&&this.closeCharacterModal(),this.settingsPanel?.classList.contains("visible")&&this.closeSettings())})),document.body.appendChild(this.overlay)),this.overlay}async startGame(){if(!this.userInteracted)return void a.flashMessage("Please interact with the menu first (e.g., click a button or choose a character).","warning",3e3);if(!this.selectedCharacter)return void a.flashMessage("Please select a character first!","warning",2500);const e=a.getLoadingOverlay();e&&e.classList.add("visible"),this.hide();const t=document.getElementById("game-canvas");if(!t)return console.error("[Menu] CRITICAL: #game-canvas not found!"),e&&e.classList.remove("visible"),void this.show();t.style.display="block";try{if(A&&"function"==typeof A.stopGame&&(console.log("[Menu] Stopping previous game instance."),A.stopGame(),A=null),console.log(`[Menu] Creating new Game instance with character: ${this.selectedCharacter}`),A=new G(this.selectedCharacter),!A||"function"!=typeof A.triggerGameStart)throw new Error("Game instance created, but triggerGameStart is not available.");await A.triggerGameStart()}catch(i){console.error("[Menu] Error during game initialization or start:",i),a.flashMessage(`Game Start Failed: ${i.message}`,"error",1e4),e&&e.classList.remove("visible"),this.show(),t&&(t.style.display="none"),A=null}}show(){this.menuContainer&&(this.menuContainer.style.display="flex");const e=document.getElementById("game-canvas");e&&(e.style.display="none"),a.hideGameUI(),a.hideGameOverScreen();const t=a.getLoadingOverlay();t&&t.classList.remove("visible")}hide(){this.menuContainer&&(this.menuContainer.style.display="none")}}const N=e.p+"assets/images/redc0823efecc8ece1a10c4.png",O=e.p+"assets/images/bluea60b5a2890283d3db0d0.png",R=e.p+"assets/images/yellowe7fd8d3003d4e49a0ad5.png",B=e.p+"assets/images/green1ba3e373f73ba58a2658.png";document.addEventListener("DOMContentLoaded",(()=>{console.log("[main.js] DOMContentLoaded. Initializing Menu..."),new P({red:N,blue:O,yellow:R,green:B}),console.log("[main.js] Menu instance created.")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,