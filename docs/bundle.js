(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var i=e.g.document;if(!t&&i&&(i.currentScript&&"SCRIPT"===i.currentScript.tagName.toUpperCase()&&(t=i.currentScript.src),!t)){var o=i.getElementsByTagName("script");if(o.length)for(var s=o.length-1;s>-1&&(!t||!/^http(s?):/.test(t));)t=o[s--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();class t{constructor(){this.keys={up:!1,down:!1,left:!1,right:!1}}setKey(e,t){this.keys.hasOwnProperty(e)&&(this.keys[e]=t)}getInputDirection(){let e=0,t=0;return this.keys.up&&(t-=1),this.keys.down&&(t+=1),this.keys.left&&(e-=1),this.keys.right&&(e+=1),{x:e,y:t}}}const i={LOADING:"LOADING",MENU:"MENU",PLAYING:"PLAYING",ASKING_QUESTION:"ASKING_QUESTION",SELECTING_FLOOR:"SELECTING_FLOOR",TRANSITIONING:"TRANSITIONING",GAME_OVER:"GAME_OVER"},o=[{question:"Który język programowania jest znany ze swojej wszechstronności i używany zarówno w backendzie (Node.js), jak i frontendzie?",options:["Python","Java","JavaScript","C#"],correctAnswer:2},{question:"Co oznacza skrót HTML?",options:["HyperText Markup Language","High Transfer Machine Language","Hyperlink and Text Management Language","Home Tool Markup Language"],correctAnswer:0},{question:"Która struktura danych działa na zasadzie LIFO (Last-In, First-Out)?",options:["Kolejka (Queue)","Stos (Stack)","Lista (List)","Drzewo (Tree)"],correctAnswer:1},{question:"Jak nazywa się proces znajdowania i naprawiania błędów w kodzie?",options:["Kompilacja","Testowanie","Debugowanie","Refaktoryzacja"],correctAnswer:2},{question:"Który paradygmat programowania opiera się na koncepcji 'obiektów', które mogą zawierać dane i kod?",options:["Programowanie funkcyjne","Programowanie proceduralne","Programowanie obiektowe","Programowanie logiczne"],correctAnswer:2},{question:"Co oznacza CSS?",options:["Cascading Style Sheets","Computer Style Syntax","Creative Styling System","Colorful Style Scripts"],correctAnswer:0},{question:"Który operator w JavaScript służy do ścisłego porównania (wartość i typ)?",options:["==","=","===","!="],correctAnswer:2},{question:"Jak nazywa się popularny system kontroli wersji używany przez programistów?",options:["Subversion (SVN)","Git","Mercurial","CVS"],correctAnswer:1},{question:"Który typ pętli w większości języków programowania jest najbardziej odpowiedni do iteracji po elementach tablicy, gdy nie znamy ich liczby?",options:["for","while","do...while","foreach (lub for...of)"],correctAnswer:3},{question:"Co to jest API?",options:["Advanced Programming Interface","Application Programming Interface","Automated Program Interaction","Algorithmic Processing Input"],correctAnswer:1}];class s{static scoreElement=null;static targetElement=null;static controlsContainer=null;static questionOverlay=null;static questionTextElement=null;static answerButtonsContainer=null;static floorSelectionPanel=null;static floorButtonsContainer=null;static flashMessageContainer=null;static loadingOverlayElement=null;static gameOverScreenElement=null;static gameOverTitleElement=null;static creatorNamesListElement=null;static classInfoElement=null;static returnToMenuButtonElement=null;static gameplayManagerInstance=null;static flashMessageTimeouts={};static setGameplayManager(e){e?(this.gameplayManagerInstance=e,console.log("[UIManager] GameplayManager instance registered successfully with UIManager.")):console.error("[UIManager] Attempted to set GameplayManager instance to null or undefined!")}static initializeUI(e){console.log("[UIManager] Initializing base UI elements (controls, panels)..."),e||console.error("[UIManager] InputManager is required for initializeUI to create controls."),this.createControls(e),this.createQuestionUI(),this.createFloorSelectionUI(),this.ensureFlashMessageContainer(),this.createGameOverScreen(),this.gameplayManagerInstance||console.warn("[UIManager] WARNING: GameplayManager instance is NOT SET at the end of initializeUI. Ensure Game.js calls UIManager.setGameplayManager() *before* UIManager.initializeUI()."),console.log("[UIManager] Base UI element initialization complete.")}static createControls(e){this.controlsContainer=document.getElementById("controls-container"),this.controlsContainer||(this.controlsContainer=document.createElement("div"),this.controlsContainer.id="controls-container",this.controlsContainer.classList.add("controls-container"),document.body.appendChild(this.controlsContainer)),this.controlsContainer.innerHTML="",[{direction:"up",icon:"↑",gridArea:"up"},{direction:"left",icon:"←",gridArea:"left"},{direction:"right",icon:"→",gridArea:"right"},{direction:"down",icon:"↓",gridArea:"down"}].forEach((({direction:t,icon:i,gridArea:o})=>{const s=document.createElement("button");if(s.className=`control-btn ${t}`,s.textContent=i,s.style.gridArea=o,s.dataset.direction=t,e){const i=i=>{e.setKey(t,!0),s.classList.add("active"),i.preventDefault()},o=i=>{e.keys[t]&&e.setKey(t,!1),s.classList.remove("active"),i.preventDefault()};s.addEventListener("touchstart",i,{passive:!1}),s.addEventListener("touchend",o,{passive:!1}),s.addEventListener("touchcancel",o,{passive:!1}),s.addEventListener("mousedown",i),s.addEventListener("mouseup",o),s.addEventListener("mouseleave",o)}this.controlsContainer.appendChild(s)}));const t=document.getElementById("score-display");if(t)this.scoreElement=t.querySelector("#score-value"),this.targetElement=t.querySelector("#score-target"),this.scoreElement&&(this.scoreElement.textContent="0"),this.targetElement&&(this.targetElement.textContent="?");else{const e=document.createElement("div");e.id="score-display",e.classList.add("score-display"),e.innerHTML='Books: <span id="score-value">0</span> / <span id="score-target">?</span>',document.body.appendChild(e),this.scoreElement=e.querySelector("#score-value"),this.targetElement=e.querySelector("#score-target")}}static createQuestionUI(){this.questionOverlay=document.getElementById("question-overlay"),this.questionOverlay||(this.questionOverlay=document.createElement("div"),this.questionOverlay.id="question-overlay",this.questionOverlay.classList.add("ui-panel"),this.questionOverlay.innerHTML='\n        <div id="blackboard-content">\n          <h2>Question</h2>\n          <div id="question-box">\n            <p id="question-text"></p>\n            <div id="answer-buttons"></div>\n          </div>\n        </div>',document.body.appendChild(this.questionOverlay)),this.questionTextElement=this.questionOverlay.querySelector("#question-text"),this.answerButtonsContainer=this.questionOverlay.querySelector("#answer-buttons"),this.questionTextElement&&this.answerButtonsContainer||console.error("[UIManager] Failed to find/create child elements of question UI!")}static createFloorSelectionUI(){this.floorSelectionPanel=document.getElementById("floor-selection-ui"),this.floorSelectionPanel||(this.floorSelectionPanel=document.createElement("div"),this.floorSelectionPanel.id="floor-selection-ui",this.floorSelectionPanel.classList.add("ui-panel"),this.floorSelectionPanel.innerHTML='\n        <h2>Select Floor</h2>\n        <div id="floor-buttons-container"></div>',document.body.appendChild(this.floorSelectionPanel)),this.floorButtonsContainer=this.floorSelectionPanel.querySelector("#floor-buttons-container"),this.floorButtonsContainer||console.error("[UIManager] Failed to find/create floor buttons container!")}static ensureFlashMessageContainer(){return this.flashMessageContainer=document.getElementById("flash-message-container"),this.flashMessageContainer||(this.flashMessageContainer=document.createElement("div"),this.flashMessageContainer.id="flash-message-container",document.body.appendChild(this.flashMessageContainer)),this.flashMessageContainer}static flashMessage(e,t="info",i=3e3){const o=this.ensureFlashMessageContainer();if(!o)return void console.error("[UIManager] Flash message container not found or creatable.");const s=document.createElement("div");s.textContent=e,s.className="flash-message",s.classList.add(`flash-${t}`);const a=`flash-${Date.now()}-${Math.random().toString(36).substr(2,5)}`;s.id=a,o.appendChild(s),requestAnimationFrame((()=>{s.classList.add("visible")})),clearTimeout(this.flashMessageTimeouts[a]),this.flashMessageTimeouts[a]=setTimeout((()=>{s.classList.remove("visible");const e=e=>{"opacity"!==e.propertyName&&"transform"!==e.propertyName||(s.parentNode&&s.parentNode.removeChild(s),delete this.flashMessageTimeouts[a])};s.addEventListener("transitionend",e,{once:!0}),setTimeout((()=>{s.parentNode&&(s.removeEventListener("transitionend",e),s.parentNode.removeChild(s)),delete this.flashMessageTimeouts[a]}),500)}),i)}static getLoadingOverlay(){if(!this.loadingOverlayElement&&(this.loadingOverlayElement=document.getElementById("loading-overlay"),!this.loadingOverlayElement)){this.loadingOverlayElement=document.createElement("div"),this.loadingOverlayElement.id="loading-overlay",this.loadingOverlayElement.className="loading-overlay";const e=document.createElement("p");e.textContent="Loading...",this.loadingOverlayElement.appendChild(e),document.body.appendChild(this.loadingOverlayElement),console.log("[UIManager] Loading overlay created and appended to body.")}return this.loadingOverlayElement}static createGameOverScreen(){this.gameOverScreenElement=document.getElementById("game-over-screen"),this.gameOverScreenElement?(this.gameOverTitleElement=this.gameOverScreenElement.querySelector("#game-over-title"),this.creatorNamesListElement=this.gameOverScreenElement.querySelector("#creator-names"),this.classInfoElement=this.gameOverScreenElement.querySelector("#class-info"),this.returnToMenuButtonElement=this.gameOverScreenElement.querySelector("#return-to-menu-button"),this.gameOverTitleElement&&this.creatorNamesListElement&&this.classInfoElement&&this.returnToMenuButtonElement?(this.returnToMenuButtonElement.addEventListener("click",(()=>{window.location.reload()})),console.log("[UIManager] Game Over screen elements initialized.")):console.error("[UIManager] Failed to find one or more child elements of the game over screen!")):console.error("[UIManager] CRITICAL: #game-over-screen element not found in HTML!")}static showGameOverScreen(e,t=[],i=""){(this.gameOverScreenElement&&this.gameOverTitleElement&&this.creatorNamesListElement&&this.classInfoElement||(console.error("[UIManager] Game Over Screen not fully initialized. Cannot show."),this.createGameOverScreen(),this.gameOverScreenElement))&&(e?(this.gameOverTitleElement.textContent="Congratulations! You Escaped!",this.gameOverTitleElement.className="win-title"):(this.gameOverTitleElement.textContent="Game Over",this.gameOverTitleElement.className="lose-title"),this.creatorNamesListElement.innerHTML="",t.forEach((e=>{const t=document.createElement("li");t.textContent=e,this.creatorNamesListElement.appendChild(t)})),this.classInfoElement.textContent=i,this.gameOverScreenElement.classList.add("visible"),this.hideGameUI(),this.hideQuestion(),this.hideFloorSelectionUI())}static hideGameOverScreen(){this.gameOverScreenElement&&this.gameOverScreenElement.classList.remove("visible")}static showQuestion(e){if(this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer||(console.error("[UIManager] Question UI not ready."),this.createQuestionUI(),this.questionOverlay&&this.questionTextElement&&this.answerButtonsContainer))if(e){if(!this.gameplayManagerInstance||"function"!=typeof this.gameplayManagerInstance.handleAnswer)return console.error("[UIManager] CRITICAL: GameplayManager or its handleAnswer method is not set or invalid!"),this.flashMessage("Error: Game interaction system failed (Q).","error",5e3),void this.hideQuestion();this.questionTextElement.textContent=e.question,this.answerButtonsContainer.innerHTML="",e.options.forEach(((e,t)=>{const i=document.createElement("button");i.textContent=e,i.dataset.index=t,i.classList.add("answer-button"),i.addEventListener("click",(e=>{const t=parseInt(e.target.dataset.index,10);this.gameplayManagerInstance.handleAnswer(t)})),this.answerButtonsContainer.appendChild(i)})),this.questionOverlay.classList.add("visible")}else console.error("[UIManager] Cannot show question - no questionData provided.")}static hideQuestion(){this.questionOverlay&&(this.questionOverlay.classList.remove("visible"),this.questionTextElement&&(this.questionTextElement.textContent=""),this.answerButtonsContainer&&(this.answerButtonsContainer.innerHTML=""))}static showFloorSelectionUI(e,t,i){if(this.floorSelectionPanel&&this.floorButtonsContainer||(console.error("[UIManager] Floor selection UI not ready."),this.createFloorSelectionUI(),this.floorSelectionPanel&&this.floorButtonsContainer)){if(!this.gameplayManagerInstance||"function"!=typeof this.gameplayManagerInstance.handleFloorSelection)return console.error("[UIManager] CRITICAL: GameplayManager or its handleFloorSelection method is not set or invalid!"),this.flashMessage("Error: Game interaction system failed (F).","error",5e3),void this.hideFloorSelectionUI();this.floorButtonsContainer.innerHTML="";for(let o=e;o<=t;o++){const e=document.createElement("button");e.textContent=`Floor ${o}`,e.classList.add("floor-button"),e.dataset.floor=o,o===i?(e.disabled=!0,e.classList.add("current")):e.addEventListener("click",(()=>{this.gameplayManagerInstance.handleFloorSelection(o)})),this.floorButtonsContainer.appendChild(e)}this.floorSelectionPanel.classList.add("visible")}}static hideFloorSelectionUI(){this.floorSelectionPanel&&this.floorSelectionPanel.classList.remove("visible")}static updateScore(e,t){this.scoreElement||(this.scoreElement=document.getElementById("score-value")),this.targetElement||(this.targetElement=document.getElementById("score-target")),this.scoreElement&&(this.scoreElement.textContent=e),this.targetElement&&(this.targetElement.textContent=t)}static showGameUI(){const e=document.getElementById("game-canvas")||document.getElementById("gameCanvas"),t=document.getElementById("menu-container"),i=document.getElementById("score-display");e?e.style.display="block":console.warn("[UIManager] Canvas element not found to show."),t&&!t.classList.contains("hidden")&&"none"!==t.style.display&&(console.warn("[UIManager] Menu container was not hidden. Hiding it now via style.display."),t.style.display="none"),this.controlsContainer?this.controlsContainer.classList.add("visible"):console.warn("[UIManager] Controls container not found to show."),i?i.classList.add("visible"):console.warn("[UIManager] Score display not found to show."),this.hideQuestion(),this.hideFloorSelectionUI(),this.hideGameOverScreen()}static hideGameUI(){const e=document.getElementById("game-canvas")||document.getElementById("gameCanvas"),t=document.getElementById("score-display");e&&(e.style.display="none"),this.controlsContainer&&this.controlsContainer.classList.remove("visible"),t&&t.classList.remove("visible")}}class a{static Direction={DOWN:0,RIGHT:1,UP:2,LEFT:3};constructor(e,t,i={}){this.ctx=e,this.sprite=new Image,this.frameSize=i.frameSize||32,this.frameCount=i.frameCount||4,this.scale=i.scale||2,this.renderSize=this.frameSize*this.scale,this.speed=i.speed||3,this.animationSpeed=i.animationSpeed||150,this.collisionBoxWidthRatio=i.collisionBoxWidthRatio||.4,this.collisionBoxHeightRatio=i.collisionBoxHeightRatio||.2,this.collisionBoxFeetOffsetRatio=i.collisionBoxFeetOffsetRatio||.4,this.x=0,this.y=0,this.currentDirection=a.Direction.DOWN,this.currentFrame=0,this.isMoving=!1,this.lastFrameTime=0,this.sprite.onload=()=>{console.log(`[Character] Sprite loaded successfully: ${t}`)},this.sprite.onerror=()=>{console.error(`[Character] Failed to load sprite: ${t}`)},this.sprite.src=t}updateAnimation(e){if(!this.isMoving)return this.currentFrame=0,void(this.lastFrameTime=e);this.lastFrameTime||(this.lastFrameTime=e),e-this.lastFrameTime>this.animationSpeed&&(this.currentFrame=(this.currentFrame+1)%this.frameCount,this.lastFrameTime=e)}getCollisionBox(e,t){const i=this.renderSize*this.collisionBoxWidthRatio,o=this.renderSize*this.collisionBoxHeightRatio,s=i/2,a=this.renderSize*this.collisionBoxFeetOffsetRatio;return{top:t+a-o/2,bottom:t+a+o/2,left:e-s,right:e+s,width:i,height:o}}draw(e,t){if(!this.sprite.complete||0===this.sprite.naturalHeight)return;const i=this.currentFrame*this.frameSize,o=this.currentDirection*this.frameSize,s=Math.floor(this.x-this.renderSize/2+e),a=Math.floor(this.y-this.renderSize/2+t);try{this.ctx.drawImage(this.sprite,i,o,this.frameSize,this.frameSize,s,a,this.renderSize,this.renderSize)}catch(e){console.error("[Character] Error drawing sprite:",e)}}}class n{constructor(e,t,i,o){this.x=e,this.y=t,this.id=i,this.tileSize=o,this.size=.6*o,this.collected=!1,this.isCollected=!1}draw(e,t,i,o){const s=Math.floor(this.x+t-this.size/2),a=Math.floor(this.y+i-this.size/2);o?e.drawImage(o,s,a,this.size,this.size):(e.fillStyle="#8d6e63",e.fillRect(s,a,this.size,this.size),e.strokeStyle="#5d4037",e.strokeRect(s,a,this.size,this.size),e.fillStyle="#eee",e.font=.6*this.size+"px Arial",e.textAlign="center",e.textBaseline="middle",e.fillText("?",s+this.size/2,a+this.size/2+2))}}function r(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e}function l(e){let t=3735928559^e;return t=Math.imul(t^t>>>16,2246822507),t=Math.imul(t^t>>>13,3266489909),(t^=t>>>16)>>>0}function c(e,t){if(!e||"string"!=typeof e||e.length<7)return e;let i=parseInt(e.slice(1,3),16),o=parseInt(e.slice(3,5),16),s=parseInt(e.slice(5,7),16);return i=Math.min(255,Math.max(0,Math.round(i*t))),o=Math.min(255,Math.max(0,Math.round(o*t))),s=Math.min(255,Math.max(0,Math.round(s*t))),`#${i.toString(16).padStart(2,"0")}${o.toString(16).padStart(2,"0")}${s.toString(16).padStart(2,"0")}`}class h{constructor(e){this.tileSize=e,this.tileColors={},this.baseWallColor="#1c1e22",this.baseCorridorColor="#a0a0a0",this.baseRoomFloorColor="#c0c0c0",this.liftColor="#707080",this.errorColor="#ff00ff"}resetColorCache(){this.tileColors={}}getTileColor(e,t,i,o){const s=`${e},${t}`;if(this.tileColors[s])return this.tileColors[s];let a;switch(i){case 0:a=this.baseWallColor;break;case 1:a=this.baseCorridorColor;break;case 2:a=this.baseRoomFloorColor;break;case 3:a=this.liftColor;break;default:a=this.errorColor}return this.tileColors[s]=a,a}draw(e,t,i=null){const{map:o,rooms:s,books:a,liftPosition:n,offsetX:r,offsetY:l,cols:c,rows:h}=t,d=Math.floor(r),u=Math.floor(l),m=Math.max(0,Math.floor(-d/this.tileSize)-1),g=Math.min(c,Math.ceil((-d+e.canvas.width)/this.tileSize)+1),f=Math.max(0,Math.floor(-u/this.tileSize)-1),p=Math.min(h,Math.ceil((-u+e.canvas.height)/this.tileSize)+1);e.save(),this.drawBaseTiles(e,o,s,d,u,c,h,f,p,m,g),this.drawRoomDetails(e,o,s,n,d,u,c,h,f,p,m,g),this.drawLiftDetails(e,n,d,u),this.drawBooks(e,a,d,u,i),e.restore()}drawBaseTiles(e,t,i,o,s,a,n,r,l,c,h){e.save(),e.shadowColor="transparent";const d="#383838",u="#606060",m="#757575";for(let g=r;g<l;g++)for(let r=c;r<h;r++){const l=t[g]?.[r];if(void 0===l)continue;const c=Math.floor(r*this.tileSize+o),h=Math.floor(g*this.tileSize+s),f=this.getTileColor(g,r,l,i);if(e.fillStyle=f,e.fillRect(c,h,this.tileSize,this.tileSize),0===l){e.fillStyle="rgba(0,0,0,0.06)";for(let t=0;t<5;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1);const i=2;g>0&&0!==t[g-1]?.[r]&&(e.fillStyle=m,e.fillRect(c,h,this.tileSize,i)),g<n-1&&0!==t[g+1]?.[r]&&(e.fillStyle=d,e.fillRect(c,h+this.tileSize-i,this.tileSize,i)),r>0&&0!==t[g]?.[r-1]&&(e.fillStyle=u,e.fillRect(c,h+i,i,this.tileSize-i)),r<a-1&&0!==t[g]?.[r+1]&&(e.fillStyle=d,e.fillRect(c+this.tileSize-i,h+i,i,this.tileSize-i)),g>0&&r>0&&0!==t[g-1]?.[r]&&0!==t[g]?.[r-1]&&0!==t[g-1]?.[r-1]&&(e.fillStyle=u,e.fillRect(c,h,i,i)),g>0&&r<a-1&&0!==t[g-1]?.[r]&&0!==t[g]?.[r+1]&&0!==t[g-1]?.[r+1]&&(e.fillStyle=m,e.fillRect(c+this.tileSize-i,h,i,i))}else if(1===l){e.fillStyle="rgba(255,255,255,0.03)";for(let t=0;t<3;t++)e.fillRect(c+Math.random()*this.tileSize,h+Math.random()*this.tileSize,1,1)}}e.restore()}drawRoomDetails(e,t,i,o,s,a,n,r,h,d,u,m){e.save(),e.shadowColor="transparent";for(const o of i){if(o.col+o.width<u||o.col>m||o.row+o.height<h||o.row>d)continue;const i=Math.floor(o.col*this.tileSize+s),n=Math.floor(o.row*this.tileSize+a),r=o.width*this.tileSize,g=o.height*this.tileSize;let f=this.baseRoomFloorColor;const p="number"==typeof this.floorNumber?this.floorNumber:0;let y=l(o.id)+100*p;switch(o.type){case"classroom":f=c("#a0c8e0",.9+l(y)%11/100);break;case"office":f=c("#f0e8c0",.9+l(y+1)%11/100);break;case"library":f=c("#d8c0a8",.9+l(y+2)%11/100);break;case"gym":f=c("#b0d0b0",.9+l(y+3)%11/100);break;case"lab":f=c("#e0e0ff",.9+l(y+4)%11/100);break;case"storage":f=c("#b0a090",.9+l(y+5)%11/100);break;case"utility":f=c("#b0b0b0",.9+l(y+6)%11/100)}for(let i=Math.max(o.row,h);i<Math.min(o.row+o.height,d);i++)for(let n=Math.max(o.col,u);n<Math.min(o.col+o.width,m);n++){const r=t[i]?.[n];if(2===r){const t=Math.floor(n*this.tileSize+s),r=Math.floor(i*this.tileSize+a),h=.98+(l(5e3*i+3*n+y)%11-5)/100;e.fillStyle=c(f,h),e.fillRect(t,r,this.tileSize,this.tileSize),"lab"===o.type&&(e.strokeStyle="rgba(0,0,0,0.08)",e.lineWidth=1,e.strokeRect(t+.5,r+.5,this.tileSize-1,this.tileSize-1))}}this.drawRoomDecorations(e,o,i,n,r,g)}e.restore()}drawLiftDetails(e,t,i,o){if(!t)return;const s=Math.floor(t.tileX*this.tileSize+i),a=Math.floor(t.tileY*this.tileSize+o);if(s+this.tileSize<0||s>e.canvas.width||a+this.tileSize<0||a>e.canvas.height)return;e.save(),e.shadowColor="transparent",e.strokeStyle="#d0d0d0",e.lineWidth=1,e.strokeRect(s+.5,a+.5,this.tileSize-1,this.tileSize-1),e.strokeStyle="#404040",e.strokeRect(s+1.5,a+1.5,this.tileSize-3,this.tileSize-3);const n=.15*this.tileSize,r=s+.8*this.tileSize,l=a+.5*this.tileSize;e.fillStyle="#444",e.beginPath(),e.arc(r,l,n,0,2*Math.PI),e.fill(),e.fillStyle="#ff4444",e.beginPath(),e.arc(r,l,.8*n,0,2*Math.PI),e.fill(),e.fillStyle="rgba(255, 255, 255, 0.5)",e.beginPath(),e.arc(r-.2*n,l-.2*n,.3*n,0,2*Math.PI),e.fill(),e.restore()}drawRoomDecorations(e,t,i,o,s,a){const n=this.tileSize,r=.2*n,l=.1*n;e.lineWidth=1,e.strokeStyle="#444";const c=(t,s,a,n,r,l=!0)=>{e.fillStyle=r;const c=Math.floor(i+t),h=Math.floor(o+s),d=Math.floor(a),u=Math.floor(n);e.fillRect(c,h,d,u),l&&e.strokeRect(c+.5,h+.5,d-1,u-1)},h=(t,s,a,n,r=!0)=>{e.fillStyle=n;const l=Math.floor(i+t),c=Math.floor(o+s);e.beginPath(),e.arc(l,c,Math.floor(a),0,2*Math.PI),e.fill(),r&&e.stroke()};switch(t.type){case"classroom":e.strokeStyle="#5d4037";const t=.6*n,d=.4*n,u=.25*n,m=1*n,g=.9*n;c(.25*s,r,.5*s,.2*n,"#333",!0),c(.25*s+2,r+2,.5*s-4,.2*n-4,"#4CAF50",!1);for(let e=0;;e++){const i=r+.5*n+e*g;if(i+d+u>a-r)break;for(let e=0;;e++){const o=r+e*m;if(o+t>s-r)break;c(o,i,t,d,"#8B4513"),c(o+.1*t,i+d+l,.8*t,u,"#6a4a3a")}}break;case"office":e.strokeStyle="#5d4037";const f=Math.min(.6*s,2.5*n),p=Math.min(.4*a,1.2*n);c(r,r,f,p,"#a0522d"),c(r+f+l,r+.1*p,.6*n,.6*n,"#444");const y=.8*n;c(s-r-y,r,y,a-2*r,"#6B4F41"),c(r+l,r+l,.5*n,.4*n,"#333"),c(r+l+.1*n,r+l+.4*n+2,.3*n,.1*n,"#555");break;case"library":e.strokeStyle="#402a10";const M=.6*n,w=1.5*n;for(let t=r;t<s-r-M;t+=w){c(t,r,M,a-2*r,"#654321"),e.strokeStyle="rgba(0,0,0,0.3)";for(let s=r+.5*n;s<a-r;s+=.7*n)e.beginPath(),e.moveTo(i+t,o+s),e.lineTo(i+t+M,o+s),e.stroke();e.strokeStyle="#402a10"}if(s>1.5*w){const e=M+r+(s-2*M-2*r-1.5*n)/2;e>M+r&&(c(e,.3*a,1.5*n,.4*a,"#966F33"),c(e+.2*n,.3*a-.3*n,.5*n,.25*n,"#6a4a3a"),c(e+.2*n,.3*a+.4*a+l,.5*n,.25*n,"#6a4a3a"))}break;case"gym":e.strokeStyle="#555",c(r,r,.4*s,.3*a,"#778899"),c(s-r-.3*s,a-r-.4*a,.3*s,.4*a,"#778899"),c(.6*s,r,.8*n,1.8*n,"#333"),c(.6*s+.1*n,r+.1*n,.6*n,1.6*n,"#555",!1),c(r,.5*a,1.5*n,.4*n,"#8B4513"),c(s-r-.5*n,r,.5*n,1.5*n,"#444"),h(s-r-.25*n,r+.3*n,.15*n,"#666"),h(s-r-.25*n,r+.7*n,.15*n,"#666"),h(s-r-.25*n,r+1.1*n,.15*n,"#666");break;case"lab":e.strokeStyle="#668";const S=.8*n;c(r,r,s-2*r,S,"#d0d0d8"),c(r,a-r-S,s-2*r,S,"#d0d0d8"),c(r+.2*n,r+.1*n,.5*n,.5*n,"#4a90e2"),c(r+1*n,r+.1*n,.3*n,.6*n,"#f5a623"),h(s-2*r-.4*n,r+.5*S,.2*n,"#e04040",!0),c(.4*s,r+S+l,n,a-2*r-2*S-2*l,"#a0a0b0");break;case"storage":e.strokeStyle="#4d4030";const v=s-2*r,C=.5*n;c(r,r,v,C,"#9e9e9e"),c(r,a-r-C,v,C,"#9e9e9e");const b=.6*n;c(r+.2*n,r+C+l,b,b,"#bf8f6f"),c(r+1*n,r+C+l,b,b,"#bf8f6f"),c(s-r-1.5*b,r+C+3*l,1.2*b,.8*b,"#bf8f6f"),c(s-r-n,a-r-n,.8*n,.8*n,"#6a4a3a");break;default:e.strokeStyle="#5d4037",c(.1*s,.15*a,.3*s,.25*a,"#A0522D"),c(.6*s,.5*a,.3*s,.4*a,"#A0522D"),c(s-r-.5*n,r,.5*n,a-2*r,"#777"),e.strokeStyle="#555",e.lineWidth=3,e.beginPath(),e.moveTo(i+r,o+.8*a),e.lineTo(i+s-r,o+.8*a),e.stroke(),e.beginPath(),e.moveTo(i+.7*s,o+r),e.lineTo(i+.7*s,o+a-r),e.stroke(),e.lineWidth=1}}drawBooks(e,t,i,o,s){if(!t||0===t.length)return;const a=.6*this.tileSize;for(const n of t)if(!n.isCollected&&!n.collected){const t=n.size||a,r=Math.floor(n.x+i-t/2),l=Math.floor(n.y+o-t/2);r+t>0&&r<e.canvas.width&&l+t>0&&l<e.canvas.height&&("function"==typeof n.draw?n.draw(e,i,o,s):s?e.drawImage(s,r,l,t,t):(e.fillStyle="#8d6e63",e.fillRect(r,l,t,t),e.strokeStyle="#5d4037",e.lineWidth=1,e.strokeRect(r+.5,l+.5,t-1,t-1)))}}}let d=null;const u={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,roomTypeWeights:{classroom:50,office:25,library:15,gym:0,utility:10}};function m(e,t,i,o,s){const{centerTileX:a,centerTileY:n}=t,{centerTileX:r,centerTileY:l}=i;Math.random()<.5?(g(e,n,a,r,o,s),f(e,r,n,l,o,s)):(f(e,a,n,l,o,s),g(e,l,a,r,o,s))}function g(e,t,i,o,s,a){if(t<0||t>=a)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(s-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[t]?.[i]&&(e[t][i]=1)}function f(e,t,i,o,s,a){if(t<0||t>=s)return;const n=Math.max(0,Math.min(i,o)),r=Math.min(a-1,Math.max(i,o));for(let i=n;i<=r;i++)0===e[i]?.[t]&&(e[i][t]=1)}function p(e,t,i,o,s){const a=(e,t,i,o,s)=>{if(e<0||e>=o||t<0||t>=s)return!1;const a=i[t]?.[e];return 1===a||2===a||3===a};let n=0;const r=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];let l=[!1,!1,!1,!1];for(let c=0;c<r.length;c++)a(e+r[c].dx,t+r[c].dy,i,o,s)&&(n++,l[c]=!0);let c=!1;if(2===n){const[e,t,i,o]=l;(e&&t&&!i&&!o||i&&o&&!e&&!t)&&(c=!0)}return{openSides:n,isChokepoint:c}}function y(e,t,i,o,s){console.log(`  [MapGen Connect] Trying to connect wall at tile(${t}, ${i}) to walkable area...`);const a=[[0,-1],[0,1],[-1,0],[1,0]];let n=!1,r=null;for(const[o,s]of a){const a=t+o,l=i+s,c=e[l]?.[a];if(1===c||2===c||3===c){n=!0,r={x:a,y:l};break}}if(n)return console.log(`  [MapGen Connect] Target(${t}, ${i}) is adjacent to walkable at (${r.x}, ${r.y}). Setting target to Corridor.`),e[i][t]=1,!0;console.log("  [MapGen Connect] Target not adjacent. Searching nearest walkable (Corridor/Floor) via BFS...");const l=[[t,i,0]],c=new Set([`${t},${i}`]),h=[0,1,2,3],d=[1,2];let u=null,m=1/0;for(;l.length>0;){const[t,i,n]=l.shift();if(!(n>=m))for(const[r,g]of a){const a=t+r,f=i+g,p=`${a},${f}`;if(a>=0&&a<o&&f>=0&&f<s&&!c.has(p)){const t=e[f]?.[a];c.add(p),d.includes(t)?n+1<m&&(m=n+1,u={x:a,y:f,dist:m},console.log(`    [BFS] Found potential target at (${a}, ${f}), dist ${m}`)):h.includes(t)&&n+1<m&&l.push([a,f,n+1])}}}return u?(console.log(`  [MapGen Connect] Found closest walkable at tile(${u.x}, ${u.y}) distance ${u.dist}. Carving path...`),g(e,i,t,u.x,o,s),f(e,u.x,i,u.y,o,s),console.log("  [MapGen Connect] Carved path attempt finished."),1===e[i][t]||2===e[i][t]?(console.log(`    [Verify] Target tile (${t},${i}) is now walkable (Type: ${e[i][t]})`),!0):(console.warn(`  [MapGen Connect] Carving done, but target tile(${t}, ${i}) is still WALL (Value: ${e[i][t]}). Setting manually.`),e[i][t]=1,!0)):(console.error(`  [MapGen Connect] FAILED to find ANY nearby walkable (Corridor/Floor) via BFS from wall at tile(${t}, ${i}). Cannot connect.`),!1)}function M(e,t,i,o){if(!t)return!1;const{tileX:s,tileY:a}=t;if(a<0||a>=o||s<0||s>=i||3!==e[a]?.[s])return console.error(`[MapValidation Reachability] Invalid lift position provided: (${s}, ${a})`),!1;const{reachable:n}=function(e,t,i,o,s,a){const n=[[t,i]],r=new Set([`${t},${i}`]),l=[[0,-1],[0,1],[-1,0],[1,0]];let c=!1;for(e[i];n.length>0;){const[t,i]=n.shift();for(const[h,d]of l){const l=t+h,u=i+d,m=`${l},${u}`;if(l>=0&&l<o&&u>=0&&u<s&&!r.has(m)){const t=e[u]?.[l];r.add(m),a.includes(t)&&(n.push([l,u]),1!==t&&2!==t||(c=!0))}}}return{reachable:c}}(e,s,a,i,o,[1,2,3]);return n||console.error(`[MapValidation Reachability] FAILED. Lift at tile(${s}, ${a}) is isolated from corridors/rooms.`),n}class w{constructor(e,t,i,o,s){this.tileSize=32,this.cols=40,this.rows=30,this.width=this.cols*this.tileSize,this.height=this.rows*this.tileSize,this.offsetX=0,this.offsetY=0,this.floorNumber=i,this.minFloor=o,this.maxFloor=s,this.map=null,this.rooms=[],this.books=[],this.liftPosition=null,this.renderer=new h(this.tileSize);const a={minRoomSize:5,maxRoomSize:10,corridorThickness:1,numRooms:12,maxRoomAttempts:200,booksPerMap:5,roomTypeWeights:{classroom:50,office:25,library:15,lab:10,storage:5,utility:10}};try{const e={cols:this.cols,rows:this.rows,floorNumber:this.floorNumber,minFloor:this.minFloor,maxFloor:this.maxFloor,tileSize:this.tileSize,generationParams:a},{map:t,rooms:i,liftPosition:o}=function(e){const{cols:t,rows:i,floorNumber:o,minFloor:s,tileSize:a,generationParams:n}=e,l={...u,...n};l.roomTypeWeights.gym=o===s?60:0,o===s&&(d=null,console.log(`[MapGen Floor ${o}] Reset consistent lift coords for the first floor.`)),console.log(`[MapGen Floor ${o}] Starting map generation (${t}x${i})...`);const c=Array.from({length:i},(()=>Array(t).fill(0))),h=[];let g=null;!function(e,t,i,o,s){const{minRoomSize:a,maxRoomSize:n,numRooms:l,maxRoomAttempts:c,roomTypeWeights:h}=s;let d=0;const u=[];let m=0;for(const e in h){const t=h[e];if(t>0){m+=t;for(let i=0;i<t;i++)u.push(e)}}for(0===u.length&&(u.push("utility"),console.warn("[MapGen Rooms] No room type weights provided or all are zero. Defaulting to 'utility'."));t.length<l&&d<c;){d++;const s=r(a,n),l=r(a,n),c=r(1,i-s-1),h=r(1,o-l-1),m={col:c,row:h,width:s,height:l,type:u[r(0,u.length-1)],id:`room_${t.length+1}`,centerTileX:Math.floor(c+s/2),centerTileY:Math.floor(h+l/2),connected:!1};let g=!1;const f=2;for(const e of t)if(m.col<e.col+e.width+f&&m.col+m.width+f>e.col&&m.row<e.row+e.height+f&&m.row+m.height+f>e.row){g=!0;break}if(!g){t.push(m);for(let t=m.row;t<m.row+m.height;t++)for(let s=m.col;s<m.col+m.width;s++)t>=0&&t<o&&s>=0&&s<i&&(e[t][s]=2)}}t.length<l?console.warn(`[MapGen Rooms] Placed only ${t.length}/${l} rooms after ${d} attempts.`):console.log(`[MapGen Rooms] Placed ${t.length} rooms after ${d} attempts.`)}(c,h,t,i,l),h.length<2&&o!==s?console.warn(`[MapGen Floor ${o}] Placed only ${h.length} rooms. Expect limited connectivity.`):h.length>=2&&function(e,t,i,o){if(t.length<2)return;console.log(`[MapGen Connect] Connecting ${t.length} rooms (improved)...`);const s=new Set([t[0].id]);let a=t.slice(1);for(;a.length>0;){let n=1/0,r=null,l=null,c=-1;for(let e=0;e<a.length;e++){const i=a[e];for(const o of t)if(s.has(o.id)){const t=i.centerTileX-o.centerTileX,s=i.centerTileY-o.centerTileY,a=t*t+s*s;a<n&&(n=a,r=i,l=o.id,c=e)}}if(!r||null===l){console.error("[MapGen Connect] Could not find next pair of rooms to connect. Breaking loop. Remaining unconnected:",a.map((e=>e.id)));break}{const n=t.find((e=>e.id===l));if(!n){console.error(`[MapGen Connect] Error: Could not find connected room with ID ${l}. Skipping connection.`),a.splice(c,1);continue}m(e,n,r,i,o),s.add(r.id),a.splice(c,1)}}console.log(`[MapGen Connect] Finished connecting rooms. Connected count: ${s.size}`)}(c,h,t,i);try{const e=function(e,t,i,o,s,a,n,r){let l=n,c=null;if(o!==s||l){if(!l&&o>s)throw new Error(`[MapGen Lift] Missing consistent coordinates for floor ${o}.`)}else console.log(`[MapGen Floor ${o}] Finding initial lift placement location...`),l=function(e,t,i,o){const s=Math.floor(t/2),a=Math.floor(i/2);let n=null;if(console.log("  [MapGen FindLift V3] Searching for optimal lift spot INSIDE a room..."),!o||0===o.length)return console.warn("  [MapGen FindLift V3] No rooms available to place a lift in. Fallback will be used by caller."),null;for(const r of o){const o=r.col+1,l=r.col+r.width-2,c=r.row+1,h=r.row+r.height-2;if(!(o>l||c>h))for(let d=c;d<=h;d++)for(let c=o;c<=l;c++){let o=0;o-=((c-s)*(c-s)+(d-a)*(d-a))/30;const l=p(c,d,e,t,i);if(l.openSides<1)continue;l.isChokepoint&&(o-=700),o+=120*l.openSides;let h=0,u=0;const m=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];for(const o of m){const s=c+o.dx,a=d+o.dy;if(a>=0&&a<i&&s>=0&&s<t){const o=e[a]?.[s];if(1===o||2===o){u++;const o=p(s,a,e,t,i);1===o.openSides&&(h=Math.max(h,3e4)),o.isChokepoint&&(h=Math.max(h,500))}}}0===u&&l.openSides<2||(o-=h,(null===n||o>n.score)&&(n={tileX:c,tileY:d,score:o,debug_room:r.id}))}}return n?(console.log(`  [MapGen FindLift V3] Selected best spot IN ROOM (${n.debug_room}) at tile(${n.tileX}, ${n.tileY}). Score: ${n.score.toFixed(0)}.`),{tileX:n.tileX,tileY:n.tileY}):(console.warn("[MapGen FindLift V3] No suitable IN-ROOM location found with internal tiles. Fallback will be used by caller."),null)}(e,t,i,r),l||(console.warn(`[MapGen Floor ${o}] No ideal IN-ROOM lift location found. Forcing placement near center.`),l={tileX:Math.floor(t/2),tileY:Math.floor(i/2)}),console.log(`[MapGen Floor ${o}] Established consistent lift coords at tile(${l.tileX}, ${l.tileY})`),c=l;const{tileX:h,tileY:d}=l;if(d<0||d>=i||h<0||h>=t){const e=Math.max(1,Math.min(t-2,h)),s=Math.max(1,Math.min(i-2,d));throw console.error(`[MapGen Lift] Coords (${h}, ${d}) are outside map bounds on floor ${o}. Adjusted to (${e},${s})`),l={tileX:e,tileY:s},new Error(`[MapGen Lift] Coords (${l.tileX}, ${l.tileY}) are outside map bounds on floor ${o}.`)}0===e[d][h]?(console.warn(`[MapGen Floor ${o}] Lift location tile(${h}, ${d}) is a wall (likely fallback). Forcing connection...`),y(e,h,d,t,i)?(console.log("  [MapGen Lift Connect] Connection attempt finished for wall at lift location."),0===e[d][h]&&(console.warn(`  [MapGen Lift Connect] Force connection completed, but target tile (${h},${d}) remained WALL. Setting to CORRIDOR.`),e[d][h]=1)):console.error(`[MapGen Lift Connect] FAILED to connect wall at lift location tile(${h}, ${d}). Lift might be isolated.`)):console.log(`  [MapGen Lift] Lift location tile(${h}, ${d}) is already walkable (Type: ${e[d][h]}).`),e[d][h]=3;const u={x:(h+.5)*a,y:(d+.5)*a,tileX:h,tileY:d};return console.log(`[MapGen Floor ${o}] Placed/Confirmed lift at tile(${h}, ${d}). World: (${u.x.toFixed(1)}, ${u.y.toFixed(1)})`),{position:u,coords:c||l}}(c,t,i,o,s,a,d,h);g=e.position,e.coords&&(d=e.coords)}catch(e){throw console.error(`[MapGen Floor ${o}] CRITICAL: Lift placement failed:`,e),new Error(`Lift placement failed on floor ${o}: ${e.message}`)}if(function(e,t,i){console.log("  [MapGen] Ensuring map borders are walls.");for(let o=0;o<t;o++)void 0!==e[0]?.[o]&&(e[0][o]=0),void 0!==e[i-1]?.[o]&&(e[i-1][o]=0);for(let o=0;o<i;o++)void 0!==e[o]?.[0]&&(e[o][0]=0),void 0!==e[o]?.[t-1]&&(e[o][t-1]=0)}(c,t,i),g&&!M(c,g,t,i)){if(console.warn(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) initially unreachable. Attempting final force connection.`),!y(c,g.tileX,g.tileY,t,i)||!M(c,g,t,i)){const e=`CRITICAL: Placed lift at tile(${g.tileX}, ${g.tileY}) is UNREACHABLE even after force connect! Generation failed.`;throw console.error(`[MapGen Floor ${o}] ${e}`),new Error(`Lift is unreachable on floor ${o}. Cannot proceed.`)}console.log(`[MapValidation Floor ${o}] Lift connection successful after second attempt.`)}else{if(!g)throw new Error(`Map generated without a valid lift position on floor ${o}.`);console.log(`[MapValidation Floor ${o}] Lift at tile(${g.tileX}, ${g.tileY}) is reachable.`)}return console.log(`[MapGen Floor ${o}] Map generation completed successfully.`),{map:c,rooms:h,liftPosition:g}}(e);this.map=t,this.rooms=i,this.liftPosition=o,this.renderer.resetColorCache(),this.placeBooksReliably(a.booksPerMap),3===this.floorNumber&&console.log(`[ProcMap F${this.floorNumber}] Init complete. Lift at tile (${o?.tileX}, ${o?.tileY}).`)}catch(e){throw console.error(`[ProcMap F${this.floorNumber}] CRITICAL ERROR during map generation or setup:`,e),e}}placeBooksReliably(e){this.books=[];const t=[],i=new Set;for(let e=0;e<this.rows;e++)for(let i=0;i<this.cols;i++){const o=this.map[e]?.[i],s=this.liftPosition&&e===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||s||t.push({r:e,c:i})}let o=0;for(;o<e&&t.length>0;){const e=Math.floor(Math.random()*t.length),{r:s,c:a}=t.splice(e,1)[0],r=`${a},${s}`;if((1===this.map[s]?.[a]||2===this.map[s]?.[a])&&!i.has(r)){const e=(a+.5)*this.tileSize,t=(s+.5)*this.tileSize,l=`book_f${this.floorNumber}_${o+1}`;this.books.push(new n(e,t,l,this.tileSize)),i.add(r),o++}}}isWalkable(e,t){if(!this.map)return!1;const i=Math.floor(e/this.tileSize),o=Math.floor(t/this.tileSize);if(i<0||i>=this.cols||o<0||o>=this.rows)return!1;const s=this.map[o]?.[i];return 1===s||2===s||3===s}findRandomInitialSpawnPosition(){if(!this.map)return;const e=[];for(let t=1;t<this.rows-1;t++)for(let i=1;i<this.cols-1;i++){const o=this.map[t]?.[i],s=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||s||this.isTileOpenEnough(i,t,3,!0)&&e.push({r:t,c:i})}if(0===e.length)for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++){const o=this.map[t]?.[i],s=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||s||this.isTileOpenEnough(i,t,2,!0)&&e.push({r:t,c:i})}if(0===e.length)for(let t=0;t<this.rows;t++)for(let i=0;i<this.cols;i++){const o=this.map[t]?.[i],s=this.liftPosition&&t===this.liftPosition.tileY&&i===this.liftPosition.tileX;1!==o&&2!==o||s||e.push({r:t,c:i})}if(0===e.length)return void console.error(`[ProcMap F${this.floorNumber} RandomSpawn] CRITICAL: No suitable spawn tiles found!`);const{r:t,c:i}=e[Math.floor(Math.random()*e.length)];return{x:(i+.5)*this.tileSize,y:(t+.5)*this.tileSize}}isTileOpenEnough(e,t,i=2,o=!1){if(this.floorNumber,!this.map)return!1;let s=0;const a=[[0,-1,"N"],[0,1,"S"],[-1,0,"W"],[1,0,"E"]],n=[!1,!1,!1,!1];for(let i=0;i<a.length;i++){const[o,r,l]=a[i],c=e+o,h=t+r;let d=0;c>=0&&c<this.cols&&h>=0&&h<this.rows&&(d=this.map[h]?.[c],1!==d&&2!==d&&3!==d||(s++,n[i]=!0))}if(s<i)return!1;if(o&&2===s){if(n[0]&&n[1]&&!n[2]&&!n[3])return!1;if(n[2]&&n[3]&&!n[0]&&!n[1])return!1}return!0}findNearestWalkableTile(e,t,i=8,o=!1,s=!1){if(this.floorNumber,!this.map)return null;const a=Math.floor(e/this.tileSize),n=Math.floor(t/this.tileSize),r=[1,2];if(a>=0&&a<this.cols&&n>=0&&n<this.rows){const e=this.map[n][a];if(r.includes(e)&&(!o||3!==e)){const e=2;if(this.isTileOpenEnough(a,n,e,s))return{x:(a+.5)*this.tileSize,y:(n+.5)*this.tileSize}}}for(let e=1;e<=i;e++){const t=2;for(let i=-e;i<=e;i++)for(let l=-e;l<=e;l++){if(Math.abs(l)<e&&Math.abs(i)<e)continue;const c=a+l,h=n+i;if(c<0||c>=this.cols||h<0||h>=this.rows)continue;const d=this.map[h]?.[c];if(r.includes(d)&&(!o||3!==d)&&this.isTileOpenEnough(c,h,t,s))return{x:(c+.5)*this.tileSize,y:(h+.5)*this.tileSize}}}const l=[[a,n]],c=new Set([`${a},${n}`]),h=[[0,-1],[0,1],[-1,0],[1,0]],d=[1,2,3];for(;l.length>0;){const[e,t]=l.shift();for(const[i,a]of h){const n=e+i,h=t+a,u=`${n},${h}`;if(n>=0&&n<this.cols&&h>=0&&h<this.rows&&!c.has(u)){const e=this.map[h]?.[n];if(c.add(u),r.includes(e)&&(!o||3!==e)&&this.isTileOpenEnough(n,h,2,s))return{x:(n+.5)*this.tileSize,y:(h+.5)*this.tileSize};d.includes(e)&&l.push([n,h])}}}return null}getSpawnPointInRoomOfLift(e,t,i=2){this.floorNumber;let o=null,s=null,a=null;const n=[{dx:0,dy:-1},{dx:0,dy:1},{dx:-1,dy:0},{dx:1,dy:0}];for(const i of n){const n=e+i.dx,r=t+i.dy;if(n>=0&&n<this.cols&&r>=0&&r<this.rows&&2===this.map[r]?.[n])for(const e of this.rooms)if(n>=e.x&&n<e.x+e.width&&r>=e.y&&r<e.y+e.height){o=e,s={x:n,y:r},a={dx:i.dx,dy:i.dy};break}if(o)break}if(!o)for(const i of n){const r=e+i.dx,l=t+i.dy;if(!(r<0||r>=this.cols||l<0||l>=this.rows||1!==this.map[l]?.[r])){for(const e of n){if(e.dx===-i.dx&&e.dy===-i.dy)continue;const t=r+e.dx,n=l+e.dy;if(t>=0&&t<this.cols&&n>=0&&n<this.rows&&2===this.map[n]?.[t])for(const i of this.rooms)if(t>=i.x&&t<i.x+i.width&&n>=i.y&&n<i.y+i.height){o=i,s={x:t,y:n},a={dx:e.dx,dy:e.dy};break}if(o)break}if(o)break}}if(!o||!s||!a)return null;const r=a.dx,l=a.dy;for(let e=i-1;e>=0;e--){const t=s.x+r*e,i=s.y+l*e;if(t>=o.x&&t<o.x+o.width&&i>=o.y&&i<o.y+o.height&&2===this.map[i]?.[t]){const e=t+r,s=i+l,a=e>=o.x&&e<o.x+o.width&&s>=o.y&&s<o.y+o.height&&2===this.map[s]?.[e];if(this.isTileOpenEnough(t,i,2,!0)&&a)return{x:(t+.5)*this.tileSize,y:(i+.5)*this.tileSize}}}return this.isTileOpenEnough(s.x,s.y,2,!0)?{x:(s.x+.5)*this.tileSize,y:(s.y+.5)*this.tileSize}:null}findNearbyUnansweredBook(e,t,i=.8*this.tileSize){if(!this.books||0===this.books.length)return null;let o=null,s=i*i;for(const i of this.books)if(!i.isCollected){const a=i.x-e,n=i.y-t,r=a*a+n*n;r<s&&(s=r,o=i)}return o}markBookAsCollected(e){if(!e||!this.books)return!1;const t=this.books.find((t=>t.id===e.id));return!(!t||t.isCollected||(t.isCollected=!0,0))}findNearbyLift(e,t,i=.7*this.tileSize){if(!this.liftPosition)return null;const o=e-this.liftPosition.x,s=t-this.liftPosition.y;return o*o+s*s<i*i?this.liftPosition:null}getLiftPosition(){return this.liftPosition}draw(e,t=null){if(!this.map||!this.renderer)return;const i={map:this.map,rooms:this.rooms,books:this.books,liftPosition:this.liftPosition,offsetX:this.offsetX,offsetY:this.offsetY,cols:this.cols,rows:this.rows,tileSize:this.tileSize};this.renderer.draw(e,i,t)}logMapGrid(){if(!this.map)return void console.log(`[ProcMap F${this.floorNumber}] Map grid not available.`);console.log(`--- Map Grid Floor ${this.floorNumber} (${this.cols}x${this.rows}) ---`);let e="   ";for(let t=0;t<this.cols;t++)e+=t%10==0?Math.floor(t/10):" ";console.log(e),e="   ";for(let t=0;t<this.cols;t++)e+=t%10;console.log(e);for(let e=0;e<this.rows;e++){const t=e.toString().padStart(2," "),i=this.map[e].map((e=>{switch(e){case 0:return"#";case 1:return".";case 2:return" ";case 3:return"L";default:return"?"}})).join("");console.log(`${t} ${i}`)}this.liftPosition?(console.log(`Lift actual tile type in map[${this.liftPosition.tileY}][${this.liftPosition.tileX}]: ${this.map[this.liftPosition.tileY]?.[this.liftPosition.tileX]}`),console.log(`Lift reported at tile: (${this.liftPosition.tileX}, ${this.liftPosition.tileY})`)):console.log("Lift position not set."),console.log(`--- End Map Grid Floor ${this.floorNumber} ---`)}}class S{constructor(e=1,t=3){e>=t?(console.warn(`Level constructor: minFloor (${e}) must be less than maxFloor (${t}). Using defaults 1 and 3.`),this.minFloor=1,this.maxFloor=3):(this.minFloor=e,this.maxFloor=t),this.currentFloor=this.minFloor,this.currentMap=null,this.tileSize=32}async loadFloor(e,t,i){if(e<this.minFloor||e>this.maxFloor){const t=`Attempted to load invalid floor: ${e}. Allowed range: [${this.minFloor}-${this.maxFloor}]`;throw console.error(`[Level] ${t}`),new Error(t)}console.log(`[Level] Loading floor ${e}...`),this.currentFloor=e;try{if(this.currentMap=new w(t,i,this.currentFloor,this.minFloor,this.maxFloor),!(this.currentMap.tileSize&&this.currentMap.map&&this.currentMap.books&&this.currentMap.getLiftPosition()))throw new Error("[Level] ProceduralMap instance is missing essential properties after creation (tileSize, map, books, or liftPosition).");this.tileSize=this.currentMap.tileSize;const o=this.currentMap.getLiftPosition();console.log(`  [Level] Map generated for floor ${this.currentFloor}. TileSize: ${this.tileSize}. Lift at tile(${o.tileX}, ${o.tileY}).`),console.log(`[Level] Floor ${e} loaded successfully. Map size: ${this.currentMap.cols}x${this.currentMap.rows}. ${this.currentMap.books.length} books placed.`)}catch(t){throw console.error(`[Level] CRITICAL FAILURE loading floor ${e}: Failed to create or validate ProceduralMap:`,t),this.currentMap=null,new Error(`Map generation/validation failed for floor ${e}. ${t.message||t}`)}return Promise.resolve()}getCurrentBooks(){return this.currentMap?this.currentMap.books:[]}}class v{constructor(e){this.game=e,this.canvas=null,this.ctx=null}initializeCanvas(){if(this.canvas=document.getElementById("game-canvas"),!this.canvas)throw new Error("[Renderer] Canvas 'game-canvas' not found!");if(this.ctx=this.canvas.getContext("2d"),!this.ctx)throw new Error("[Renderer] Failed to get 2D context.");return this.ctx.imageSmoothingEnabled=!1,this.resizeCanvas(),console.log("[Renderer] Canvas initialized."),{canvas:this.canvas,ctx:this.ctx}}resizeCanvas(){this.canvas&&(this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.game.character&&this.game.level?.currentMap&&this.centerCameraOnCharacter(),console.log(`[Renderer] Canvas resized to ${this.canvas.width}x${this.canvas.height}`))}centerCameraOnCharacter(){const{character:e,level:t,canvas:i}=this.game;e&&t?.currentMap&&i&&(t.currentMap.offsetX=Math.floor(i.width/2-e.x),t.currentMap.offsetY=Math.floor(i.height/2-e.y))}drawFrame(){if(!this.ctx||!this.canvas)return;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const e=this.game.level?.currentMap,t=this.game.character;e&&e.draw(this.ctx,this.game.bookImage),t&&e&&t.draw(e.offsetX,e.offsetY)}drawWinScreen(){this.ctx&&this.canvas&&(this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle="lime",this.ctx.font='clamp(32px, 8vw, 48px) "Press Start 2P", cursive, Arial, sans-serif',this.ctx.fillText("ZWYCIĘSTWO!",this.canvas.width/2,this.canvas.height/2-80),this.ctx.fillStyle="white",this.ctx.font="clamp(24px, 5vw, 32px) Arial, sans-serif",this.ctx.fillText(`Zebrano wszystkie ${this.game.targetBooksToWin} książki!`,this.canvas.width/2,this.canvas.height/2),this.ctx.font="clamp(18px, 4vw, 24px) Arial, sans-serif",this.ctx.fillText("Uniwersytet uratowany!",this.canvas.width/2,this.canvas.height/2+60),this.ctx.font="clamp(14px, 3vw, 18px) Arial, sans-serif",this.ctx.fillStyle="#ccc",this.ctx.fillText("(Odśwież stronę, aby zagrać ponownie)",this.canvas.width/2,this.canvas.height-50))}}class C{constructor(e){this.game=e,this.handleAnswer=this.handleAnswer.bind(this),this.handleFloorSelection=this.handleFloorSelection.bind(this)}update(e){this.game.gameState===i.PLAYING&&this.updatePlayingState(e)}updatePlayingState(e){const t=this.game.character;if(!this.game.level?.currentMap||!t||!this.game.inputManager)return;const{moved:o}=this.handleMovement();t&&"function"==typeof t.updateAnimation&&t.updateAnimation(e),o||this.game.gameState!==i.PLAYING||this.handleInteractions()}handleMovement(){const e=this.game.character,t=this.game.level.currentMap,i=this.game.inputManager;if(!e||!t||!i)return{moved:!1};const o=i.getInputDirection();let s=o.x*e.speed,n=o.y*e.speed,r=0,l=0,c=!1;if(0!==s||0!==n){const t=0!==s&&!this.checkCollision(e.x+s,e.y),i=0!==n&&!this.checkCollision(e.x,e.y+n);t&&(r=s),i&&(l=n),0!==s&&0!==n&&this.checkCollision(e.x+s,e.y+n)&&(t&&!i?l=0:i&&!t?r=0:t||i||(r=0,l=0)),0===r&&0===l||(e.x+=r,e.y+=l,c=!0,Math.abs(r)>=Math.abs(l)?0!==r&&(e.currentDirection=r>0?a.Direction.RIGHT:a.Direction.LEFT):0!==l&&(e.currentDirection=l>0?a.Direction.DOWN:a.Direction.UP))}return e.isMoving=c,{moved:c}}checkCollision(e,t){const i=this.game.level?.currentMap,o=this.game.character;if(!i||!o)return!0;const s=o.getCollisionBox(e,t),a=[{x:s.left,y:s.top},{x:s.right,y:s.top},{x:s.left,y:s.bottom},{x:s.right,y:s.bottom},{x:e,y:s.top},{x:e,y:s.bottom},{x:s.left,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio},{x:s.right,y:t+o.renderSize*o.collisionBoxFeetOffsetRatio}];for(const e of a)if(!i.isWalkable(e.x,e.y))return!0;return!1}handleInteractions(){const e=this.game.level?.currentMap,t=this.game.character;if(!e||!t||this.game.gameState!==i.PLAYING)return;const o=e.findNearbyUnansweredBook(t.x,t.y);o?this.initiateQuestion(o):this.game.liftCooldownActive||e.findNearbyLift(t.x,t.y)&&this.initiateFloorSelection()}initiateQuestion(e){if(this.game.gameState!==i.PLAYING)return;if(this.game.setGameState(i.ASKING_QUESTION),this.game.character&&(this.game.character.isMoving=!1),this.game.currentBookTarget=e,0===this.game.availableQuestions.length&&(this.game.availableQuestions=[...o],0===this.game.availableQuestions.length))return s.flashMessage("Błąd: Brak dostępnych pytań!","error"),this.game.setGameState(i.PLAYING),void(this.game.currentBookTarget=null);const t=Math.floor(Math.random()*this.game.availableQuestions.length);this.game.currentQuestionData=this.game.availableQuestions.splice(t,1)[0],s.showQuestion(this.game.currentQuestionData)}handleAnswer(e){const{gameState:t,currentQuestionData:o,currentBookTarget:a,level:n}=this.game;if(t!==i.ASKING_QUESTION||!o||!a)return s.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,void(this.game.gameState!==i.GAME_OVER&&this.game.setGameState(i.PLAYING));if(e===o.correctAnswer){s.flashMessage("Prawidłowo!","success",1500);const e=n?.currentMap?.markBookAsCollected(a);if(e){if(this.game.totalBooksCollectedGlobally++,s.updateScore(this.game.totalBooksCollectedGlobally,this.game.targetBooksToWin),this.game.totalBooksCollectedGlobally>=this.game.targetBooksToWin)return s.hideQuestion(),void this.game._setGameOver(!0)}else s.flashMessage("Błąd zbierania książki!","error")}else s.flashMessage("Nieprawidłowa odpowiedź!","error"),this.game.availableQuestions.push(o);s.hideQuestion(),this.game.currentBookTarget=null,this.game.currentQuestionData=null,this.game.gameState!==i.GAME_OVER&&this.game.setGameState(i.PLAYING)}initiateFloorSelection(){this.game.gameState!==i.PLAYING||this.game.liftCooldownActive||(this.game.setGameState(i.SELECTING_FLOOR),this.game.character&&(this.game.character.isMoving=!1),s.showFloorSelectionUI(this.game.level.minFloor,this.game.level.maxFloor,this.game.level.currentFloor))}handleFloorSelection(e){this.game.gameState===i.SELECTING_FLOOR?(s.hideFloorSelectionUI(),e===this.game.level.currentFloor||e<this.game.level.minFloor||e>this.game.level.maxFloor?this.game.setGameState(i.PLAYING):this.handleLiftTransition(e).catch((e=>{this.game._handleFatalError(`Błąd przejścia na piętro: ${e.message}`)}))):s.hideFloorSelectionUI()}async handleLiftTransition(e){const t=this.game,o=3===t.level?.currentFloor||3===e;if(o&&console.log(`[GameplayManager F${e} handleLiftTransition] Starting transition. Cooldown: ${t.liftCooldownActive}`),t.gameState===i.SELECTING_FLOOR&&!t.liftCooldownActive){t.setGameState(i.TRANSITIONING),t.character&&(t.character.isMoving=!1),s.hideQuestion(),s.hideFloorSelectionUI(),t.liftCooldownActive=!0,s.flashMessage(`Przejście na piętro ${e}...`,"info",1800);try{await t.level.loadFloor(e,t.canvas.width,t.canvas.height);const i=t.level.currentMap;if(!i)throw new Error(`Map object is null for floor ${e}.`);const s=i.getLiftPosition();if(!s)throw new Error(`No lift position data on loaded floor ${e}!`);o&&console.log(`  [GM F${e} LiftTransition] Lift tile: (${s.tileX},${s.tileY}), World:(${s.x.toFixed(1)},${s.y.toFixed(1)})`);let n=null;if(n=i.getSpawnPointInRoomOfLift(s.tileX,s.tileY,2),o&&console.log(`  [GM F${e} LiftTransition] From getSpawnPointInRoomOfLift:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null),n||(o&&console.warn(`  [GM F${e} LiftTransition] getSpawnPointInRoomOfLift failed. Using findNearestWalkableTile...`),n=i.findNearestWalkableTile(s.x,s.y,5,!0,!0),o&&console.log(`  [GM F${e} LiftTransition] From findNearestWalkableTile:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null)),!n){o&&console.error(`  [GM F${e} LiftTransition] All spawn methods failed. Using random spawn...`);const t=i.findRandomInitialSpawnPosition();if(!t)throw new Error(`EMERGENCY SPAWN FAILED on floor ${e}!`);n=t,o&&console.log(`  [GM F${e} LiftTransition] From emergencySpawn:`,n?{x:n.x.toFixed(1),y:n.y.toFixed(1)}:null)}t.character.x=n.x,t.character.y=n.y,o&&console.log(`  [GM F${e} LiftTransition] Final landing: (${t.character.x.toFixed(1)}, ${t.character.y.toFixed(1)})`),t.character.currentDirection=a.Direction.DOWN,t.character.isMoving=!1,t.renderer?.centerCameraOnCharacter(),this.ensureCharacterIsOnWalkableTile(!1),t.startLiftCooldownTimer()}catch(o){console.error(`[GM F${e} LiftTransition] Error during transition:`,o),t.liftCooldownActive=!1,t.gameState!==i.GAME_OVER&&t.setGameState(i.PLAYING),t._handleFatalError(`Transition error to floor ${e}: ${o.message||o}`)}}}ensureCharacterIsOnWalkableTile(e=!1){const t=this.game.character,i=this.game.level?.currentMap;if(!t||!i)return;const o=Math.floor(t.x/i.tileSize),s=Math.floor(t.y/i.tileSize),a=o>=0&&o<i.cols&&s>=0&&s<i.rows?i.map[s]?.[o]:0,n=i.isWalkable(t.x,t.y)&&(!(3===a)||e),r=this.checkCollision(t.x,t.y);if(r||!n){const e=3===this.game.level?.currentFloor;e&&console.warn(`[GameplayManager F${this.game.level.currentFloor} AntiStuck] Char at (${t.x.toFixed(1)},${t.y.toFixed(1)}) -> tile (${o},${s}) needs nudge. Colliding:${r}, SafeStand:${n}`);const a=i.findNearestWalkableTile(t.x,t.y,8,!0,!0);if(a)e&&console.log(`  [AntiStuck] Nudging to safe spot: (${a.x.toFixed(1)},${a.y.toFixed(1)})`),t.x=a.x,t.y=a.y,this.game.renderer?.centerCameraOnCharacter();else{e&&console.error("  [AntiStuck] CRITICAL: Could not find any safe spot to nudge. Trying random.");const o=i.findRandomInitialSpawnPosition();o?(e&&console.warn(`  [AntiStuck] Emergency nudge to random: (${o.x.toFixed(1)},${o.y.toFixed(1)})`),t.x=o.x,t.y=o.y,this.game.renderer?.centerCameraOnCharacter()):(e&&console.error("  [AntiStuck] EVEN RANDOM SPAWN FAILED! Game might be broken."),this.game._handleFatalError("Anti-Stuck system failed critically."))}}}}const b={track1:e.p+"assets/audio/back126c4c9e8849503fadb12.mp3",track2:e.p+"assets/audio/back2ddba92be3cd8ac98633a.mp3",track3:e.p+"assets/audio/back381530afe1194de9f2bb1.mp3"},E=["track1","track2","track3"];class I{constructor(){this.musicVolume=.5,this.currentMusicElement=null,this.currentTrackKey=null,this.isMusicPlaying=!1;const e=localStorage.getItem("musicVolume");null!==e&&(this.musicVolume=parseFloat(e)),this.audioElements={},this._preloadTracks()}_preloadTracks(){console.log("[AudioManager] Preloading tracks from imported sources...");for(const e in b)if(b.hasOwnProperty(e)){const t=b[e],i=new Audio(t);i.preload="auto",this.audioElements[e]=i,console.log(`  Preloaded ${e} from ${t}`)}}setMusicVolume(e){this.musicVolume=Math.max(0,Math.min(1,e)),this.currentMusicElement&&(this.currentMusicElement.volume=this.musicVolume),localStorage.setItem("musicVolume",this.musicVolume.toString()),console.log(`[AudioManager] Music volume set to: ${this.musicVolume}`)}getMusicVolume(){return this.musicVolume}playMusic(e,t=!0){if(!this.audioElements[e]){if(console.warn(`[AudioManager] Track "${e}" not found or not preloaded.`),!b[e])return void console.error(`[AudioManager] Source for track "${e}" not defined in MUSIC_SOURCES.`);this.audioElements[e]=new Audio(b[e])}this.isMusicPlaying&&this.currentTrackKey===e||(this.stopMusic(),this.currentMusicElement=this.audioElements[e],this.currentMusicElement.volume=this.musicVolume,this.currentMusicElement.loop=t,this.currentTrackKey=e,this.currentMusicElement.play().then((()=>{this.isMusicPlaying=!0,console.log(`[AudioManager] Playing music: ${e} (Volume: ${this.currentMusicElement.volume})`)})).catch((t=>{console.error(`[AudioManager] Error playing "${e}":`,t),console.error(`  Playback failure details: userInteracted (check Menu.js), document.hasFocus(): ${document.hasFocus()}`),this.isMusicPlaying=!1,this.currentMusicElement=null,this.currentTrackKey=null})))}stopMusic(){this.currentMusicElement&&(this.currentMusicElement.pause(),this.currentMusicElement.currentTime=0,this.isMusicPlaying=!1,console.log(`[AudioManager] Stopped music: ${this.currentTrackKey}`))}changeTrackForFloor(e){const t=Math.max(0,e-1)%E.length,i=E[t];i?(console.log(`[AudioManager] Floor ${e} -> Music track: ${i}`),this.playMusic(i)):console.warn(`[AudioManager] No track found for floor index ${t}.`)}startInitialMusic(e=1){console.log("[AudioManager] Attempting to start initial music..."),this.changeTrackForFloor(e)}}const x=e.p+"assets/images/character_red9229918d5325fcdf2e6e.png",L=e.p+"assets/images/character_blue7b9b140f7eb486e8a968.png",k=e.p+"assets/images/character_yellowff53afbc44f903d97313.png",$=e.p+"assets/images/character_green007c77c97eef8cbb1e94.png",F=e.p+"assets/images/booka54431ef16a38389c12e.png";class T{static CREATOR_NAMES=["Rafał","Dima","Venia","Kacper"];static CLASS_ATTENDING_INFO="Attending: WCY22IJ1S1 / Programowanie Aplikacji Desktopowych";constructor(e){console.log(`[Game] Initializing with character: ${e}`),this.characterColor=e,this._gameState=i.LOADING,this.isRunning=!1,this.totalBooksCollectedGlobally=0,this.targetBooksToWin=15,this.availableQuestions=[],this.currentBookTarget=null,this.currentQuestionData=null,this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.canvas=null,this.ctx=null,this.character=null,this.level=null,this.inputManager=null,this.renderer=null,this.gameplayManager=null,this.audioManager=null,this.sprites={red:x,blue:L,yellow:k,green:$},this.bookImage=null,this.gameLoop=this.gameLoop.bind(this),this._handleFatalError=this._handleFatalError.bind(this),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null;try{this._initializeCoreComponents(),this.audioManager=new I,console.log("[Game] AudioManager created."),this.gameplayManager=new C(this),console.log("[Game] GameplayManager created."),this.renderer=new v(this);const{canvas:e,ctx:t}=this.renderer.initializeCanvas();this.canvas=e,this.ctx=t,console.log("[Game] Renderer and Canvas initialized."),this._initializeUIManager(),console.log("[Game] UIManager setup initiated."),this._addEventListeners(),this._loadAssetsAndThenStartLogic().then((()=>{console.log("[Game] Async loading and game logic start sequence completed.")})).catch((e=>{console.error("[Game] Unhandled error from _loadAssetsAndThenStartLogic in constructor:",e);const t=s.getLoadingOverlay();t&&t.classList.remove("visible")}))}catch(e){console.error("[Game] Synchronous core initialization failed:",e),alert(`Critical initialization error: ${e.message}. Game cannot start.`),this._handleFatalError(`Initialization error: ${e.message}`,!1)}}get gameState(){return this._gameState}setGameState(e){this._gameState!==e&&(console.log(`[Game State] ${this._gameState} -> ${e}`),this._gameState=e)}_initializeCoreComponents(){this.inputManager=new t,this.level=new S(1,3)}_initializeUIManager(){if(!this.gameplayManager)throw new Error("[Game] GameplayManager is NOT defined when _initializeUIManager is called!");if(!this.inputManager)throw new Error("[Game] InputManager is NOT defined when _initializeUIManager is called!");s.setGameplayManager(this.gameplayManager),s.initializeUI(this.inputManager)}_addEventListeners(){window.addEventListener("resize",(()=>this.renderer?.resizeCanvas()))}async _loadAssetsAndThenStartLogic(){const e=s.getLoadingOverlay();try{this.setGameState(i.LOADING),await this._loadAssets(),await this._startGameLogic(),e&&e.classList.remove("visible")}catch(t){throw console.error("[Game] Asset loading or game logic start failed:",t),e&&e.classList.remove("visible"),this._handleFatalError(`Asset/Start Logic Error: ${t.message}`),t}}async _loadAssets(){console.log("[Game] Loading assets...");const e=[],t=this.sprites[this.characterColor]||this.sprites.red;if(!this.ctx)throw new Error("Canvas context not available for Character creation.");this.character=new a(this.ctx,t,{speed:3,frameSize:32,scale:2,animationSpeed:150,frameCount:4}),e.push(new Promise(((e,i)=>{this.character.sprite.onload=()=>{console.log(`  [Assets] Character sprite loaded: ${t}`),e()},this.character.sprite.onerror=e=>i(new Error(`Failed to load character sprite: ${t}. Details: ${e}`))}))),F?(this.bookImage=new Image,this.bookImage.src=F,e.push(new Promise((e=>{this.bookImage.onload=()=>{console.log(`  [Assets] Book image loaded: ${F}`),e()},this.bookImage.onerror=()=>{console.warn(` [Assets] Failed to load book image: ${F}. Using fallback rendering.`),this.bookImage=null,e()}})))):(console.warn("[Assets] No book sprite path provided. Book will use fallback rendering."),this.bookImage=null),await Promise.all(e),console.log("[Game] All assets loaded successfully.")}async _startGameLogic(){if(console.log("[Game] Starting core game logic..."),!(this.level&&this.character&&this.canvas&&this.renderer&&this.gameplayManager&&this.audioManager))throw new Error("Cannot start game - essential components are missing.");this.setGameState(i.LOADING_LEVEL);try{await this.level.loadFloor(this.level.minFloor,this.canvas.width,this.canvas.height);const e=this.level.currentMap;if(!e)throw new Error("Failed to load initial map. Map object is null.");const t=e.findRandomInitialSpawnPosition();if(!t)throw new Error("Failed to find a valid starting position on the map!");this.character.x=t.x,this.character.y=t.y,this.character.currentDirection=a.Direction.DOWN,this.character.isMoving=!1,this.gameplayManager.ensureCharacterIsOnWalkableTile(!1),this.totalBooksCollectedGlobally=0,this.availableQuestions=[...o],this.liftCooldownActive=!1,clearTimeout(this.liftCooldownTimer),this.liftCooldownTimer=null,this.currentBookTarget=null,this.currentQuestionData=null,this.renderer.centerCameraOnCharacter(),s.updateScore(this.totalBooksCollectedGlobally,this.targetBooksToWin),s.showGameUI(),this._boundKeyDownHandler=this.handleKeyDown.bind(this),this._boundKeyUpHandler=this.handleKeyUp.bind(this),window.addEventListener("keydown",this._boundKeyDownHandler),window.addEventListener("keyup",this._boundKeyUpHandler),this.audioManager.startInitialMusic(this.level.currentFloor),console.log(`[Game] Initial music started for floor ${this.level.currentFloor}`),this.setGameState(i.PLAYING),this.isRunning||(this.isRunning=!0,requestAnimationFrame(this.gameLoop),console.log("[Game] Game logic started. Loop is running."))}catch(e){throw console.error("[Game] Error during _startGameLogic:",e),this._handleFatalError(`Level start process error: ${e.message}`),e}}_setGameOver(e=!0){this.gameState!==i.GAME_OVER&&(this.setGameState(i.GAME_OVER),this.isRunning=!1,this.character&&(this.character.isMoving=!1),clearTimeout(this.liftCooldownTimer),this.audioManager&&this.audioManager.stopMusic(),this._boundKeyDownHandler&&window.removeEventListener("keydown",this._boundKeyDownHandler),this._boundKeyUpHandler&&window.removeEventListener("keyup",this._boundKeyUpHandler),this._boundKeyDownHandler=null,this._boundKeyUpHandler=null,s.showGameOverScreen(e,T.CREATOR_NAMES,T.CLASS_ATTENDING_INFO),console.log(`[Game] Game Over. Win: ${e}`))}stopGame(){console.log("[Game] Explicit stopGame requested."),this._setGameOver(!1),console.log("[Game] Game stopped.")}_handleFatalError(e,t=!0){console.error("[Game] FATAL ERROR:",e),t&&this.gameState!==i.GAME_OVER&&(s.flashMessageContainer&&s.flashMessage?s.flashMessage(`FATAL ERROR: ${e}`,"error",15e3):alert(`FATAL ERROR: ${e}`)),this.gameState!==i.GAME_OVER&&this._setGameOver(!1)}handleKeyDown(e){if(this.gameState!==i.PLAYING||!this.inputManager)return;let t=!1;const o=e.key.toLowerCase();["arrowup","w"].includes(o)?(this.inputManager.setKey("up",!0),t=!0):["arrowdown","s"].includes(o)?(this.inputManager.setKey("down",!0),t=!0):["arrowleft","a"].includes(o)?(this.inputManager.setKey("left",!0),t=!0):["arrowright","d"].includes(o)&&(this.inputManager.setKey("right",!0),t=!0),t&&e.preventDefault()}handleKeyUp(e){if(!this.inputManager)return;const t=e.key.toLowerCase();["arrowup","w"].includes(t)?this.inputManager.setKey("up",!1):["arrowdown","s"].includes(t)?this.inputManager.setKey("down",!1):["arrowleft","a"].includes(t)?this.inputManager.setKey("left",!1):["arrowright","d"].includes(t)&&this.inputManager.setKey("right",!1)}gameLoop(e){this.isRunning&&this.gameState!==i.GAME_OVER&&(this.gameplayManager?.update(e),this.renderer?.centerCameraOnCharacter(),this.renderer?.drawFrame(),requestAnimationFrame(this.gameLoop))}startLiftCooldownTimer(){clearTimeout(this.liftCooldownTimer),console.log("[Game] Starting lift cooldown timer: 2000ms."),this.liftCooldownTimer=setTimeout((()=>{this.liftCooldownActive=!1,this.liftCooldownTimer=null,this.gameState===i.TRANSITIONING?(this.setGameState(i.PLAYING),s.flashMessage(`Arrived at floor ${this.level?.currentFloor}`,"success",1500)):console.warn(`[GameTimer] Lift cooldown ended, but game state is ${this.gameState}. No state change applied.`)}),2e3)}}let G=null;class A{constructor(e){this.characterImageSources=e,this.selectedCharacter=null,this.userInteracted=!1,this.overlay=null,this.audioManagerInstance=null,console.log("[Menu] Constructor called. Initializing elements..."),this.initializeElements(),this.characterPanel?this.setupCharacterImages():console.error("[Menu Constructor] CRITICAL: this.characterPanel is null AFTER initializeElements. Cannot setup images."),console.log("[Menu] Adding event listeners..."),this.addEventListeners(),console.log("[Menu] Instance created.")}setAudioManager(e){this.audioManagerInstance=e,console.log("[Menu] AudioManager instance received."),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume())}initializeElements(){this.menuContainer=document.querySelector(".menu-container"),this.menuContainer||console.error("[Menu Init] CRITICAL: .menu-container not found!"),this.settingsButton=document.querySelector(".settings-button"),this.playButton=document.querySelector(".play-button"),this.characterButton=document.querySelector(".character-button"),this.playButton?this.playButton.disabled=!0:console.warn("[Menu Init] .play-button not found."),this.characterButton||console.warn("[Menu Init] .character-button not found."),this.settingsPanel=document.querySelector(".settings-panel"),this.settingsPanel?(this.settingsPanel.parentNode!==document.body&&document.body.appendChild(this.settingsPanel),this.musicVolume=this.settingsPanel.querySelector("#music-volume"),this.sfxVolume=this.settingsPanel.querySelector("#sfx-volume"),this.closeSettingsButton=this.settingsPanel.querySelector(".panel-close-button"),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume())):console.warn("[Menu Init] .settings-panel not found."),this.characterPanel=document.querySelector(".character-panel"),this.characterPanel?(this.characterPanel.parentNode!==document.body&&document.body.appendChild(this.characterPanel),this.characterGrid=this.characterPanel.querySelector(".character-grid"),this.closeCharacterPanelButton=this.characterPanel.querySelector(".panel-close-button")):console.error("[Menu Init] CRITICAL: .character-panel not found during initialization!"),this.selectedCharacterDisplay=document.createElement("div"),this.selectedCharacterDisplay.className="selected-character-display";const e=this.menuContainer?this.menuContainer.querySelector(".main-menu-buttons"):null;this.playButton&&this.playButton.parentNode?this.playButton.parentNode.insertBefore(this.selectedCharacterDisplay,this.playButton):e?e.insertBefore(this.selectedCharacterDisplay,e.children[1]||null):this.menuContainer?this.menuContainer.appendChild(this.selectedCharacterDisplay):console.error("[Menu Init] Cannot append selectedCharacterDisplay: no suitable parent found."),this.updateSelectedCharacterDisplay()}setupCharacterImages(){if(!this.characterPanel)return;if(!this.characterImageSources)return;const e=this.characterPanel.querySelectorAll(".character-card");0!==e.length&&e.forEach((e=>{const t=e.dataset.character,i=e.querySelector(".character-preview img");i&&this.characterImageSources[t]&&(i.src=this.characterImageSources[t])}))}handleFirstInteraction(){this.userInteracted||(this.userInteracted=!0,console.log("[Menu] First user interaction detected."))}addEventListeners(){const e=(e,t,i)=>{e&&e.addEventListener(t,(e=>{this.handleFirstInteraction(),i.call(this,e)}))};e(this.settingsButton,"click",this.toggleSettings),e(this.playButton,"click",this.startGame),e(this.characterButton,"click",this.openCharacterModal),this.closeSettingsButton&&this.closeSettingsButton.addEventListener("click",(()=>this.closeSettings())),this.closeCharacterPanelButton&&this.closeCharacterPanelButton.addEventListener("click",(()=>this.closeCharacterModal())),this.musicVolume&&this.musicVolume.addEventListener("input",(e=>{if(this.audioManagerInstance){const t=parseFloat(e.target.value)/100;this.audioManagerInstance.setMusicVolume(t),console.log(`[Menu] Music volume changed via slider to: ${t}`)}else console.warn("[Menu] Music volume slider changed, but AudioManager not available.")})),this.sfxVolume,this.characterGrid&&this.characterGrid.addEventListener("click",(e=>{const t=e.target.closest(".character-card");t&&this.characterPanel&&this.characterPanel.classList.contains("visible")&&(this.handleFirstInteraction(),this.selectCharacter(t))}))}openCharacterModal(){this.characterPanel&&this.characterGrid&&(this.characterPanel.classList.add("visible"),this.settingsPanel?.classList.contains("visible")&&this.closeSettings(),this.overlay||(this.overlay=document.createElement("div"),this.overlay.className="character-modal-overlay",this.overlay.addEventListener("click",(e=>{e.target===this.overlay&&this.closeCharacterModal()})),document.body.appendChild(this.overlay)),this.overlay.classList.add("visible"))}closeCharacterModal(){this.characterPanel&&this.characterPanel.classList.remove("visible"),this.overlay&&this.overlay.classList.remove("visible")}selectCharacter(e){if(!this.characterGrid||!e?.dataset?.character)return;const t=e.dataset.character;this.characterGrid.querySelectorAll(".character-card").forEach((e=>e.classList.remove("selected"))),e.classList.add("selected"),this.selectedCharacter=t,this.playButton&&(this.playButton.disabled=!1),this.updateSelectedCharacterDisplay(),this.closeCharacterModal()}updateSelectedCharacterDisplay(){if(this.selectedCharacterDisplay)if(this.selectedCharacter&&this.characterImageSources&&this.characterImageSources[this.selectedCharacter]){const e=this.selectedCharacter,t=this.characterImageSources[e];let i=e.charAt(0).toUpperCase()+e.slice(1)+" Student";if(this.characterGrid){const t=this.characterGrid.querySelector(`.character-card[data-character="${e}"] h3`);t&&(i=t.textContent)}this.selectedCharacterDisplay.innerHTML=`<img src="${t}" alt="${i}" style="width:32px;height:32px;vertical-align:middle;margin-right:8px; border-radius:50%; object-fit:cover; background-color: #444;"> <span style="font-weight:bold;">${i}</span>`}else this.selectedCharacterDisplay.innerHTML='<span style="color:#aaa;">No character selected</span>'}toggleSettings(){this.settingsPanel&&(this.settingsPanel.classList.contains("visible")?this.closeSettings():this.openSettings())}openSettings(){this.settingsPanel&&(this.settingsPanel.classList.add("visible"),this.characterPanel?.classList.contains("visible")&&this.closeCharacterModal(),this.musicVolume&&this.audioManagerInstance&&(this.musicVolume.value=100*this.audioManagerInstance.getMusicVolume()))}closeSettings(){this.settingsPanel&&this.settingsPanel.classList.contains("visible")&&this.settingsPanel.classList.remove("visible")}async startGame(){if(!this.selectedCharacter)return void s.flashMessage("Please select a character first!","warning",2500);const e=s.getLoadingOverlay();if(e&&e.classList.add("visible"),!this.menuContainer)return void(e&&e.classList.remove("visible"));this.menuContainer.style.display="none";const t=document.getElementById("game-canvas");if(!t)return console.error("[Menu] CRITICAL: #game-canvas not found!"),this.menuContainer&&(this.menuContainer.style.display="flex"),void(e&&e.classList.remove("visible"));t.style.display="block";try{G&&"function"==typeof G.stopGame&&G.stopGame(),G=new T(this.selectedCharacter),G&&G.audioManager?this.setAudioManager(G.audioManager):console.warn("[Menu startGame] Failed to get AudioManager from new Game instance to set it in Menu.")}catch(i){console.error("[Menu] Critical error during game initialization:",i),s.flashMessage(`Game Start Failed: ${i.message}`,"error",1e4),this.menuContainer&&(this.menuContainer.style.display="flex"),t&&(t.style.display="none"),e&&e.classList.remove("visible"),G=null}}}document.addEventListener("DOMContentLoaded",(()=>{console.log("[main.js] DOMContentLoaded. Initializing Menu..."),new A({red:x,blue:L,yellow:k,green:$})}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,